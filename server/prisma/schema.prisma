// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// React, Vue などのフレームワークに関するデータを格納する
model Framework {
  id          Int      @id @default(autoincrement())
  name        String // フレームワーク名
  repoName    String? // リポジトリの名前。基本的にはフレームワークの名前と一緒だが、例外的に異なる場合のみ使う
  npmName     String? // npmでの名前。基本的にはフレームワークの名前と一緒だが、例外的に異なる場合のみ使う
  owner       String // リポジトリのオーナー名 e.g. sveltjs, vuejs
  // そのフレームワークを用いたコードのURL。フレームワークのAPIの類似度を比較するときに用いる。主にRealWorldプロジェクトのURL。
  // シンプルで、フレームワークのAPIの違いのみを比較しやすいログインコンポーネント or ページを用いる。
  // コードが複数のファイルに分かれる場合を想定して、配列で定義する。複数ある場合は、template -> js -> styleの順に格納する
  codeURLs    String[]
  officialURL String? // そのフレームワークの公式サイトのURL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  commits               Commit[]
  issues                Issue[]
  issueComments         IssueComment[]
  collaborators         Collaborator[]
  downloads             Download[]
  stars                 Star[]
  score                 Score?
  similarities          Similarity[]   @relation("SimilarityTarget")
  SimilarityComparisons Similarity[]   @relation("SimilarityComparison")
  question              Question?
  @@unique([owner, name])
}

// コミットを時系列データとして格納
model Commit {
  id          String    @id // GitHub API から返却される id を用いる
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId Int
  committedAt DateTime // コミットされた日時
  additions   Int // そのコミットで追加された行数
  deletions   Int // そのコミットで削除された行数
}

// issueを時系列データとして格納
model Issue {
  id            Int            @id @default(autoincrement())
  framework     Framework      @relation(fields: [frameworkId], references: [id])
  frameworkId   Int
  openedAt      DateTime // issueがopenされた日時
  closedAt      DateTime? // issueがcloseされた日時
  issueComments IssueComment[]
}

// issue についたコメントを格納
model IssueComment {
  id          Int       @id @default(autoincrement())
  issue       Issue     @relation(fields: [issueId], references: [id])
  issueId     Int
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId Int
  postedAt    DateTime // コメントが投稿された日時
  body        String // コメントの本文
  author      String // コメントの投稿者
}

// コラボレータ(フレームワークの開発チームに属するメンバー)
model Collaborator {
  id          Int       @id @default(autoincrement())
  name        String // コラボレータの名前
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId Int

  @@unique([frameworkId, name])
}

// npmのダウンロード履歴。あるフレームワークの、ある日付におけるダウンロード数を記録する
model Download {
  id           Int       @id @default(autoincrement())
  framework    Framework @relation(fields: [frameworkId], references: [id])
  frameworkId  Int
  downloadedAt DateTime  @db.Date // ある日付
  count        Int // ダウンロード数

  @@unique([frameworkId, downloadedAt])
}

// star履歴
model Star {
  id          String    @id
  framework   Framework @relation(fields: [frameworkId], references: [id])
  frameworkId Int
  starredAt   DateTime  @db.Date // スターがなされた日時
}

// 各指標のスコアを保持しておくためのテーブル
model Score {
  id                  Int       @id @default(autoincrement())
  framework           Framework @relation(fields: [frameworkId], references: [id])
  frameworkId         Int
  maintenance         Float     @default(0) // メンテナンスがされているか
  popularity          Float     @default(0) // 人気
  developmentActivity Float     @default(0) // 開発の活発さ
}

model Similarity {
  target           Framework @relation("SimilarityTarget", fields: [targetId], references: [id]) // 基準となるフレームワーク
  targetId         Int
  comparison       Framework @relation(name: "SimilarityComparison", fields: [comparisonId], references: [id]) // 比較対象となるフレームワーク
  comparisonId     Int
  cosineSimilarity Float // コサイン類似度の値 0 ~ 1

  @@id([targetId, comparisonId])
}

// 各々のフレームワークに関する質問データ(主にStackOverflowを想定する)
model Question {
  id          Int       @id // apiから返却される question_id を用いることで冪等性を保つ
  frameworkId Int
  framework   Framework @relation(fields: [frameworkId], references: [id])
  askedAt     DateTime // 質問がされた日時
  answerCount Int // 回答数
}
