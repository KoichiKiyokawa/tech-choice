[
  {
    "id": "MDU6SXNzdWU5MjgyNTc5NjI=",
    "body": "**Describe the bug**\r\nUsing multiple selectors in `:where` (https://web.dev/css-is-and-where/) breaks :global in 3.38.3 and not 3.38.2.\r\n\r\n\r\n**Logs**\r\n```\r\n:global(...) must contain a single selector (2:0)\r\n```\r\n\r\n**To Reproduce**\r\nIn 3.38.2: https://svelte.dev/repl/564fb17fee1f491c89986252fb04776f?version=3.38.2\r\nIn 3.38.3: https://svelte.dev/repl/564fb17fee1f491c89986252fb04776f?version=3.38.3\r\n\r\n**Expected behavior**\r\nShould have same behavior as 3.38.2\r\n\r\n\r\n**Severity**\r\nKind of high.\r\n",
    "closedAt": null,
    "createdAt": "2021-06-23T13:26:04Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjgyMTA3MjU=",
    "body": "**Describe the bug**\r\nThe element **Select** does not correctly process special attibute **value** if it has spread attributes.\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/a0699db0cec64268b7a5be1e4f8c71f0?version=3.38.3)\r\n\r\n**Expected behavior**\r\nElement **Select** must correctly display the specified **value**, regardless of the presence or absence of spreaded attributes.\r\n",
    "closedAt": null,
    "createdAt": "2021-06-23T12:36:13Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjgwNjY2MjM=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm using a library named [three-elements](https://github.com/hmans/three-elements) that creates custom elements with directives, one of those directives are `ref:xxx`. However this creates an unnecessary complication as Svelte emits a deprecation error with no way of suppressing it.\r\n\r\n```\r\nThe ref directive is no longer supported — use `bind:this={xxx}` instead\r\nParseError: The ref directive is no longer supported — use `bind:this={xxx}` instead\r\n    at error (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16746:19)\r\n    at Parser$1.error (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16822:9)\r\n    at read_attribute (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16037:20)\r\n    at tag (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:15856:25)\r\n    at new Parser$1 (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16781:21)\r\n    at parse$3 (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:16913:20)\r\n    at compile (file:///home/xxx/workspace/node_modules/svelte/compiler.mjs:30006:17)\r\n    at compileSvelte (file:///home/xxx/workspace/node_modules/@sveltejs/vite-plugin-svelte/dist/index.js:264:20)\r\n    at async TransformContext.transform (file:///home/xxx/workspace/node_modules/@sveltejs/vite-plugin-svelte/dist/index.js:873:27)\r\n    at async Object.transform (/home/xxx/workspace/node_modules/vite/dist/node/chunks/dep-bc228bbb.js:44765:30)\r\n```\r\n\r\n**Describe the solution you'd like**\r\nA way to access and suppress individual error types. The purpose for this error is to give deprecation notice, but it does needlessly occupy a directive that might collide with other libraries. `ref` is not uncommon as a directive.\r\n\r\n**Describe alternatives you've considered**\r\nI've put forward a suggestion to `three-elements` of prefixing their directive to avoid collisions with frameworks/libraries.\r\n\r\n**How important is this feature to you?**\r\nAs it stands right now, I cannot use this library to create declarative 3d scenes.\r\n\r\n**Additional context**\r\nThe error in svelte code base: https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/state/tag.ts#L394-L399",
    "closedAt": null,
    "createdAt": "2021-06-23T09:44:19Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjczMDkxMjk=",
    "body": "Looking at https://github.com/sveltejs/svelte/issues/6423 I think this may be beneficial in general although you could argue that the referenced issue is not that bad / expected / ....",
    "closedAt": null,
    "createdAt": "2021-06-22T14:40:00Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjY0NjEzMTI=",
    "body": "**Describe the bug**\r\nTyping `dispatch` events seems incompatible with typing the same events in `SvelteComponentTyped`, because events are wrapped in `CustomEvent`. This is kind of difficult to explain, so I'll provide a complete replication below.\r\n\r\n**To Reproduce**\r\nI found this bug while working through the issue solved in [this StackOverflow post](https://stackoverflow.com/questions/67697298/svelte-components-as-object-properties/67737182?noredirect=1#comment120276663_67737182).\r\n\r\n[See this repository.](https://github.com/tcc-sejohnson/svelte-ts-event-typing)\r\nStart in App.svelte, then make your way through the other three files. Make sure the TypeScript extension for Svelte for VSCode is on. \r\n\r\nEssentially, if you want to type the events of a component using SvelteComponentTyped, you have to create two separate types: A type to feed to `createEventDispatcher` (you'd use this type if you were creating a component that \"implemented\" a custom component type) and a type to use to type the component:\r\n\r\n```ts\r\n// used like: createEventDispatcher<MyDispatch>();\r\ntype MyDispatch = {\r\n  'event-name': number,\r\n}\r\n\r\ntype MyEvent = {\r\n  'event-name': CustomEvent<number>,\r\n}\r\n\r\n// Ideally, component would be typed \"typeof SvelteComponentTyped<...>\", but that's a syntax error\r\ntype MyComponentProps = {\r\n  component: new (...args: any) => SvelteComponentTyped<any, MyEvent>\r\n}\r\n\r\ntype MyComponent = SvelteComponentTyped<MyComponentProps>\r\n```\r\n\r\nIt seems silly to have to create both MyDispatch and MyEvent. It seems more like `SvelteComponentTyped`'s second type parameter should accept \"naked\" events (like `createEventDispatcher does), and wrap those events in `CustomEvent` internally.\r\n\r\n\r\n**Expected behavior**\r\nEvent types passed to `createEventDispatcher` and `SvelteComponentTyped` should be the same. \r\n\r\n**Severity**\r\nIt's more of a big annoyance than a gamebreaker. The workaround is included in this issue... but it seems like the fix would be one step in the right direction of making typing Svelte components for libraries easier.\r\n",
    "closedAt": "2021-06-22T06:20:29Z",
    "createdAt": "2021-06-21T17:58:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTI4MDE0Mw==",
          "body": "It seems the definition for SvelteComponentTyped:\r\n```ts\r\nexport interface SvelteComponentTyped<\r\n\tProps extends Record<string, any> = any,\r\n\tEvents extends Record<string, any> = any,\r\n\tSlots extends Record<string, any> = any // eslint-disable-line @typescript-eslint/no-unused-vars\r\n> {\r\n\t$set(props?: Partial<Props>): void;\r\n\t$on<K extends Extract<keyof Events, string>>(type: K, callback: (e: Events[K]) => void): () => void;\r\n\t$destroy(): void;\r\n\t[accessor: string]: any;\r\n}\r\n```\r\n\r\nShould have the following changed:\r\n```ts\r\n\t$on<K extends Extract<keyof Events, string>>(type: K, callback: (e: Events[K]) => void): () => void;\r\n        // to\r\n        $on<K extends Extract<keyof Events, string>>(type: K, callback: (e: CustomEvent<Events[K]>) => void): () => void;\r\n```\r\n\r\nThough I'm admittedly _not_ an expert on the finer details of Svelte's typing, so I'm not sure what this would break...",
          "createdAt": "2021-06-21T19:13:46Z",
          "author": { "login": "tcc-sejohnson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTYzMTY1MQ==",
          "body": "This can't be changed because the event definition can also contain Dom events, not only custom events. This is valid: `export class Foo extends SvelteComponentTyped<{}, { click: MouseEvent; bar: CustomEvent<boolean>}>{}`\r\n\r\nYou could write your own type mapper to safe you the boilerplate:\r\n\r\n```typescript\r\ntype AsCustomEvents<Events> = { [K in keyof Events]: CustomEvent<Events[K]> }\r\n```\r\n\r\nYou might also be interested in more strict typing: https://github.com/sveltejs/language-tools/issues/442\r\nNote that the linked features are experimental as of this writing.",
          "createdAt": "2021-06-22T06:20:29Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTY5ODUxOQ==",
          "body": "Thank you for the link to that issue! I'd stumbled upon it a couple of months ago, and it's great to see the development progress. I'll have to check out the generic part specifically -- I have a few components that would love that!",
          "createdAt": "2021-06-22T08:11:33Z",
          "author": { "login": "tcc-sejohnson", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjYyNDMyNDU=",
    "body": "This (see code snippet below) currently works without any warning etc.\r\nImagine test being user input. Since many developers just use frameworks for the comfort to not having to think about XSS and other security relevant things, maybe it would be a good idea to at least issue a warning to the console when this occurs? React acutally made this deprecated and plans to make it stop working.\r\n```\r\n<script lang=\"ts\">\r\n\tlet test = `javascript:alert('1')`;\r\n</script>\r\n\r\n<main>\r\n\t<a href={test}>test</a>\r\n</main>\r\n\r\n```",
    "closedAt": null,
    "createdAt": "2021-06-21T13:54:15Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjA0Njg3Mg==",
          "body": "@m1212e have you found resources for general mitigation? Because the OWASP sheets don't seem to contain good general advice in this specific case.",
          "createdAt": "2021-06-22T14:45:03Z",
          "author": { "login": "mohe2015", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjA0NzE0NQ==",
          "body": "I could probably look at any good html sanitizer",
          "createdAt": "2021-06-22T14:45:23Z",
          "author": { "login": "mohe2015", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjE0NjExMg==",
          "body": "It caught my attention while reading this article: https://lolware.net/blog/react-xss-protection-cheat-sheet/\r\nAll it says is basically: Parse user input. So thats probably what should be done.",
          "createdAt": "2021-06-22T16:34:16Z",
          "author": { "login": "m1212e", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjU5MzEyMTA=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI want to have a common part of the CSS style, at the same time also I don't want to have to throw every little bit of CSS out of the `*.svelte` files and I don't want to use global CSS.\r\n\r\n**Describe the solution you'd like**\r\nCSS Binding and Passing.\r\nIt is the most intuitive, transparent and sveltish solution, at the same time referring to the [CSS assert](https://twitter.com/daKmoR/status/1405970316363509762) in custom element proposal.\r\n\r\nStyle set in `App.svelte` in `style` tag with `bind:styles` attribute, passed to the `Component.svelte` and `Component2.svelte` components in `style` with `styles` atribute. Scoped.\r\n\r\nExample:\r\n```svelte\r\n<!-- App.svelte  -->\r\n<script>\r\n import Component from \"$lib/components/Component.svelte\";\r\n import Component2 from \"$lib/components/Component2.svelte\";\r\n let styles;\r\n</script>\r\n<Component styles={styles}>\r\n<Component2 styles={styles}>\r\n<style bind:styles={styles}>\r\n /* simple styles */\r\n</style>\r\n```\r\n```svelte\r\n<!-- Component.svelte  -->\r\n<script>\r\nexport let styles;\r\n</script>\r\n<style styles={styles}/>\r\n```\r\n\r\n* Style should not be global, but scoped at the point of use.\r\n* I can see that in every component with `<style styles={styles} />`, the same hash like `svelte-n323vl` is used for classes.\r\n\r\n* The variable `styles` is an object that cannot be modified, it is used only to pass the preset style to the component.\r\n\r\n**Questions:**\r\n1. It should be possible to use multiple `style bind:styles={styles}`(both declaration and use) and plain `<style>` at the same time.\r\nIs something in the way?\r\nOR: `<style bind:styles={ [styles, styles2] } />` or `<style bind:styles={ {...styles, ...styles2} } />`  - and only the declaration could be multiple.\r\n\r\n2. Should the binded `style` in` App.svelte` also be applied to the HTML elements in `App.svelte`?\r\nOr should it be optional? Attribute of type `onlydeclaration` (I don't have a good idea of the name).\r\n```svelte\r\n<style bind:styles={styles} onlydeclaration>\r\n /* simple styles */\r\n</style>\r\n```\r\nI don't know if it should work in `App.svelte` by default and need to be turned off with the attribute, or vice versa?\r\n\r\nAnother option - **better?** - at the same time simpler, but also a bit circular (OF COURSE, this is not usually used, only in exceptional cases):\r\n```svelte\r\n<!-- App.svelte  -->\r\n<style bind:styles={styles}>\r\n /* simple styles */\r\n</style>\r\n<style styles={styles}/>\r\n```\r\nor even just:\r\n```svelte\r\n<!-- App.svelte  -->\r\n<style bind:styles={styles} styles={styles}>\r\n /* simple styles */\r\n</style>\r\n```\r\n\r\n3. Should css custom properties work?:\r\n\r\n```svelte\r\n<!-- App.svelte  -->\r\n<script>\r\n import Component from \"$lib/components/Component.svelte\";\r\n import Component2 from \"$lib/components/Component2.svelte\";\r\n let styles;\r\n</script>\r\n<Component styles={styles}>\r\n<Component2 styles={styles}>\r\n<style bind:styles={styles}>\r\n div {\r\n  background-color: var(--css-var);\r\n }\r\n</style>\r\n```\r\n```svelte\r\n<!-- Component.svelte  -->\r\n<script>\r\nexport let styles;\r\n</script>\r\n<div style=\"--css-var: red;\"></div>\r\n<style styles={styles}/>\r\n```\r\nProbably yes, but maybe there will be some obstacles?\r\n\r\n4. Maybe in order for `<style bind:styles={styles}></style>` to not confuse with the standard `<style></style>` behavior (i.e. applying styles to `App.svelte`), you need to use `<svelte:style bind:styles={styles}></svelte:style> `?\r\n\r\n**Import CSS file**\r\nSeems like can be used to... import CSS.\r\nThere is a proposition `import styleSheet from \"./styles.css\" assert { type: \"css\" };`  for WebComponents.\r\n\r\n```svelte\r\n<!-- Component.svelte  -->\r\n<script>\r\n import Component from \"$lib/components/Component.svelte\";\r\n import Component2 from \"$lib/components/Component2.svelte\";\r\n import styles from\" ./styles.css \"assert {type: \"css\"};\r\n</script>\r\n<Component styles={styles}>\r\n<Component2 styles={styles}>\r\n<style styles={styles}/>\r\n```\r\nSuch an imported svelte style would also be scoped.\r\n\r\nI can see an easy use of this in `<svelte:options tag=\"my-element\" />`.\r\nI will not be surprised if such placing of imported CSS will be interesting for someone, and passing between components less...\r\n\r\nQuestion:\r\nDo you allow `import (\"./styles.css\", {assert: {type: \"css\"}});`? Probably not.\r\n\r\n**Summary:**\r\nThe whole thing seems clear, refers to the [upcoming standard](https://twitter.com/daKmoR/status/1405970316363509762), and at the same time is \"sveltish\".\r\n\r\n**Describe alternatives you've considered**\r\n\r\n```svelte\r\n<style>\r\n:global(...)\r\n</style>\r\n```\r\n ```svelte\r\n<svelte:head>\r\n\t<link rel=\"stylesheet\" href=\"styles.css\">\r\n</svelte:head>\r\n```\r\n```svelte\r\n<style src=\"./styles.css\"></style>\r\n```\r\n```svelte\r\n<style>\r\n\t@import \"./style.css\";\r\n</style>\r\n```\r\n* Svelte component custom properties `<Component --css-var={var}>` https://github.com/sveltejs/rfcs/pull/13\r\n* closed https://github.com/AlbertMarashi/rfcs/blob/patch-1/0000-allow-parent-to-impact-child-css.md\r\n* Some kind of libs? `svelte-css-in-js` `modular-css`\r\n\r\nSome do not work, none offer the type of possibilities I suggest, nor are they so sveltish.\r\n\r\nIf anyone wants to do RFC, please do.\r\n\r\n**How important is this feature to you?**\r\nThe point is not to use global CSS or do some redundant CSS.\r\nIn fact, such something is needed all the time.\r\n\r\n**FURTHER THINKING:**\r\nBinding classes with the `style` tag and passing to components. Extracting classes from the binding variable `style`.\r\n\r\nExample:\r\n\r\n```svelte\r\n<!-- App.svelte  -->\r\n<script>\r\n import Component from \"$lib/components/Component.svelte\";\r\n import Component2 from \"$lib/components/Component2.svelte\";\r\n let styles;\r\n</script>\r\n<Component el={styles.el}>\r\n<Component2 styles={styles}>\r\n<style bind:styles={styles}>\r\n .el {\r\n  /* props */\r\n }\r\n</style>\r\n```\r\n```svelte\r\n<!-- Component.svelte  -->\r\n<script>\r\nexport let el;\r\n</script>\r\n<div class=\"el\"></div>\r\n<style styles={{el}}/>\r\n```\r\n...or as in `css-modules`?:\r\n\r\n```svelte\r\n<!-- Component.svelte  -->\r\n<script>\r\nexport let el;\r\n</script>\r\n<div class={el}></div>\r\n```",
    "closedAt": null,
    "createdAt": "2021-06-21T07:51:15Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjYxODYyOA==",
          "body": "https://github.com/sveltejs/rfcs/pull/13#issuecomment-823835345",
          "createdAt": "2021-06-23T07:58:28Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2Njc1NzAyOA==",
          "body": "@non25 Yes, I mentioned `css-modules` fit there.\r\n\r\nWhat do you think about my entire proposal?\r\n\r\nI admit that the lack of any reaction worries me a bit.\r\nI don't know if the proposal is so insignificant that there is no reaction?\r\nIt seems to me that what I have described is comprehensive and consistent and simple.",
          "createdAt": "2021-06-23T11:28:24Z",
          "author": { "login": "lukaszpolowczyk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2Njc2NjEzNw==",
          "body": "I don't think it is productive to discuss something like this now.\r\nThey already gone for https://github.com/sveltejs/rfcs/pull/13, and recommend using that as a tool to do style overrides in an explicit way.\r\nYou can explore #2888 and #2870 to understand what their position looks like.\r\nSvelte way is all about wrapping stuff with divs, not about what you described. I'm sorry.\r\nAlso there's a technical limitation with svelte-scoping and class passing: [read more](https://github.com/sveltejs/svelte/pull/2888#issuecomment-703002223).\r\n\r\nI recommend using [svelte-preporcess-cssmodules](https://www.npmjs.com/package/svelte-preprocess-cssmodules), as I don't see anything like this will ever be implemented, and `svelte-preprocess-cssmodules` solves everything for me and gives me a feeling that I'm not using something external, like with `css-modules`.",
          "createdAt": "2021-06-23T11:44:41Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjkyNjEzMw==",
          "body": "I see it like this:\r\n* passing css custom properties is another thing (done here https://github.com/sveltejs/rfcs/pull/13)\r\n* passing classes is another thing (css modules etc.)\r\n* another thing is importing a CSS file  (there are also some non-sveltish suggestions)\r\n* another thing is to pass a block of styles - **and that's what I suggest**\r\n\r\nAnd it's easy to expand on my proposal to handle CSS import and class passing - **but that is another matter, it is not my basic proposal**, but a possible extension of the proposal.\r\n\r\nSo \"limitation with svelte-scoping\" is more about passing classes, and passing a block of styles is different and much simpler.\r\nThere are **no problems of penetrating, confusing, turning everything upside down**.\r\nAll is explicitly passed through the binding object.\r\n\r\nWell, in fact, it makes no sense to write about it until some person in charge of svelte gives a signal.",
          "createdAt": "2021-06-23T15:14:34Z",
          "author": { "login": "lukaszpolowczyk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjU4MzA3NjU=",
    "body": "The file extension .svelte is long so every time I make .svelte file typying 6 letters, I feel bothered.\r\n\r\nMy suggestion is .sv or .sve or other shorter name is better.",
    "closedAt": "2021-06-21T07:51:44Z",
    "createdAt": "2021-06-21T05:08:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDgxMDExOA==",
          "body": "Duplicate of https://github.com/sveltejs/svelte/issues/4033",
          "createdAt": "2021-06-21T07:50:36Z",
          "author": { "login": "bluwy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjU2NjczMzI=",
    "body": "Getting following error in tsconfig file.\r\n\r\n`Path to base configuration file to inherit from. Requires TypeScript version 2.1 or later.`\r\n\r\n![image](https://user-images.githubusercontent.com/21263939/122685905-f3c2f900-d22b-11eb-8dbe-b515d4669acc.png)\r\n\r\nPackages\r\n```\r\n\"rollup\": \"^2.52.1\",\r\n\"rollup-plugin-svelte\": \"^7.1.0\",\r\n\"rollup-plugin-terser\": \"^7.0.2\",\r\n\"@rollup/plugin-commonjs\": \"^19.0.0\",\r\n\"@rollup/plugin-node-resolve\": \"^13.0.0\",\r\n\"@rollup/plugin-typescript\": \"^8.2.1\",\r\n\"@tsconfig/svelte\": \"^2.0.1\",\r\n\"typescript\": \"^4.3.4\",\r\n```\r\n\r\nOS - Windows 10 Home, Version - 1903 OS Build - 18362.1082",
    "closedAt": "2021-06-20T19:56:54Z",
    "createdAt": "2021-06-20T19:33:17Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjU2NTg1NjM=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nNot related to a problem other than the lack of a key block step in the tutorial\r\n\r\n**Describe the solution you'd like**\r\nI'm thinking of writing a tutorial step in which the user has to add the key block in this code example: https://svelte.dev/repl/2d48faf2bb484dfc83a8c9197d9c5a5b?version=3.38.2\r\n\r\n**Describe alternatives you've considered**\r\nThere are plenty, but this one proves the point quite clearly.\r\n\r\n**How important is this feature to you?**\r\nSuper-important. The tutorial should explain every feature in the API.\r\n\r\n**Additional context**\r\nNot much.\r\n",
    "closedAt": null,
    "createdAt": "2021-06-20T18:41:23Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjU0NTcxNjk=",
    "body": " `\"@sveltejs/kit\": \"next\"`\r\n`Svelte-kit-skel-spike@0.0.1 build`\r\n\r\nIn a form declaration, using the assignment operator (=) in on:submit binding fails.\r\nThis statement fails (at runtime)\r\n  `on:submit={handleSubmit}` \r\nresulting in the runtime (console) error of \"Uncaught TypeError: Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.   at HTMLFormElement.handleSubmit\"\r\n\r\nThis syntax, which incorrectly omit the assignment operator (=), does work:\r\n  `on:submit{handleSubmit}`\r\n \r\nDemonstration of the error:\r\nwrong syntax works: https://myvaluefactory.com/hello/\r\ncorrect syntax fails: https://myvaluefactory.com/onsubmit-error/ \r\n\r\nFor clarity, here's a stripped down example that works:\r\n```\r\n<form on:submit{handleSubmit} name=\"hello\" method=\"POST\" data-netlify=\"true\">\r\n\t<p><label>Your Name: <input type=\"text\" name=\"name\" /></label></p>\r\n\t<p><label>Your Email: <input type=\"email\" name=\"email\" /></label></p>\r\n\t<p><label>Message: <textarea name=\"message\"></textarea></label></p>\r\n\t<p><button type=\"submit\">Send</button></p>\r\n\t<br>\r\n\t<input type=\"hidden\" name=\"form-name\" value=\"hello\">\r\n</form>\r\n```\r\n\r\ndoes not work:\r\n```\r\n<form on:submit={handleSubmit} name=\"hello\" method=\"POST\" data-netlify=\"true\">\r\n\t<p><label>Your Name: <input type=\"text\" name=\"name\" /></label></p>\r\n\t<p><label>Your Email: <input type=\"email\" name=\"email\" /></label></p>\r\n\t<p><label>Message: <textarea name=\"message\"></textarea></label></p>\r\n\t<p><button type=\"submit\">Send</button></p>\r\n\t<br>\r\n\t<input type=\"hidden\" name=\"form-name\" value=\"hello\">\r\n</form>\r\n```\r\n\r\nThe error produced by using the assignment operator in the on:submit binding is evident in local dev.\r\n",
    "closedAt": "2021-06-20T11:59:25Z",
    "createdAt": "2021-06-19T19:53:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDU0MzA1OQ==",
          "body": "So, this is most likely something wrong happening with the `handleSubmit` function.\r\n\r\nwriting `<form on:submit{handleSubmit}` is actually adding an event listener named `\"submit{handleSubmit}\"` and without padding a handler is in essence doing a event forwarding: ttps://svelte.dev/tutorial/event-forwarding\r\n\r\nregarding why it still works, well, the form will still be able to submit, by default, without handling it in the `on:submit`",
          "createdAt": "2021-06-20T11:59:25Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjUzMDM1MDA=",
    "body": "Sorry but can this be fixed ? The html < code > tag wasn't taken into consideration while building the compiler... I would like to build a dev website and it would much or greatly revolve around the < code > html tag which is used for displaying source codes.. \r\n\r\nExample:\r\n//App.svelte\r\n< script >\r\n</ script >\r\n< h3 > Below is a sample code .</ h3 >\r\n< code >\r\n.expo{\r\ncolor:blue;\r\n}\r\n</ code >",
    "closedAt": "2021-06-19T03:40:36Z",
    "createdAt": "2021-06-19T03:20:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDM0OTQ0MQ==",
          "body": "We don't want to treat `<code>` differently from other elements, nor prevent people from using `{expressions}` inside `<code>` if they want to. Altering this behavior would be a breaking change.\r\n\r\nIn your case, you can escape `{` by using `&#123;`, the same as you would `{` in any other element.",
          "createdAt": "2021-06-19T03:40:36Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjM3NjA4NzQ=",
    "body": "**Describe the bug**\r\nWhen forwarding a slot to a child component, any props set by the child component on the slot are undefined when used by the implementing template.\r\n\r\n**Logs**\r\nNo logs or errors, just undefined let: value\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\nSimple Example here:\r\nhttps://svelte.dev/repl/3c0268a7a2194b829b0716a48010f222?version=3.38.2\r\n\r\n\r\n**Expected behavior**\r\nI would expect the value set on the slot by the ChildComponent to not be undefined when accessed in App.svelte\r\n\r\n**Stacktraces**\r\n\r\n\r\n**Information about your Svelte project:**\r\nSimple REPL reproduces it\r\n\r\n**Severity**\r\nSevere, this is blocking me from moving to Svelte as I cannot convert a generalised tree view component.\r\n\r\n\r\n**Additional context**\r\n\r\n",
    "closedAt": "2021-06-17T10:36:22Z",
    "createdAt": "2021-06-17T10:29:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzEyOTAzOA==",
          "body": "This works as designed. You need to explicitely forward the slot data:\r\n```svelte\r\n<slot name=\"childSlot\" slot=\"childSlot\" let:data {data} />\r\n```\r\nIf this was passed on implicitely, the forwarding component would have no control over what is forwarded, which is bad.",
          "createdAt": "2021-06-17T10:36:22Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzEzMzIzMg==",
          "body": "Thank you, this works.  This appears to be absent from the docs which might be useful for others as it was not obvious (to me at least).",
          "createdAt": "2021-06-17T10:43:37Z",
          "author": { "login": "dazzoh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjEyMzY1ODc=",
    "body": "i wrote a hash route for svelte app,[svt-router](https://github.com/cicada1993/svt-router)",
    "closedAt": "2021-06-15T11:06:44Z",
    "createdAt": "2021-06-15T10:13:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MTQwNjMzNQ==",
          "body": "Please only open issues for bug reports or feature requests.\r\n\r\nYou can add your library to the [list of components](https://sveltesociety.dev/components) on the Svelte society website by opening a PR here: https://github.com/svelte-society/sveltesociety.dev ",
          "createdAt": "2021-06-15T11:06:44Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjA5NDc3NDU=",
    "body": "**Describe the bug**\r\nlet numbers2 = numbers; // set numbers2 to numbers reference value;\r\nso \"numbers2\" and \"numbers\" has already same reference value;\r\nso I think browser view should not changed(reactive) when click \"add number\" button.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/03af6f832d7742388f2a71e35aab8725?version=3.38.2\r\n\r\n**Expected behavior**\r\nbrowser view should not changed.",
    "closedAt": "2021-06-15T03:26:33Z",
    "createdAt": "2021-06-15T03:24:28Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MjA5NDEyNjA=",
    "body": "When i : import { WalletConnectProvider } from \"@walletconnect/web3-provider;\r\nand setup json() in rollup.config.js \r\ncan anyone help me ????",
    "closedAt": "2021-06-15T03:16:34Z",
    "createdAt": "2021-06-15T03:07:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MTEzNzYyNg==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-06-15T03:16:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTk5OTAyMzA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIt is very frustrating to get lots of compiler warnings for missing customElement:true, when I am well aware that it is missing. \r\n\r\n**Describe the solution you'd like**\r\nI'd like to be able to ignore this compiler warning like any other.  \r\n\r\n**Describe alternatives you've considered**\r\nThere are no other alternatives unfortunately.  It seems kind of arbitrary that this warning is not silence-able when most others are. \r\n\r\n**How important is this feature to you?**\r\nIt is very important to me as somebody who is trying to take advantage of Svelte's ability to compile custom elements and use Svelte outside of SPAs. \r\n\r\n**Additional context**\r\n![image](https://user-images.githubusercontent.com/3959529/121839653-94536f00-cca8-11eb-8947-8d42f1943336.png)\r\n🤮 \r\n",
    "closedAt": "2021-06-14T07:20:20Z",
    "createdAt": "2021-06-14T04:37:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MDQ0NzIzMA==",
          "body": "From the screenshot it seems you are using Webpack, and therefore the `svelte-loader`. It is possible to add a `onwarn` option [which is a function that](https://github.com/sveltejs/svelte-loader/blob/master/index.js#L60) is handed each warning (first parameter) and you can decide whether or not to pass it through (by invoking the second parameter). It's undocumented right which I don't know if it's intended or not, but you could open an issue to clarify at the `svelte-loader` repo.",
          "createdAt": "2021-06-14T07:20:20Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTk4ODI4ODc=",
    "body": "**Describe the bug**\r\nBrowse to https://svelte.dev/tutorial/updating-arrays-and-objects (or other tutorial pages but that produces the issue right away) using Waterfox Classic, you get the error message: 500: __inject_styles is not a function\r\n\r\n**Logs**\r\nTypeError: __inject_styles is not a function\r\n\r\n**Expected behavior**\r\nThe site works fine and doesn't switch to the 500 error page.\r\n\r\n- Your browser and the version: Waterfox Classic 2021.06\r\n\r\n- Your operating system: Arch Linux\r\n\r\n**Severity**\r\nMakes it a pain or impossible to read any tutorials which is tough as someone new to Svelte trying to learn.",
    "closedAt": "2021-06-14T03:25:50Z",
    "createdAt": "2021-06-13T21:14:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MDI3NjM3Nw==",
          "body": "Do you know what version of Firefox this is equivalent to in terms of language features, etc? I suspect this is a won't-fix, as we're not interested in spending time supporting ancient browsers (or browsers with the feature sets of ancient browsers).",
          "createdAt": "2021-06-13T22:05:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MDI5MzY2OQ==",
          "body": "v56 I believe. Waterfox Classic isn't an ancient browser, it's well maintained and used by a large community of people, especially devs (it's the best browser out there imo with feature set). This is also issue in Palemoon from my testing just now so it's more wide spread. It should at least fail gracefully so I am able to read from the tutorial instead of where the 500 error page blanks out everything instead. ",
          "createdAt": "2021-06-14T00:20:49Z",
          "author": { "login": "hockeymikey", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MDMzODU1MQ==",
          "body": "This error message is coming from Sapper. We'll eventually migrate the site from Sapper to SvelteKit as we've already done for the SvelteKit docs (open to help on that!). We're not going to be doing anymore fixes to Sapper though, so I'm going to go ahead and close this.",
          "createdAt": "2021-06-14T03:25:50Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTk4NDYwMjA=",
    "body": "i'm sorry if this is already enabled I didn't see it in the docs.\r\n\r\nAnyhow, I recently used Vue, and I think they had a good idea on quick implementation on what button to listen to. I think Svelte could benefit from this.\r\n\r\nright now it's something like this in a function\r\n\r\nfunction riode(e){\r\nif (e.key = \"Enter\") {\r\n// whatever//\r\n }\r\n}\r\nI think we can just outright scrape the entire if statement and just on the onclick or whatever have\r\n\r\non:keypress|Enter={function} to shorten it entirely.",
    "closedAt": "2021-06-13T19:21:10Z",
    "createdAt": "2021-06-13T17:30:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MDI1ODEwMQ==",
          "body": "This has come up before in #3193, #4427, #5795, and maybe others, and has previously been rejected because the number of keystrokes saved really is quite minimal. You can just do `on:keypress={(e) => e.key === 'Enter' && whatever()}`, which is a lot more explicit, and introduces no new API surface area to document, or test, or fix bugs in.",
          "createdAt": "2021-06-13T19:21:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTgyODczNjk=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\n\n**Describe the bug**\nA clear and concise description of what the bug is.\n\n**Logs**\nPlease include browser console and server logs around the time this bug occurred.\n\n**To Reproduce**\nTo help us help you, if you've found a bug please consider the following:\n\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\n\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\n\n**Expected behavior**\nA clear and concise description of what you expected to happen.\n\n**Stacktraces**\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\n\n<details>\n  <summary>Stack trace</summary>\n\n  Stack trace goes here...\n</details>\n\n**Information about your Svelte project:**\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\n\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\n\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\n\n- Svelte version (Please check you can reproduce the issue with the latest release!)\n\n- Whether your project uses Webpack or Rollup\n\n**Severity**\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\n\nNote: the more honest and specific you are here the more we will take you seriously.\n\n**Additional context**\nAdd any other context about the problem here.",
    "closedAt": "2021-06-11T06:39:14Z",
    "createdAt": "2021-06-11T06:29:51Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTMxNDY3NQ==",
          "body": "@shibusalim ",
          "createdAt": "2021-06-11T06:33:20Z",
          "author": { "login": "shibusalim", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTMxODQxMQ==",
          "body": "This is just the boilerplate template unchanged so I'm going to close.",
          "createdAt": "2021-06-11T06:39:14Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTcyMjU2MTE=",
    "body": "Hi👋\r\n(It's not really long. it isn't boring or hard to understand, so please read 😉)\r\n\r\n### The problem\r\n\r\nHTML:\r\n\r\n```HTML\r\n<!--\r\n<div></div>\r\n<!-- <div></div> -->\r\n<div></div>\r\n-->\r\n```\r\n\r\nSame issue:\r\n\r\n```HTML\r\n<!--\r\n<div></div>\r\n<!---->\r\n<div></div>\r\n-->\r\n```\r\n\r\nCSS:\r\n\r\n```CSS\r\n/*\r\n.my-class {\r\n  /* color: black; */\r\n}\r\n*/\r\n```\r\n\r\nSame issue:\r\n\r\n```CSS\r\n/*\r\n.my-class {\r\n  /**/\r\n}\r\n*/\r\n```\r\n\r\n### The solution that I like\r\nSCSS:\r\n```SCSS\r\n// step 1\r\n.my-class {\r\n  // color: black;\r\n}\r\n\r\n// step 2\r\n// .my-class {\r\n  // color: black;\r\n// }\r\n```\r\ncomments are so easy in SCSS. You can learn more about them [here](https://sass-lang.com/documentation/syntax/comments).\r\n\r\n### Describe alternatives you've considered\r\nLet's say I want to wrap 1000 lines of code in a comment. There are few comments in the code. I can remove the comments or I can close the new comment (that starts from line 1) before the opening of the second comment.\r\n\r\n### How important is this feature to you?\r\nWe are suffering from this nonsense issue for years. There is no one in the world who has not faced this issue before and right now. @Rich-Harris you can end this nonsense and you'll be my hero😂❤.\r\n\r\n### Additional context\r\nIf you want this feature to become real, please like 👍 and share 🌼. If you want to say that you like this solution and it's important to you, react with the rocket 🚀 emoji.",
    "closedAt": "2021-06-10T11:33:33Z",
    "createdAt": "2021-06-10T11:17:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1ODU0NDU3OQ==",
          "body": "One of Svelte's core principles is to adhere to standard HTML/JS/CSS syntax and only enhance it where necessary. This would be a strong deviation from that for something that is inconvenient but does not happen all the time. In HTML it would be very confusing as well because `/` is a valid character inside HTML text. So the only place where this could even be added is for standard CSS, and for that you could also use PostCSS or SCSS if you really want that behavior.\r\nI'm therefore going to close this issue.",
          "createdAt": "2021-06-10T11:33:33Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTE2NDAyNg==",
          "body": "Hey👋\r\nI'm not going to argue on this one because every time that I argue, seems that people get upset or something. \r\nSo, it's a problem. You don't write comments in your code. We don't need to do what SASS did, we can just make the examples work. that's all.\r\n@dummdidumm ",
          "createdAt": "2021-06-11T00:02:32Z",
          "author": { "login": "babakfp", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTM0ODUyNQ==",
          "body": "As I said above, this is not standard CSS or HTML syntax and therefore it won't be added. You can use a `/` character in HTML and it's printed as a `/` and if that would change that would be very confusing and possibly break some apps.\r\nI do write comments in my code and I get bit by this from time to time, too, but it's one of these little inconveniences we just have to deal with.",
          "createdAt": "2021-06-11T07:28:27Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTczMTYyNw==",
          "body": "@dummdidumm \r\n\r\nForget about the `/`? Just make it work without changing the syntax. We just want to be able to write a commit inside another comment.\r\n\r\nJust make them work as expected:\r\n\r\n```HTML\r\n<!--\r\n<div></div>\r\n<!-- <div></div> -->\r\n<div></div>\r\n-->\r\n```\r\n\r\n```CSS\r\n/*\r\n.my-class {\r\n  /**/\r\n}\r\n*/\r\n```",
          "createdAt": "2021-06-11T17:26:16Z",
          "author": { "login": "babakfp", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MDAzODk0NQ==",
          "body": "it's working as expected, as in plain HTML and CSS.",
          "createdAt": "2021-06-12T11:14:50Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTY4MjMxNTI=",
    "body": "**Describe the bug**\r\nonMount unmount callback function does not fire off when used for in if-block nested component of  unmounted parent (which is mounted in my case by svelte:component, didn't test it out using if-blocks). \r\n\r\nReferring to the documentation when looking at `onDestroy` it says that it `Schedules a callback to run immediately before the component is unmounted.` but we cannot see unmount callback output anything (as `run immediately before the component is unmounted` implies unmount event) in the REPL logs.\r\n\r\nAnalyzing the output we can see that:\r\n- onDestroy callback is not followed by an unmount callback from onMount()\r\n- onDestroy callback is fired off even before mounting the component. \r\n- onMount unmount callback never fires off\r\n\r\nThe issue may be related to #5268 but the REPL doesn't even use transitions although I saw some transition code get generated in output JS.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/9b9fca1b9c5049cbabaa47a71afb7212?version=3.38.2\r\n\r\nClick Prepare then Detonate and look at the console\r\n\r\nAs we can see console outputs\r\n\r\n\r\n    \"Inner1 mount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 unmount\"\r\n    \"Inner2 mount\"\r\n    \"Inner2 unmount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 mount\"\r\n\r\n\r\n**Expected behavior**\r\nThe Inner1 component should fire off onMount -> onDestroy -> onUnmount (onMount returned function)\r\n\r\nREPL should output probably in this case\r\n\r\n    \"Inner1 mount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 unmount\"\r\n    \"Inner2 mount\"\r\n    \"Inner2 unmount\"\r\n    \"Inner1 mount\"\r\n    \"Before Inner1 unmount\"\r\n    \"Inner1 ummount\"\r\n\r\nor in perfect world don't even mount Inner1 component on changing the parent component (the inner = 1 before _boom() is intended) but it probably is more of a feature request than bug report.\r\n\r\n**Workaround**\r\nUse onDestroy with tick() instead of function returned from onMount \r\n\r\n**Severity**\r\nThe issue was really severe in my case, I was unsubscribing from EventEmitters in function returned from onMount which should be called when component unmounts but it didn't fire off leading to some __REALLY__ nasty bugs in production causing a lot of confusion and problems.",
    "closedAt": null,
    "createdAt": "2021-06-10T02:26:35Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2Mzg0OTM2Ng==",
          "body": "Another workaround => REPL: https://svelte.dev/repl/8dcde41369cf440da948b65bc069322b?version=3.38.2",
          "createdAt": "2021-06-18T08:11:53Z",
          "author": { "login": "mdynnl", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTY1NTI1NjQ=",
    "body": "**Describe the bug**\r\nTutorial buttons (`Tutorial/Input/Output`) don't have the text properly aligned with the box on mobile devices.\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n1. Go to https://svelte.dev/tutorial/basics\r\n2. Open developer tools and toggle responsive mode\r\n3. Switch to a mobile device and see how the text doesn't align properly (screenshot shows the issue\r\n\r\n<img width=\"338\" alt=\"Screenshot 2021-06-09 at 19 33 00\" src=\"https://user-images.githubusercontent.com/30603437/121412037-2a5f6080-c95c-11eb-9a0f-662e9dad6d39.png\">\r\n\r\n**Severity**\r\nNot severe at all, just a matter of style.\r\n",
    "closedAt": "2021-06-15T15:53:54Z",
    "createdAt": "2021-06-09T18:48:22Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTUzNjg1OTg=",
    "body": "**Describe the bug**\r\n\r\nWhen comparing the bound value of `textContent` to a static string, Svelte seems to automatically trim the bound value before attempting the comparison (however, I don't find any evidence of this in the generated JS). \r\n\r\n```html\r\n<script>\r\n  let text = '';\r\n\t\r\n  function onkeyup () {\r\n    if (text === 'action ') {\r\n      console.log('triggered'); // not executed\r\n    }\r\n  }\r\n</script>\r\n\r\n<div contenteditable='true' on:keyup={onkeyup} bind:textContent={text}></div>\r\n```\r\n\r\nThis only happens for elements with `contenteditable='true'` and for WebKit and Chromium browsers. \r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/47ab2a7ac0674bc0ab20398929cd04de?version=3.38.2\r\n\r\n**Expected behavior**\r\n\r\nLike the behavior in Firefox. The REPL about would be triggered when `text` is `'action '`.\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Svelte: 3.38.2\r\n- Webkit version: WebKitGTK 2.32.1\r\n- Chromium version: 91.0.4472.77\r\n- Fedora 33\r\n\r\n**Severity**\r\n\r\nBuilding a client project that relies heavily on `contenteditable`.\r\n",
    "closedAt": "2021-06-08T19:19:46Z",
    "createdAt": "2021-06-08T19:06:40Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NzAzNjE5Mg==",
          "body": "Thanks to the Discord user __Vautour__, there's a solution to the problem: use the CSS attribute `white-space` to define how whitespace is being collapsed; see [StackOverflow](https://stackoverflow.com/questions/19647290/how-to-preserve-white-spaces-in-content-editable-div).\r\n\r\nHere's the solution the the problem above. Add the following CSS:\r\n\r\n```css\r\n[contenteditable] {\r\n  /* Either value works for this situation */\r\n  white-space: pre;\r\n  white-space: pre-wrap;\r\n}\r\n```\r\n\r\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space).",
          "createdAt": "2021-06-08T19:19:46Z",
          "author": { "login": "b2m9", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTQ3MzYwMTc=",
    "body": "**Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.**\r\n\r\nNo, it's about version 3.38.2\r\n\r\n**Describe the bug**\r\n\r\nThe reference to a child component is set to `null` after it is transitioned out, replaced by another one, and you interact with that new child. Here is a [REPL](https://svelte.dev/repl/3c86b93d4b6142979b12126cd81ed642?version=3.38.2) to try it out. The text at the very bottom indicates whether `childNode` (which is bound to a component via `bind:this`) is `null` or not. The steps to reproduce are:\r\n\r\n1. Click the button\r\n2. Click into the input that appears\r\n3. Type something\r\n4. The text changes to \"null\"\r\n\r\nI can reliably reproduce it in Firefox 89 and Safari 14.1.1, both on macOS 10.14.6\r\n\r\n**Expected behavior**\r\n\r\nThe node reference should always point to one of the components, and never be `null`\r\n\r\n**Severity**\r\n\r\nModerately severe, since there is a workaround, which is not to use transitions anywhere. I'm building an interface that has a static left column and different components for the main area. Having them fade into each other (as well as some animations inside them) is at the very least nicer than abrupt changes, so I would like to keep the transitions in place.\r\n\r\nOne of the components stores user input that I would like to notify the user about if they didn't save their changes. I do that by calling a function exposed via `export const function` before the component switch happens. At that time, the child reference (its `bind:this` value) should always point to the component. Instead, because of this bug, it turns to `null` sometimes and then the UI breaks because I'm trying to call a method on `null`:\r\n\r\n```\r\nUncaught TypeError: childNode is null\r\n```",
    "closedAt": null,
    "createdAt": "2021-06-08T10:01:14Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTM5ODc2MTg=",
    "body": "Hi,\r\n\r\nI had been using a katex-based web component which allowed you to write expressions of raw latex, for example:\r\n\r\n```html\r\n<d-math>\\textbf{D}\\{(x_i, y_i)\\}_{i \\in (1, \\cdots, n)}</d-math>\r\n```\r\n\r\nUnfortunately, this doesn't make it through the compiler, which complains:\r\n\r\n```bash\r\nError: ParseError: Expecting Unicode escape sequence \\uXXXX\r\n```\r\n\r\nIs there any way to tell the svelte compiler to ignore certain custom HTML tags, like `<d-math>` above, and simply let them pass through?\r\n\r\nAlternatively, is there a way to create a `<d-math>` component using Svelte itself?  I haven't been able to find any way for svelte components to access their innertext and do something with it.  The [Katex REPL example](https://svelte.dev/repl/49ff6c089825418888cf804d9dde77bc?version=3.38.2) is awkward since it requires you to insert your latex string as a property.  Also, it requires escaping.\r\n\r\nAny ideas would be greatly appreciated.\r\n\r\nThank you!\r\n\r\n",
    "closedAt": "2021-06-07T22:08:52Z",
    "createdAt": "2021-06-07T22:00:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjI5NjExMw==",
          "body": "The error message is there because you're using `{` and `}` without escaping them, and the compiler is attempting to interpret them as [text expressions](https://svelte.dev/docs#Text_expressions). You should replace `{` with `&#123;`.\r\n\r\nThere's not a way to tell the compiler to not try to parse expressions within a given element, and I think that feature sounds too niche to me.\r\n\r\nOne possibility would be for you to write a custom preprocessor that handles this escaping.\r\n\r\nFor more help, please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-06-07T22:08:52Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjMwMjk2NA==",
          "body": "Awesome, that worked!  In case anyone else is interested, here's the example, using distill.pub to typeset with katex within custom web components:\r\n\r\nhttps://github.com/hrbigelow/hrbigelow.github.io/blob/527d93c1979b998ab75437745974c0c5066bed0b/kernel_regression/rollup.config.js#L43",
          "createdAt": "2021-06-07T22:25:31Z",
          "author": { "login": "hrbigelow", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTI4NTQ3NDU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI'm writing a custom preprocessor. It processes the entire file (i.e. markup) and needs to generate some JavaScript. It does that by outputting a new <script> block. Unfortunately, if the svelte file already has a <script> block, I get an error telling me that a page is only allowed to have a single <script> block. This sounds like an unnecessary restriction.\r\n\r\n**Describe the solution you'd like**\r\nA svelte page should be allowed to have any number of <script> blocks. The same should probably go for <style> blocks. \r\n\r\n**Describe alternatives you've considered**\r\nI've considered just checking if the current page already has a <script> block and just injecting JavaScript into that block. The problem is that the existing <script> block may specify coffeescript or some other preprocessor already. Then I'd have to inject coffeescript instead of plain JavaScript. And what happens if there's some other language used in the future?\r\n\r\n**How important is this feature to you?**\r\nI can work around the problem for now, but I think that a successful solution would require my suggestion be implemented.\r\n",
    "closedAt": "2021-06-08T07:11:52Z",
    "createdAt": "2021-06-06T14:57:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTU0MDgxNw==",
          "body": "This may not be quite what you're looking for but `<svelte:head>` can achieve a similar effect:\r\n\r\nhttps://svelte.dev/repl/6d30c0c7269740acab724a3e0db9a189?version=3.38.2\r\n\r\nThis may be of limited value since the additional `<style>` blocks will not be scoped and the `<script>` blocks will not share component scope and other things like this. Yet I still sometimes find them useful, such as when writing a large block of unscoped utility classes or when pulling in legacy libraries. I've seldom done either outside a REPL but it's nice to have options!",
          "createdAt": "2021-06-07T03:00:28Z",
          "author": { "login": "chuckrector", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjUxNzI3NQ==",
          "body": "The given arguments are not strong enough to make this a consideration. If you use a preprocessor, you can do what you want but you are also on your own so to speak. If the script language is not JavaScript, you can rearrange the preprocessor execution order so that the html processor runs last, at which point the script will be preprocessed.\r\nAdding the possibility to have multiple top level script tags would introduce too much variance for no greater benefit. It would also be confusing for newcomers to understand the semantics - is this something special that they are separated or are they treated as one? Is the order important? Etc.\r\nI'm therefore going to close this.",
          "createdAt": "2021-06-08T07:11:52Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTIyMTMzODY=",
    "body": "**Describe the bug**\r\nIf a transition happens on an element that contains a slot which has a prop, the slot prop does not properly update if it is rendered again immediately after the transition ends.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/773209884de04140b5e07e1cff49fbc4?version=3.38.2\r\n\r\n**Expected behavior**\r\nIt will update slot prop correctly when finish transition.\r\n\r\n**Information about your Svelte project:**\r\n\r\nChrome v91\r\nmacOS 10.15.7\r\nSvelte v3.18.2\r\nSee REPL\r\n\r\n**Additional context**\r\n\r\nThere is a similar issue #3542 and #6042 seems to fix this issue but I guess #6042 don't trigger to update slot prop.\r\n\r\n",
    "closedAt": "2021-06-22T14:26:47Z",
    "createdAt": "2021-06-05T11:18:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjE2NTY5Mg==",
          "body": "Did you try like this?\r\n\r\n```\r\nfunction blink() {\r\ntransitioning = true;\r\n\r\nsetTimeout(() => {\r\n\ttest = 'bar1';\r\n\ttransitioning = false;\r\n}, 500); // if timeout value > duration time and slot prop `test` value will be 'bar'. \r\n}\r\n```",
          "createdAt": "2021-06-07T18:30:51Z",
          "author": { "login": "karolwydmuch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjY0MzU3NQ==",
          "body": "@kaisermann Yes, it is my solution currently. It is a workaround and doesn't solve the root cause.",
          "createdAt": "2021-06-08T10:14:37Z",
          "author": { "login": "zack9433", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1Njk3MDE4OA==",
          "body": "I think you meant to mention @karolwydmuch 😆 ",
          "createdAt": "2021-06-08T17:49:24Z",
          "author": { "login": "kaisermann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjExMTkwOA==",
          "body": "This is fixed now in 3.38.3 - https://svelte.dev/repl/773209884de04140b5e07e1cff49fbc4?version=3.38.3",
          "createdAt": "2021-06-22T15:55:28Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTIxMTg5MTc=",
    "body": "**Describe the bug**\r\nSorry for the confusing title, but i had no better idea. And it's much easier to see it in the REPL than describing it.\r\n\r\nI have an svg element and try to add a Component with a foreignObject in it and a default slot. In the first case the div element is part of the slot and in the second case the div is part of the component.\r\n\r\nIn the first case the compiler creates an svg_element and in the second the compiler creates a normal element. (As seen in the JS Output Tab) I think the first case is the correct case, because there is no xmlns attribute on the div. I have tried to show that in the more fleshed out REPL. I don't know if this is worth to be fixed, but i stumbled over this bug and i wanted to show this.\r\n\r\n**To Reproduce**\r\nMinimal REPL\r\nhttps://svelte.dev/repl/52d3b5cdb017498e82eb2d958fdc2782?version=3.38.2\r\n\r\nMore fleshed out REPL\r\nhttps://svelte.dev/repl/0564bbb5485840d0909593059b77185f?version=3.38.2\r\n\r\n**Expected behavior**\r\nSame Output at least. In the minimal REPL the first part where nothing is shown is the correct part i think, because it has no xmlns attribute. But otherwise there is no div-svg element at all https://developer.mozilla.org/en-US/docs/Web/SVG/Element so maybe a compiler warning would be nice?\r\n\r\n**Severity**\r\nJust confusing behavior.\r\n",
    "closedAt": null,
    "createdAt": "2021-06-05T06:29:12Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjE3MjE3MQ==",
          "body": "It's really weird but when you add this attr to your div \r\n\r\n>  xmlns=\"http://www.w3.org/1999/xhtml\"\r\n\r\nIt works: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject",
          "createdAt": "2021-06-07T18:41:56Z",
          "author": { "login": "karolwydmuch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1Njc2ODI0Nw==",
          "body": "Yes i know that and i have already written that in the issue and it's already part of the fleshed out example. \r\n\r\nThe Point is, that the svelte compiler does different things even tough the compiler should do the same thing.",
          "createdAt": "2021-06-08T13:28:58Z",
          "author": { "login": "firewave-remo", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTE4NTUxNjg=",
    "body": "**Describe the bug**\r\nWhen a `<style>` tag is inside an `{#if}` statement svelte outputs a non scoped style tag in the dom. In my opinion svelte should give a warning or error to prevent this from being done so easily.\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\n**To Reproduce**\r\nPut a `<style>` inside an `{#if}` statement\r\nhttps://svelte.dev/repl/caa141b5e69a4a13860991e84fb3cd80?version=3.38.2\r\n\r\n\r\nBrowser & Version\r\nChrome 91\r\n\r\nOS\r\nWindows 10\r\n\r\nSvelte Version\r\n3.38.2\r\n\r\n**Severity**\r\nNot too Important however this is unexpected\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-06-04T21:30:08Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTAxNTI2Mg==",
          "body": "This is the intended behavior - any `<style>` tag that's not at the top level (whether it's inside something like `{#if}` or inside another DOM element) doesn't get processed specially by Svelte and is just inserted as-is into the DOM. I'm labeling this as a 'docs' issue because this could probably be explained somewhere better.\r\n\r\nThere are legitimate reasons for doing this, so I don't think it should be a warning.",
          "createdAt": "2021-06-04T21:42:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTAxNTg2OA==",
          "body": "Ok, sorry about that. I guess it is a docs issue then.",
          "createdAt": "2021-06-04T21:43:25Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTAxODMzNg==",
          "body": "I had a component with a sidebar at the bottom and then the style section and I somehow ended up putting the {/if} after the style section and it was causing some pretty weird behavior so I thought it would be an issue. Maybe it could raise a warning unless some attribute is added like `raw` or something? this would have the benefit of allowing top level `<style>`s that works like this instead of having to wrap it in a `{#if true}` but I guess that is probably hard to implement and maybe a breaking change?",
          "createdAt": "2021-06-04T21:48:42Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTE2NzY4MDg=",
    "body": "This is not a rant at all, so please don't read it like that.\r\n\r\nI'm not very keen on installing node and npm. I think it adds too many dependencies to my system, so I try to stay out of it. But I want to install svelte though. When I was installing elm, I could just install the elm compiler binary because its in Haskell. Since what Svelte and Elm does is somewhat similar (compile to js as a build target),  I think same could be applied to svelte compiler as well.\r\n\r\nIs it possible to write the svelte compiler in a different language, similar to deno compiler which is in rust, that would take the svelte enhanced js/ts as input and build the reactive js ? Purely technical, it should be possible so I'm more interested in how it would affect tooling around svelte ? e.g. Would webpack/rollup work as expected, would language server work ? \r\n\r\nSince deno is more of a runtime than a compiler, I'm not asking this question in terms of compilation performance, nodejs performance is good enough for that, but mostly about how dependent is the svelte compiler to js ecosystem ?   \r\n\r\nAlso I'm not actually proposing that it should be written in a different language. That would be a very huge waste of effort for a little gain.",
    "closedAt": "2021-06-04T16:56:10Z",
    "createdAt": "2021-06-04T16:39:24Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NDg3NDA1NQ==",
          "body": "It probably could, but in order to continue to interoperate with the rest of the ecosystem, javascript bindings would have to be written for the compiler, similar to what esbuild has.\r\n\r\nThe issue tracker is also not the right place for very open-ended questions like this.",
          "createdAt": "2021-06-04T16:56:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTEzNTM4NzU=",
    "body": "**Describe the bug**\r\n\r\nThe space in markup after a conditional is gobbled up. It should be left alone.\r\n\r\n**Logs**\r\n\r\nNone\r\n\r\n**To Reproduce**\r\n\r\n```svelte\r\n<script>\r\n  let truthy = true\r\n</script>\r\n\r\n<h1>Always{#if truthy} true{/if}!</h1>\r\n```\r\n\r\nhttps://svelte.dev/repl/4c6d1164f6434abaadf5c062b643d54c?version=3.38.2\r\n\r\n**Expected behavior**\r\n\r\nWhen truthy, the markup output should be:\r\n\r\n```html\r\n<h1>Always true!</h1>\r\n```\r\n\r\nInstead, it is:\r\n\r\n```html\r\n<h1>Alwaystrue!</h1>\r\n```\r\n\r\nThis is true even if the text is surrounded by a tag, e.g.\r\n\r\n```svelte\r\n<h1>Always{#if truthy}<span> true</span>{/if}!</h1>\r\n```\r\n\r\nWhen falsy, the output is as expected:\r\n\r\n```html\r\n<h1>Always!</h1>\r\n```\r\n\r\n**Workaround**\r\n\r\nAlthough not exactly equivalent, you can work around the issue by using a non-breaking space instead:\r\n\r\n```svelte\r\n<h1>Always{#if truthy}&nbsp;true{/if}!</h1>\r\n```\r\n\r\nThis will have the (possibly unwanted) side-effect of making your sentence not break at that point but it will maintain proper letter spacing.\r\n\r\nIf you can sacrifice a tiny bit of variance in proper spacing, you can also use an en space:\r\n\r\n```svelte\r\n<h1>Always{#if truthy}&#8197;true{/if}!</h1>\r\n```\r\n\r\n**Stacktraces**\r\n\r\nNot applicable.\r\n\r\n**Information about your Svelte project:**\r\n\r\nSee REPL.\r\n\r\n**Severity**\r\n\r\nQuite fundamental when formatting HTML output. Encountered while creating a Mad Libs-style (sentence-style) form.\r\n\r\n**Additional context**\r\n\r\nNot applicable.\r\n",
    "closedAt": null,
    "createdAt": "2021-06-04T10:13:29Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDU3MTQ2OA==",
          "body": "This is likely actually a bug, even though it's been around since v3.0.0. See: https://svelte.dev/repl/4c6d1164f6434abaadf5c062b643d54c?version=3.0.0\r\n\r\nHowever, since this behavior has been fairly long-standing, one could almost think of it as a breaking change. Not sure what to do, since it could break applications in the wild.\r\n\r\nNote that white space at the end of `{#if}` statements is preserved: https://svelte.dev/repl/b161491bbf014f54a349f834e82c7d92?version=3.38.2 So if the thinking is that the whitespace trimming is intentional, it's not consistent.\r\n\r\nOne way or another this will likely lead to a breaking change if we want consistency.",
          "createdAt": "2021-06-20T15:29:10Z",
          "author": { "login": "arxpoetica", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MTA3Nzc5NDQ=",
    "body": "**Describe the bug**\r\n\r\nOn the svelte.dev website, very often one of the logos in \"Who's using Svelte\" section is not loaded. Check the network request it returns 404 not found error. \r\n\r\nThe 404 does not happen with a specific logo, but randomly one of them.\r\n\r\nIt happens almost every time. Reload page does not help.\r\n\r\nI have tried both Chrome and Safari. I am on MacOS\r\n\r\n\r\n**To Reproduce**\r\nJust browse to svelte.dev web site and check section \"Who's using Svelte\". If all logos are loaded, which is unlikely for me, reload the page will show the issue.\r\n\r\n\r\n",
    "closedAt": "2021-06-20T15:21:34Z",
    "createdAt": "2021-06-03T19:08:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1ODAyMzk4Nw==",
          "body": "Had to refresh a lot of times to get one logo with a 404. For me it's `covidlive-logo.jpeg`. I pressed the `Show more` until I ran out of logos and that one was the only one with the 404\r\n\r\nEDIT: Inspecting the code, it seems there there isn't, at all' any `covidlive-logo.jpeg`.  I also couldn't find the `assets` folder that the path refers\r\n```\r\n{\r\n  href: \"https://covidlive.app/\",\r\n  src: \"assets/covidlive-logo.jpeg\",\r\n  alt: \"Covid Live App logo\",\r\n  prominent: true,\r\n},\r\n```\r\n\r\nThere's also `\"assets/img/logo-main.png\"` showing on `WhosUsingSvelte.js` but I couldn't find a reference to this logo on the website so I don't know what's going on with that one but `logo-main.png` also doesn't exist\r\n\r\n<img width=\"1132\" alt=\"Screenshot 2021-06-09 at 20 15 32\" src=\"https://user-images.githubusercontent.com/30603437/121415268-73fd7a80-c95f-11eb-869e-9738ff9b2318.png\">\r\n",
          "createdAt": "2021-06-09T19:16:43Z",
          "author": { "login": "ItzaMi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NTA2OA==",
          "body": "hmm, I tested again today a few times, initially thought it was random logo, but actually found it is always covidlive that is missing. Just because the logos are shuffled that caused the impression that it is random.",
          "createdAt": "2021-06-12T04:16:53Z",
          "author": { "login": "shaozi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDU3MDQzMw==",
          "body": "i believe this logo got removed by https://github.com/sveltejs/svelte/pull/6409",
          "createdAt": "2021-06-20T15:21:34Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDk3MDExMzc=",
    "body": "**Describe the bug**\r\nIncrement inside a #each block is broken.\r\nThe variable is not incremented\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/abb356904e0241ebacbefacfe5a000ab?version=3.38.2\r\n\r\n**Expected behavior**\r\nIncrement the variable n inside the #each block\r\n\r\n**Information about your Svelte project:**\r\nREPL 3.38.2\r\n\r\n**Severity**\r\nAfter some fiddling around i think this issue is serious.\r\n",
    "closedAt": null,
    "createdAt": "2021-06-02T16:56:00Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MzIyMDQ2NA==",
          "body": "yeah it happened to me too, it's kinda weird  ",
          "createdAt": "2021-06-02T16:59:24Z",
          "author": { "login": "gggiiia", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDU3MTIzMQ==",
          "body": "@CristianPi i get that it doesn't make sense that it is not working, but i wondered what were you trying to do / accomplish over here?",
          "createdAt": "2021-06-20T15:27:04Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTEzMjQ3OA==",
          "body": "@tanhauhau \r\n\r\nNothing in particular, i was trying some framework/lang other than React to see if it's worth to rewrite an entire application.\r\nConsistency wise something is wrong on my opinion, witch make me wonder if something else is luring behind.\r\n\r\nIs this a bug or a feature/design artifact? ",
          "createdAt": "2021-06-21T15:36:29Z",
          "author": { "login": "CristianPi", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDg1ODI0MDc=",
    "body": "**Describe the bug**\r\n\r\nIt looks like there is no ESM version of `svelte/register`.\r\n\r\nHere's a small snippet of the package.json\r\n\r\n```json\r\n  \"exports\": {\r\n    \"./register\": {\r\n      \"require\": \"./register.js\"\r\n    },\r\n    \"./store\": {\r\n      \"import\": \"./store/index.mjs\",\r\n      \"require\": \"./store/index.js\"\r\n    },\r\n  },\r\n```\r\n\r\nAs you can see, `svelte/register` doesn't have an ESM version, but all other exports like `svelte/store` do.\r\n\r\n**Logs**\r\n\r\nIf you try to use `svelte/register` in an esm context:\r\n\r\n```sh\r\nnode:internal/process/esm_loader:74\r\n    internalBinding('errors').triggerUncaughtException(\r\n                              ^\r\n\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './register' is not defined by \"exports\" in /repo/node_modules/svelte/package.json imported from /repo/render-email.js\r\n    at new NodeError (node:internal/errors:363:5)\r\n    at throwExportsNotFound (node:internal/modules/esm/resolve:321:9)\r\n    at packageExportsResolve (node:internal/modules/esm/resolve:510:7)\r\n    at packageResolve (node:internal/modules/esm/resolve:687:14)\r\n    at moduleResolve (node:internal/modules/esm/resolve:739:18)\r\n    at Loader.defaultResolve [as _resolve] (node:internal/modules/esm/resolve:853:11)\r\n    at Loader.resolve (node:internal/modules/esm/loader:89:40)\r\n    at Loader.getModuleJob (node:internal/modules/esm/loader:242:28)\r\n    at ModuleWrap.<anonymous> (node:internal/modules/esm/module_job:73:40)\r\n    at link (node:internal/modules/esm/module_job:72:36) {\r\n  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'\r\n}\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```\r\npnpm init -y\r\npnpm i svelte\r\n```\r\n\r\nAdd `\"type\": \"module\"` to your `package.json`.\r\n\r\nCreate `Component.svelte`:\r\n\r\n```svelte\r\n<p>This is a component</p>\r\n```\r\n\r\nCreate a render.js.\r\n\r\n```\r\nimport 'svelte/register'\r\nimport Component from './Component.svelte'\r\n```\r\n\r\nThen run\r\n\r\n```\r\nnode render.js\r\n```\r\n\r\n**Expected behavior**\r\n\r\nESM and CJS behavior should be identical.\r\n\r\n**Information about your Svelte project:**\r\n```\r\nSystem:\r\n    OS: macOS 11.4\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 31.14 GB / 64.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 16.2.0 - ~/.nvm/versions/node/v16.2.0/bin/node\r\n    Yarn: 1.22.10 - ~/.nvm/versions/node/v16.2.0/bin/yarn\r\n    npm: 7.13.0 - ~/.nvm/versions/node/v16.2.0/bin/npm\r\n  Browsers:\r\n    Brave Browser: 91.1.25.68\r\n    Firefox: 88.0.1\r\n    Safari: 14.1.1\r\n  npmPackages:\r\n    svelte: ^3.38.2 => 3.38.2 \r\n```\r\n\r\n**Severity**\r\nAnnoying, but not critical. Entire repo and development pipeline use ESM, but I'm extracting out components that need `svelte/register` into CJS files.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2021-06-01T18:45:49Z",
    "createdAt": "2021-06-01T18:40:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjM2MTMwOQ==",
          "body": "Duplicate of #5185. There's not really anything that can be done about this on our end here until Node's ESM loader API settles.",
          "createdAt": "2021-06-01T18:45:49Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDY1OTc4Mzc=",
    "body": "The RxJS community has adopted trailing `$` for an observable name. Svelte supports leading `$` is naming the value of the store (observable).\r\n\r\nIt strikes me that the trailing `$` on the store would be more consistent with standard javascript naming practices, especially when working with large codebase having helper functions.\r\n\r\nSvelte\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount = writable(0)\r\n</script>\r\nYou have {$amount} comments.\r\n```\r\n\r\nRxJS\r\n\r\n```svelte\r\n<script>\r\nimport { onMount, onDestroy } from 'svelte'\r\nimport { of } from 'rxjs'\r\nconst amount$ = of(0)\r\nlet amount,subscription\r\nonMount(()=>subscription = amount$.subscribe(a=>amount = a))\r\nonDestroy(()=>supscription.unsubscribe())\r\n</script>\r\nYou have {amount} comments.\r\n```\r\n\r\nYes, the svelte example has less code & is easier to read, however it can be improved by also supporting trailing `$`.\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount$ = writable(0)\r\n</script>\r\nYou have {amount} comments.\r\n```\r\n\r\n## Helper functions in javascript modules\r\n\r\nCreating a function that takes a store or a value of a store as an argument, the programmer is faced with a quandary. What name should the value variable be?\r\n\r\nShould it be `amount` or `$amount`? In normal javascript & with observables having the trailing `$`, the name of the value would be `amount`. With the value having the `$` prefix, the name of the value is `$amount`. However, this does not work well when passing the value as a property of an object. Should all props also be named `$amount`? What about api calls? As some point, the name `amount` will be required to reperesent the value, which contradicts svelte's naming convention.\r\n\r\n## Solution\r\n\r\nSupport both the prefix `$` for values and the suffix `$` for stores. Both naming conventions can be supported by the svelte compiler.\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount$ = writable(0)\r\nconst name = writable('Mr Bean')\r\n</script>\r\n{$name} has {amount} beans.\r\n```\r\n\r\nThis will fix naming collision by making the store have the `$` suffix. The store is not passed data & if it is, would follow the convention set by RxJS. Also the additive effect of the `$` suffix implies that the observable characteristic is wrapping the value, instead of infering from the store.\r\n\r\n## Current implementation of svelte\r\n\r\nThe `$` suffix can be added to the store, but the `$` prefix of the value is still required.\r\n\r\n```svelte\r\n<script>\r\nimport { writable } from 'svelte/store'\r\nconst amount$ = writable(0)\r\nconst name = writable('Mr Bean')\r\n</script>\r\n{$name} has {$amount$} beans.\r\n```\r\n\r\nAdding support for the `$` store suffix stripping off the `$` would fix the naming issues of support functions on the value of the store. \r\n",
    "closedAt": null,
    "createdAt": "2021-05-30T01:22:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDkyNTcwMA==",
          "body": "Interop with other ecosystems or no, this would be a breaking change.",
          "createdAt": "2021-05-30T01:43:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDkyNzI2MA==",
          "body": "I'm not aware of how this would be a breaking change but I'll take your word for it. Could you elaborate?\r\n\r\nMy primary concern is that the `$` prefix for values is not ergonomic when working with application-wide data flow, apis, helper functions, & when refactoring from a reactive value to a store. The interop would also be affected, in the case of RxJS, but since observable support `subscribe`, support as almost there. The `unsubscriber` behavior is different, but that could be smoothed over, perhaps with a compiler hook or preprocessor? I invoked RxJS into this github issue to show there is precedent to the `$` suffix. I know @Rich-Harris is interested in standards among different libraries from a tweet a couple of years ago. Perhaps people in the RxJS community can comment on the subtleties on why the `$` suffix was chosen for observables.\r\n\r\nAn example that just came up, when refactoring a reactive variable to a shared store:\r\n\r\nFrom:\r\n```svelte\r\n<script>\r\nlet amount = 0\r\n</script>\r\nYou have {amount} comments.\r\n```\r\n\r\nCurrently, one has to also change the reading of the value to `$amount`:\r\n```svelte\r\n<script>\r\nimport { amount } from './shared/amount'\r\n</script>\r\nYou have {$amount} comments.\r\n```\r\n\r\nWith the `$` suffix convention, no changes are necessary to read the value:\r\n```svelte\r\n<script>\r\nimport { amount$ } from './shared/amount$'\r\n</script>\r\nYou have {amount} comments.\r\n```",
          "createdAt": "2021-05-30T02:02:49Z",
          "author": { "login": "btakita", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDk0OTA1NA==",
          "body": "It's a breaking change because everyone using the `foo$` syntax and using `foo` in the same file would have different behavior. Also I guess it's way harder to to write the logic for that because you substract, not append a character.",
          "createdAt": "2021-05-30T06:20:44Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTAwNzQzOQ==",
          "body": "> It's a breaking change because everyone using the foo$ syntax and using foo in the same file would have different behavior.\r\n\r\nTo your point there is a breaking change with the current compiler rule, where `foo` would be assumed to be a value of `foo$` if `foo$` exists in the file. I wonder how common this is.\r\n\r\n> Also I guess it's way harder to to write the logic for that because you substract, not append a character.\r\n\r\nThat's a good consideration. The compiler would need to do look for variables using something like `variable.match(/([a-zA-Z_\\$][a-zA-Z0-9_\\$]*)\\$/)[1]` instead of basing the evaluation on existing variables beginning with `$` using something like `variable.match(/$([a-zA-Z_\\$][a-zA-Z0-9_\\$]*)/)[1]`.\r\n\r\nSo the difference would be not only the match, but what drives the match. For the `$` prefix on the value, the value drives the match. For the `$` suffix on the store, the store drives the match. Supporting both would mean the compiler would need to support both ways of matching. The suffix approach by itself seems to be about the same amount of difficulty, but supporting both would seem to add more difficulty.\r\n\r\nWould you agree with that assessment?\r\n\r\nI don't know if the ergonomics of the `$` value prefix is a common complaint, but after working with Svelte for a while on large codebases, using the `$` prefix in ts/js files is one of those slightly (pebble in a shoe) annoying anti-patterns that can pervade the entire codebase. Like a pebble in a shoe, it's such a seemingly small issue that one does not need to address it for short walks, but the issue grows as a hike gets longer.\r\n\r\nI'm playing around with different naming conventions & patterns. If anybody has suggestions or wants to continue the discussion, I would appreciate it.",
          "createdAt": "2021-05-30T14:15:40Z",
          "author": { "login": "btakita", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTA1OTAyMA==",
          "body": "Not gonna lie, this is a bit of a lightbulb moment. I just wish we'd had it two and a half years ago! \r\n\r\nThe more idiomatic RxJS interop is cool, but I'm much more persuaded by the refactoring argument. It's something I've run into on occasion, and it's a a legitimate criticism people have made of Svelte's reactivity model, wherein stores are perceived to be second-class citizens compared to component-local state (or props).\r\n\r\nI'm also persuaded by the thought that `foo$` communicates store-ness better than a `foo` that happens to be read in proximity to an occurrence of `$foo`. \r\n\r\nTwo points:\r\n\r\n* This _is_ a breaking change, however unlikely it is that someone would declare both `foo$` and `foo` in the same file (not a confusing break, since the compiler can disallow a `foo` declaration or import in a scope that already has `foo$` defined; it would fail in a straightforward and communicable way rather than a cryptic one. But a break nonetheless). If we claim to respect semver then realistically we're talking about Svelte 4 here\r\n* One of Svelte's unwritten tenets is that we should provide one way to do things. I don't think we'd ever support both `foo/$foo` _and_ `foo$/foo`, that would be hellaciously confusing and unnecessarily complex in terms of implementation.\r\n\r\nSo the question is 'is this change of sufficient value that it's worth the extreme disruption it would cause?' I suspect most people here would say 'no', but I also think there's at least a _possibility_ that it is, insofar as it would fix one of Svelte's (arguably) most noticeable warts.\r\n\r\n---\r\n\r\nHaving said all that, the main frustration _I_ encounter when dealing with stores is the requirement that they be free variables rather than (e.g.) object properties. Some code from a project I'm currently working on:\r\n\r\n```js\r\nexport let runner;\r\n\r\nconst weight_idle = spring();\r\nconst weight_running = spring();\r\nconst weight_celebrating = spring();\r\n\r\n$: weight_idle.set($runner.state === 'idle' ? 1 : 0);\r\n$: weight_running.set($runner.state === 'running' ? 1 : 0);\r\n$: weight_celebrating.set($runner.state === 'celebrating' ? 1 : 0);\r\n```\r\n\r\nHaving three variables for each of those weights, rather than a single object or map with `idle`, `running`, `celebrating` etc properties, makes me feel grubby. I already know that I'm going to need to add a bunch more different weights; it would be great if I could do something like this instead:\r\n\r\n```js\r\nexport let runner$;\r\n\r\nconst weights = {};\r\nstates.forEach(state => weights[state + '$'] = spring());\r\n\r\n$: states.forEach(state => {\r\n  weights[state + '$'].set(runner.state === state ? 1 : 0); \r\n});\r\n\r\n// later\r\n$: angle = weights.idle * angles.idle + weights.running * angles.running;\r\n```\r\n\r\nSince the compiler can't realistically know which properties of `weights` are stores (especially if that object is imported), the detection would have to happen at runtime, and at a cost.\r\n\r\nSo if we're discussing the possibility (however remote!) of changing store syntax, I'd love for us to see if we can come up with an approach that makes it possible to solve this problem at the same time.",
          "createdAt": "2021-05-30T20:47:17Z",
          "author": { "login": "Rich-Harris", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTA2OTA5Mg==",
          "body": "@pngwn notes this related issue https://github.com/sveltejs/svelte/issues/2016",
          "createdAt": "2021-05-30T22:12:16Z",
          "author": { "login": "Rich-Harris", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTA3NDU3Nw==",
          "body": "Conversation regarding object property store auto-subscriptions (sometimes dubbed 'contextual stores') should probably into #4079 as there is a bit more conversation there. I'll close #2016 but capture the example as it is a clear example.",
          "createdAt": "2021-05-30T23:02:43Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTA3NzY3NA==",
          "body": "FWIW, I have deliberately written `foo$` in files because `$foo` is reserved for stores. I used the convention to show when a variable was a reference. Just a footnote of data for \"have people done this?\" At least one person. 😆",
          "createdAt": "2021-05-30T23:24:31Z",
          "author": { "login": "arxpoetica", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzgwMTYyOA==",
          "body": "Thank you for the discussion. I have some good news to report. I have been rolling out the `val$` naming convention & all of the naming conflicts around stores has been resolved, particularly in `*.ts` files. My projects tend to have the majority of the logic in stores & less logic in the components. I have also broken out `Controller` classes for logic-heavy templates, which includes functions, `writable` & `derived` stores. The naming conflicts resolved include:\r\n\r\n* Before: should a `$` prefix be applied to local variables? After: the value variable name has no `$` character\r\n* Before: props: should a `$` prefix be used on the prop name? After: The prop name has no `$` character\r\n* Before: In a sapper/svelte kit `preload` function, the `$` prefix cannot be used for local variables due to the Svelte Compiler. After: No `$` prefix necessary to distinguish between store & value.\r\n\r\nThe `$val$` component values are also not too bad to work with either. It conceptually makes sense in a certain way, as the `$` prefix & suffix cancel each other out, like a `+` & `-` cancel each other out in arithmetic. It is an extra character, but one could make the aesthetic argument that `$val$` is balanced. The `$` prefix can be thought of as a preprocessor operator on the `store$` object.\r\n\r\nWith that in mind, I'm not too concerned about changing the syntax, as long as `$` prefix & suffix (`$val$`) is not too much of an eyesore & burden for the programmer. I'm not opposed to changing the syntax either, but having gone through 2 migrations, I can see that it would be a sizable effort for large codebases. Less than 1 week in most cases, but still sizable. I think it's worth doing, but keeping the migration optional has it's merits.\r\n\r\nTo keep the `value` in the same form when refactoring from a Component variable to a `store`, perhaps another svelte preprocessor \"op\" and/or label could be added?\r\n\r\n```svelte\r\n<script>\r\nimport { value$ } from './value$'\r\nvalue: $value$\r\n</script>\r\n\r\n<input bind:value>\r\n```\r\n\r\nAnother reason to not change the syntax is that sometimes it's useful to have an `export val`, `val$`, & `$val$` used in the same component. I have used this pattern with a component with `export val` which also have a `val$` store in the Controller or shared store.\r\n\r\n```svelte\r\n<script lang=ts>\r\nimport { value$ } from './value$'\r\nexport value:string\r\nvalue: $value$\r\n</script>\r\n\r\n<input bind:value>\r\n```\r\n\r\n@Rich-Harris Correct me if I'm wrong but, would the bottom block not work in svelte 3 as long as `runner` is seen as an invalidatable variable?\r\n\r\n```ts\r\nexport let runner$;\r\n\r\nconst weights = {};\r\nstates.forEach(state => weights[state + '$'] = spring());\r\n\r\n$: $runner$, states.forEach(state => {\r\n  weights[state + '$'].set($runner$.state === state ? 1 : 0); \r\n});\r\n\r\n// later\r\n$: angle = weights.idle * angles.idle + weights.running * angles.running;\r\n```\r\n\r\nhttps://twitter.com/wycats/status/1380386140478271488\r\n\r\nYehuda Katz had an interesting insight into composing reactive cell primitives (i.e. svelte stores). I'm looking for ways to ergonomically compose svelte stores into objects as well. I have started to add the `_` get/set prop on the stores that I use. I'm currently using [writable$](https://github.com/ctx-core/store/blob/master/src/writable%24.ts), [readable$](https://github.com/ctx-core/store/blob/master/src/readable%24.ts), & [derived$](https://github.com/ctx-core/store/blob/master/src/derived%24.ts).\r\n\r\n```ts\r\nconst val$ = writable$('')\r\nval$._ = 'new value`\r\nconsole.info(val$._)\r\n```\r\n\r\nIt would be interesting to compose svelte stores into objects. For my purposes, mainly in Controller logic, having one of the above defined stores assigned to a prop works great. There's no need for decorators & reading/writing values from stores can occur inline. A decorator could be used on the Class as syntax sugar for the get/set proxy property to the store well. I'm not particularly interested in using decorators & proxy get/set props at this time, but Yehuda, Ember, MobX, Angular, & others use decorators & proxy get/set props. In Svelte components, there are also cases when calling the get/set props is necessary, such as in functions or reading the store value without using `$$invalidate`.",
          "createdAt": "2021-06-18T06:49:46Z",
          "author": { "login": "btakita", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjQ0ODY2OA==",
          "body": "@ryansolid has astute commentary on stores as well. He addresses the trailing $ under the \"Compilation Shortcomings\" section.\r\n\r\nhttps://itnext.io/designing-solidjs-reactivity-75180a4c74b4\r\n\r\nI like using the trailing `$` indicator (as Ryan calls it) to identify store cells to differentiate between the store & the value. If Typescript provided a polymorphic way to reference the value, like the svelte compiler, then the indicator would be superfluous. Svelte does provide an opportunity to have SolidJS's state api via `Readable`. I have implemented something similar but rarely use this pattern. I prefer treating stores as a cell which have a get/set method, which I use `_` to minimize the syntax burden of referencing the value of the store (i.e. \"cell\"). It's not as seamless as a svelte reactive variable, but it's not too bad in practice & some naming convention patterns can be utilized.\r\n\r\nNonetheless, Solidjs is impressive & I share many of Ryan's sentiments including the observation that the local component scopes tend to not have as much of the app logic in more complex systems. I find that I'm using stores in components significantly more than reactive variables. His performance concerns are also interesting, since large apps have many components, so having a way to \"inline\" the components on compilation would be beneficial.",
          "createdAt": "2021-06-23T01:19:05Z",
          "author": { "login": "btakita", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDY1NDgxOTM=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIn SSR mode, `onMount`, `beforeUpdate` and `afterUpdate` don't do anything. But build tools can't know that because they're not no-ops in the `() => {}` sense — the callbacks get pushed to an array which is then discarded, which isn't something that can be optimised away with static analysis — and as a result the code remains in the generated bundle.\r\n\r\nIf `onMount` etc were instead no-ops, the code could be removed, [at least by tools like Rollup](https://rollupjs.org/repl/?version=2.50.4&shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmltcG9ydCUyMCU3QiUyMG9uTW91bnQlMkMlMjBvbkRlc3Ryb3klMjAlN0QlMjBmcm9tJTIwJy4lMkZmYWtlLXN2ZWx0ZSclM0IlNUNuJTVDbm9uTW91bnQoKCklMjAlM0QlM0UlMjAlN0IlNUNuJTVDdGNvbnNvbGUubG9nKCd0aGlzJTIwZ2V0cyUyMHJlbW92ZWQlMkMlMjBiZWNhdXNlJTIwb25Nb3VudCUyMGlzJTIwYSUyMG5vLW9wJyklM0IlNUNuJTdEKSUzQiU1Q24lNUNub25EZXN0cm95KCgpJTIwJTNEJTNFJTIwJTdCJTVDbiU1Q3Rjb25zb2xlLmxvZygndGhpcyUyMGlzJTIwcHJlc2VydmVkJTJDJTIwYmVjYXVzZSUyMG9uRGVzdHJveSUyMGlzJTIwbm90JTIwYSUyMG5vLW9wJyklM0IlNUNuJTdEKSUzQiUyMiUyQyUyMmlzRW50cnklMjIlM0F0cnVlJTdEJTJDJTdCJTIybmFtZSUyMiUzQSUyMmZha2Utc3ZlbHRlLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmV4cG9ydCUyMGZ1bmN0aW9uJTIwb25Nb3VudCgpJTIwJTdCJTVDbiUyMCUyMCUyRiUyRiUyMGRvJTIwbm90aGluZyU1Q24lN0QlNUNuJTVDbmV4cG9ydCUyMGZ1bmN0aW9uJTIwb25EZXN0cm95KGZuKSUyMCU3QiU1Q24lNUN0Zm4oKSUzQiU1Q24lN0QlMjIlMkMlMjJpc0VudHJ5JTIyJTNBZmFsc2UlN0QlNUQlMkMlMjJvcHRpb25zJTIyJTNBJTdCJTIyZm9ybWF0JTIyJTNBJTIyZXMlMjIlMkMlMjJuYW1lJTIyJTNBJTIybXlCdW5kbGUlMjIlMkMlMjJhbWQlMjIlM0ElN0IlMjJpZCUyMiUzQSUyMiUyMiU3RCUyQyUyMmdsb2JhbHMlMjIlM0ElN0IlN0QlN0QlMkMlMjJleGFtcGxlJTIyJTNBbnVsbCU3RA==) and Terser (the same isn't true for esbuild, sadly, but maybe one day).\r\n\r\nThis _won't_ prevent Rollup from attempting to bundle (or create chunks for) dynamic imports inside those callbacks...\r\n\r\n```js\r\nonMount(async () => {\r\n  const mod = await import('./client-only-module.js');\r\n  // client-only-module will appear in the SSR bundle even if `onMount` is correctly\r\n  // treated as a no-op. this feels like something that could change though\r\n});\r\n```\r\n\r\n...but it's nonetheless a significant improvement on the status quo.\r\n\r\n**Describe the solution you'd like**\r\nThe solution is a two-parter:\r\n\r\n1. Expose an equivalent module to `svelte` (e.g. `svelte/ssr`) that re-exports most stuff from `svelte`, but replaces the relevant functions with no-ops\r\n2. Update Svelte bundler plugins like `rollup-plugin-svelte` and `@sveltejs/vite-plugin-svelte` to intercept imports to `svelte` and replace them with `svelte/ssr`. (This needs to happen for all modules in the graph, not just .svelte files.)\r\n\r\n**Describe alternatives you've considered**\r\nOne alternative we discussed is detecting calls to `onMount` and similar functions, and simply removing them from the generated code. I'm opposed to this for Zalgo reasons: since this would only apply to `onMount` calls (and only inside components, since Svelte plugins have no authority to mess around with non-components, especially since they may not have been transformed to standard JS by the time the plugin sees them), it would fail to remove code like the following:\r\n\r\n```js\r\n// lifecycle.js\r\nimport { onMount } from 'svelte';\r\n\r\nexport function useSomeLibrary(fn) {\r\n  onMount(() => {\r\n    const mod = await import('some-library');\r\n    fn(mod);\r\n  });\r\n}\r\n```\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n<script>\r\n  import { useSomeLibrary } from './lifecycle.js';\r\n\r\n  let div;\r\n\r\n  useSomeLibrary(lib => {\r\n    lib.init(div);\r\n  });\r\n</script>\r\n\r\n<div bind:this={div}></div>\r\n```\r\n\r\nIf that code is going to fail (because a build tool won't allow `some-library` to be bundled for the server, for example), it's better that it fails the same way whether you write it inside `onMount` in a component directly, or in the form shown above. Someone writing the `onMount` version would be horribly confused if they refactored it into `useSomeLibrary` to use in multiple components. Better to have more frequent failures than less frequent but unpredictable ones that cause people to lose faith in their understanding of the system as a whole.\r\n\r\n**How important is this feature to you?**\r\nIt's come up in the context of SvelteKit, where building fails in some cases because of this issue.\r\n",
    "closedAt": null,
    "createdAt": "2021-05-29T19:57:07Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTAzNzY0Mw==",
          "body": "> This won't prevent Rollup from attempting to bundle (or create chunks for) dynamic imports inside those callbacks...\r\n\r\nI actually think it might be sufficient. [Example on Rollup REPL](https://rollupjs.org/repl/?version=2.50.4&shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMiUyRiolMjBEWU5BTUlDJTIwSU1QT1JUUyU1Q24lMjAlMjAlMjBSb2xsdXAlMjBzdXBwb3J0cyUyMGF1dG9tYXRpYyUyMGNodW5raW5nJTIwYW5kJTIwbGF6eS1sb2FkaW5nJTVDbiUyMCUyMCUyMHZpYSUyMGR5bmFtaWMlMjBpbXBvcnRzJTIwdXRpbGl6aW5nJTIwdGhlJTIwaW1wb3J0JTIwbWVjaGFuaXNtJTVDbiUyMCUyMCUyMG9mJTIwdGhlJTIwaG9zdCUyMHN5c3RlbS4lMjAqJTJGJTVDbiU1Q25mdW5jdGlvbiUyMG5vb3AoYSklMjAlN0IlN0QlM0IlNUNuJTVDbm5vb3AoZnVuY3Rpb24oKSUyMCU3QiU1Q24lNUN0aW1wb3J0KCcuJTJGbWF0aHMuanMnKS50aGVuKGZ1bmN0aW9uJTIwKG1hdGhzKSUyMCU3QiU1Q24lNUN0JTVDdGNvbnNvbGUubG9nKG1hdGhzLnNxdWFyZSg1KSklM0IlNUNuJTVDdCU1Q3Rjb25zb2xlLmxvZyhtYXRocy5jdWJlKDUpKSUzQiU1Q24lNUN0JTdEKSUzQiU1Q24lN0QpJTNCJTIyJTJDJTIyaXNFbnRyeSUyMiUzQXRydWUlN0QlMkMlN0IlMjJuYW1lJTIyJTNBJTIybWF0aHMuanMlMjIlMkMlMjJjb2RlJTIyJTNBJTIyaW1wb3J0JTIwc3F1YXJlJTIwZnJvbSUyMCcuJTJGc3F1YXJlLmpzJyUzQiU1Q24lNUNuZXhwb3J0JTIwJTdCZGVmYXVsdCUyMGFzJTIwc3F1YXJlJTdEJTIwZnJvbSUyMCcuJTJGc3F1YXJlLmpzJyUzQiU1Q24lNUNuZXhwb3J0JTIwZnVuY3Rpb24lMjBjdWJlJTIwKHglMjApJTIwJTdCJTVDbiU1Q3RyZXR1cm4lMjBzcXVhcmUoeCklMjAqJTIweCUzQiU1Q24lN0QlMjIlMkMlMjJpc0VudHJ5JTIyJTNBZmFsc2UlN0QlMkMlN0IlMjJuYW1lJTIyJTNBJTIyc3F1YXJlLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmV4cG9ydCUyMGRlZmF1bHQlMjBmdW5jdGlvbiUyMHNxdWFyZSUyMCglMjB4JTIwKSUyMCU3QiU1Q24lNUN0cmV0dXJuJTIweCUyMColMjB4JTNCJTVDbiU3RCUyMiUyQyUyMmlzRW50cnklMjIlM0FmYWxzZSU3RCU1RCUyQyUyMm9wdGlvbnMlMjIlM0ElN0IlMjJmb3JtYXQlMjIlM0ElMjJlcyUyMiUyQyUyMm5hbWUlMjIlM0ElMjJteUJ1bmRsZSUyMiUyQyUyMmFtZCUyMiUzQSU3QiUyMmlkJTIyJTNBJTIyJTIyJTdEJTJDJTIyZ2xvYmFscyUyMiUzQSU3QiU3RCU3RCUyQyUyMmV4YW1wbGUlMjIlM0FudWxsJTdE)",
          "createdAt": "2021-05-30T17:59:09Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDY0ODk1NTY=",
    "body": "When working with TS and `Set`, for example `let list: Set<string> = new Set();`\r\nyou can't iterate over this list with `{#each}`. You always have to call it with `Array.from(list)`.\r\nI don't know if this is intended or not, but it would reduce the boilerplate if Svelte would do that for you, so you can simply call it with `{#each list as item}`.",
    "closedAt": "2021-05-29T15:39:00Z",
    "createdAt": "2021-05-29T14:53:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDg1MzAxNw==",
          "body": "Yea, according to the tutorial, it is expecting array / array-like object\r\n\r\nhttps://svelte.dev/tutorial/each-blocks\r\n\r\nyou could do `[...list]` or `Array.from(list)` too",
          "createdAt": "2021-05-29T15:39:00Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDg1NTA2NA==",
          "body": "Just because the tutorial says that, doesn't mean it can't be improved. That's the reason for this feature request (which btw doesn't set a proper label).",
          "createdAt": "2021-05-29T15:53:00Z",
          "author": { "login": "Zerotask", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDg2MDMyNA==",
          "body": "`{#each}` with iterables is something that's come up several times before. See #894 for why we're not excited about it.",
          "createdAt": "2021-05-29T16:27:30Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDU4MjY5OTA=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please \r\nI am doing a workshop from `FrontendMasters` but I change some code. \r\n\r\n### Reproduce code\r\nhttps://svelte.dev/repl/0dd98ba241924776b9ac43b938d07179?version=3.38.2\r\n\r\n### Real code\r\n```svelte\r\n<script>\r\n  import { createEventDispatcher, beforeUpdate } from 'svelte'\r\n  import type { Celeb } from \"src/types/celeb\";\r\n\r\n  type CardProps = {\r\n    celeb: Celeb\r\n    isShowPrice: boolean\r\n    isWinner: boolean\r\n  }\r\n  \r\n  // export let isShowPrice: boolean = false\r\n  // let { celeb , isWinner/*, isShowPrice*/ }: Partial<CardProps> = $$props\r\n  let { celeb , isWinner, isShowPrice }: Partial<CardProps> = $$props\r\n  const dispatcher = createEventDispatcher()\r\n  console.log('show price', isShowPrice)\r\n  beforeUpdate(() => console.log($$props))\r\n</script>\r\n\r\n<div class=\"card-outer\">\r\n  <h1>IS_SHOW_PRICE: {isShowPrice}</h1>\r\n  <button\r\n    class=\"card-inner\"\r\n    style=\"background-image: url({celeb.image});\"\r\n    on:click=\"{() => dispatcher('select')}\"\r\n  >\r\n    <div class=\"details\">\r\n      <h2>\r\n        <a\r\n          class=\"link\"\r\n          target=\"_blank\"\r\n          href=\"https://cameo.com/{celeb.id}\"\r\n          on:click|stopPropagation\r\n        >\r\n          {celeb.name}\r\n        </a>\r\n      </h2>\r\n      <p class=\"type\">{celeb.type}</p>\r\n    </div>\r\n  </button>\r\n</div>\r\n{#if isShowPrice}\r\n  <div class=\"price\" class:large={isWinner}>\r\n    <span>{celeb.price}$</span>\r\n  </div>\r\n{/if}\r\n```\r\n**Describe the bug**\r\nWhen state update and pass it to be the prop in child component... then that prop doesn't update.\r\nIn React when I write `const { prop } = props`.  \r\nWhen the prop update, component will re-render.\r\nBut `let { prop } = $$props` in Svelte is not.\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nAny prop which destructured from `$$props` should be updated.\r\n\r\n**Information about your Svelte project:**\r\nGenerate by Vitejs svelte-ts template\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\nChrome latest version\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\nWindows 10\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\nv. 3.37\r\n\r\n- Whether your project uses Webpack or Rollup\r\nI think Rollup, coz I generate by Vitejs\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\n#### UPDATE\r\nI get this code from my friend, It can re-render when prop update\r\n```svelte\r\n<script lang=\"ts\">\r\n  $: ({ celeb , isWinner, isShowPrice } = $$props)\r\n</script>\r\n```\r\n\r\nBut cannot write in Typescript like this...\r\n```svelte\r\n<script lang=\"ts\">\r\n  type CardProps = { ..................... }\r\n  $: ({ celeb , isWinner, isShowPrice }: Partial<CardProps> = $$props)\r\n</script>\r\n```\r\n\r\n### Syntax Error at line: 13\r\n\r\n![image](https://user-images.githubusercontent.com/19329932/120026342-20646600-c01c-11eb-9722-7465cd5f4788.png)\r\n",
    "closedAt": "2021-05-28T18:51:13Z",
    "createdAt": "2021-05-28T18:02:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDYwNDE4OQ==",
          "body": "It's intended that these not update.\n\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-05-28T18:51:11Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDUzMjM0NTE=",
    "body": "**Describe the bug**\r\nSite navigation broken due to [svelte-repl component](https://github.com/sveltejs/svelte-repl)\r\n\r\n**To Reproduce**\r\n1. Throw your mouse away.\r\n2. Go to [svelte.dev](https://svelte.dev/).\r\n3. Try to reach any interactive element such a navigation link.\r\n\r\n**Expected behavior**\r\nI could reach every (or at least header navigation) interactive element\r\n\r\n**Severity**\r\nWhole site keyboard navigation broken. You can use mouse only in this case.\r\n\r\n**Additional context**\r\n[sveltejs/svelte-repl/issues/163](https://github.com/sveltejs/svelte-repl/issues/163)\r\n\r\nIf you still want to support this feature (spaces appear by pressing tab):\r\n1. Work on component. Improve it.\r\n2. Some site workaround. For example how google does:\r\n(go to https://www.google.com/search?q=test and press tab once)\r\n![image](https://user-images.githubusercontent.com/49815452/119984129-76b0b500-bfda-11eb-9d1c-2a1792c1c86b.png)",
    "closedAt": null,
    "createdAt": "2021-05-28T12:34:17Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTI2MDAwNQ==",
          "body": "label: Site: REPL?",
          "createdAt": "2021-06-05T16:03:09Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1ODAxNjczMg==",
          "body": "Is this an issue? I tried to navigate on svelte.dev just using `TAB` and I walkthrough `logo` - each of `nav links` - `chat icon` - `github icon` - `write less code` - etc...\r\nHad no issues navigating without a mouse.\r\n\r\nUsing Chrome Version 91.0.4472.77 (Official Build) (arm64)\r\n\r\nHere's a gif showcasing my experience\r\n![svelteNavigationWithTab](https://user-images.githubusercontent.com/30603437/121414854-04878b00-c95f-11eb-92cc-4a406305ec0b.gif)",
          "createdAt": "2021-06-09T19:09:44Z",
          "author": { "login": "ItzaMi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1ODExNDExNg==",
          "body": "I think it depends on when the REPL fully loads. I'm seeing different behavior based on how far it is below the fold (e.g. with varying window size). Once the `<textarea>` with the positive tabindex is rendered, that will be the first item to receive focus on the page. In addition, since the REPL doesn't let you escape using only the keyboard, a keyboard-only user cannot explore the rest of the homepage.\r\n\r\nHere's a gif of my experience, also in Chrome 91. I enter the address in the address bar, tab once, and my focus is inside the REPL.\r\n\r\n![svelte-focus](https://user-images.githubusercontent.com/4992896/121431501-55cb5680-c92e-11eb-806e-105bae1c679c.gif)\r\n",
          "createdAt": "2021-06-09T21:27:01Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDQ5Mzk4Nzc=",
    "body": "**Describe the bug**\r\nWhen using `position: sticky` CSS, the position  becomes *unfixed* when you open a Select element on iOS, and the page moves as well. Not sure why Svelte issue, but it seems to be related somehow.\r\n\r\n**To Reproduce**\r\n[Code SandBox Example here](https://2zfv5.csb.app)\r\n\r\n**Expected behavior**\r\nPage should not move up, and div that has `position: sticky` should remain *fixed*\r\n\r\n**Information about your Svelte project:**\r\nBrowser: Latest Safari\r\nOperating system: iOS (that exhibits the bug)\r\nSvelte version: latest\r\n\r\n**Severity**\r\nVery important to keep position behavior when a select element is open, otherwise it ruins the navbar and the entire user experience.",
    "closedAt": "2021-05-28T09:02:08Z",
    "createdAt": "2021-05-28T08:27:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDI2ODM2OQ==",
          "body": "It appears that this may not actually be a Svelte issue after all",
          "createdAt": "2021-05-28T09:02:08Z",
          "author": { "login": "saturnonearth", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDQxNDYxMzk=",
    "body": "This issue tracker is intended to collect bug reports and feature requests.\r\n\r\nFor help with installation, information on how features work, or questions about specific features of Svelte, please come and join us in the [Svelte Discord](https://svelte.dev/chat), or ask your question on [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte). Any issues open for help requests will be closed to keep from clogging up the issue tracker.\r\n\r\nI have a set up to animate between two blocks, one of them is an if block. Rather than show you the problem, I have recreated it by editing the animation example to make things simpler.\r\n\r\nOriginal: https://svelte.dev/tutorial/animate\r\n\r\nNew:  (Style not included)\r\n```\r\n<script>\r\n\timport { quintOut } from 'svelte/easing';\r\n\timport { crossfade } from 'svelte/transition';\r\n\r\n\tconst [send, receive] = crossfade({\r\n\t\tduration: d => Math.sqrt(d * 200),\r\n\r\n\t\tfallback(node, params) {\r\n\t\t\tconst style = getComputedStyle(node);\r\n\t\t\tconst transform = style.transform === 'none' ? '' : style.transform;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tduration: 600,\r\n\t\t\t\teasing: quintOut,\r\n\t\t\t\tcss: t => `\r\n\t\t\t\t\ttransform: ${transform} scale(${t});\r\n\t\t\t\t\topacity: ${t}\r\n\t\t\t\t`\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\tlet uid = 1;\r\n\r\n\tlet todos = [\r\n\t\t{ id: uid++, done: false, description: 'write some docs' },\r\n\t\t{ id: uid++, done: false, description: 'start writing blog post' },\r\n\t\t{ id: uid++, done: true,  description: 'buy some milk' },\r\n\t\t{ id: uid++, done: false, description: 'mow the lawn' },\r\n\t\t{ id: uid++, done: false, description: 'feed the turtle' },\r\n\t\t{ id: uid++, done: false, description: 'fix some bugs' },\r\n\t];\r\n\r\n\tfunction add(input) {\r\n\t\tconst todo = {\r\n\t\t\tid: uid++,\r\n\t\t\tdone: false,\r\n\t\t\tdescription: input.value\r\n\t\t};\r\n\r\n\t\ttodos = [todo, ...todos];\r\n\t\tinput.value = '';\r\n\t}\r\n\r\n\tfunction remove(todo) {\r\n\t\ttodos = todos.filter(t => t !== todo);\r\n\t}\r\n\r\n\tfunction mark(todo, done) {\r\n\t\tconsole.log(88);\r\n\t\tif (done) {\r\n\t\t\tif(todos.filter(t => t.done)) {\r\n\t\t\t\tconst toot = todos.filter(t => t.done)[0];\r\n\t\t\t\tif (toot) mark(toot, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\ttodo.done = done;\r\n\t\tremove(todo);\r\n\t\ttodos = todos.concat(todo);\r\n\t}\r\n\t\r\n\tlet useTodo;\r\n\t$: useTodo = todos.find(t => t.done);\r\n</script>\r\n\r\n<div class='board'>\r\n\t<input\r\n\t\tplaceholder=\"what needs to be done?\"\r\n\t\ton:keydown={e => e.key === 'Enter' && add(e.target)}\r\n\t>\r\n\r\n\t<div class='left'>\r\n\t\t<h2>todo</h2>\r\n\t\t{#each todos.filter(t => !t.done) as todo (todo.id)}\r\n\t\t\t<label\r\n\t\t\t\tin:receive=\"{{key: todo.id}}\"\r\n\t\t\t\tout:send=\"{{key: todo.id}}\"\r\n\t\t\t>\r\n\t\t\t\t<input type=checkbox on:change={() => mark(todo, true)}>\r\n\t\t\t\t{todo.description}\r\n\t\t\t\t<button on:click=\"{() => remove(todo)}\">remove</button>\r\n\t\t\t</label>\r\n\t\t{/each}\r\n\t</div>\r\n\r\n\t<div class='right'>\r\n\t\t<h2>done</h2>\r\n\t\t{#if useTodo}\r\n\t\t\t<label\r\n\t\t\t\tclass=\"done\"\r\n\t\t\t\tin:receive=\"{{key: useTodo.id}}\"\r\n\t\t\t\tout:send=\"{{key: useTodo.id}}\"\r\n\t\t\t>\r\n\t\t\t\t<input type=checkbox checked on:change={() => mark(useTodo, false)}>\r\n\t\t\t\t{useTodo.description}\r\n\t\t\t\t<button on:click=\"{() => remove(useTodo)}\">remove</button>\r\n\t\t\t</label>\r\n\t\t{/if}\r\n\t</div>\r\n</div>\r\n```\r\n\r\nThe key difference is, there can only be one \"Done\" todo. In my mind, if statements should be able to function in animations, just like each blocks do. Is it possible to make this work? (without using a dummy array and each block). I would have thought the fact that the animated elements (`label`s) are given keys with the animations should be enough to allow the animation to happen?\r\n\r\nThe animation just ends up going to the fallback",
    "closedAt": null,
    "createdAt": "2021-05-27T20:12:10Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDI5MTM4NjM=",
    "body": "**Describe the bug**\r\nA string variable cannot contain `</script>`\r\n\r\n**Logs**\r\n> Unterminated string constant (2:12)\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/e676274f079741ccb837bdcaa0cef7c0?version=3.38.2\r\n\r\n**Additional context**\r\nI'm trying to use Svelte SSR to render an HTML page with script tags.\r\n",
    "closedAt": "2021-05-26T23:07:24Z",
    "createdAt": "2021-05-26T21:02:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTE3NzMzNg==",
          "body": "This is a duplicate of https://github.com/sveltejs/svelte/issues/3039 / https://github.com/sveltejs/svelte/issues/3840 / https://github.com/sveltejs/svelte/issues/4406 / https://github.com/sveltejs/svelte/issues/4996 / https://github.com/sveltejs/svelte/issues/5024 / https://github.com/sveltejs/svelte/issues/5237 / https://github.com/sveltejs/rollup-plugin-svelte/issues/133 / https://github.com/sveltejs/svelte/issues/5810 / https://github.com/sveltejs/rollup-plugin-svelte/issues/182 / #6203 / maybe others, and is not a bug. This is how parsing inline script tags works in HTML.",
          "createdAt": "2021-05-26T23:07:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDI4MDk0MjU=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\n**Describe the bug**\r\nTyping object properties as `SvelteComponent` or `SvelteComponentTyped` doesn't seem to work. \r\n\r\nExample:\r\n```ts\r\nimport AComponent from './AComponent.svelte';\r\n\r\ntype MyType = {\r\n  [key: string]: any; // just an example\r\n}\r\n\r\ntype IWantToAcceptAComponent<T> = {\r\n  component: SvelteComponentTyped<{ record: T }>;\r\n}\r\n\r\nconst componentPropObject: IWantToAcceptAComponent<MyType> = {\r\n  component: AComponent // error here\r\n}\r\n```\r\n\r\n```\r\nError: Type 'typeof AComponent__SvelteComponent_' is missing the following properties from type \r\n'SvelteComponentTyped<{ record: MyType; }>': $set, $on, $destroy, $$prop_def, and 5 \r\nmore.ts(2740)\r\n```\r\n\r\nI've asked around Discord and posted [a similar question on StackOverflow](https://stackoverflow.com/questions/67697298/svelte-components-as-object-properties/67703321#67703321), but I can't figure out how to type this.\r\n\r\nI've also tried:\r\n```ts\r\n// Doesn't even work from a typing perspective \r\n// All sorts of ___ only refers to a type but is being used as a value here errors\r\ntype IWantToAcceptAComponent<T> = {\r\n  component: typeof SvelteComponentTyped<{ record: T }>;\r\n}\r\n\r\n// Doesn't work when trying to assign `AComponent` to an object property of this type\r\ntype IWantToAcceptAComponent<T> = {\r\n  component: typeof SvelteComponent;\r\n}\r\n```\r\n\r\nHere's my tsconfig, just in case:\r\n```json\r\n{\r\n\t\"compilerOptions\": {\r\n\t\t\"strict\": true,\r\n\t\t\"moduleResolution\": \"node\",\r\n\t\t\"module\": \"es2020\",\r\n\t\t\"lib\": [\"es2020\"],\r\n\t\t\"target\": \"es2019\",\r\n\t\t/**\r\n\t\t\tsvelte-preprocess cannot figure out whether you have a value or a type, so tell TypeScript\r\n\t\t\tto enforce using \\`import type\\` instead of \\`import\\` for Types.\r\n\t\t\t*/\r\n\t\t\"importsNotUsedAsValues\": \"error\",\r\n\t\t\"isolatedModules\": true,\r\n\t\t\"resolveJsonModule\": true,\r\n\t\t/**\r\n\t\t\tTo have warnings/errors of the Svelte compiler at the correct position,\r\n\t\t\tenable source maps by default.\r\n\t\t\t*/\r\n\t\t\"sourceMap\": true,\r\n\t\t\"esModuleInterop\": true,\r\n\t\t\"skipLibCheck\": true,\r\n\t\t\"forceConsistentCasingInFileNames\": true,\r\n\t\t\"baseUrl\": \".\",\r\n\t\t\"allowJs\": true,\r\n\t\t\"checkJs\": true,\r\n\t\t\"paths\": {\r\n\t\t\t\"$lib/*\": [\"src/lib/*\"],\r\n\t\t\t\"$static/*\": [\"src/static/*\"]\r\n\t\t}\r\n\t},\r\n\t\"include\": [\"src/**/*.d.ts\", \"src/**/*.js\", \"src/**/*.ts\", \"src/**/*.svelte\"]\r\n}\r\n\r\n```\r\n\r\n\r\n**Expected behavior**\r\nSome way to at least represent through TypeScript types what kind of component I'm looking for in the property.\r\n\r\n**Severity**\r\nGamebreaker from a typing perspective, though typing it as \"any\" works just fine.\r\n",
    "closedAt": "2021-05-28T10:26:43Z",
    "createdAt": "2021-05-26T18:59:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTM1OTEzNA==",
          "body": "One part is that you didn't type it so that TypeScript is happy with it, which is hard in this case though. The other problem is that there are some minor inconsistencies with the typings of the IDE intellisense and Svelte which have to be resolved. Once that's the case I'll get back to you on stack overflow where you asked this first.",
          "createdAt": "2021-05-27T06:18:34Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTg4ODc3NQ==",
          "body": "Thanks @dummdidumm -- I've been going crazy with this. I had actually read several comments from you on other StackOverflow posts (and issues in this repo), and none of the advice was working... glad to see it's not a me problem. If there's any contribution I can make to help with this, let me know -- happy to work up a pull request if it's not something crazy complicated.",
          "createdAt": "2021-05-27T19:37:05Z",
          "author": { "login": "tcc-sejohnson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDMxOTczMQ==",
          "body": "[Answer here](https://stackoverflow.com/a/67737182/10196188)",
          "createdAt": "2021-05-28T10:26:43Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDE0NTYwNDM=",
    "body": "**Describe the bug**\r\nI played around with the [Animations](https://svelte.dev/repl/f2ba3adfe6cf49a58a38540530567354?version=3.38.2) example from Svelte Society's [Cheatsheet](https://sveltesociety.dev/cheatsheet) and I noticed a flickering in the animation. It seems the animation starts, and only after it started it applies the delay causing it to stop again.\r\n\r\n\r\nhttps://user-images.githubusercontent.com/33468089/119577103-4985bc00-bdba-11eb-979c-98c413178cfc.mov\r\n\r\nIf the delay is deleted, the jitter is gone.\r\n\r\nhttps://user-images.githubusercontent.com/33468089/119577133-560a1480-bdba-11eb-8b95-44f774cf0ef6.mov\r\n\r\n\r\n\r\n**To Reproduce**\r\n1. Open [Animations](https://svelte.dev/repl/f2ba3adfe6cf49a58a38540530567354?version=3.38.2).\r\n2. Click \"Cycle\". Notice the flickering.\r\n3. Delete the delay in L9.\r\n4. Click \"Cycle\". Notice the flickering is gone.\r\n\r\n**Expected behavior**\r\nNo flickering.\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Browser: Chrome 90.0\r\n- OS: macOS 11.4\r\n- Svelte version: 3.38.2",
    "closedAt": null,
    "createdAt": "2021-05-25T22:36:58Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTY5OTU3NA==",
          "body": "I'm having trouble seeing the bug\r\n\r\nChrome 90.0 macOS 10.14\r\n\r\n\r\nhttps://user-images.githubusercontent.com/20071081/119847797-48977c00-bed9-11eb-993a-cd7e8f6becb9.mov\r\n\r\n",
          "createdAt": "2021-05-27T14:50:07Z",
          "author": { "login": "iltimasd", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTk2NjcyMg==",
          "body": "Thanks for the info. Can confirm that Safari and Firefox work fine, and also Chrome Dev (92). But I can still reproduce it in Chrome (91), both in normal and in Incognito Mode. That's weird.",
          "createdAt": "2021-05-27T21:53:45Z",
          "author": { "login": "vwkd", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjM0MTI5NQ==",
          "body": "Do you have a REPL repro for this?",
          "createdAt": "2021-06-01T18:13:00Z",
          "author": { "login": "iltimasd", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjM2MTk4Mg==",
          "body": "@iltimasd I used the unmodified example. See above Steps to Reproduce.",
          "createdAt": "2021-06-01T18:46:58Z",
          "author": { "login": "vwkd", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDEzMjUxNzM=",
    "body": "\r\n**Describe the bug**\r\nApologies for the long title! I'm having problems with a component not destroying and persisting when being #key'd out if the mouse is over an item that has an out transition AND has an inline on:mouse* function that changes a locally scoped variable. If any of these weirdly specific conditions aren't met then the component will re-key properly. There are no error messages about component not destroying.\r\n\r\n\r\n**To Reproduce**\r\nIn this REPL, there is a menu. The menu displays an array of values. When a mouse click is triggered from anywhere on the page, the array of values is reassigned, triggering the #key block. The expected behavior is that menu is destroyed and will \"rebuild\" the menu with new values, however this bug makes it so that the DOM elements still persist.\r\n\r\nI'd like to emphasize the fact the the triggering of the key block happens when you click anywhere within the window. If you click in the window (but not over the component), the rebuilding happens as expected. However if you click on the menu (and thus trigger the mouseout handler), we run into the bug.\r\n\r\n[REPL](https://svelte.dev/repl/26fc0a1787d04d4b993eca8b223c2ad5?version=3.38.2\r\n)\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\nMedium. My work around is to extract the inline function to be scoped within the component, and then call that function in the inline handler. Not aware of any patterns where the assignment MUST happen at the inline function. That all being said, I believe this to be an unexpected behavior and that the conditions outlined above should not result in broken component lifecycles.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\nI imagine that this is related to #6150 and #6152. Like #6150, the bug is specifically for the out directive, in the above repl ive kept it as a transition to make the state change more visually obvious. I believe there are distinctions that may help narrow the cause if the bug (if it isnt already known) as #6150 pertains to #each block, and #6152 lacks the inline function aspect of this issue.\r\n",
    "closedAt": null,
    "createdAt": "2021-05-25T20:24:22Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTg2NjA3MA==",
          "body": "I also am seeing something like this.  It appears that when the transition animations don't have time to finish before the destroy handler is called, they stick around in the DOM.  I can even replicate it to get multiple instances of the component to stick around by quickly using a radio button that changes my <svelte:component this={Foo}>.  If I leave them for a little longer to finish animating before clicking the radio button, they unmount properly.\r\n\r\nThere's only one <svelte:component> in the markup, but many nodes get stuck in the DOM (the ones that have animation styles that say \"running\"):\r\n![image](https://user-images.githubusercontent.com/65916939/120278631-830b6b00-c283-11eb-950e-d8a6e3fc554f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/65916939/120278802-b948ea80-c283-11eb-9504-b2bbbd898302.png)\r\n\r\nIt's pretty easy to miss these if you're not using something like a Grid layout that depends on the number of children within the grid.  The nodes appear empty on screen, but can still compose part of a layout, like grid-items.\r\n",
          "createdAt": "2021-06-01T06:43:30Z",
          "author": { "login": "jrmoynihan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MjM0MDE4Nw==",
          "body": "Do you have a REPL for this? It would be nice to compare the different instantiations of DOM nodes persisting. Hard to say now that they all are or aren't related.\r\n\r\nLike my particular problem is more or less solved when moving the inline function to a locally scoped function call -- regardless of how fast the interaction happens. ",
          "createdAt": "2021-06-01T18:11:19Z",
          "author": { "login": "iltimasd", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU5MDAzNzEzODE=",
    "body": "--- Last few GCs --->\r\n\r\n[17512:000001D9C1515980]   245284 ms: Scavenge 2027.8 (2075.4) -> 2023.5 (2076.1) MB, 5.5 / 0.0 ms  (average mu = 0.796, current mu = 0.167) allocation failure\r\n[17512:000001D9C1515980]   245298 ms: Scavenge 2029.0 (2076.1) -> 2025.5 (2079.1) MB, 5.3 / 0.0 ms  (average mu = 0.796, current mu = 0.167) allocation failure\r\n[17512:000001D9C1515980]   245657 ms: Scavenge 2031.5 (2079.1) -> 2027.6 (2096.4) MB, 350.9 / 0.0 ms  (average mu = 0.796, current mu = 0.167) allocation failure \r\n\r\n\r\n<--- JS stacktrace --->\r\n\r\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\r\n 1: 00007FF77F069B3F v8::internal::Isolate::ArchiveSpacePerThread+4719\r\n 2: 00007FF77EFFC426 v8::internal::wasm::WasmCode::safepoint_table_offset+67126\r\n 3: 00007FF77EFFD3CB node::OnFatalError+491\r\n 4: 00007FF77F976F2E v8::Isolate::ReportExternalAllocationLimitReached+94\r\n 5: 00007FF77F95DECD v8::SharedArrayBuffer::Externalize+781\r\n 6: 00007FF77F7DE50C v8::internal::Heap::EphemeronKeyWriteBarrierFromCode+1452\r\n 7: 00007FF77F7DB9EB v8::internal::Heap::CollectGarbage+3675\r\n 8: 00007FF77F7D94E5 v8::internal::Heap::AllocateExternalBackingStore+1653\r\n 9: 00007FF77F7FCC01 v8::internal::Factory::NewFillerObject+209\r\n10: 00007FF77F51090A v8::internal::DateCache::Weekday+1386\r\n11: 00007FF77F9FE5E1 v8::internal::SetupIsolateDelegate::SetupHeap+463121\r\n12: 00007FF77F9E51E4 v8::internal::SetupIsolateDelegate::SetupHeap+359700\r\n13: 00000371B4431277\r\n",
    "closedAt": "2021-05-25T07:55:25Z",
    "createdAt": "2021-05-25T07:07:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NzY0MDA1Mw==",
          "body": "This is extremely likely to be environmental, and no one is going to be able to help anyway if you don't give a project that it's failing for. Perhaps, as the messages suggest, you are simply out of memory.\n\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat). But provide them more information than you've given here.",
          "createdAt": "2021-05-25T07:55:23Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTk2Njk5NzQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI have a virtual list component `VirtualList` where it takes a little time to load each item, so that this effect is quite prevalent when scrolling:\r\n\r\nhttps://user-images.githubusercontent.com/11315492/119281916-e10ed180-bc37-11eb-8c94-b456c9b36e5e.mp4\r\n\r\nI imagine the issue here is that whenever a new item becomes visible, all visible items are re-rendered.\r\n\r\n**Describe the solution you'd like**\r\nThe fastest virtual list I've seen is VSCode's. It works by appending new elements to the view without being concerned about what order they're in, and positioning them using `position: absolute`:\r\n<img width=\"444\" alt=\"Screen Shot 2021-05-24 at 2 41 01 AM\" src=\"https://user-images.githubusercontent.com/11315492/119282328-95f5be00-bc39-11eb-83b0-67a3457c9a1d.png\">\r\n\r\nThe best way I can see to accomplish this is to be able to manually mount Svelte slots from JS.\r\n\r\nAnother possible solution would be to have an `#each` block where you could add or remove items without re-rendering any items.\r\n\r\n**Describe alternatives you've considered**\r\n1. Mounting the child components manually, instead of using slots. Should be possible, but I believe it would make it significantly more complicated to interact between the `Container` component and the `Item` components (keyboard events, drag-and-drop events, row selection), as well as sharing styles between them. Keeping slots would be great.\r\n2. I could make a big soup of a Svelte component that includes both the container and the virtual list logic\r\n3. Tried using `<svelte:options immutable/>`, but doesn't seem like something that would work here.\r\n\r\n**How important is this feature to you?**\r\nQuite important, but I understand it's an edge case.",
    "closedAt": null,
    "createdAt": "2021-05-24T13:40:36Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NzMyNTI5MQ==",
          "body": "How much faster is it implementing vitual scrolling with this technique ? If it is significantly faster then this might be worth pursuing IMO. ",
          "createdAt": "2021-05-24T20:50:03Z",
          "author": { "login": "johnoscott", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NzQzNDU4NA==",
          "body": "@johnoscott Definitely a noticeable difference. I've found this effect in pretty much every virtual list I've seen, but never once in VSCode.",
          "createdAt": "2021-05-25T00:06:29Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDMxMTA1OQ==",
          "body": "> I imagine the issue here is that whenever a new item becomes visible, all visible items are re-rendered.\r\n\r\nThat depends entirely on the implementation. I've been able to create incredibly smooth virtual scrolling for fixed height items. It's definitely possible with Svelte. Could you share an absolute minimal REPL?\r\n\r\n> It works by appending new elements to the view without being concerned about what order they're in, and positioning them using `position: absolute`:\r\n\r\nFrom the screenshot I don't think that description is accurate. The order very much matters. I think it never appends new elements. It intelligently re-uses items and put them back at the top/bottom when they leave the viewport. That's absolutely possible with Svelte and just a matter of intelligently shifting your array slice. If you look at the value of `top` it's sequential (increments of 18) but it simply wraps around.",
          "createdAt": "2021-05-28T10:11:35Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDQxNjkxOQ==",
          "body": "> That depends entirely on the implementation. I've been able to create incredibly smooth virtual scrolling for fixed height items. It's definitely possible with Svelte. Could you share an absolute minimal REPL?\r\n\r\n@Prinzhorn Haven't seen a single Svelte virtual list without this. Here are the first 3 I found on Google:\r\n- https://svelte.dev/repl/f78ddd84a1a540a9a40512df39ef751b?version=3.38.2\r\n- https://svelte.dev/repl/1c36db7c1e7e4ef2bfb04874321412e5?version=3.38.2\r\n- https://svelte.dev/repl/41505d0e3d824da49cb4ba41af734fa0?version=3.38.2\r\n\r\n> From the screenshot I don't think that description is accurate. The order very much matters. I think it never appends new elements. It intelligently re-uses items and put them back at the top/bottom when they leave the viewport. That's absolutely possible with Svelte and just a matter of intelligently shifting your array slice. If you look at the value of top it's sequential (increments of 18) but it simply wraps around.\r\n\r\nHere's a screenrecording showing that it does add and remove elements when you scroll:\r\n\r\nhttps://user-images.githubusercontent.com/11315492/119990489-abb40c00-bfc8-11eb-81d9-911d2b5642d9.mp4\r\n\r\n",
          "createdAt": "2021-05-28T13:24:37Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDU3NjI3OA==",
          "body": "I'll take this back partially. It seems to depend on the browser and I don't know if manually mounting slots changes _anything_ about that. Updating things while scrolling has always had slight delays on certain browsers. The only thing you can do is have enough leeway (additional items at the top and bottom outside the viewport) so that it is not noticeable any longer.\r\n\r\nVSCode (or [monaco](https://github.com/Microsoft/monaco-editor) rather) does not count, because it's entirely virtual (the scrollbar is not native, so they can control the rendering 100%). You can see that the parent of those items is moved as well to achieve the actual scrolling. It's also stepped scrolling, not smooth scrolling. So way less updates.\r\n\r\nHere's a video of my implementation that re-uses items. In Firefox (video) there is slight delay of rendering new items. In Chromium it's super smooth.\r\n\r\nhttps://user-images.githubusercontent.com/679144/120022934-62c27e80-bfed-11eb-8ad8-6796cff26d47.mp4\r\n\r\n",
          "createdAt": "2021-05-28T17:51:11Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDY2MDQ5OA==",
          "body": "@Prinzhorn Ah, I see that VSCode doesn't use normal scrolling, good observation. Adding a buffer does indeed help quite a bit, but only partially (had tried that before opening this issue). For simple lists, using a buffer should be fine.\r\n\r\nHow did you go about implementing that? I've only tested this on Chromium, so if you say it's super smooth then that's promising for sure.",
          "createdAt": "2021-05-28T20:43:32Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTkyMTI0MDA=",
    "body": "Are you thinking about the possibility of passing the css variables as 'spread'?\r\n\r\nSee example below:\r\n\r\n```svelte\r\n<script>\r\n  import {Btn} from '@tadashi/svelte-btn@3.0.1'\r\n\r\n  const themeCssVars = {\r\n    '--tadashi_svelte_btn_background_color': 'hsl(0deg 0% 100%)',\r\n    '--tadashi_svelte_btn_color': 'hsl(0deg 0% 0%)'\r\n  }\r\n</script>\r\n\r\n<Btn {...themeCssVars}>spread css vars</Btn>\r\n```",
    "closedAt": "2021-05-24T03:54:26Z",
    "createdAt": "2021-05-24T03:41:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcxMzQ5OA==",
          "body": "I don't think so, no. This would result in extra compiled code for everyone, even if they didn't use this feature. If you need this, you can just use the wrapping div that  the CSS prop syntax is sugar for.",
          "createdAt": "2021-05-24T03:54:23Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcyMDUwNA==",
          "body": "Workaround done! 😁 \r\n\r\nA solution for anyone with the same problem.\r\n\r\n```svelte\r\n<script>\r\n  import {Btn} from '@tadashi/svelte-btn@3.0.1'\r\n\r\n  function obj2style(obj) {\r\n    const style = new Set()\r\n    for (const [k, v] of Object.entries(obj)) {\r\n      style.add(`${k}: ${v}`)\r\n    }\r\n    return [...style].join(';')\r\n  }\r\n\r\n  const themeCssVars = {\r\n    '--tadashi_svelte_btn_background_color': 'hsl(0deg 0% 100%)',\r\n    '--tadashi_svelte_btn_color': 'hsl(0deg 0% 0%)'\r\n  }\r\n\r\n  const style = obj2style(themeCssVars)\r\n</script>\r\n\r\n<Btn {style}>workaround</Btn>\r\n```",
          "createdAt": "2021-05-24T04:18:32Z",
          "author": { "login": "lagden", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTkxNjcxNDY=",
    "body": "**Tl;dr: I think the demo isn't illustrating the potential for bugs (and consequently, the need for Keys).** Also the text is a little vague.\r\n\r\n## Problem\r\n\r\nSvelte's [Tutorial page for Keyed Each Blocks](https://svelte.dev/tutorial/keyed-each-blocks) was quite a challenge to parse, and I’m coming from React and Vue, where Keys are already a familiar concept. I genuinely thought the Svelte tutorial was trying to describe some other issue. I suspect that somebody using Svelte as their first framework would be confused too.   \r\n\r\n### Demo\r\n\r\nThe tutorial states that “It’s much easier to show why than to explain”, which I agree with. But the demo actually is not great at showing the bug, and here’s why I think that is:\r\n\r\n1. When the learner first sees the demo and clicks the “Remove first thing” button, it’s not clear what the “app” is meant to do. There are several rows of coloured blocks that shift up and down, with ambiguous labels. This might be desired behaviour.\r\n2. The colours can be a little confusing to compare, even if you have full colour vision. It’s not immediately clear that “deep pink” and “salmon” are wrong together.\r\n3. The colours also don’t have a clear sequence, which means that it’s not immediately clear what element (first, last, middle?) is being removed when the learner clicks the button. They have to memorize the order to observe that the first Thing component and last DOM node are being removed.\r\n4. The learner also has to read the code to find the specific circumstances that trigger this bug: `Thing.svelte` initialises a variable with the value of the “color” prop at first rendering, and that variable becomes mismatched with the new props. The tutorial text doesn’t mention this. This would be fine except the variable names (“initial”, “current”) are somewhat vague, so it’s not clear from reading the code either.\r\n\r\nAs devs, we know that bug fixing goes best when the bug ticket clearly describes an Expected Behaviour in contrast to the Observed Behaviour, unless it’s abundantly clear already.\r\n\r\nI think to show the bug to the learner, we either need a clearly described “Expected Behaviour”, or make it abundantly clear in an intuitive way, which is what I’d like to do in a PR for this issue.\r\n\r\n### Tutorial Text\r\n\r\nIt could be argued that the Tutorial Text should be extensively updated to explain why Keys work at length (DOM node identity etc). In general, though, I’d prefer not to weigh the text down. I like the sleek, concise tone of the Svelte tutorial. Rather than bloat the text, I think that making a more illustrative demo and increasing code readability will help the learner immediately grasp what should be happening. It could be helpful to link to a more in-depth explanation in the Svelte Docs, like the [Vue docs do](https://v3.vuejs.org/guide/migration/key-attribute.html#background), for first-time framework users who want to know why Keys fix the problem. \r\n\r\nFor the moment, though, I think the text is missing:\r\n* A reference to DOM nodes being mismatched with their associated Svelte components\r\n* A reference to the actual word “key”, since [that is how it’s referred to in the API docs](https://svelte.dev/docs#each) \r\n* A reference to the derived variable that now doesn’t match the prop\r\n\r\n## Proposed Solutions\r\n\r\n* Make something closer to a real-world use case, so Expected Behaviour will be more intuitive. For example, deriving a variable from a prop by using a lookup, rather than directly reassigning it. \r\n* Use a clear sequence of objects (e.g. alphabetized words)\r\n* Make an intuitive match between the prop and the derived variable, so the bug looks like clearly “undesired behaviour” (e.g. a word and the corresponding emoji)\r\n* Add the minimum amount of text to the Tutorial text to explain the bug and why Keys fix it.\r\n",
    "closedAt": "2021-05-29T17:31:11Z",
    "createdAt": "2021-05-24T01:30:43Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTg3OTExMzY=",
    "body": "Currently `onDestroy` callbacks are run after outros are finished. This is not always desirable.\r\n\r\nIn my current situation I have a `onMount/onDestroy` callback managing a class on the body that handles some auxiliary styles. I would like to remove this class before the outro finishes.\r\n\r\nI propose an optional parameter indicating whether or not to wait for outros.\r\n```onDestroy(callback: () => void, waitForOutros?: boolean)```\r\n\r\nAn alternative could be a `onBeforeDestroy` callback.",
    "closedAt": "2021-05-24T06:08:22Z",
    "createdAt": "2021-05-22T12:16:04Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjU5NjY1Nw==",
          "body": "I think it is possible for you to use the [transition event](https://svelte.dev/docs#Transition_events) on:outrostart instead of onDestroy.",
          "createdAt": "2021-05-23T17:22:43Z",
          "author": { "login": "joseDaKing", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTg0OTg5ODI=",
    "body": "**Describe the bug**\r\nIt's a hard to explain edge case but i'll give it a try :smile:. \r\n\r\nWhen you have a component in where you self assign an updated value like `$: selectedOptions = selectedOptions.sort(...)` it doesn't re-render the value if it's nested in another component. I provided a REPL to hopefully explain better what i mean.\r\n\r\n``` svelte\r\n<script>\r\n  export let selectedOptions = [];\r\n  \t \r\n  $: selectedOptions = selectedOptions.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n</script>\r\n```\r\n\r\n``` svelte\r\n<script>\r\n  let selectedOptions = [];\r\n  $: nSelected = selectedOptions.length;\r\n</script>\r\n\r\n<Modal>\r\n  <List bind:selectedOptions />\r\n\t\r\n  <!-- This does NOT work -->\r\n  <div>\r\n    {nSelected} items are in the list\r\n  </div>\r\n\t\r\n  <!-- But this does -->\r\n  <div>\r\n    {selectedOptions.length} items are in the list\r\n  </div>\r\n</Modal>\r\n```\r\n\r\n``` svelte\r\n<!-- it DOES NOT display the updated content correctly if it's nested in another component like so: -->\r\n<ModalContent>\r\n  <slot />\r\n</ModalContent>\r\n\r\n<!-- it displays the updated content correctly if it is NOT nested in another component like so: -->\r\n<div>\r\n  <slot/>\r\n</div>\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/43ab4974dd1b40d9afbfcd136cd2aa33?version=3.38.2\r\n\r\n**Expected behavior**\r\nRendering the updated value in a nested component properly.\r\n\r\n**Severity**\r\nIt's a super rare edge case which I stumbled upon but it might lead to other issues as well. Low severity.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": null,
    "createdAt": "2021-05-21T20:56:19Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTc3MzkxODY=",
    "body": "> _PS:  \r\n> I have gone through #2870 , #2888 ,  #5517 ,  #1808 and few others.  While the title of this issue is kind of generic, my query is different from them. Those questions discuss some way of accessing or passing styling the child inside the components, My query is about (for lack of better words) the components in use itself._\r\n\r\nTaking the [ContactCard](https://svelte.dev/examples#named-slots) example from official examples as baseline. Suppose I have 5 `<ContactCards>...</ContactCards>` in App.svelte. Having components gives me benefit of abstracting its structure. But now I want to position those cards on page. Something like this\r\n```svelte\r\n  <section> \r\n    <ContactCards>...</ContactCards>\r\n    <ContactCards>...</ContactCards>\r\n    <ContactCards>...</ContactCards>\r\n  </section> \r\n\r\n<style>\r\n    ContactCards {\r\n          display: inline-block;\r\n          margin: 1rem;\r\n          padding: 1rem;\r\n          border: 1px solid red;\r\n    }\r\n</style>\r\n```\r\nCurrently, I would have to wrap each CustomComponents inside an unnessary wrapper div and use that to position them, like this \r\n```\r\n<section>\r\n     <div class=\"contact-card\"> <ContactCards>... </ContactCards> </div>\r\n     <div class=\"contact-card\"> <ContactCards>... </ContactCards> </div>\r\n     <div class=\"contact-card\"> <ContactCards>... </ContactCards> </div>\r\n</section> \r\n<style>\r\n    .contact-card {\r\n          display: inline-block;\r\n          margin: 1rem;\r\n          padding: 1rem;\r\n          border: 1px solid red;\r\n    }\r\n</style>\r\n``` \r\nWhile in this simple case, It doesn't look so like an overhead which might cause problem, In my daily usage, it is causing a lot of trouble. I have created custom input elements like <Checkbox .. /> <Radio .. /> <Password .. /> <Text .. /> which not only abstracts it design (like having a \"key\" icon in password field) , but also some default functionality like client side check of password rules. The form submits perfectly when I just use it, but when I style their layout, app breaks unexpectedly. If I try to fix the script, It isn't a reusable anymore because of hardcoding stuffs into it. All my ideas for avoiding hardcoding will ultimately lead to overly exposing internal parameters and add unnecessary boilerplate for using the component. \r\n\r\nNow based on comments in #2870 and #1808 , There is currently no way of adding styles to the components itself, mostly because there is no guarantee of having single root node of component. And #2888 has been closed without merging, which in my case wouldn't be much better than having a wrapper outside the components. \r\n\r\nIs there some way which would be more suited for my case? Where I can manage css layout of components on the page ( not talking about passing styles inside components).  I have been svelte user for past 6-7 months only. All my custom components are expanded upon the stuffs taught by Tan Li Hau's youtube channel.\r\n\r\n",
    "closedAt": "2021-05-21T11:48:44Z",
    "createdAt": "2021-05-21T06:46:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTg4MzQxNQ==",
          "body": "FYI I sometimes wrap the component in the container div anyway just in case, but for many use cases I actually use a layout that doesn't require direct selectors. CSS Grid, flexbox, for example - they don't solve every use case of course and I've certainly found a few needs for what you mention, but in those occasions I now use `main :global(.component-wrapper-class)`. Your specific example can have the margin and display/layout part solved by flexbox/grid, but not the padding and border - depending on the use case and repeated use of this styling though, perhaps they are relevant as a component property in some way? (until a built-in component selector feature is added)",
          "createdAt": "2021-05-21T11:26:12Z",
          "author": { "login": "mbacon-edocs", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTg5NDg3Nw==",
          "body": "Closing as this is a usage question, which should be asked on StackOverflow, Reddit or Discord.\r\n\r\nIf you treat this as a feature request, then the answer is: There's no way to make this work with the way Svelte components are written. As you said yourself, Svelte components don't have to have a single root element, they even could have no element at all. That's why you either need to add a wrapping element yourself like you did (and if you repeat this just add another component which contains the component and the wrapper div), or add this wrapper element inside the card - and if that needs to be costumizable, you can pass properties for that, or css custom properties, or the `:global` hack.",
          "createdAt": "2021-05-21T11:48:44Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTY3NTQ2NjE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThere's no clear way to parse HTML strings and enrich it/substitute nodes for svelte components before its rendered. For example consuming CMS content (enriching links with `sveltekit:prefetch`, using svelte components for images/headings/etc, path resolving, etc).\r\n\r\n**Describe the solution you'd like**\r\nGiven that Svelte is so perfectly suited to lightweight websites, this might be something that would be worth supporting out of the box, maybe by extending/supplementing the `@html` render method, with one that gives the user access to the AST/whatever to modify before the compiler turns it into HTML.\r\n\r\n**Describe alternatives you've considered**\r\nSidestepping Svelte's inbuilt HTML rendering, and parsing a HTML string into an AST yourself, modifying it somehow, then using something like the tools in [MDSveX](https://github.com/pngwn/MDsveX) to turn it into a Svelte component to render.\r\n\r\n**How important is this feature to you?**\r\nReasonably important. Currently Svelte is very difficult to fully integrate with a CMS backend, which for us is by far the biggest use case vs React et al.\r\n",
    "closedAt": "2021-05-21T07:30:25Z",
    "createdAt": "2021-05-20T12:29:25Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTA3MDI5NA==",
          "body": "This sounds like a use case for [preprocessors](https://svelte.dev/docs#svelte_preprocess). Basically, before you hand off the file to the compiler, you can perform any kind of logic on the given input. If you are talking about doing this at runtime, then I'd say this is not possible, because since Svelte is a compiler, the Svelte code has to be compiled to JS code before arriving in the browser.",
          "createdAt": "2021-05-20T12:37:04Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTA3ODIzMQ==",
          "body": "Ah okay, there isn't a huge amount of documentation for preprocessors, but am I understanding it right if I just changed an incoming markup block from something like \r\n\r\n```html\r\n<h1>Title</h1>\r\n<p>Some text <a href=\"...\">link</a></p>\r\n```\r\n\r\nTo (assuming `Title` is imported in the right places)\r\n```html\r\n<Title>Title</Title>\r\n<p>Some text <a sveltekit:prefetch href=\"...\">link</a></p>\r\n```\r\n\r\nIt would be compiled correctly by Svelte? How about HTML strings rendered by `{@html content}`? I assume they're indistinguishable from component markup? In which case a preprocessor would need fragile markers of some sort added by the user to only apply it to HTML strings rather than component markup.\r\n\r\nIn any case maybe we could use some more documentation around preprocessors? This is a use-case I hadn't even considered using them for, and I'm familiar with them (at least as a user of them, if not an author of any)",
          "createdAt": "2021-05-20T12:44:14Z",
          "author": { "login": "madeleineostoja", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTEwNjc4Mg==",
          "body": "Yes, this is what you could do - assuming that you do these transformations at build time before handing the code off to the svelte compiler. So you could not do these transformations in the browser, because at that time it's already \"too late\". The Svelte Society site has a [recipe on writing preprocessors](https://sveltesociety.dev/recipes/build-setup/writing-your-own-preprocessors).\r\n\r\nHTML strings rendered by `@html` need to be simple HTML, they can't contain Svelte-specific things. This is the runtime-constraint I was talking about earlier.\r\n\r\nDoes this answer your questions or is there something left as an actual task? We are in general hesitant to add documentation like this to the official site because where do we draw the line on such recipe-like documentation if we start doing it?",
          "createdAt": "2021-05-20T13:10:56Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTUzMDA3Nw==",
          "body": "> HTML strings rendered by @html need to be simple HTML, they can't contain Svelte-specific things. This is the runtime-constraint I was talking about earlier.\r\n\r\nOkay so is `@html` rendered at runtime? Are the HTML strings it (pre)renders not accessible in a preprocessor? In that case a preprocessor isn't the answer to this use-case. And if those strings are available in a preprocessor then is there a way to target them specifically? If not then preprocessors also aren't an answer to this use-case, because we need a way to enrich 3rd party HTML / HTML strings, not component template markup as a blanket thing.\r\n\r\nExample\r\n\r\n```svelte\r\n<h1>Some component</>\r\n<article>\r\n  <!-- HTML content to enrich with Svelte actions/components/etc -->\r\n  {@html cmsContent}\r\n</article>\r\n```\r\n\r\nAs for documentation, totally understand not wanting to add recipes to the official docs (though maybe links out to those recipes/community resources would be good? Unless I missed that in the docs). Still though I'd argue the current `svelte.preprocess` docs are lacking. For example this very issue about how `@html` works in that context, and maybe I'm just dense but I didn't realise you could just pass back Svelte components/templates as strings and have them be rendered properly.",
          "createdAt": "2021-05-20T22:46:19Z",
          "author": { "login": "madeleineostoja", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTY5NTE0Mw==",
          "body": "It feels to me we are talking past each other a little. Preprocessing and compiling Svelte components needs to happen at build time, not at runtime. `@html` can be handed any string of html at runtime and it will render it accordingly, but Svelte specific things like components or actions or if statements cannot appear in it, or more precisely they are just treated as html, not as Svelte code. So the snippet you posted won't work.\r\n\r\nThat means you can't load your CMS code into the browser, preprocess and transform it to Svelte code, then compile it to JS and then run it ( well technically you might be able to, the REPL does this, but you surely don't want to load 5 MB of compiler code). These things need to happen at build time.\r\n\r\n**This works:**\r\nAt build time: Fetch CMS code -> preprocess to Svelte code -> compile with the Svelte compiler to either prerendered pages (html) or dynamic code (js) --> user goes to your site and gets the result\r\n\r\n**This doesn't work:**\r\nUser goes to your site -> CMS code is fetched from browser -> preprocess to Svelte code -> compile with the Svelte compiler to JS -> render result\r\n\r\n**This would work, if you need dynamic behavior:**\r\nWrite a Svelte library, which gets cms code in a more defined way, like JSON, and transforms this into a visual representation. Example:\r\n```svelte\r\n<script>\r\n  export let cmsCode; // = { heading: 'Foo', content: [{text: 'bar'}, {text: 'link', href: '..']}\r\n</script>\r\n\r\n<Heading>{cmsCode.heading}</Heading>\r\n{#each content as part}\r\n  {#if part.href}\r\n    <a href={part.href}>{part.text}</a>\r\n  {:else}\r\n    <span>{part.text}</span>\r\n  {/if}\r\n{/each}\r\n```\r\nAn alternative is to write the HTML code dynamically yourself an then pass it to `@html` like the Svelte site does it ([example how a blogpost.md file is transformed](https://github.com/sveltejs/svelte/blob/master/site/src/routes/blog/_posts.js))\r\n\r\nI'm going to close this since there isn't something actionable for the Svelte core repo, but feel free to continue to answer.",
          "createdAt": "2021-05-21T06:34:22Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTY0NDI2NTE=",
    "body": "**Describe the bug**\r\nI think creating a store without a start/stop notifier is totally valid for some special use cases (e.g. SSR friendly).\r\n\r\nI write a lot of things like this in my SvelteKit(`svelte@3.38.2`) app to make Typescript checker happy:\r\n\r\n```js\r\nfunction noop() {}\r\n\r\nexport const useMedia = (query: string) => {\r\n  if(!browser) {\r\n    return readable(false, noop); // 1\r\n  }\r\n  // Do something real here\r\n}\r\n\r\nexport const useWindowSize = ({initialWidth = Infinity, initialHeight = Infinity}) => {\r\n  if(!browser) {\r\n    return {\r\n      width: readable(initialWidth, noop), // 2\r\n      height: readable(initialHeight, noop), // 3\r\n    }; \r\n  }\r\n  // Do something real here\r\n}\r\n```\r\n**Expected behavior**\r\n`store = readable(neverChangedValue)` etc should be accepted by TypeScript. \r\n\r\n\r\nSorry for my bad English",
    "closedAt": "2021-05-20T13:31:52Z",
    "createdAt": "2021-05-20T07:55:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjExMTIyMQ==",
          "body": "These types have been updated in 3.38.3.",
          "createdAt": "2021-06-22T15:54:37Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTU2NjQyMjk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIt is annoying when binding a prop to a variable to always have to create that variable. \r\n\r\n**Describe the solution you'd like**\r\nI would like to have a *binding modifier* like with the events called `let`:\r\n```svelte\r\n<input bind:value|let />\r\n```\r\nOr if you want to specify a different name do this:\r\n```svelte\r\n<input bind:value|let={color} />\r\n```\r\n\r\n**How important is this feature to you?**\r\nThis is not soooo important but I use the bind: very frequently so it would definitely be helpful.\r\n",
    "closedAt": "2021-05-24T04:11:19Z",
    "createdAt": "2021-05-19T16:45:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcxODIyMA==",
          "body": "This sounds like a bad idea to me. It should be made clear in what scope this variable exists, and not having a `let foo;` somewhere would be confusing.",
          "createdAt": "2021-05-24T04:11:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTU0OTQ3NDM=",
    "body": "**Describe the bug**\r\nThe css opacity value is being modified at build time for unknown reason. Going from n% to 1%.\r\n\r\n**To Reproduce**\r\nI made a simple reproduction environment accessible [here](https://github.com/mgrisole/svelte-css-issue).\r\nInside `App.svelte` we apply a opacity of 50% for every disabled button but it's being set to 1% in the end.\r\n\r\n**Expected behavior**\r\nThe original value is preserved.\r\n\r\n**Information about your Svelte project:**\r\n  System:\r\n    OS: macOS 11.0.1\r\n    CPU: (8) x64 Intel(R) Core(TM) i5-8257U CPU @ 1.40GHz\r\n    Memory: 1.42 GB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 14.16.0 - ~/.nvm/versions/node/v14.16.0/bin/node\r\n    npm: 6.14.11 - ~/.nvm/versions/node/v14.16.0/bin/npm\r\n  Browsers:\r\n    Chrome: 90.0.4430.212\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.48.0 \r\n    svelte: ^3.0.0 => 3.38.2 \r\n\r\n**Severity**\r\nMedium (unable to apply style correctly)\r\n",
    "closedAt": "2021-05-20T12:36:48Z",
    "createdAt": "2021-05-19T14:10:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NDkzNDIwOQ==",
          "body": "This might not be Svelte related at all (does not happen in REPL). Percentage values in `opacity` are working draft and not supported across browsers. Since you're using scss something in your tool chain (not Svelte) might mess that up. As a workaround use `0.5`.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/opacity\r\nhttps://caniuse.com/mdn-css_properties_opacity_percentages\r\nhttps://drafts.csswg.org/css-color/#transparency",
          "createdAt": "2021-05-20T09:55:24Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTA2OTk1OQ==",
          "body": "PostCSS is turning\r\n\r\n```css\r\nbutton.svelte-ia3otk:not(:last-child){margin-bottom:var(--vtmn-spacing_4)}button.svelte-ia3otk:disabled{opacity:50%;cursor:not-allowed}\r\n```\r\n\r\nin `src/App.css` into\r\n\r\n```js\r\nvar css_248z = \"button.svelte-ia3otk:not(:last-child){margin-bottom:var(--vtmn-spacing_4)}button.svelte-ia3otk:disabled{opacity:1%;cursor:not-allowed}\";\r\nexport default css_248z;\r\nexport var stylesheet=\"button.svelte-ia3otk:not(:last-child){margin-bottom:var(--vtmn-spacing_4)}button.svelte-ia3otk:disabled{opacity:1%;cursor:not-allowed}\";\r\nimport styleInject from '/.../svelte-css-issue/node_modules/style-inject/dist/style-inject.es.js';\r\nstyleInject(css_248z);\r\n```\r\n\r\nThis is unrelated to Svelte.",
          "createdAt": "2021-05-20T12:36:48Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTEzNDUyMg==",
          "body": "Indeed it has nothing to do with Svelte sorry about that.\r\nThank you very much for your help, it is really appreciated !",
          "createdAt": "2021-05-20T13:43:02Z",
          "author": { "login": "mgrisole", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTQ0NTQ3MDI=",
    "body": "## **Update: Read third comment**\r\n\r\n**Describe the bug**\r\nI have an object array, binding it to each block, works well if i input values in any field that is not in the last row if is the first element to be inputed\r\n\r\n**Logs**\r\n![image](https://user-images.githubusercontent.com/78880943/118666226-3bc7a980-b7b0-11eb-8331-d5a078f0b1b0.png)\r\n![image](https://user-images.githubusercontent.com/78880943/118669154-c01b2c00-b7b2-11eb-8677-2e0c92be8d92.png)\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/06853911b2db43beb915716e8cf38faf?version=3.38.2\r\n\r\n\r\nhttps://user-images.githubusercontent.com/78880943/118670391-ceb61300-b7b3-11eb-9853-5e9903136cfb.mp4\r\n\r\n\r\n\r\n**Expected behavior**\r\nExpected to correct binding the user input without throwing exception\r\n\r\n**Information about your Svelte project:**\r\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (6) x64 Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz\r\n    Memory: 8.62 GB / 15.81 GB\r\n  Binaries:\r\n    Node: 14.15.5 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.10 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.11 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers: {}\r\n  npmPackages:\r\n    rollup: ^2.33.1 => 2.40.0\r\n    svelte: ^3.29.6 => 3.35.0\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n- Chrome 90.0.4430.212 (Build oficial) (64 bits) (cohort: Stable)\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n- Windows 10 OS Version 2009 (Build 19042.685)\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n- Using Svelte 3.29.6 but in REPL with version 3.38.2 still throws the error.\r\n\r\n- Whether your project uses Webpack or Rollup\r\n- Rollup ^2.33.1\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nIt's annoying to create an extra field, write in the previous field to be able to write in the field was meant to do it. It is not blocking the usage of svelte entirely, happy to work with it, thank you guys.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\nEither using simple object array or stores, the problem persist, \r\n",
    "closedAt": null,
    "createdAt": "2021-05-18T14:35:56Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MzI0MTgwMA==",
          "body": "One way I could deal with it, is removing the bind syntax and later iterate over the childNodes of table to gather the values the user wrote, this comes with performance drawbacks and maintainability, besides the great svelte's bind syntax works well in other components outside of each blocks; but is the only solution i found to still be using svelte template syntax, another would be creating the rows with just JS, but avoiding the great boundaries of Svelte 😞 ",
          "createdAt": "2021-05-18T14:54:42Z",
          "author": { "login": "moisesGarmendia", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MzMyODc4MA==",
          "body": "Even when the error still persist, I made a component for the <tr></tr> part, and completely works!\r\nhttps://svelte.dev/repl/ca483a22730540428be0dae26a1740af?version=3.38.2\r\nThanks for taking the time to read this, i will not close the issue since i think that should be possible to work directly with the bind syntax, but if this is an issue that will be not tackled since there is a workaround, it is good for me, hope some devs find this helpfull in its journey of using Svelte! thanks @Rich-Harris and all Svelte team for such an amazing frameworkless framework 🥇 ",
          "createdAt": "2021-05-18T16:31:56Z",
          "author": { "login": "moisesGarmendia", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NDkyNTQwMw==",
          "body": "To me this is definitely a (one-off) bug in the `#each` implementation. It tries to access the `each_value` with an index of `1`, but the there's only a single element in it.\r\n\r\n![Selection_894](https://user-images.githubusercontent.com/679144/118957065-7a9c6180-b960-11eb-8653-7ef3f71d51be.png)\r\n",
          "createdAt": "2021-05-20T09:46:07Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTEwNjU3OQ==",
          "body": "> To me this is definitely a (one-off) bug in the `#each` implementation. It tries to access the `each_value` with an index of `1`, but the there's only a single element in it.\r\n\r\nLooks like it is not passing the last element of the array, cause even does not work with multiple rows 😟, can we call it a lazy assignment?, it adds to the DOM accordingly, but JS says there's unknown thing at that position; when values are reassigned in previous fields, the last element gets added to the `#each` in a way it does not throw any error.\r\n\r\nAnyway, making a component of the `<tr></tr>` part solved my needs.",
          "createdAt": "2021-05-20T13:10:41Z",
          "author": { "login": "moisesGarmendia", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTQ0NDI1MTg=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nNot a problem, but similar to easing functions, it might be nice to have some preset spring configurations available for users who might not be super comfortable with the details of spring physics.\r\n\r\n**Describe the solution you'd like**\r\nSvelte could export a small set of spring configurations and they could be imported just like built-in easing functions\r\n\r\n```javascript\r\nimport { spring } from 'svelte/motion'\r\nimport { slow } from 'svelte/springConfigs'\r\n\r\nconst mySpring = spring(0, slow)\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nI've thought about publishing my own small set of configs, but I feel like this addition would work well with Svelte's out-of-the-box approach to animations.\r\n\r\n**How important is this feature to you?**\r\nNot super important, but more quality of life so devs who don't know the ins and outs of spring physics can do cool stuff without too much effort. Having some Svelte approved configs could also be a nice springboard (pun!) for users to learn and customize further.\r\n\r\n**Additional context**\r\nI got the idea from react-spring's [preset configs](https://react-spring.io/common/configs#presets). \r\n\r\nIf the maintainers like this idea, I'd be happy to work on a PR for it.",
    "closedAt": null,
    "createdAt": "2021-05-18T14:24:17Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTQwNjA0MTU=",
    "body": "Adding TypeScript Support in the template would be nice.\r\n",
    "closedAt": "2021-05-18T07:38:14Z",
    "createdAt": "2021-05-18T07:20:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MjkzNDI0NA==",
          "body": "[There already is](https://github.com/sveltejs/template#using-typescript). You need to run a script to set it up.",
          "createdAt": "2021-05-18T07:38:14Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0Mjk0NDEwMg==",
          "body": "@dummdidumm I gave it a try, seems not supported, for the template I meant the HTML part:\r\n\r\n![image](https://user-images.githubusercontent.com/28700378/118613216-1eff9600-b7f1-11eb-8fa0-50ece7aa50f6.png)\r\n",
          "createdAt": "2021-05-18T07:53:38Z",
          "author": { "login": "wenfangdu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0Mjk1MDEzMw==",
          "body": "Oh, you mean template as in \"use TypeScript types inside the markup\". A little more context than one sentence would help 😉 This is tracked in #4701",
          "createdAt": "2021-05-18T08:02:09Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTM1NTE0MzA=",
    "body": "I have a Node project which makes use of the Got package.\r\nI wish to give the project a UI now and I would like to use Svelte as I've already experimented with it and I like it.\r\n\r\nWhen I try to make the bundle with Rollup, the Got dependency leads to issues. This is also true for some other dependencies (such as jsdom), but Got is already enough to show the issue.\r\n\r\n## How to reproduce\r\nThese are the steps to reproduce it:\r\n - `npx degit sveltejs/template <my-proj>` (create a new Svelte project)\r\n - `npm i` (install package's dependencies)\r\n - `npm i got` (install Got)\r\n - add a simple import in the App.svelte component (this is enough):\r\n```\r\n...\r\n<script>\r\n   import got from 'got';\r\n   ...\r\n</script>\r\n...\r\n```\r\n\r\n## The issue\r\nNode built-in libraries are missing, as reminded by Rollup:\r\n```\r\n(!) Missing shims for Node.js built-ins\r\nCreating a browser bundle that depends on \"url\", \"events\", \"util\", \"stream\", \"http\", \"https\", \"os\", \"buffer\" and \"zlib\". You might need to include https://github.com/ionic-team/rollup-plugin-node-polyfills\r\n(!) Missing global variable names\r\nUse output.globals to specify browser global variable names corresponding to external modules\r\nurl (guessing 'url_1')\r\nevents (guessing 'EventEmitter')\r\nutil (guessing 'util_1')\r\nstream (guessing 'require$$0$2')\r\nfs (guessing 'fs_1')\r\nhttp (guessing 'http')\r\nhttps (guessing 'https')\r\ndns (guessing 'require$$0$1')\r\nos (guessing 'os')\r\nbuffer (guessing 'require$$0$3')\r\nzlib (guessing 'zlib')\r\nhttp2 (guessing 'http2')\r\ntls (guessing 'tls')\r\nnet (guessing 'net')\r\n```\r\n\r\n## Trying the plugin\r\nI tried to use a helping plugin, as suggested by Rollup:\r\n - `npm i -D rollup-plugin-node-polyfills` (install the plugin as a dev dependency)\r\n - in rollup.config.js:\r\n   - `import polyfills from 'rollup-plugin-node-polyfills';` (import the plugin)\r\n   - add the plugin `polyfills()` among other plugins\r\n\r\nNow, the place at which the plugin is added is relevant.\r\n\r\n### (1)\r\nIf one adds it after the `commonjs()` plugin, nothing changes with regard to the issue:\r\n```\r\n...\r\nresolve({\r\n  browser: true,\r\n  dedupe: ['svelte']\r\n}),\r\ncommonjs(),\r\npolyfills(), // <<< adding it last\r\n...\r\n```\r\n(Same output when creating the bundle.)\r\n\r\n### (2)\r\nIf one adds it before `commonjs()`, it seems that some names are covered, but not all:\r\n```\r\n...\r\nresolve({\r\n  browser: true,\r\n  dedupe: ['svelte']\r\n}),\r\npolyfills(), // <<< adding it before commonjs()\r\ncommonjs(),\r\n...\r\n```\r\n```\r\n(!) Missing shims for Node.js built-ins\r\nCreating a browser bundle that depends on \"url\", \"events\", \"process\" and \"buffer\". You might need to include https://github.com/ionic-team/rollup-plugin-node-polyfills\r\nLiveReload enabled\r\n(!) Missing global variable names\r\nUse output.globals to specify browser global variable names corresponding to external modules\r\nurl (guessing 'url_1$1')\r\nevents (guessing 'events_1')\r\nprocess (guessing 'process')\r\nbuffer (guessing 'buffer')\r\n```\r\n\r\n### (3)\r\nFinally, if one adds it before the Node module resolution plugin (`resolve()`), it seems that all names are covered and that the bundle is created successfully, but another issue pops up. The browser complains that it doesn't know `exports`:\r\n```\r\n...\r\npolyfills(), // <<< adding it before other plugins (except the Svelte one)\r\nresolve({\r\n  browser: true,\r\n  dedupe: ['svelte']\r\n}),\r\ncommonjs(),\r\n...\r\n```\r\n![svelte_got](https://user-images.githubusercontent.com/49537659/118526054-2450d800-b740-11eb-9eb0-59b128912b51.png)\r\n\r\nI tried mocking an empty `exports` object in the index file, as suggested in a partially-related SO issue (whose link I can't recover now):\r\n```\r\n...\r\n<script>var exports = {};</script>\r\n<script defer src='/build/bundle.js'></script>\r\n...\r\n```\r\nAnd that does indeed solve the issue. But then, the browser goes on to complain about `require()`:\r\n\r\n![svelte_got2](https://user-images.githubusercontent.com/49537659/118527501-a8578f80-b741-11eb-83c4-8dc6406dbc12.png)\r\n\r\nSo, these seem (and probably are) just empty attempts.\r\nI've spent several hours looking into this issue and trying to make things work, but to no avail (I've tried to at least understand Rollup and Node better in the process). I also found [the thread](https://github.com/rollup/rollup/issues/1051#issuecomment-267878171) where the suggestion for the polyfill plugin was originally made and approved.\r\n\r\nI've read many other threads and had many other attempts (also using other available polyfill plugins, such as [rollup-plugin-polyfill-node](https://github.com/snowpackjs/rollup-plugin-polyfill-node) and [rollup-plugin-node-builtins](https://github.com/calvinmetcalf/rollup-plugin-node-builtins)), sometimes obtaining results different from this.\r\nThe most similar issue I've found on the Web is [this one](https://stackoverflow.com/questions/56167898/rollup-and-apollo-websocket-with-subscriptions-transport-ws), relating to another package. I couldn't follow the suggestion provided in the answer.\r\n[This article](https://www.mixmax.com/engineering/rollup-externals/) was also helpful in understanding better some configuration options of Rollup.\r\n\r\nThanks to everyone for any help.\r\n",
    "closedAt": "2021-05-17T19:47:59Z",
    "createdAt": "2021-05-17T17:34:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MjU4NTgzNg==",
          "body": "If something needs Node, you're not going to be able to run it on the browser, and you'll need it to live in an endpoint on your server or something similar.\n\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-05-17T19:47:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MjYwNTE1Mg==",
          "body": "Ok, thank you.\r\n\r\nAnd sorry for both the question if it felt like a basic one (I'm trying to catch up on js after many years) and for asking it here.",
          "createdAt": "2021-05-17T20:19:34Z",
          "author": { "login": "atava", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTMxMjg2NTg=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIt seems like Svelte transitions require that the element be removed from the dom when it fades out and re-attached when it fades in.\r\n\r\nI guess it's probably fine if the element is very simple, but usually, it's not. For example, whenever I just want to show/hide a complex sidebar menu, the dom contents of that menu have to be recreated every time it's displayed (and some other stuff like event listeners, js logic has to re-run, etc.).\r\n\r\n**Describe the solution you'd like**\r\nExtending Svelte transition API to allow to fade an element in/out of view without removing/re-attaching it. So for example, instead of removing the element, set a `display: none;` style, or control the zIndex. (The latter would also be very nice, while we are at it, as in some extreme scenarios it's better performance if the element is already visible).\r\n\r\nThe ideal, most universal solution would be to let the user decide what should happen to the element on transitionStart / transitionEnd and allow that the element to stay without being removed.\r\n\r\nSo for example, this is how it's done now - the element will be removed:\r\n```\r\n{#if visible}\r\n\t<p transition:fly=\"{{ y: 200, duration: 2000 }}\">\r\n\t\tFlies in and out\r\n\t</p>\r\n{/if}\r\n```\r\n\r\nThis is how it could look like with controlling the display property - which would be done by supplying `visible` property to transition properties:\r\n```\r\n<!--Supplying the `visible` property will make the element appear / disappear\r\n      using 'display: none' visibility-->\r\n<p transition:fly=\"{{ visible, y: 200, duration: 2000 }}\">\r\n\tFlies in and out\r\n</p>\r\n```\r\n\r\nAdvanced usage: define the way in which the element should be shown/hidden.\r\n```\r\n<script>\r\nconst show = (el) => { el.style.zIndex = 10; }\r\nconst hide = (el) => { el.style.zIndex = -1; }\r\n</script>\r\n\r\n<!--Using show, hide properties means that the visibility of the element\r\n      is to be handled by the user (`display: none;` will not be applied)-->\r\n<p transition:fly=\"{{ visible, show, hide, y: 200, duration: 2000,  }}\">\r\n\tFlies in and out\r\n</p>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nDoing it manually, perhaps Svelte animations API could help (I haven't gotten to it yet).\r\n\r\n**How important is this feature to you?**\r\nOf medium importance.  It means that I cannot use Svelte transitions API (which seems awesome). It also seems to be one of those rare cases where Svelte could use some performance optimization.\r\n",
    "closedAt": null,
    "createdAt": "2021-05-17T09:20:01Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTI2MDMyMA==",
          "body": "An alternative here to what you suggested would be a new construct called `{#show}` that behaves like `v-show` in vue. That would support more use cases than just transitions/animations",
          "createdAt": "2021-06-05T16:05:40Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTI2MjUxMA==",
          "body": "I'm trying to create a fork with your solution...\r\n\r\nEdit:\r\nThere is a major problem with the way you suggested solving this isue. Transition values aren't reactive. Svelte just checks the current value whenever there is a new transition. If you look here https://svelte.dev/repl/b36219cc3d3f4f4b82fe60231aadf033?version=3.38.2 and try editing the value in the number box during a transition and then clicking the checkbox again without waiting for it to finish you will see it uses the old value. So until the current transition is finished it has the old value. What this means is that there isn't an easy way to reactively check when the transition value changes in the svelte compiler, as there isn't a need for that currently.\r\n\r\nSo, Implementing your solution would require a lot of code that checks reactively when transition values change with invalidation and other things like that from other parts of svelte.\r\n\r\nIs there something I'm misunderstanding?",
          "createdAt": "2021-06-05T16:23:15Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTI3ODMzOTE=",
    "body": "as title\r\n(this is not a joke, why my previous similar question is deleted?)",
    "closedAt": "2021-05-24T04:13:20Z",
    "createdAt": "2021-05-16T23:27:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTg5NTI1Mg==",
          "body": "It was answered: https://github.com/sveltejs/svelte/issues/6334#issuecomment-841849463\r\n",
          "createdAt": "2021-05-16T23:35:14Z",
          "author": { "login": "babichjacob", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTk3MTE1NQ==",
          "body": "Closing as duplicate",
          "createdAt": "2021-05-17T04:14:54Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTk4Nzk4MQ==",
          "body": "Or maybe let's keep it open for one more day for @hiep294 to see it. There's a blue bubble at the top right where you'll see all issues where you've taken part .",
          "createdAt": "2021-05-17T05:06:28Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcxODgwOA==",
          "body": "It has now been several one more days.",
          "createdAt": "2021-05-24T04:13:18Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTI3MDc5Njc=",
    "body": "For example\r\ncomponent Button:\r\n```\r\n<script lang=\"ts\">\r\n  export let loading = false;\r\n  export let type = \"\" as \"primary\" | \"secondary\";\r\n</script>\r\n<button disabled=\"{loading}\"><slot /></button>\r\n```\r\nIn some case, I create a component SubmitButton:\r\n```\r\n<script lang=\"ts\">\r\n  import Button from \"./Button.svelte\";\r\n</script>\r\n<Button {...$$props} type=\"primary\" >Submit</Button>\r\n```\r\nMy question is how can I extend interface of SubmitButton's Props from Button's Props",
    "closedAt": "2021-05-16T17:34:50Z",
    "createdAt": "2021-05-16T16:37:12Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTg0OTQ2Mw==",
          "body": "[This rfc](https://github.com/sveltejs/rfcs/pull/38) proposes the possibility to define an interface which you could then reuse. Right now this is not possible to do, you'd have to redeclare the properties from `Button`. Closing in favor of that RFC.",
          "createdAt": "2021-05-16T17:34:50Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTI1NjgwMTk=",
    "body": "**Describe the bug**\r\n\r\n`test/store/index.js` tests don't run on `npm run test`.\r\n\r\nSeems like any non `index.ts` does not run due to [this line in the test/test.ts](https://github.com/sveltejs/svelte/blob/0a3be1d04128620bcb306566992eaa85d7944832/test/test.ts#L11):\r\n```ts\r\nconst test_folders = glob('*/index.ts', { cwd: 'test' });\r\n```\r\n\r\n**To Reproduce**\r\n\r\nI've made one test in `test/store/index.js` always fail and got following result:\r\n<details>\r\n  <summary>Tail of `npm run test` output</summary>\r\n\r\n```console\r\nstats\r\n    ✓ basic\r\n    ✓ returns a stats object when options.generate is false\r\n\r\n  validate\r\n    ✓ a11y-alt-text\r\n    ✓ a11y-anchor-has-content\r\n    ✓ a11y-anchor-in-svg-is-valid\r\n    ✓ a11y-anchor-is-valid\r\n    ✓ a11y-aria-props\r\n    ✓ a11y-aria-role\r\n    ✓ a11y-aria-unsupported-element\r\n    ✓ a11y-contenteditable-element-without-child\r\n    ✓ a11y-figcaption-in-non-element-block\r\n    ✓ a11y-figcaption-right-place\r\n    ✓ a11y-figcaption-wrong-place\r\n    ✓ a11y-heading-has-content\r\n    ✓ a11y-html-has-lang\r\n    ✓ a11y-iframe-has-title\r\n    ✓ a11y-img-redundant-alt\r\n    ✓ a11y-in-foreign-namespace\r\n    ✓ a11y-label-has-associated-control\r\n    ✓ a11y-media-has-caption\r\n    ✓ a11y-no-access-key\r\n    ✓ a11y-no-autofocus\r\n    ✓ a11y-no-distracting-elements\r\n    ✓ a11y-no-onchange\r\n    ✓ a11y-not-on-components\r\n    ✓ a11y-scope\r\n    ✓ a11y-tabindex-no-positive\r\n    ✓ action-invalid\r\n    ✓ action-object\r\n    ✓ action-on-component\r\n    ✓ animation-duplicate\r\n    ✓ animation-missing\r\n    ✓ animation-not-in-each\r\n    ✓ animation-not-in-keyed-each\r\n    ✓ animation-siblings\r\n    ✓ attribute-expected-equals\r\n    ✓ attribute-invalid-name\r\n    ✓ attribute-invalid-name-2\r\n    ✓ attribute-invalid-name-3\r\n    ✓ attribute-invalid-name-4\r\n    ✓ attribute-invalid-name-5\r\n    ✓ await-component-is-used\r\n    ✓ await-no-catch\r\n    ✓ await-shorthand-no-catch\r\n    ✓ await-shorthand-no-then\r\n    ✓ binding-await-catch\r\n    ✓ binding-await-then\r\n    ✓ binding-await-then-2\r\n    ✓ binding-const\r\n    ✓ binding-const-field\r\n    ✓ binding-dimensions-svg\r\n    ✓ binding-dimensions-svg-child\r\n    ✓ binding-dimensions-void\r\n    ✓ binding-input-checked\r\n    ✓ binding-input-type-boolean\r\n    ✓ binding-input-type-dynamic\r\n    ✓ binding-invalid\r\n    ✓ binding-invalid-foreign-namespace\r\n    ✓ binding-invalid-on-element\r\n    ✓ binding-invalid-value\r\n    ✓ binding-invalid-value-global\r\n    ✓ binding-let\r\n    ✓ binding-select-multiple-dynamic\r\n    ✓ catch-declares-error-variable\r\n    ✓ component-dynamic\r\n    ✓ component-event-modifiers-invalid\r\n    ✓ component-name-lowercase\r\n    ✓ component-namespaced\r\n    - component-slot-default-duplicate.skip\r\n    ✓ component-slot-default-reserved\r\n    ✓ component-slot-dynamic\r\n    ✓ component-slot-dynamic-attribute\r\n    - component-slot-named-duplicate.skip\r\n    ✓ component-slotted-custom-element\r\n    ✓ component-slotted-custom-element-2\r\n    ✓ component-slotted-each-block\r\n    ✓ component-slotted-if-block\r\n    ✓ contenteditable-dynamic\r\n    ✓ contenteditable-missing\r\n    ✓ css-invalid-global-placement\r\n    ✓ debug-invalid-args\r\n    ✓ default-export\r\n    ✓ directive-non-expression\r\n    ✓ dollar-dollar-global-in-markup\r\n    ✓ dollar-dollar-global-in-script\r\n    ✓ dollar-global-in-markup\r\n    ✓ dollar-global-in-script\r\n    ✓ each-block-destructured-object-rest-comma-after\r\n    ✓ each-block-invalid-context\r\n    ✓ each-block-invalid-context-destructured\r\n    ✓ each-block-invalid-context-destructured-object\r\n    ✓ each-block-multiple-children\r\n    ✓ empty-block\r\n    ✓ event-modifiers-invalid\r\n    ✓ event-modifiers-invalid-nonpassive\r\n    ✓ event-modifiers-invalid-passive\r\n    ✓ event-modifiers-legacy\r\n    ✓ event-modifiers-redundant\r\n    ✓ ignore-warning\r\n    ✓ ignore-warnings\r\n    ✓ ignore-warnings-cumulative\r\n    ✓ ignore-warnings-newline\r\n    ✓ ignore-warnings-stacked\r\n    ✓ import-meta\r\n    ✓ invalid-empty-css-declaration\r\n    ✓ missing-component\r\n    ✓ missing-component-global\r\n    ✓ missing-custom-element-compile-options\r\n    ✓ module-script-reactive-declaration\r\n    ✓ multiple-script-default-context\r\n    ✓ multiple-script-module-context\r\n    ✓ namespace-invalid\r\n    ✓ namespace-invalid-unguessable\r\n    ✓ namespace-non-literal\r\n    ✓ non-empty-block-dev\r\n    ✓ reactive-declaration-cyclical\r\n    ✓ reactive-declaration-non-top-level\r\n    ✓ reactive-module-variable\r\n    ✓ ref-not-supported\r\n    ✓ ref-not-supported-in-css\r\n    ✓ script-invalid-context\r\n    ✓ select-multiple\r\n    ✓ slot-attribute-invalid\r\n    ✓ svelte-slot-placement\r\n    ✓ svelte-slot-placement-2\r\n    ✓ svg-child-component-declared-namespace\r\n    ✓ tag-custom-element-options-missing\r\n    ✓ tag-custom-element-options-true\r\n    ✓ tag-invalid\r\n    ✓ tag-non-string\r\n    ✓ textarea-value-children\r\n    ✓ title-no-attributes\r\n    ✓ title-no-children\r\n    ✓ transition-duplicate-in\r\n    ✓ transition-duplicate-in-transition\r\n    ✓ transition-duplicate-out\r\n    ✓ transition-duplicate-out-transition\r\n    ✓ transition-duplicate-transition\r\n    ✓ transition-duplicate-transition-in\r\n    ✓ transition-duplicate-transition-out\r\n    ✓ transition-missing\r\n    ✓ transition-on-component\r\n    ✓ undefined-value\r\n    ✓ undefined-value-global\r\n    ✓ unreferenced-variables\r\n    ✓ use-the-platform\r\n    ✓ window-binding-invalid\r\n    ✓ window-binding-invalid-innerwidth\r\n    ✓ window-binding-invalid-value\r\n    ✓ window-binding-invalid-width\r\n    ✓ window-binding-online\r\n    ✓ errors if options.name is illegal\r\n    ✓ warns if options.name is not capitalised\r\n    ✓ does not warn if options.name begins with non-alphabetic character\r\n    ✓ errors if namespace is provided but unrecognised\r\n    ✓ errors with a hint if namespace is provided but unrecognised but close\r\n    ✓ does not throw error if 'this' is bound for foreign element\r\n\r\n  vars\r\n    ✓ $$props, generate: dom\r\n    ✓ $$props, generate: ssr\r\n    ✓ $$props, generate: false\r\n    ✓ $$props-logicless, generate: dom\r\n    ✓ $$props-logicless, generate: ssr\r\n    ✓ $$props-logicless, generate: false\r\n    ✓ actions, generate: dom\r\n    ✓ actions, generate: ssr\r\n    ✓ actions, generate: false\r\n    ✓ animations, generate: dom\r\n    ✓ animations, generate: ssr\r\n    ✓ animations, generate: false\r\n    ✓ assumed-global, generate: dom\r\n    ✓ assumed-global, generate: ssr\r\n    ✓ assumed-global, generate: false\r\n    ✓ component-namespaced, generate: dom\r\n    ✓ component-namespaced, generate: ssr\r\n    ✓ component-namespaced, generate: false\r\n    ✓ duplicate-globals, generate: dom\r\n    ✓ duplicate-globals, generate: ssr\r\n    ✓ duplicate-globals, generate: false\r\n    ✓ duplicate-non-hoistable, generate: dom\r\n    ✓ duplicate-non-hoistable, generate: ssr\r\n    ✓ duplicate-non-hoistable, generate: false\r\n    ✓ duplicate-vars, generate: dom\r\n    ✓ duplicate-vars, generate: ssr\r\n    ✓ duplicate-vars, generate: false\r\n    ✓ implicit-reactive, generate: dom\r\n    ✓ implicit-reactive, generate: ssr\r\n    ✓ implicit-reactive, generate: false\r\n    ✓ imports, generate: dom\r\n    ✓ imports, generate: ssr\r\n    ✓ imports, generate: false\r\n    ✓ modules-vars, generate: dom\r\n    ✓ modules-vars, generate: ssr\r\n    ✓ modules-vars, generate: false\r\n    ✓ mutated-vs-reassigned, generate: dom\r\n    ✓ mutated-vs-reassigned, generate: ssr\r\n    ✓ mutated-vs-reassigned, generate: false\r\n    ✓ mutated-vs-reassigned-bindings, generate: dom\r\n    ✓ mutated-vs-reassigned-bindings, generate: ssr\r\n    ✓ mutated-vs-reassigned-bindings, generate: false\r\n    ✓ props, generate: dom (46ms)\r\n    ✓ props, generate: ssr\r\n    ✓ props, generate: false\r\n    ✓ referenced-from-script, generate: dom\r\n    ✓ referenced-from-script, generate: ssr\r\n    ✓ referenced-from-script, generate: false\r\n    ✓ store-referenced, generate: dom\r\n    ✓ store-referenced, generate: ssr\r\n    ✓ store-referenced, generate: false\r\n    ✓ store-unreferenced, generate: dom\r\n    ✓ store-unreferenced, generate: ssr\r\n    ✓ store-unreferenced, generate: false\r\n    ✓ template-references, generate: dom\r\n    ✓ template-references, generate: ssr\r\n    ✓ template-references, generate: false\r\n    ✓ transitions, generate: dom\r\n    ✓ transitions, generate: ssr\r\n    ✓ transitions, generate: false\r\n    ✓ undeclared, generate: dom\r\n    ✓ undeclared, generate: ssr\r\n    ✓ undeclared, generate: false\r\n\r\n\r\n  3332 passing (1m)\r\n  24 pending\r\n\r\n\r\n> svelte@3.38.2 posttest\r\n> agadoo internal/index.mjs\r\n\r\n\r\n\r\nSuccess! internal/index.mjs is fully tree-shakeable\r\n```\r\n\r\n</details>\r\n\r\nThen I've replaced the line with `const test_folders = glob('*/index.{js,ts}', { cwd: 'test' });` in `test/test.ts` and got following result:\r\n\r\n<details>\r\n  <summary>Tail of `npm run test` output</summary>\r\n\r\n```console\r\n  stats\r\n    ✓ basic\r\n    ✓ returns a stats object when options.generate is false\r\n\r\n  store\r\n    writable\r\n      1) creates a writable store\r\n      ✓ calls provided subscribe handler\r\n      ✓ does not assume immutable data\r\n      ✓ only calls subscriber once initially, including on resubscriptions\r\n    readable\r\n      ✓ creates a readable store\r\n    derived\r\n      ✓ maps a single store\r\n      ✓ maps multiple stores\r\n      ✓ passes optional set function\r\n      ✓ prevents glitches\r\n      ✓ prevents diamond dependency problem\r\n      ✓ derived dependency does not update and shared ancestor updates\r\n      ✓ is updated with safe_not_equal logic\r\n      ✓ calls a cleanup function\r\n      ✓ discards non-function return values\r\n      ✓ allows derived with different types\r\n      ✓ works with RxJS-style observables\r\n    get\r\n      ✓ gets the current value of a store\r\n      ✓ works with RxJS-style observables\r\n\r\n  validate\r\n    ✓ a11y-alt-text\r\n    ✓ a11y-anchor-has-content\r\n    ✓ a11y-anchor-in-svg-is-valid\r\n    ✓ a11y-anchor-is-valid\r\n    ✓ a11y-aria-props\r\n    ✓ a11y-aria-role\r\n    ✓ a11y-aria-unsupported-element\r\n    ✓ a11y-contenteditable-element-without-child\r\n    ✓ a11y-figcaption-in-non-element-block\r\n    ✓ a11y-figcaption-right-place\r\n    ✓ a11y-figcaption-wrong-place\r\n    ✓ a11y-heading-has-content\r\n    ✓ a11y-html-has-lang\r\n    ✓ a11y-iframe-has-title\r\n    ✓ a11y-img-redundant-alt\r\n    ✓ a11y-in-foreign-namespace\r\n    ✓ a11y-label-has-associated-control\r\n    ✓ a11y-media-has-caption\r\n    ✓ a11y-no-access-key\r\n    ✓ a11y-no-autofocus\r\n    ✓ a11y-no-distracting-elements\r\n    ✓ a11y-no-onchange\r\n    ✓ a11y-not-on-components\r\n    ✓ a11y-scope\r\n    ✓ a11y-tabindex-no-positive\r\n    ✓ action-invalid\r\n    ✓ action-object\r\n    ✓ action-on-component\r\n    ✓ animation-duplicate\r\n    ✓ animation-missing\r\n    ✓ animation-not-in-each\r\n    ✓ animation-not-in-keyed-each\r\n    ✓ animation-siblings\r\n    ✓ attribute-expected-equals\r\n    ✓ attribute-invalid-name\r\n    ✓ attribute-invalid-name-2\r\n    ✓ attribute-invalid-name-3\r\n    ✓ attribute-invalid-name-4\r\n    ✓ attribute-invalid-name-5\r\n    ✓ await-component-is-used\r\n    ✓ await-no-catch\r\n    ✓ await-shorthand-no-catch\r\n    ✓ await-shorthand-no-then\r\n    ✓ binding-await-catch\r\n    ✓ binding-await-then\r\n    ✓ binding-await-then-2\r\n    ✓ binding-const\r\n    ✓ binding-const-field\r\n    ✓ binding-dimensions-svg\r\n    ✓ binding-dimensions-svg-child\r\n    ✓ binding-dimensions-void\r\n    ✓ binding-input-checked\r\n    ✓ binding-input-type-boolean\r\n    ✓ binding-input-type-dynamic\r\n    ✓ binding-invalid\r\n    ✓ binding-invalid-foreign-namespace\r\n    ✓ binding-invalid-on-element\r\n    ✓ binding-invalid-value\r\n    ✓ binding-invalid-value-global\r\n    ✓ binding-let\r\n    ✓ binding-select-multiple-dynamic\r\n    ✓ catch-declares-error-variable\r\n    ✓ component-dynamic\r\n    ✓ component-event-modifiers-invalid\r\n    ✓ component-name-lowercase\r\n    ✓ component-namespaced\r\n    - component-slot-default-duplicate.skip\r\n    ✓ component-slot-default-reserved\r\n    ✓ component-slot-dynamic\r\n    ✓ component-slot-dynamic-attribute\r\n    - component-slot-named-duplicate.skip\r\n    ✓ component-slotted-custom-element\r\n    ✓ component-slotted-custom-element-2\r\n    ✓ component-slotted-each-block\r\n    ✓ component-slotted-if-block\r\n    ✓ contenteditable-dynamic\r\n    ✓ contenteditable-missing\r\n    ✓ css-invalid-global-placement\r\n    ✓ debug-invalid-args\r\n    ✓ default-export\r\n    ✓ directive-non-expression\r\n    ✓ dollar-dollar-global-in-markup\r\n    ✓ dollar-dollar-global-in-script\r\n    ✓ dollar-global-in-markup\r\n    ✓ dollar-global-in-script\r\n    ✓ each-block-destructured-object-rest-comma-after\r\n    ✓ each-block-invalid-context\r\n    ✓ each-block-invalid-context-destructured\r\n    ✓ each-block-invalid-context-destructured-object\r\n    ✓ each-block-multiple-children\r\n    ✓ empty-block\r\n    ✓ event-modifiers-invalid\r\n    ✓ event-modifiers-invalid-nonpassive\r\n    ✓ event-modifiers-invalid-passive\r\n    ✓ event-modifiers-legacy\r\n    ✓ event-modifiers-redundant\r\n    ✓ ignore-warning\r\n    ✓ ignore-warnings\r\n    ✓ ignore-warnings-cumulative\r\n    ✓ ignore-warnings-newline\r\n    ✓ ignore-warnings-stacked\r\n    ✓ import-meta\r\n    ✓ invalid-empty-css-declaration\r\n    ✓ missing-component\r\n    ✓ missing-component-global\r\n    ✓ missing-custom-element-compile-options\r\n    ✓ module-script-reactive-declaration\r\n    ✓ multiple-script-default-context\r\n    ✓ multiple-script-module-context\r\n    ✓ namespace-invalid\r\n    ✓ namespace-invalid-unguessable\r\n    ✓ namespace-non-literal\r\n    ✓ non-empty-block-dev\r\n    ✓ reactive-declaration-cyclical\r\n    ✓ reactive-declaration-non-top-level\r\n    ✓ reactive-module-variable\r\n    ✓ ref-not-supported\r\n    ✓ ref-not-supported-in-css\r\n    ✓ script-invalid-context\r\n    ✓ select-multiple\r\n    ✓ slot-attribute-invalid\r\n    ✓ svelte-slot-placement\r\n    ✓ svelte-slot-placement-2\r\n    ✓ svg-child-component-declared-namespace\r\n    ✓ tag-custom-element-options-missing\r\n    ✓ tag-custom-element-options-true\r\n    ✓ tag-invalid\r\n    ✓ tag-non-string\r\n    ✓ textarea-value-children\r\n    ✓ title-no-attributes\r\n    ✓ title-no-children\r\n    ✓ transition-duplicate-in\r\n    ✓ transition-duplicate-in-transition\r\n    ✓ transition-duplicate-out\r\n    ✓ transition-duplicate-out-transition\r\n    ✓ transition-duplicate-transition\r\n    ✓ transition-duplicate-transition-in\r\n    ✓ transition-duplicate-transition-out\r\n    ✓ transition-missing\r\n    ✓ transition-on-component\r\n    ✓ undefined-value\r\n    ✓ undefined-value-global\r\n    ✓ unreferenced-variables\r\n    ✓ use-the-platform\r\n    ✓ window-binding-invalid\r\n    ✓ window-binding-invalid-innerwidth\r\n    ✓ window-binding-invalid-value\r\n    ✓ window-binding-invalid-width\r\n    ✓ window-binding-online\r\n    ✓ errors if options.name is illegal\r\n    ✓ warns if options.name is not capitalised\r\n    ✓ does not warn if options.name begins with non-alphabetic character\r\n    ✓ errors if namespace is provided but unrecognised\r\n    ✓ errors with a hint if namespace is provided but unrecognised but close\r\n    ✓ does not throw error if 'this' is bound for foreign element\r\n\r\n  vars\r\n    ✓ $$props, generate: dom\r\n    ✓ $$props, generate: ssr\r\n    ✓ $$props, generate: false\r\n    ✓ $$props-logicless, generate: dom\r\n    ✓ $$props-logicless, generate: ssr\r\n    ✓ $$props-logicless, generate: false\r\n    ✓ actions, generate: dom\r\n    ✓ actions, generate: ssr\r\n    ✓ actions, generate: false\r\n    ✓ animations, generate: dom\r\n    ✓ animations, generate: ssr\r\n    ✓ animations, generate: false\r\n    ✓ assumed-global, generate: dom\r\n    ✓ assumed-global, generate: ssr\r\n    ✓ assumed-global, generate: false\r\n    ✓ component-namespaced, generate: dom\r\n    ✓ component-namespaced, generate: ssr\r\n    ✓ component-namespaced, generate: false\r\n    ✓ duplicate-globals, generate: dom\r\n    ✓ duplicate-globals, generate: ssr\r\n    ✓ duplicate-globals, generate: false\r\n    ✓ duplicate-non-hoistable, generate: dom\r\n    ✓ duplicate-non-hoistable, generate: ssr\r\n    ✓ duplicate-non-hoistable, generate: false\r\n    ✓ duplicate-vars, generate: dom\r\n    ✓ duplicate-vars, generate: ssr\r\n    ✓ duplicate-vars, generate: false\r\n    ✓ implicit-reactive, generate: dom\r\n    ✓ implicit-reactive, generate: ssr\r\n    ✓ implicit-reactive, generate: false\r\n    ✓ imports, generate: dom\r\n    ✓ imports, generate: ssr\r\n    ✓ imports, generate: false\r\n    ✓ modules-vars, generate: dom\r\n    ✓ modules-vars, generate: ssr\r\n    ✓ modules-vars, generate: false\r\n    ✓ mutated-vs-reassigned, generate: dom\r\n    ✓ mutated-vs-reassigned, generate: ssr\r\n    ✓ mutated-vs-reassigned, generate: false\r\n    ✓ mutated-vs-reassigned-bindings, generate: dom\r\n    ✓ mutated-vs-reassigned-bindings, generate: ssr\r\n    ✓ mutated-vs-reassigned-bindings, generate: false\r\n    ✓ props, generate: dom (46ms)\r\n    ✓ props, generate: ssr\r\n    ✓ props, generate: false\r\n    ✓ referenced-from-script, generate: dom\r\n    ✓ referenced-from-script, generate: ssr\r\n    ✓ referenced-from-script, generate: false\r\n    ✓ store-referenced, generate: dom\r\n    ✓ store-referenced, generate: ssr\r\n    ✓ store-referenced, generate: false\r\n    ✓ store-unreferenced, generate: dom\r\n    ✓ store-unreferenced, generate: ssr\r\n    ✓ store-unreferenced, generate: false\r\n    ✓ template-references, generate: dom\r\n    ✓ template-references, generate: ssr\r\n    ✓ template-references, generate: false\r\n    ✓ transitions, generate: dom (41ms)\r\n    ✓ transitions, generate: ssr\r\n    ✓ transitions, generate: false\r\n    ✓ undeclared, generate: dom\r\n    ✓ undeclared, generate: ssr\r\n    ✓ undeclared, generate: false\r\n\r\n\r\n  3349 passing (2m)\r\n  24 pending\r\n  1 failing\r\n\r\n  1) store\r\n       writable\r\n         creates a writable store:\r\n     AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\r\n\r\n[\r\n  0,\r\n  1,\r\n  2\r\n]\r\n\r\nshould loosely deep-equal\r\n\r\n0\r\n      at Context.<anonymous> (test/store/index.js:22:11)\r\n      at processImmediate (node:internal/timers:464:21)\r\n```\r\n\r\n</details>\r\n\r\nPay attention now there is `store` section after `stats` and before `validate`.\r\n\r\n**Expected behavior**\r\n\r\nAll tests run on `npm run test`.\r\n",
    "closedAt": "2021-05-20T21:47:34Z",
    "createdAt": "2021-05-16T00:47:40Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTQ5OTQ1Nw==",
          "body": "Fixed by #6293",
          "createdAt": "2021-05-20T21:47:34Z",
          "author": { "login": "subtle-byte", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTI1MTAzODA=",
    "body": "**Describe the bug**\r\nI was exploring the [test](https://github.com/sveltejs/svelte/blob/0a3be1d04128620bcb306566992eaa85d7944832/test/store/index.js#L195) and I replaced:\r\n```ts\r\nconst firstname = derived(lastname, n => n === 'Jekyll' ? 'Henry' : 'Edward');\r\n```\r\nwith:\r\n```ts\r\nconst firstname_first_letter = derived(lastname, n => n === 'Jekyll' ? 'H' : 'E');\r\nconst firstname = derived(firstname_first_letter, n => n === 'H' ? 'Henry' : 'Edward');\r\n```\r\nAnd I got the `[\"Henry Jekyll\",\"Henry Hyde\",\"Edward Hyde\"]` as the test result, while it seems like the `['Henry Jekyll', 'Edward Hyde']` is correct. Is it a bug?\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/9dee9f3797d24e20b159f677ef324530?version=3.38.2)\r\n\r\n**Expected behavior**\r\nSvelte prevents glitches (according to the test name - `prevents glitches`).\r\n",
    "closedAt": null,
    "createdAt": "2021-05-15T18:29:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTcxMDQ0OA==",
          "body": "Moreover there is the same glitch if just to replace original `const fullname = ...` with:\r\n```ts\r\nconst fullname = derived([lastname, firstname], names => names.reverse().join(' '));\r\n```\r\nI.e. swap `lastname` and `firstname` in the array.\r\n[REPL](https://svelte.dev/repl/81bf186386e84f9f90f892782433578d?version=3.38.2)",
          "createdAt": "2021-05-15T19:11:01Z",
          "author": { "login": "Heliconter", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTIzNjU1NDE=",
    "body": "When I'm passing around, components to be rendered by\r\n\r\n```svelte\r\n<svelte:component this={component} />\r\n```\r\n\r\nis it possible to curry `component`? With a React component, I could so something like\r\n\r\n```jsx\r\nconst curried = (props) =>  <Component {...props} {...curriedProps} />\r\n```\r\n\r\nand `curriedProps` would be applied to all downstream invocations of `Component`. In Svelte, it seems I would need to pass both the `component` and `curriedProps` separately to all occurrences of `<svelte:component />` and then ensure each of them spreads `curriedProps` individually. Is that correct?\r\n\r\n```svelte\r\n<script>\r\n  export let component\r\n  export let notCurriedProps\r\n</script>\r\n\r\n<svelte:component this={component} {...notCurriedProps} />\r\n```",
    "closedAt": "2021-05-24T04:19:02Z",
    "createdAt": "2021-05-15T05:49:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcyMDYzNg==",
          "body": "You can easily create a component that accepts arbitrary props and merges them with some other values and displays another component with those props. I don't think the concept of currying makes as much sense in Svelte because components aren't just (pretending to be) functions.\n\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-05-24T04:18:55Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0Njc1ODI5Mg==",
          "body": "I was thinking of this more like a question to check if there's enough interest in this feature to warrant an RFC rather than a support question. Creating a new file to define a helper component that pre-fills a few props on another component certainly works but seems like a heavy-handed/clumsy way of currying to me.\r\n\r\nPerhaps I'm overestimating the usefulness of currying in Svelte projects, but I used to curry quite a lot in React projects and, based on that, thought it makes sense to have something like\r\n\r\n```svelte\r\n<script>\r\n  import { curry } from 'svelte'\r\n  import MyComponent from './MyComponent.svelte'\r\n\r\n  const Curried = curry(MyComponent, {foo: 'bar' })\r\n</script>\r\n\r\n<Curried />\r\n```",
          "createdAt": "2021-05-24T05:42:55Z",
          "author": { "login": "janosh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTIzNTA2MTI=",
    "body": "Warning about complications with Block-level element bindings and `position: relative`\r\n\r\nI think the svelte compiler should warn about Block-level bindings.\r\n\r\n**Problem:**\r\n\r\nThere are situations where `bind:clientWidth/clientHeight/offsetWidth/offsetHeight` does not cause any problem.\r\n\r\nBut there are situations like:\r\n\r\nUsing or not using binding causes the items to DISPLAY differently. This is a problem.\r\nhttps://svelte.dev/repl/7bf5621911fe4719b22ec8c7161f4622?version=3\r\n![obraz](https://user-images.githubusercontent.com/16800535/118347396-5ea15600-b543-11eb-9696-c55b689d1be7.png)\r\n\r\n```\r\nwith <code>bind:clientWidth</code>:\r\n<div class=\"a\">\r\n  <div class=\"b\" bind:clientWidth>\r\n    <div class=\"c\"></div>\r\n  </div>\r\n</div>\r\n<br>\r\nvs without <code>bind:clientWidth</code>:\r\n<div class=\"a\">\r\n  <div class=\"b\">\r\n    <div class=\"c\"></div>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n  let clientWidth;\r\n</script>\r\n\r\n<style>\r\n  .a {\r\n    position: relative;\r\n    size: 40px;\r\n    width: 70px;\r\n    height: 70px;\r\n    border: 1px solid green;\r\n  }\r\n  .b {\r\n    margin: 30px;\r\n  }\r\n  .c {\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 10px;\r\n    width: 50px;\r\n    height: 30px;\r\n    background: red;\r\n  }\r\n</style>\r\n```\r\n\r\n**Solution:**\r\n\r\nPerhaps the **Svelte compiler needs to detect situations and display WARNING**, where Block-level bindings are used in an intermediate element (class b), between a positioned element (class c) and an element with any relative position (class a).\r\nThe warning can be further narrowed down to the situation that the bound item (class b) has something like margin / padding / border etc. that distorts the position - because only then is it a problem.\r\n\r\nUnfortunately, you probably have to think about what other dependencies are disturbed by Block-level bindings and detect them.\r\n\r\n**Additional/only simple solution:**\r\n\r\nThere is only a link in the [documentation](https://svelte.dev/docs#Block-level_element_bindings) about \"technique used\". but there is nothing about the potential side effects. **There should be information about side effects in certain situations.**\r\n\r\n**Bonus words:**\r\n\r\nI don't know if there are other solutions in Svelte that cause unexpected problems, but you would also need to inform the developers about them.\r\n\r\n**Related Stuff:**\r\nhttps://github.com/sveltejs/svelte/blob/6d16e9260642b1fcc70fa4a24be9fd49985112d1/src/runtime/internal/dom.ts#L266\r\nhttps://github.com/sveltejs/svelte/blob/6d16e9260642b1fcc70fa4a24be9fd49985112d1/test/js/samples/bind-width-height/expected.js#L26",
    "closedAt": null,
    "createdAt": "2021-05-15T04:06:00Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTE0OTIzMzY=",
    "body": "**Describe the bug**\r\n\r\n`received an unexpected slot \"XXXXXX\"` for all the slots which were used in the component.\r\n\r\n**Logs**\r\n\r\n```\r\nindex.mjs:1701 <ts-divider> received an unexpected slot \"default\".\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```html\r\n<div class=\"ts-divider\">\r\n    <!-- Text -->\r\n    {#if $$slots.default}\r\n    <div class=\"ts-divider__text\">\r\n        <div class=\"ts-divider__text__start\">\r\n            <div class=\"ts-divider__text__line\"></div>\r\n        </div>\r\n        <div class=\"ts-divider__text__center\">\r\n            <slot></slot>\r\n        </div>\r\n        <div class=\"ts-divider__text__end\">\r\n            <div class=\"ts-divider__text__line\"></div>\r\n        </div>\r\n    </div>\r\n    {/if}\r\n    <!-- / Text -->\r\n\r\n    <!-- Line Only -->\r\n    {#if !$$slots.default}\r\n    <div class=\"ts-divider__line\"></div>\r\n    {/if}\r\n    <!-- / Line Only -->\r\n</div>\r\n```\r\n\r\n**Expected behavior**\r\n\r\nNo warning message should appeared.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n```\r\nindex.mjs:1701 <ts-divider> received an unexpected slot \"default\".\r\nvalidate_slots @ index.mjs:1701\r\ninstance       @ Divider.svelte:132\r\ninit           @ index.mjs:1517\r\nDivider        @ Divider.svelte:18\r\n(anonymous)    @ Divider.svelte:18\r\n(anonymous)    @ Divider.svelte:18\r\n```\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10): **Chrome 90**\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc): **Ubuntu 19.10**\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!): **^3.38.1**\r\n\r\n- Whether your project uses Webpack or Rollup: **Rollup**\r\n\r\n**Severity**\r\n\r\nIt's not immediate just annoying warning messages.\r\n\r\n**Additional context**\r\n\r\nRe-open an new issue from [Incorrect error message \"... received an unexpected slot \"default\". #4546](https://github.com/sveltejs/svelte/issues/4546)\r\n",
    "closedAt": null,
    "createdAt": "2021-05-14T00:50:55Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4OTA4OTA0NTA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIFs are the bread and butter of a lot of our dynamic components, (as well as of course awaits, eaches, etc), the main frustration is creating extra lines (and levels of nesting often needed for legibility) when I want a simple 'show if true'\r\n\r\n**Describe the solution you'd like**\r\nA simple inline conditional syntax for elements or components e.g. `<div #if{myvar || num > 2}></div>` (not overly fussed on syntax, but that was first thought)\r\n\r\n**Describe alternatives you've considered**\r\nOnly alternative is `{#if myvar || num > 2}<div></div>{/if}` but it's obviously less compact with real, bigger templates, and once it's used on multiple elements the amount of if-specific lines can get unwieldy\r\n![image](https://user-images.githubusercontent.com/12047843/118146195-44159280-b406-11eb-9faa-4fa756dbda31.png)\r\n\r\n\r\n**How important is this feature to you?**\r\nNot a huge issue, as the base feature support is generally there of course, but I feel like this would make these common simple conditionals create less of an impact on our templates.\r\n\r\n**Additional context**\r\nI would not necessarily assume any handling of else if/else, if needing those, you use the current full syntax. Perhaps they could be implemented if enforcing the elements/components are direct siblings.. but may get messy - other could go down angular's route of a 'switch' directive on a parent, then 'case' on the children... but that's another story I think",
    "closedAt": "2021-05-13T11:53:12Z",
    "createdAt": "2021-05-13T09:36:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDUwNzA4NA==",
          "body": "See also #6266 - we don't really want another way to do the same thing you can already do.",
          "createdAt": "2021-05-13T11:53:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDYxOTA4OQ==",
          "body": "Is it something that I could implement as a plugin or something? Because the more I look at my templates, the more I see how cumbersome the current syntax really is.. and the #range discussion is another way of doing #each over an array of numbers, so unsure about the argument provided...\r\n\r\nBut anyway, either way, I'd really like to clean up the templates and reduce bloat - any direction on plugins or whatever would be appreciated if possible",
          "createdAt": "2021-05-13T14:58:41Z",
          "author": { "login": "mbacon-edocs", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4ODMzNjUxNzI=",
    "body": "**Describe the bug**\r\nI'm attempting to write a helper function to standardize making fetch calls.  The idea would be to place that in a `helpers.js` file and import it in any components that need to make calls to the backend, to both reduce boilerplate and to ensure the calls follow a standardized format regarding headers, authtokens, etc.\r\n\r\nIn the simplified snippet below, `obj` holds some flags for the state of that request, which would be used to show loading indicators and other notifications on the component/page.  `onclick()` would be triggered by a button click but is just called directly for the example; that function is merely intended to call the `apicall()` helper function, passing the `obj` so the helper function can update the various flags during the request.\r\n\r\nWhen that snippet runs the console logs\r\n* `\"A\" { loading: false, tried: false }` then\r\n* `\"B\" { loading: true, tried: false }`, then one second later\r\n* `\"C\" { loading: false, tried: true }`\r\n\r\nbut afterwards the page still shows `{\"loading\":true,\"tried\":false}`, when I would expect it to show `{\"loading\": false,\"tried\": true}` like the `\"C\"` `console.log` shows.\r\n\r\nI've found that uncommenting the `FIXME1` line causes the page to show the expected text, as does uncommenting the `FIXME2` line.  \r\n\r\nUnfortunately, just leaving the `FIXME1` line uncommented doesn't work because if this helper function is to be reused, it cannot rely on `obj` being always called `obj` in the outer scope; a prime example would be a page that needs to make more than one apicall.  Replacing that `FIXME1` line with `objref = objref;` does not result in the page showing the expected text.\r\n\r\nFor now I've been adding those `FIXME2` lines which works, but I'd really like to have the `apicall` function handle this itself.  It's highly possible I'm missing something here, but after several hours of searching I've not found any better workaround; any help would be greatly appreciated.\r\n\r\n**To Reproduce**\r\n<https://svelte.dev/repl/hello-world?version=3.38.2>\r\n\r\n```\r\n<script>\r\n  let obj = {\r\n    loading: false,\r\n    tried: false,\r\n  };\r\n  async function apicall(objref) {\r\n    objref.loading = true;\r\n    console.log(\"B\", obj);\r\n    await new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve('foo');\r\n      }, 1000);\r\n    });\r\n    objref.loading = false;\r\n    objref.tried = true;\r\n    //obj = obj; // FIXME1\r\n  }\r\n  async function onclick() {\r\n    console.log(\"A\", obj);\r\n    await apicall(obj);\r\n    //obj = obj; // FIXME2\r\n    console.log(\"C\", obj);\r\n  }\r\n  onclick();\r\n</script>\r\n\r\n{JSON.stringify(obj)}\r\n```\r\n\r\n**Current behavior**\r\nPage shows `{\"loading\":true,\"tried\":false}` after `onclick()` executes.\r\n\r\n**Expected behavior**\r\nPage shows `{\"loading\": false,\"tried\": true}` after `onclick()` executes.\r\n\r\n**Severity**\r\nMedium?  Can workaround as described above, but that workaround is non-obvious and prone to being missed, would be much better if it could be handled within the helper function itself.\r\n",
    "closedAt": "2021-05-10T06:38:43Z",
    "createdAt": "2021-05-10T04:46:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNjI0ODM3NA==",
          "body": "This is the intended and expected behavior. Svelte rerenders variables upon reassignment, it does not notice object mutations. In your case you would use a store to get your desired behavior, which you can subscribe to in your component and which will trigger rerenders upon updates.",
          "createdAt": "2021-05-10T06:38:43Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4ODE0NTMzMjM=",
    "body": "I have this bug in my Svelte project (im new to svelte)\r\n```\r\nindex.mjs:199 Uncaught (in promise) TypeError: Cannot read property 'removeChild' of null\r\n    at detach$1 (index.mjs:199)\r\n    at detach_dev (index.mjs:1603)\r\n    at Object.destroy [as d] (MatchReport.svelte:58)\r\n    at destroy_each (index.mjs:204)\r\n    at Object.destroy [as d] (MatchReport.svelte:50)\r\n    at Object.destroy [as d] (MatchReport.svelte:32)\r\n    at destroy_component (index.mjs:1445)\r\n    at Router.svelte:211\r\n    at index.mjs:813\r\n    at run (index.mjs:18)\r\n```\r\n\r\nThe bug comes from Datatables.net, it gets added to the dom but cant be removed.\r\n\r\nAnyone know how i can fix this? Do i need to keep track of these things in svelte?\r\nIt works when entering the route , the error comes when leaving it.\r\n\r\nCode:\r\n```\r\n<script>\r\n  import { onMount } from \"svelte\";\r\n  import jQuery from \"jquery\"\r\n  import dt from \"datatables.net\"\r\n  dt(jQuery)\r\n      let tableElement\r\n  onMount(_=>{\r\n  let element = document.getElementById('dt')\r\n      jQuery(tableElement).DataTable();\r\n      console.log(element)\r\n    });\r\n\r\n  let apiURL = 'http://localhost:3000/api/orgs';\r\n  async function getUsers() {\r\n    let response = await fetch(apiURL);\r\n    let disks = await response.json();\r\n    return disks;\r\n    }\r\n\r\n  const promise = getUsers();\r\n\r\n  const tt = el =>{\r\n      \r\n      jQuery(el).DataTable();\r\n    }\r\n  function detach(node) {\r\n    node.parentNode.removeChild(node);\r\n}\r\n</script>\r\n      <p>venter</p>\r\n\r\n    {#await promise}\r\n      test123\r\n    {:then data}\r\n      <div>\r\n<table use:tt border=\"1px\" class=\"table table-sm shadow-sm\">\r\n  <thead>\r\n    <tr>\r\n<th>Status</th>\r\n<th>Org navn</th>\r\n<th>Org id</th>\r\n<th>GoogleDrive</th>\r\n<th>GoogleDrive ID</th>\r\n<th>AdGroup</th>\r\n<th>AdGroup ID</th>\r\n<th>Actions</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {#each data as org}\r\n    <tr>\r\n      <td>O</td>\r\n      <td>{org.organizationValue}</td>\r\n      <td>{org.organizationValueDescription}</td>\r\n      <td>{org.mappings.googleDrive.name}</td>\r\n      <td>{org.mappings.googleDrive.id}</td>\r\n      <td>{org.mappings.googleDrive.accessGroup.name}</td>\r\n      <td>{org.mappings.googleDrive.accessGroup.ssid}</td>\r\n      <td></td>\r\n    </tr>\r\n    {/each}\r\n  </tbody>\r\n</table>\r\n      </div>\r\n    {:catch error}\r\n      {/await}\r\n```\r\n\r\n",
    "closedAt": "2021-05-10T10:50:35Z",
    "createdAt": "2021-05-08T23:23:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNjQ2ODI4Mw==",
          "body": "I was unable to reproduce the error in the repl. Your action can return an object with a \"destroy\" method, which will be run when the element is removed from the DOM. Maybe that'll help.\r\n\r\n```\r\nconst action = el => {\r\n  console.log(\"setup\");\r\n  return {\r\n    destroy() { console.log(\"teardown\"); }\r\n  }\r\n}\r\n```",
          "createdAt": "2021-05-10T09:34:33Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNjU0NTc2Nw==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-05-10T10:50:32Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4ODA5OTI3NjY=",
    "body": "**Describe the bug**\r\n`on:input` behaves differently depending on whether the same key is pressed repeatedly, or different keys are pressed.  See the example in \"to reproduce\" section.  This code should only allow one character in the input box, the final character the user types.  This code works as expected if the user types something like \"ABC\", the input value is set to \"C\", but \"ABB\" leaves \"BB\" in the input box.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/7372c9f2886e4d22828895e13d10ccf4?version=3.38.1\r\n\r\n    <script>\r\n\t    let char = ''\r\n\t    const setChar = (e) => char = e.data\r\n    </script>\r\n    \r\n    <input type='text' value={char} on:input={setChar}>\r\n\r\n**Expected behavior**\r\nEach time a key is pressed, the final input key should be the only thing in the input box.\r\ne.g.\r\n* \"S\" => \"S\"\r\n* \"ABC\" => \"C\"\r\n* \"SSS\" => \"S\"\r\n\r\nThe final example above does not work as intended, the result is actually:\r\n* \"SSS\" => \"SSS\"\r\n\r\n**Severity**\r\nNo idea! I've found the workaround for my use case, replace:\r\n\r\n\tlet char = ''\r\n\tconst setChar = (e) => char = e.data\r\n\r\nwith:\r\n\r\n\tlet char = ''\r\n\tconst setChar = (e) => {\r\n\t\tchar = ''\r\n\t\tchar = e.data\r\n\t}\r\n\r\nI'm not sure if this workaround is sane (or performant), but it does work.\r\n\r\n**Additional context**\r\nI assume this has something to do with the way that Svelte compiles the code and compares for changes, as it only affects repeat events. \r\nAlso worth noting that this is my first time trying Svelte, it may not be a bug but instead my lack of understanding how things work! If it is the latter, advice on where my code and mental model are wrong would be appreciated.",
    "closedAt": "2021-05-10T15:07:35Z",
    "createdAt": "2021-05-08T16:02:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNTc4NDg5MA==",
          "body": "Hi,\r\nI'm also a svelte beginner, so take what I say with a grain of salt.\r\nFrom what it looks like in the generated code, svelte only updates components that it previously marked as \"dirty\". I cannot find that term in their own docs, but here is a blogpost that I skimmed over rapidly mentionning how it works https://lihautan.com/compile-svelte-in-your-head-part-2/ \r\n\r\nHere's the code that manages this : \r\n```javascript\r\n$$.ctx = instance\r\n            ? instance(component, options.props || {}, (i, ret, ...rest) => {\r\n                const value = rest.length ? rest[0] : ret;\r\n                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\r\n                    if (!$$.skip_bound && $$.bound[i])\r\n                        $$.bound[i](value);\r\n                    if (ready)\r\n                        make_dirty(component, i);\r\n                }\r\n                return ret;\r\n            })\r\n            : [];\r\n```\r\n\r\nWhat is of interest to us here is the `not_equal` call in the first if statement, it'll evaluate to false when you repeat the same char and thus not call `make_dirty` on the input component consequently not updating the DOM.\r\nOn the other hand if you console log the value of `char` you can see that it actually works like you intended, the problem lies solely in the DOM not updating.\r\n\r\nI would guess that fixing this particular issue would introduce unnecessary DOM updates everywhere else, and that your quick fix (for this specific use case) works well enough",
          "createdAt": "2021-05-09T11:17:37Z",
          "author": { "login": "Istoman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNTg0NzQ0MQ==",
          "body": "You assume that `char` will be updated with the content of the input field, but it's not the case without a bind. As char is not updated if you press the same key twice, the input is not updated either. to me it's not a bug but the expected behavior.\r\n\r\nTo fix it, use `bind:value`  \r\n\r\n```html\r\n<script>\r\n\tlet char = ''\r\n\tconst setChar = (e) => char = e.data\r\n</script>\r\n\r\n<input type='text' bind:value={char} on:input={setChar}>\r\n```",
          "createdAt": "2021-05-09T17:20:27Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNTg1NDQxNQ==",
          "body": "Thanks @Istoman yes I should have noted in my example that if you log the value of `e.data` it is working as I expected. Thanks for your blog post, I read it and it helped my understanding. \r\n\r\n@j3rem1e thanks for the comment. Could you explain the `bind`? The use case in the tutorial docs is to make a two-way binding between component value and a variable, specifically without the need for a event handler. How do understand what it is doing here when I am also changing the value of char in the input handler?\r\n\r\n> As char is not updated if you press the same key twice, the input is not updated either. to me it's not a bug but the expected behavior.\r\n\r\nI agree the value of `char` is not updated if you press the same key twice. But the value of the input in the DOM *is* updated, I assume by the native action of the browser, and svelte is not overwriting it with the value of `char`, perhaps because of the failure to `make_dirty` @Istoman points out. ",
          "createdAt": "2021-05-09T18:02:23Z",
          "author": { "login": "jamesp", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNjczMTM2Mg==",
          "body": "I'd say it behaves as intended, because that's precisely what Svelte means with \"surgically updates the DOM when the state of your app changes\". It will only update the DOM if the prop changes. It does not change.\r\n\r\nYou've introduced an asymmetry by mixing Svelte and native DOM land. If you need that type of control over your input Svelte always gives your very easy access to the DOM directly. That's the beauty of Svelte when you ask me.\r\n\r\nThe following has even less code than your original:\r\n\r\nhttps://svelte.dev/repl/fdaaa1aec3ec4ebd9671d32aec0d5e5b?version=3.38.1\r\n\r\nIf you need even more control then move away from `input` and use `keypress`. Then you can `preventDefault` and keep using the `value` prop because you control it 100%. But of course pasting etc. is not covered automatically.\r\n\r\nhttps://svelte.dev/repl/25886038dd2144428be4c31a3b3a5ab4?version=3.38.2\r\n\r\nEdit: For fun here is a pure Svelte version using reactivity https://svelte.dev/repl/a73ee16a88d44bdb80f24735e5f9a640?version=3.38.2",
          "createdAt": "2021-05-10T13:54:57Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNjgxNTM4Mw==",
          "body": "Thanks @Prinzhorn, that is super helpful! I see how this is not a bug, so will close out this issue.  \r\n\r\n> You've introduced an asymmetry by mixing Svelte and native DOM land.\r\n\r\nThis is right. Following only the tutorials on the website, Svelte feels \"magic\", in both the good and the bad.  Especially the `bind` keyword.  The examples you've provided and the conversation above have been very instructive in Svelte-way to do things.",
          "createdAt": "2021-05-10T15:07:35Z",
          "author": { "login": "jamesp", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4ODA2MDE0NTg=",
    "body": "**Describe the bug**\r\n`this` is undefined in event handlers, when handling a DOM event which has been forwarded from a child component\r\n\r\n**Logs**\r\nSee repro\r\n\r\n**To Reproduce**\r\nThe bug can be easily reproduced in the [DOM Event Forwarding](https://svelte.dev/tutorial/dom-event-forwarding) section of  the tutorial. Click `Show me`, then replace the `handleClick` definition with:\r\n\r\n```\r\n\tfunction handleClick(event) {\r\n\t\talert(this);\r\n\t}\r\n```\r\n\r\nThis caused confusion later in the tutorial, in the [Lifecycle/tick](https://svelte.dev/tutorial/tick) section, where `this` in a handler refers to `event.target`.\r\n\r\n**Expected behaviour**\r\nUnless this is intentional, I would expect consistency in how event handlers can be used regarding `this`. On the other hand, if using `this` from event handlers is discouraged, the above-mentioned `tick` section in the tutorial could use `event.target` instead\r\n\r\n**Additional Context**\r\nA discord user pointed me to https://github.com/sveltejs/svelte/blob/dafbdc286eef3de2243088a9a826e6899e20465c/src/runtime/internal/lifecycle.ts#L64-L70 where it appears the callbacks for the component events are invoked. If `event` here is the original DOM event, it may be as simple as calling the callback in the context of `event.target`:\r\n\r\n```\r\nfn.call(event.target, event)\r\n```\r\n\r\nIn the event that `event.target` is undefined, we're back to where we started (`this` is undefined)",
    "closedAt": "2021-06-22T14:12:25Z",
    "createdAt": "2021-05-08T10:01:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNjc0ODczNg==",
          "body": "I'm not an expert here, but here's what I'm seeing:\r\n\r\nIn the `tick` example you're binding the event directly on `<textarea>` so you know what's happening and `this` behaves as expected. But I agree that it shouldn't use `this` there since it's also common to use arrow functions as event handlers and I personally always use `event.target`.\r\n\r\nWhen you are using the `<CustomButton>` component, you have _no idea_ what `this` even means. It _could_ be a forwarded event, but you don't know from what type of element. But it could very well be a `dispatch('click')` without any DOM involved. What should `this` be then? It might make sense to have `this` point to the `CustomButton` instance?\r\n\r\nSo I'm with you that `this` should be discouraged I guess.",
          "createdAt": "2021-05-10T14:10:14Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDM4NDU4MQ==",
          "body": "@Prinzhorn This issue is about preserving the `this` value for DOM forwarded events, so it matches the behavior of directly binding the event in the same component. Custom dispatched events would be expected to have `this` be `undefined`. \r\n\r\nBut yeah, `this` is just confusing in general.",
          "createdAt": "2021-05-13T07:45:06Z",
          "author": { "login": "bluwy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDgxODYyNg==",
          "body": "@bluwy what I meant is that a consumer of `CustomButton` does not know that it is a forwarded event. That's internal information. A realistic example would be a `Slider` component where the first iteration simply forwards the `click` event. But then in a later version custom custom `click` is triggered only when the cursor hasn't moved a certain threshold, so that sliding a slide doesn't also trigger the click. A consumer of `Slider` shouldn't care about this internal change. Hence you cannot rely on the internal information that this was originally a forwarded event. Does that make sense?",
          "createdAt": "2021-05-13T20:36:13Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDk3MTU4NQ==",
          "body": "@Prinzhorn I'm not sure if that's true. One way or another, the consumer of the component would need to know if it's a forwarded DOM event or a dispatched event. This can't be hidden internally since the `Event` object is being interacted by the consumer. \n\nIn case of a forwarded DOM event, the event type would be e.g. `MouseEvent`, while a dispatched event, it would be a `CustomEvent`. Both are of completely different shape and it would be a breaking change if you decide to swap between the two. ",
          "createdAt": "2021-05-14T02:55:44Z",
          "author": { "login": "bluwy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjExMTU3MA==",
          "body": "`this` should be getting bound as part of forwarded/bubbled events now in 3.38.3.",
          "createdAt": "2021-06-22T15:55:03Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzgxMTI1MTY=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThe Svelte team has recently added support for passing CSS custom properties to a component with the release of Svelte 3.38.0\r\n\r\nThis makes it possible to write something like this on a component:\r\n```\r\n<Drawer --test1=\"red\">\r\n```\r\nor the following if you want to add multiple CSS custom properties.\r\n\r\n```\r\n<Drawer --test1=\"red\" --test2=\"black\">\r\n```\r\nAnd wil create a div around your component that will look something like this:\r\n```\r\n<div style=\"display: contents; --test1: red; --test2=black;\">\r\n```\r\n\r\nThis great for passing CSS custom properties.\r\n\r\nOne thing I could not do was adding CSS custom properties dynamically instead of defining each one individually on a component.\r\nThis is different for props that can be added in the way described on this tutorial page: https://svelte.dev/tutorial/spread-props  \r\n\r\n**Describe the solution you'd like**\r\nI would be great if CSS custom properties could be added in a similar way as props can. See https://svelte.dev/tutorial/spread-props. \r\n\r\n**Describe alternatives you've considered**\r\nA wrapper object can be made by the programmer around the component which takes an object with the CSS custom properties  and builds a style string from those props. But that's up to the programmer.\r\n\r\nExtending https://svelte.dev/tutorial/spread-props that it can read --test: \"red\" as CSS custom property and that it sets it on the component might be an option as well.\r\n\r\n**How important is this feature to you?**\r\n\r\nI am writing Svelte (TS) components that expose CSS that can be altered by CSS custom properties. I would like to give the users interfaces and types with the properties that wil change the CSS. An Object based on those will make it easier to set the properties and pass them without errors. That's why I see benefit in setting CSS custom properties in a similar way as https://svelte.dev/tutorial/spread-props. \r\n\r\nI hope that I explained it clearly.\r\n\r\nKind regards,\r\nTom",
    "closedAt": "2021-05-24T03:57:33Z",
    "createdAt": "2021-05-06T22:16:15Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTYyNDAwNA==",
          "body": "Something like this right: https://svelte.dev/repl/180d5f885c054d03ac6ebbd5d2230830?version=3.38.2",
          "createdAt": "2021-05-15T08:42:55Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTY1OTEzOQ==",
          "body": "> Something like this right: https://svelte.dev/repl/180d5f885c054d03ac6ebbd5d2230830?version=3.38.2\r\n\r\n@TheComputerM it is indeed the idea of this feature request to make it possible to pass an object with custom css props and end up with both buttons in red and with a similar div around them.\r\n\r\nKind regards,\r\nTom\r\n",
          "createdAt": "2021-05-15T13:27:18Z",
          "author": { "login": "Takuma-The-Akai-Kage", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcxNDI0NQ==",
          "body": "This would require extra compiled code for everyone even if they weren't using this feature. If you need this, you can just use the wrapping div that this is syntactical sugar for.",
          "createdAt": "2021-05-24T03:57:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Nzc4ODcwNzM=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIn svelte, if you want each value of a number to do something different, you have to have something like this:\r\n```\r\n{#if value === 1}\r\none\r\n{:else if value === 2}\r\ntwo\r\n{:else if value === 3}\r\nthree\r\n{:else}\r\nsome other number\r\n{/if}\r\n```\r\nHowever, this can be tedious. \r\n \r\n**Describe the solution you'd like**\r\nI want a `{#switch}` block. You would use it like this:\r\n\r\n```\r\n{#switch value}\r\n{:case 1}\r\none\r\n{:case 2}\r\ntwo\r\n{:case 3}\r\nthree\r\n{:default}\r\nsome other number\r\n{/switch}\r\n```\r\n\r\n**How important is this feature to you?**\r\nIt's not very important. It's just a more convenient syntax to do things.\r\n",
    "closedAt": "2021-05-06T19:09:46Z",
    "createdAt": "2021-05-06T19:04:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzc4OTQzNg==",
          "body": "This has come up before, and there's currently an RFC that someone has opened for it at https://github.com/sveltejs/rfcs/pull/49",
          "createdAt": "2021-05-06T19:09:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzkwNDgzNTg=",
    "body": "When I try to embed the repl I get the following error:\r\n\r\n    :global(...) can be at the start or end of a selector sequence, but not in the middle\r\n\r\nWhen I comment these lines the error goes away and it loads, but the styling is messed up:\r\n\r\nhttps://github.com/sveltejs/svelte-repl/blob/v0.2.1/src/Repl.svelte#L213-L225\r\n\r\n",
    "closedAt": "2021-06-22T15:53:52Z",
    "createdAt": "2021-05-06T11:53:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzYwMjAxMg==",
          "body": "It seems that this code isn't valid in the latest versions of Svelte:\r\n\r\nhttps://svelte.dev/repl/1764cf66cdf343338e54856f314f749f?version=3.37.0 - no error\r\nhttps://svelte.dev/repl/1764cf66cdf343338e54856f314f749f?version=3.38.0 - error\r\n\r\n",
          "createdAt": "2021-05-06T15:11:47Z",
          "author": { "login": "tomyan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNTIzNDQ1MA==",
          "body": "not sure is there a bug in the validator but below is how i will write if i want to do what you want. which i think it is the same thing but shorter.\r\n```\r\n  .container :global(section > *:first-child) {\r\n\tcolor: red;\r\n}\r\n```\r\ninstead of \r\n```\r\n .container :global(section) > :global(*):first-child {\r\n\tcolor: red;\r\n}\r\n```",
          "createdAt": "2021-05-08T09:14:45Z",
          "author": { "login": "roychoo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDY3NTIxMQ==",
          "body": "~I'm experiencing this issue as well, and with only a single level `global` selector. Here is my failing style:~\r\n\r\nThis was my fault. I was using SCSS and forgot how nested commands would compile 😳 ",
          "createdAt": "2021-05-28T21:19:23Z",
          "author": { "login": "nikmolnar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjExMDU5OA==",
          "body": "This is fixed in 3.38.3 - https://svelte.dev/repl/1764cf66cdf343338e54856f314f749f?version=3.38.3 this CSS is now allowed again.",
          "createdAt": "2021-06-22T15:53:52Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzczMjE3MDI=",
    "body": "Hi\r\n\r\nI wondered if it would be possible to \"unscope\" all css selectors within a style tag. I am aware this can be done on a selector basis by using the :global() modifier. But I need to create styles visible throughout my website (theming). I thought doing it in the style section of the $layout.svelte was a good place to do that. But I need to use the :global modifier on each selector and that's a bit cumbersome.\r\n\r\nI also tried doing creating a .css which I import in my $layout.svelte. It works but I loose windicss intellisense support in a css file and it obliges me to manage these styles seperately from styles defined in .svelte files (e.g. minification...).\r\n\r\n",
    "closedAt": "2021-05-06T10:02:22Z",
    "createdAt": "2021-05-06T09:57:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzQwMTMwMw==",
          "body": "Duplicate of #6186 ",
          "createdAt": "2021-05-06T10:02:22Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzU3NzMyNjE=",
    "body": "Looks like I can pass empty directive names which can generate invalid JS code without any compilation errors or with unclear errors\r\n\r\nFor example in actions\r\n```svelte\r\n<element use: />\r\n````\r\nParts of generated code looks like:\r\n```javascript\r\ndispose = action_destroyer(_action = .call(null, h1));\r\n```\r\n\r\nSame happens with event directive. but it does not throw JS syntax error\r\n```javascript\r\ndispose = listen(h1, \"\", /*_handler*/ ctx[0]);\r\n```\r\n\r\nWith bind and animation directives. It throws an error because it is not able to look for the empty variable name in the component.\r\n\r\n`[!] (plugin svelte) ValidationError:  is not declared`\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-05-04T19:39:01Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNjQ5MTEyOQ==",
          "body": "Unable to reproduce in the repl. The one-line App.svelte component of `<div use: />` gives me `Unexpected token (Note that you need plugins to import files that are not JavaScript)`\r\n\r\nWhich version is this?\r\n",
          "createdAt": "2021-05-10T09:54:36Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNzAwMDg1Mg==",
          "body": "You already reproduced it. This message because rollup cannot parse the invalid generated code `dispose = action_destroyer(_action = .call(null, h1));`",
          "createdAt": "2021-05-10T17:22:45Z",
          "author": { "login": "mhmd-22", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzU2NzU0Mjc=",
    "body": "**Describe the bug**\r\n\r\nWhen you `bind:` values from a store inside `#each` it will call `set` for every iterated item for no reason. I'm using this pattern a lot where I have a store (that is backed by `sessionStorage`, synced via `BroadcastChannel` and persisted via `fetch()`). I love how I can pass values from inside a store around, then child components can update them and everything magically works across windows and is persisted between app restarts (Electron).\r\n\r\nBut I've just ran into an edge case where I'm seeing a lot of completely unnecessary calls to `set`, causing pointless disk and network I/O. Since this is happening inside `#each` there can easily be dozens of `set` for each item I bind to.\r\n\r\n**To Reproduce**\r\n\r\nI wrapped the `set` method so it logs every call. When you open this REPL you'll see two `set` calls for no reason.\r\n\r\nhttps://svelte.dev/repl/1e967d0310c3428989dde2ec1bf70087?version=3.38.2\r\n\r\n**Expected behavior**\r\n\r\nThere is no reason to call `set` when there was no change.\r\n\r\n**Information about your Svelte project:**\r\n\r\nREPL 3.38.2\r\n\r\n**Severity**\r\n\r\nMedium. I'll probably have to workaround this by sprinkling some `fast-deep-equal` over my stores.",
    "closedAt": null,
    "createdAt": "2021-05-04T17:25:18Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMjY0MDc5MA==",
          "body": "> I'll probably have to workaround this by sprinkling some `fast-deep-equal` over my stores.\r\n\r\nNope, that doesn't generically work, because the point is that I work with mutable objects. I update a property deep inside an object that is held by a store and then call `set` to notify everyone (or like in this issue `bind` does that for me). Checking for equality is always true because it's the same reference.",
          "createdAt": "2021-05-05T12:16:57Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzUwNzIxNjA=",
    "body": "Not sure if issue or docs question, but using [slot props](https://svelte.dev/docs#slot_let) throw TypeScript error TS2339.\r\n`Property '$$slot_def' does not exist on type SomeComponent. ts(2339)`\r\n\r\n```html\r\n<SomeComponent rows={rows} let:row>\r\n  {row.name}\r\n</SomeComponent>\r\n```\r\n\r\nI have a d.ts file:\r\n\r\n```javascript\r\nexport interface SomeComponentProps {\r\n  rows?: any[];\r\n}\r\n```\r\n\r\nbut adding `$$slot_def?: any` did not resolve.  What is the correct usage/definition here?",
    "closedAt": "2021-05-04T06:26:24Z",
    "createdAt": "2021-05-04T03:32:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTcxMDgxNQ==",
          "body": "The proper way to type a component is to extend from the `SvelteComponentTyped` class. In your d.ts file:\r\n\r\n```ts\r\nimport { SvelteComponentTyped } from 'svelte';\r\n\r\nexport class SomeComponent extends SvelteComponentTyped<{ rows?: any[]}, {}, { default: { row: any }}> {}\r\n```\r\nThe first generic is the props, the second the events, the third the slots. The JSDoc of `SvelteComponentTyped` has more info.\r\n\r\nAlso see https://github.com/sveltejs/svelte/issues/5769 ",
          "createdAt": "2021-05-04T06:26:24Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzQ5MTYwODM=",
    "body": "**Describe the bug**\r\nIt's totally valid to create a store without an initial value, but TypeScript complains:\r\n\r\n![image](https://user-images.githubusercontent.com/1162160/116934223-aca88680-ac32-11eb-9b3d-181e31b950d5.png)\r\n\r\n**Expected behavior**\r\n`store = writable()` etc should be accepted by TypeScript. I guess `value: T` here just needs to be `value?: T` (and similarly for `readable`)?\r\n\r\nhttps://github.com/sveltejs/svelte/blob/086cff22721f9589981ba9f6ec0bedc861e25623/src/runtime/store/index.ts#L64\r\n\r\n**Information about your Svelte project:**\r\nIt's a SvelteKit project using `svelte@3.37.0`\r\n\r\n**Severity**\r\nMinor — easily worked around with `writable(undefined)`",
    "closedAt": "2021-05-20T13:31:52Z",
    "createdAt": "2021-05-03T21:15:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjExMDk5Mg==",
          "body": "The types have been updated in 3.38.3 to indicate that the first argument is optional.",
          "createdAt": "2021-06-22T15:54:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzQ2MzYwNjk=",
    "body": "When a closing curly brace is missing inside property passed to a component the error message isnt very meaningful:\r\n\r\n```html\r\n<Component2 test={{var:1} />\r\n```\r\n\r\n-> Unterminated regular expression (6:27)\r\n\r\n\r\nIs it possible to make it to unterminated property value or something like this?",
    "closedAt": null,
    "createdAt": "2021-05-03T14:41:58Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzQzNzY5NDc=",
    "body": "https://astexplorer.net/#/gist/30071e5e2620f2d0e2e38f54cb7350b8/a5398ab81434679120e3d97c516bba48143bc3c5\r\n```svelte\r\n<input foo=\"\" />\r\n```\r\n```json\r\n{\r\n  \"start\": 7,\r\n  \"end\": 13,\r\n  \"type\": \"Attribute\",\r\n  \"name\": \"foo\",\r\n  \"value\": []\r\n}\r\n```\r\nUnexpected : `value` is undefined\r\n\r\nExpected \r\n```json\r\n\"value\": [\r\n  {\r\n    \"start\": 12,\r\n    \"end\": 12,\r\n    \"type\": \"Text\",\r\n    \"raw\": \"\",\r\n    \"data\": \"\"\r\n  }\r\n]\r\n```",
    "closedAt": null,
    "createdAt": "2021-05-03T08:57:22Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM4NjgwNzY=",
    "body": "I'm quite new to the svelte world and I've been working with it for some weeks and I encountered a case that I don't know how to handle.\r\n\r\nIn svelte if you want to update the UI with the updated value you can just use a simple variable and reassign it to trigger the update (svelte handle it for you) as in this example:\r\n```\r\n\r\n<script>\r\n\tlet count = 0;\r\n\r\n\tfunction handleClick() {\r\n\t\tcount += 1;\r\n\t}\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n\tClicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>\r\n\r\n```\r\n\r\nWhat happens if I want to mode the function **handleClick** in another file and pass `count ` as an argument to that function.\r\nThe problem is that this is not going to update the state.\r\n\r\n[repl here](https://svelte.dev/repl/261c26887ae1403b89803cfc84da0b06?version=3.38.1\r\n)\r\n```\r\n// app.svelte\r\n<script>\r\n\timport handleClick from './Component2.js'\r\n\tlet count = 0;\r\n\r\n\r\n</script>\r\n\r\n<button on:click={() => handleClick(count)}>\r\n\tClicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>\r\n\r\n\r\n```\r\n\r\n```\r\n// whatever.js\r\nexport default function handleClick(count) {\r\n\tcount += 1;\r\n}\r\n```\r\n\r\nThese are two of the \"**workaround**\" I found:\r\n\r\n **CallBack**:\r\nthe first one is using a callback\r\n\r\n[repl here](https://svelte.dev/repl/2c202c10bb95493ba9338c9c06934f93?version=3.38.1\r\n)\r\n\r\n```\r\n// app.svelte\r\n<script>\r\n\timport handleClick from './whatever.js'\r\n\tlet count = 0;\r\n\r\n\r\n</script>\r\n\r\n<button on:click={() => handleClick(count, (v) => {count = v} )}>\r\n\tClicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>\r\n\r\n```\r\n```\r\n//whatever.js\r\nexport default function handleClick(count, cb) {\r\n\tcb(count += 1);\r\n}\r\n```\r\n\r\n**Store**\r\n\r\n[store example](https://svelte.dev/tutorial/writable-stores).\r\n\r\nI would like to know if there is any better way to handle these cases, In my opinion quite common when you want to split your code into different files.\r\n",
    "closedAt": "2021-05-02T10:38:25Z",
    "createdAt": "2021-05-02T07:00:40Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDc2OTQwMA==",
          "body": "There is no reactivity outside of your components, so the svelte compiler doesn't even touch your `whatever.js`\r\n\r\nFrom my experience using stores is almost always the way to go. Stores are so simple yet magical. They transparently make your entire app reactive. If you need `count` in more than one component it makes sense to have it in a store (unless it's within a single hierarchy, then using `bind:count` might be an option).\r\n\r\n> when you want to split your code into different files.\r\n\r\nCould you post an actual example? I don't think someone would move `handleClick` to a different file. That's precisely what the component `<script>` is for.\r\n\r\nHere's how you can customize a store with an `increment` method (but of course, you can also just do `$count++` if the store has a `set` function, it's just to see how much stores can do). A store is really just an object with a `subscribe` function, see https://svelte.dev/docs#Store_contract.\r\n\r\nhttps://svelte.dev/repl/75fa604084644436b6805a5862d5d92e?version=3.38.1\r\n\r\n```svelte\r\n<script>\r\n\timport { count } from './stores.js'\r\n</script>\r\n\r\n<button on:click={count.increment}>\r\n\tClicked {$count} {$count === 1 ? 'time' : 'times'}\r\n</button>\r\n```\r\n\r\n```js\r\nimport {writable} from 'svelte/store'\r\n\r\nconst { set, update, subscribe } = writable(0);\r\n\r\nexport const count = {\r\n  set,\r\n  subscribe,\r\n  increment: () => {\r\n     update(value => value + 1);\r\n  }\r\n};\r\n```\r\n\r\nIf you don't export `set` as part of `count` you'll have a read-only store that can only be updated using the `increment` function.",
          "createdAt": "2021-05-02T08:10:36Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDc3MDc5Ng==",
          "body": "In a real project, I'm making, I'm using a 2d array that I pass to some algorithm functions (in separate files) and I need that to be reactive (not just returning the result)",
          "createdAt": "2021-05-02T08:21:48Z",
          "author": { "login": "Ladvace", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDc4NzY2Ng==",
          "body": "If you want to have reactivity outside of a component, a store would probably be a preferred way.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-05-02T10:38:25Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM4NjcyNzc=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIt is very difficult and inconvinient to use svelte docs due to its light mode\r\n**Describe the solution you'd like**\r\nAdding a Dark Mode\r\n\r\n**How important is this feature to you?**\r\nVery Important\r\n",
    "closedAt": null,
    "createdAt": "2021-05-02T06:55:52Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTQ4OTcwMA==",
          "body": "I support this idea.\r\n\r\nIn the meantime you can enable the `Force Dark Mode for Web Contents` flag in any chromium based web browser by following the steps shown on the two pictures bellow.\r\n\r\n![01](https://user-images.githubusercontent.com/29838606/116923908-80ebc780-ac57-11eb-88d6-057223aff1f7.png)\r\n\r\n![02](https://user-images.githubusercontent.com/29838606/116923921-8517e500-ac57-11eb-99ca-2ea8db0e8987.png)\r\n\r\nNext one shows what the result currently looks like for the [svelte.dev/docs](https://svelte.dev/docs) webpage.\r\n\r\n![03](https://user-images.githubusercontent.com/29838606/116924666-7aaa1b00-ac58-11eb-84f6-13c20162f99c.png)\r\n\r\n\r\n",
          "createdAt": "2021-05-03T19:45:16Z",
          "author": { "login": "phaleth", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM4MTI0NDQ=",
    "body": "**Describe the bug**\r\nOn hydration, nodes containing {braced expressions} have their children rendered out of order.\r\n\r\nNote that it’s reproducible with 3.38.1.\r\n\r\n**To Reproduce**\r\nThe quickest way, probably: https://github.com/intrikate/svelte-hydration-order-issue.\r\n\r\nOtherwise, putting an expression and a `span` under a common parent seems to reliably trigger this behaviour. Something like `<p>{1} 2 <span>3</span></p>` will hydrate into ‘13 2 ’.\r\n\r\n**Expected behavior**\r\nThe order of nodes should be preserved in hydration.\r\n\r\n**Information about your Svelte project:**\r\n<details>\r\n  <summary>envinfo</summary>\r\n  System:\r\n    OS: macOS 11.2.3\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-4288U CPU @ 2.60GHz\r\n    Memory: 64.55 MB / 8.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 14.16.0 - /usr/local/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 6.14.11 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 90.0.4430.93\r\n    Firefox Developer Edition: 89.0\r\n    Safari: 14.0.3\r\n  npmPackages:\r\n    svelte: ^3.38.1 => 3.38.1\r\n</details>\r\n\r\n**Severity**\r\nHigh.\r\n\r\n**Additional context**\r\nLike #6274, this behaviour is not present in 3.37.0, but, sadly, remains in 3.38.1.\r\n",
    "closedAt": "2021-05-04T03:34:48Z",
    "createdAt": "2021-05-02T01:47:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDg2OTc2MA==",
          "body": "Having probably the same issue here, one braced expression is also duplicated on one of my components. Had to revert on 3.37.",
          "createdAt": "2021-05-02T20:49:40Z",
          "author": { "login": "Litarvan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTA5NzIxMA==",
          "body": "I think I've figured out the cause of this.\r\n\r\nThe following snippet: \r\n```svelte\r\n<p>{1} 2 <span>3</span></p>\r\n```\r\n\r\nComplies to:\r\n```js\r\n// ... snip\r\n\t\tc() {\r\n\t\t\tp = element(\"p\");\r\n\t\t\tt0 = text(t0_value);\r\n\t\t\tt1 = text(\" 2 \");\r\n\t\t\tspan = element(\"span\");\r\n\t\t\tt2 = text(\"3\");\r\n\t\t},\r\n\t\tl(nodes) {\r\n\t\t\tp = claim_element(nodes, \"P\", {});\r\n\t\t\tvar p_nodes = children(p);\r\n\t\t\tt0 = claim_text(p_nodes, t0_value);\r\n\t\t\tt1 = claim_text(p_nodes, \" 2 \");\r\n\t\t\tspan = claim_element(p_nodes, \"SPAN\", {});\r\n\t\t\tvar span_nodes = children(span);\r\n\t\t\tt2 = claim_text(span_nodes, \"3\");\r\n\t\t\tspan_nodes.forEach(detach);\r\n\t\t\tp_nodes.forEach(detach);\r\n\t\t},\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert(target, p, anchor);\r\n\t\t\tappend(p, t0);\r\n\t\t\tappend(p, t1);\r\n\t\t\tappend(p, span);\r\n\t\t\tappend(span, t2);\r\n\t\t}\r\n// ... snip\r\n```\r\n\r\nThe rendered html results in the following DOM tree pre hydration:\r\n```\r\nP\r\n  #text \"1 2 \"\r\n  SPAN\r\n    #text \"3\"\r\n```\r\n\r\nBut Svelte expects:\r\n```\r\nP (p)\r\n  #text \"1\" (t0)\r\n  #text \" 2 \" (t1)\r\n  SPAN (span)\r\n    #text \"3\" (t3)\r\n```\r\n\r\nThe first `claim_text` call in the component code will claim the first text node. Thus, the second `claim_text` call will fail as the first one has claimed all the text. \r\n\r\nThis means the call \"falls through\" and that a new text node (`t1`) is created. When that node is appended In the mount step (`m` in the component code above) it's inserted at the end rather than in the middle since the other append calls are no-ops.\r\n\r\nTurning those append calls into inserts, or being smarter about text node hydration seems like possible ways to fix this.",
          "createdAt": "2021-05-03T08:06:32Z",
          "author": { "login": "jonatansberg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTQxNTEzNg==",
          "body": "Would turning it into an insert work if there's more text nodes?\r\n\r\n```<p>{1} 2 {3} 4<span>5</span></p>```\r\n\r\nHaving `claim_text` handle text nodes that are next to each other as a single merged node might be difficult the way the code is structured? In the short-term, maybe we can just destroy and recreate the text nodes which would lose some of the performance benefit, but keep most of it since we're avoiding that with the other DOM nodes",
          "createdAt": "2021-05-03T17:35:18Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTY2MTI4OA==",
          "body": "I think this is safe to close now since the change that caused this bug was reversed",
          "createdAt": "2021-05-04T03:24:01Z",
          "author": { "login": "nitroboy720", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzOTQwNjAwMA==",
          "body": "Hello everyone, I found this article, maybe there you can find something for us\r\n\r\nhttps://deliciousreverie.co.uk/post/towards-better-rehydration/",
          "createdAt": "2021-05-12T03:30:47Z",
          "author": { "login": "timeshift92", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM4MjA2NTA=",
    "body": "**Describe the bug**\r\nThis is exactly the same behavior as https://github.com/sveltejs/sapper/issues/976, but with SvelteKit. The issue doesn't happen if I use `<svelte:head>` inside the component instead of where it's being used.\r\n\r\nDoesn't work:\r\n```svelte\r\n<!-- Head.svelte -->\r\n<title>Very Cool Title</title>\r\n\r\n<!-- src/routes/index.svelte -->\r\n<script>\r\n    import Head from 'Head.svelte'\r\n</script>\r\n<svelte:head>\r\n    <Head/>\r\n</svelte:head>\r\n```\r\nWorks:\r\n```svelte\r\n<!-- Head.svelte -->\r\n<svelte:head>\r\n    <title>Very Cool Title</title>\r\n</svelte:head>\r\n\r\n<!-- src/routes/index.svelte -->\r\n<script>\r\n    import Head from 'Head.svelte'\r\n</script>\r\n<Head/>\r\n```\r\n\r\nI have tested this on the latest versions of Svelte (3.38.1) and SvelteKit (next.94)\r\n\r\n**Expected behavior**\r\nI would've expected the `<head>` of the document to only contain one set of tags from the Head component.\r\n\r\n**Severity**\r\nThis isn't very severe since the workaround of putting the `<svelte:head>` thing inside the component works as expected (and could arguably be a better solution) but it was something unexpected that could be fixed or documented.\r\n",
    "closedAt": null,
    "createdAt": "2021-05-02T00:33:14Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM3ODgwMzg=",
    "body": "It's common to assign a variable to itself to trigger an update:\r\n```js\r\nusers.push(user);\r\nusers = user;\r\n```\r\nIDEs love to complain about this, and, arguably, it's a bit strange.  \r\n\r\nSince these calls are transpiled to `$$invalidate`, I propose an intrinsic function which explicitly exposes this.  \r\nThis would \r\n1) make IDEs happy\r\n2) result in easier to understand code\r\n\r\nThe snippet below could look like this:  \r\n```js\r\nusers.push(user);\r\ninvalidate(users);\r\n```\r\n\r\n**Additional context**\r\nMaybe this could be usefull in regards to #4535 by offering an alternative to `<svelte:options immutable/>` for selectively updating a single property. [This example](https://svelte.dev/tutorial/svelte-options) could be rewritten like this:\r\n```svelte\r\n<script>\r\n\timport Todo from './Todo.svelte';\r\n\r\n\tlet todos = [\r\n\t\t{ id: 1, done: true, text: 'wash the car' },\r\n\t\t{ id: 2, done: false, text: 'take the dog for a walk' },\r\n\t\t{ id: 3, done: false, text: 'mow the lawn' }\r\n\t];\r\n\r\n\tfunction toggle(idx) {\r\n\t\ttodos[idx].done ^= true;\r\n                // invalidate the updated property\r\n\t\tinvalidate(todos[idx].done);\r\n\t}\r\n</script>\r\n\r\n<h2>Todos</h2>\r\n{#each todos as todo, i}\r\n\t<Todo {todo} on:click={() => toggle(i)}/>\r\n{/each}\r\n```\r\nI'm not sure if it would be possible to implement `invalidate` like this.  \r\nHowever, even the \"simple\" usecase, being just an alternative to `variable = variable`, seems worth it to me.\r\n",
    "closedAt": "2021-05-24T04:05:35Z",
    "createdAt": "2021-05-01T23:01:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcxNjQwNQ==",
          "body": "The $$invalidate that that compiles to is specific to the given component - it's not just the same function all the time that you can call for any component. We don't want another way to invalidate variables that looks like a function call but really compiles to something else. There should be one way to invalidate variables in Svelte, and if your editor is complaining about it, you should look into further configuring your tooling.",
          "createdAt": "2021-05-24T04:05:32Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM3Nzk0MzY=",
    "body": "I have a function that looks like that\r\n\r\n```js\r\n  let start = async () => {\r\n    if ($currentAct.id) return;\r\n    if (!$currentAct.name) $currentAct.name = \"\";\r\n    $currentAct.start = $clock;\r\n    $currentAct.id = (await api.actlog.post($currentAct)).id;\r\n  };\r\n```\r\n\r\nI would like to trigger it from another component without having to rewrite the same exact code.",
    "closedAt": "2021-05-01T23:45:58Z",
    "createdAt": "2021-05-01T22:08:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDcwNzQ3NA==",
          "body": "As far as I know, you can't use the dollar syntax inside context=module\r\nSo I think you need to export this function to a separate module if you want to reuse it\r\nOther approches include using [context](https://svelte.dev/docs#setContext) or [event dispatching](https://svelte.dev/docs#createEventDispatcher) to establish communication between components.\r\n\r\nYou can also encapsulate the functionality in the store itself like this\r\nhttps://svelte.dev/tutorial/custom-stores\r\n\r\nYour code may look something like this\r\n```js\r\nimport { writable } from 'svelte/store';\r\n\r\nfunction createStore() {\r\n  const { subscribe, set, update } = writable({});\r\n\r\n  return {\r\n    subscribe,\r\n    start: () => update(async (state) => {\r\n      if (state.id) return state;\r\n      if (!state.name) state.name = \"\";\r\n      state.start = {...state}; // clone the object here?\r\n      state.id = (await api.actlog.post(state)).id;\r\n      return state;\r\n    }),\r\n  };\r\n}\r\n\r\nexport const store = createStore();\r\n```\r\n\r\nUsage\r\n```js\r\nimport { store } from \"store.js\";\r\n\r\nstore.start();\r\n```",
          "createdAt": "2021-05-01T23:13:02Z",
          "author": { "login": "unlocomqx", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM3Mjg3NTQ=",
    "body": "**Describe the bug**\r\n`</textarea>` with the closing angle bracket at a new line gives error.\r\n\r\n**Logs**\r\n```\r\nUnexpected end of input (2:1)\r\n```\r\n\r\n**To Reproduce**\r\n\r\n``` html\r\n<textarea>test</textarea\r\n>\r\n```\r\n\r\n**Expected behavior**\r\nDoes not give error.\r\n\r\n**Stacktraces**\r\n(None)\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox Nightly 2021-05-01\r\n- Your operating system: Arch Linux\r\n- Svelte version: 3.38.1\r\n- Whether your project uses Webpack or Rollup: Maybe unrelated, since it reproduces on REPL.\r\n\r\n**Severity**\r\nNot much, but it conflicts with my `prettier` configurations sometimes.\r\n\r\n**Additional context**\r\n\r\nThe case with `<textarea>` gives error, but interestingly the case with `<div>` does not.\r\n\r\n----\r\n\r\nEDIT: [Got it saved in REPL here](https://svelte.dev/repl/027e752c415f4f12895f714232c5a186?version=3.38.1).",
    "closedAt": "2021-06-22T13:43:51Z",
    "createdAt": "2021-05-01T17:33:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDczNDIzMw==",
          "body": "Yeah it would be nice to match browsers' behavior for parsing the end of textareas. I'm not sure what that is exactly though.",
          "createdAt": "2021-05-02T03:38:23Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDc2NzAzOQ==",
          "body": "I always thought that for all browsers it does not matter where the `>` is at, and that is doesn't need to be right after the tag name. Since Prettier does this for all tags I'd be surprised if it doesn't work for `textarea`",
          "createdAt": "2021-05-02T07:50:50Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNTkzOTE5MA==",
          "body": "@dummdidumm : i confirm that browsers (chrome, safari, Firefox) are handling correctly even if the closing sign `>` is not right after the tag name `</textarea`\r\n\r\nAfter having a closer look it seems that the parser is checking for the exact string `'</textarea>'` without space or breaking line after the tag name \r\nhttps://github.com/sveltejs/svelte/blob/a1600ff68e421f952235f09538a2c0a9c6e24b43/src/compiler/parse/state/tag.ts#L224\r\n\r\nI did a try using regex test `/\\/textarea\\s*>/mi` and it seems returning true value when there is spaces/lines-break, but it also generates another error `</textarea> attempted to close an element that was not open (svelte)` after line 224 so it will need more time to implement correctly the logic and relative tests.\r\n\r\nIs it ok to continue with this regex approach or do you suggest something else ? @dummdidumm @Conduitry ",
          "createdAt": "2021-05-09T23:31:32Z",
          "author": { "login": "akqira", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTExNjIxMw==",
          "body": "yup i checked on https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inbody, the [end tag allows space, tab, linefeed, formfeed](https://html.spec.whatwg.org/multipage/parsing.html#rcdata-end-tag-name-state) before the `>` character",
          "createdAt": "2021-06-21T15:14:37Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjExMDEzMQ==",
          "body": "This parses correctly now in 3.38.3 - https://svelte.dev/repl/027e752c415f4f12895f714232c5a186?version=3.38.3",
          "createdAt": "2021-06-22T15:53:20Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM2NDgwNDk=",
    "body": "**Describe the bug**\r\nUnder certain conditions, hydration appends elements to the DOM alongside prerendered parts, leading to element duplication. This seems to specifically affect routes/components using `svelte:head` and depends heavily on components’ structure. There is no duplication after navigating away and coming back.\r\n\r\nThis behaviour is almost certainly introduced by a recent change in Svelte, but it doesn’t seem to affect much beyond SvelteKit (obviously not REPL, but also not Sapper), so may warrant a look at this side.\r\n\r\n**To Reproduce**\r\nClone and run the demo: https://github.com/intrikate/sveltekit-duplication-issue.\r\n\r\n**Expected behavior**\r\nCSR should overwrite, not duplicate, SSR.\r\n\r\n**Information about your SvelteKit Installation:**\r\n\r\n<details>\r\n  <summary>Diagnostics</summary>\r\n\r\n  System:\r\n    OS: macOS 11.2.3\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-4288U CPU @ 2.60GHz\r\n    Memory: 130.07 MB / 8.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 14.16.0 - /usr/local/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 6.14.11 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 90.0.4430.93\r\n    Firefox Developer Edition: 89.0\r\n    Safari: 14.0.3\r\n  npmPackages:\r\n    @sveltejs/kit: next => 1.0.0-next.94 \r\n    svelte: ^3.38.0 => 3.38.0 \r\n    vite: ^2.2.3 => 2.2.3\r\n</details>\r\n\r\n**Severity**\r\nHigh.",
    "closedAt": "2021-05-01T15:08:30Z",
    "createdAt": "2021-05-01T09:29:14Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYwMDk4NA==",
          "body": "I just upgraded my project from version 71 to 94 and met the same issue. I can confirm that it does no longer occur when I remove the `<svelte:head>` from my page components.\r\n\r\nedit: downgrading to svelte@3.37.0 seems to fix the issue as well.",
          "createdAt": "2021-05-01T09:59:14Z",
          "author": { "login": "Kansuler", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYwMzk0Mw==",
          "body": "Experiencing the same issue while using with `<svelte:head>`.\r\n",
          "createdAt": "2021-05-01T10:10:02Z",
          "author": { "login": "DhyeyMoliya", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYwNjIxMw==",
          "body": "@intrikate you should move this issue to [sveltejs/svelte](https://github.com/sveltejs/svelte/)",
          "createdAt": "2021-05-01T10:15:56Z",
          "author": { "login": "DhyeyMoliya", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYxMDU5Ng==",
          "body": "@DhyeyMoliya I decided against it. Whatever change they introduced over there apparently didn’t break anything but SvelteKit. If that’s the case, it may be a better course of action to fix the beta to accommodate a stable dependency, rather than the other way round.",
          "createdAt": "2021-05-01T10:41:23Z",
          "author": { "login": "intrikate", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYxMTM5Ng==",
          "body": "@intrikate it's broken, just not so many people using a hydration and looks like we skip it during tests",
          "createdAt": "2021-05-01T10:47:17Z",
          "author": { "login": "stalkerg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYxNzY3Nw==",
          "body": "Thank you for the excellent set of reproductions! I am moving this to the Svelte repro, as this is almost certainly a bug caused by the hydration changes in 3.38.0.",
          "createdAt": "2021-05-01T11:31:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYxNzY5MA==",
          "body": "I was seeing the same thing. I set up a reproduction repository with minimal modification from the demo app:\r\nhttps://github.com/lukasIO/kit-svelte-3.38/commit/688833c1443004ea73b3a2bce642377058621dfc\r\n\r\nedit: ah, there was already one... ",
          "createdAt": "2021-05-01T11:31:11Z",
          "author": { "login": "lukasIO", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYyMjgxOQ==",
          "body": "I'm seeing this as well. I didn't notice this issue already, but I also put together a repo that reproduces it. This is from skelton project, not the demo. `<svelte:head>` was also what I was seeing. Here's the repo in case you need it.\r\n\r\n[Repo reproducing bug](https://github.com/johngrasty/svelte-3.38-duplication)\r\n\r\nWhen clicking the link, the test page will not have the duplication. If reloaded, it will",
          "createdAt": "2021-05-01T12:13:38Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYyNzc2NA==",
          "body": "I have this issue in my project without svelte:head being in the picture at all. On my end it depended on what I set as the hydration target. No element (or body) doesn't cause any duplicated items at all. ",
          "createdAt": "2021-05-01T12:51:22Z",
          "author": { "login": "UltraCakeBakery", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYzNjUyMw==",
          "body": "@benmccann it is not duplication of head elements, the actual elements of the affected pages are getting duplicated, like forms, divs, etc.\r\n\r\n**Update :** If you mean `head elements` as the `first html element`, then ignore this comment. I was understanding `head elements` as `<svelte:head>`",
          "createdAt": "2021-05-01T13:51:22Z",
          "author": { "login": "DhyeyMoliya", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYzNjc2OA==",
          "body": "> @benmccann it is not duplication of head elements, the actual elements of the affected pages are getting duplicated, like forms, divs, etc.\r\n\r\nRight. That’s what I’m seeing as well, but in my minimal repo, it seemed that just the first element was being duplicated. For example, if there are two divs that are siblings. If there is a `<svelte:head>`, the first div will be duplicated but not the second. ",
          "createdAt": "2021-05-01T13:53:11Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYzODA3OA==",
          "body": "Suprisingly, if I remove `<div id=\"svelte\">%svelte.body%</div>` from `app.html` and set `target: 'body'`,  everything works well. Similar to @UltraCakeBakery .",
          "createdAt": "2021-05-01T14:02:55Z",
          "author": { "login": "DhyeyMoliya", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY0MDQ0NA==",
          "body": "I'm curious why the existing tests didn't catch this. https://github.com/sveltejs/svelte/tree/master/test/hydration/samples/head-meta-hydrate-duplicate\r\n\r\nAlso, I have a SvelteKit app deployed to production using Svelte 3.38.0 at http://c3.ventures/ and don't see this\r\n\r\nIt'd be nice if someone was able to turn one of the reproductions into a test that fails with https://github.com/sveltejs/svelte/pull/6204 and passes without it\r\n\r\n\r\n",
          "createdAt": "2021-05-01T14:19:45Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY0NDQ4OA==",
          "body": "I tried for a little while this morning to produce a failing test, but without success. While the SvelteKit app that reproduces this is quite simple, there's a bit that's tucked inside `.svelte/dev/generated/root.svelte` that's presumably an important part of reproducing the bug, which makes producing a Svelte-only hydration repro a bit trickier.",
          "createdAt": "2021-05-01T14:50:48Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY0ODI3Mw==",
          "body": "This should be fixed now in 3.38.1.",
          "createdAt": "2021-05-01T15:16:25Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY1MjQ4NQ==",
          "body": "> This should be fixed now in 3.38.1.\n\nIt gives me great happiness to see this.\nIt was great to see contributors coming together once in awhile to solve an issue in oss. It was very quick and responsive.\n\n@tanhauhau @Conduitry @benmccann @lukeed I thank you all.",
          "createdAt": "2021-05-01T15:47:23Z",
          "author": { "login": "DhyeyMoliya", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM1OTc3NTc=",
    "body": "**Describe the bug**\r\nAfter updating to 3.38 I am seeing errors in the console, downgrading to 3.37 seems to resolve the issue\r\n\r\n**Logs**\r\n<img width=\"1504\" alt=\"Screenshot 2021-05-01 at 09 58 02\" src=\"https://user-images.githubusercontent.com/2060308/116775568-e1b2ae80-aa63-11eb-8325-4b4fff98615c.png\">\r\n\r\n**To Reproduce**\r\nHappens in my svelteKit project on initial load\r\n",
    "closedAt": null,
    "createdAt": "2021-05-01T08:04:17Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYyODgyOA==",
          "body": "I’m seeing the same, but I haven’t been able to make a minimal reproducible example. In my one project, I see it when I use: `{@html }`",
          "createdAt": "2021-05-01T13:00:06Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY0MzAxMg==",
          "body": "So with my example where `{@html }` is causing this error, it seems to be related to #6274. When I remove `<div id=\"svelte\">%svelte.body%</div>` and set `target: 'body'` in `svelte.config.cjs`, both this error and the error from #6274.",
          "createdAt": "2021-05-01T14:39:03Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY0ODM3NQ==",
          "body": "Can you try 3.38.1? That should have fixed #6274 and so may also fix this.",
          "createdAt": "2021-05-01T15:16:58Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY1NTE5Ng==",
          "body": " I still have the error with using {@html ...} in 3.38.1 version too... Bug with duplication was fixed in 3.38.1 version.",
          "createdAt": "2021-05-01T16:07:14Z",
          "author": { "login": "kharanenka", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY2MzU5NA==",
          "body": "@Conduitry @kharanenka Likewise for me 3.38.1 fixed the duplication issue, but it did not fix this {@html…} error. However removing `%svelte.body%` and targeting the body in `svelte.config.cjs` resolves both. I have not been able to create a minimal working example though. In my larger project, I am using mdsvex…maybe connected, maybe not.  ",
          "createdAt": "2021-05-01T17:11:12Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY3NjI4OQ==",
          "body": "I try to remove ```<div id=\"svelte\">...</div>``` and configure target to body, but i have both error on 3.38.0 version and {@html…} error on 3.38.1 version. It doesn't fix my project.",
          "createdAt": "2021-05-01T18:39:20Z",
          "author": { "login": "kharanenka", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDY5MTU2OA==",
          "body": "So upon further investigation, the workaround of removing `%svelte:body%` leads to, as one would expect, breaking of prerendering.",
          "createdAt": "2021-05-01T20:41:51Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDcwMDg2NQ==",
          "body": "First, sorry that I am not more capable in debugging and fixing such things!\r\n\r\nSecond, at least in my case, I have narrowed down the problem. I am rendering an SVG with `{@html }`, and the error is coming from this line: https://github.com/sveltejs/svelte/blob/94bfeae5d560e229b8add61838ce1804c7d74c90/src/runtime/internal/dom.ts#L15\r\n\r\nHere's the function \r\n\r\n```\r\nfunction end_hydrating() {\r\n    is_hydrating = false;\r\n    for (const node of nodes_to_detach) {\r\n        node.parentNode.removeChild(node);\r\n    }\r\n    nodes_to_detach.clear();\r\n}\r\n```\r\n\r\nWhen I do some console logging, I see in my project a number of `#text` nodes and a few `svg` nodes. When I look at `node.parentNode`, it is null for the `svg` nodes, and that is when I am hitting this error. If I replace the `{@html bunch of svg code}` with just the svg code, there is no error. \r\n\r\nMaybe this will help a bit.",
          "createdAt": "2021-05-01T22:05:03Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDc1ODQ0Ng==",
          "body": "Hi again\r\n\r\n3.38.1 does not fix the issue in my case...\r\n\r\nSo based on other comments in this issue I did a bit of further digging, I also target <body/> directly, so adding back in <div id=svelte /> did not change anything in my case.\r\n\r\nI also use {@html ...} in various places, among others in my $layout, removing this line does solve the issue.. I still use it in other places and they keep working without throwing errors..\r\n\r\nI hope this helps narrowing it down!\r\n\r\nThanks\r\n\r\n\r\n",
          "createdAt": "2021-05-02T06:22:40Z",
          "author": { "login": "zwergius", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDgxNzUzNw==",
          "body": "I'm still trying to reproduce this in a minimal example repo, but I did discover something in my project:\r\n\r\nThis snippet sees the error mentioned above: \r\n\r\n```\r\n<div>\r\n     {@html item.icon}\r\n</div>\r\n```\r\n\r\nbut this works and does not get the error:\r\n\r\n```\r\n<div>\r\n     {@html '<div />'}\r\n     {@html item.icon}\r\n</div>\r\n```\r\n\r\nI don't know why, but maybe it will help those working on this.",
          "createdAt": "2021-05-02T14:24:41Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTcxNjQ1Mg==",
          "body": "Hi again,\r\n\r\nSpun up this reproduction repo\r\n\r\nhttps://github.com/zwergius/svelte-issue-6273\r\n\r\n** With recent svelte 3.38.2 issue does NOT exist\r\n\r\nHope this helps",
          "createdAt": "2021-05-04T06:41:16Z",
          "author": { "login": "zwergius", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTcyMTc0MQ==",
          "body": "@zwergius It's great that you were able reproduce this in a simple way! Most likely the problem does not exist in 3.38.2, because they ended up reverting the hydration changes in #6290.",
          "createdAt": "2021-05-04T06:53:34Z",
          "author": { "login": "johngrasty", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzM0NjgxNzQ=",
    "body": "**Describe the bug**\r\nUsing the compound :global selector (e.g. `p:global(.x)`) allows invalid CSS. For example, the following compiles without any warnings or errors:\r\n\r\n```html\r\n<style>\t\r\n\t.x:global(p) {\r\n\t\tcolor: red;\r\n\t\t/* compiles to .x.svelte-hashp{color:red} */\r\n\t}\r\n\t\r\n\t.foo:global(*) {\r\n\t\t/* compiles to .foo.svelte-hash*{color:red} */\r\n\t}\r\n</style>\r\n```\r\n\r\nNote how the tag name or wildcard is appended to the end of the hash.\r\n\r\nThe non-global versions of these selectors don't make sense (`.xp` and `.foo*` ). Per the [CSS spec](https://www.w3.org/TR/selectors-4/#compound), type or universal selectors must come first in a compound selector, so they shouldn't be allowed inside :global when used in a compound selector.\r\n\r\nBefore it was supported, using `:global` in a compound selector threw an error. I think it would make sense to throw an error in this case as well.\r\n\r\n**Logs**\r\nn/a\r\n\r\n**To Reproduce**\r\nSee this [REPL](https://svelte.dev/repl/dbadcb85a5ae42e3b963784432ab0c0f?version=3.38.0).\r\n\r\nThe compiled CSS is invalid and no warnings or errors are thrown.\r\n\r\n**Expected behavior**\r\nSvelte should either warn or error during the compilation process, e.g. \":global(...) must not contain type or universal selectors when used in a compound selector\".\r\n\r\n**Stacktraces**\r\nn/a\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Firefox 88\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!): 3.38.0\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nNot very severe, but unexpected.\r\n\r\n**Additional context**\r\nn/a\r\n",
    "closedAt": null,
    "createdAt": "2021-04-30T23:53:27Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzODcxNjMzNg==",
          "body": "hi, was trying to fix https://github.com/sveltejs/svelte/issues/6306, and discovered this issue. and since i am on it, make another PR on this too. (https://github.com/sveltejs/svelte/pull/6322)",
          "createdAt": "2021-05-11T15:46:05Z",
          "author": { "login": "roychoo", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzI5MzY2NDk=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIf you have a promise whose resolve value you don't care about, you can currently do:\r\n\r\n```\r\n{#await promise}\r\n  loading...\r\n{:then}\r\n  resolved\r\n{/await}\r\n```\r\n\r\nbut with the shorthand you can't do:\r\n\r\n```\r\n{#await promise then}\r\n  resolved\r\n{/await}\r\n```\r\n\r\nWhen you don't need to show a loading state, there is no way to omit the variable for the promise's resolve value. This is a fairly common situation, and it would be good to handle it.\r\n\r\n**Describe the solution you'd like**\r\nSupport the above syntax where the variable is omitted.\r\n\r\n**Describe alternatives you've considered**\r\nYou can work around this by including a variable that you don't use:\r\n\r\n```\r\n{#await promise then done}\r\n  resolved\r\n{/await}\r\n```\r\n\r\nBut this is awkward style and may also cause issues with linters.\r\n\r\n**How important is this feature to you?**\r\nModerate. It's not a show-stopper because there's a workaround, but it also seems like something Svelte should support, and it shouldn't be very difficult.",
    "closedAt": null,
    "createdAt": "2021-04-30T17:32:37Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI1Mjk2OA==",
          "body": "A thought on the semantics of this, I think `{#await promise}` would make more sense than `{#await promise then}`. The `then` here doesn't have any significance in this case and could be omitted.",
          "createdAt": "2021-04-30T17:39:23Z",
          "author": { "login": "c-bandy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI1NTE1MQ==",
          "body": "I'm pretty sure we need the `then`, because without it Svelte would interpret it as when the promise is pending.",
          "createdAt": "2021-04-30T17:43:05Z",
          "author": { "login": "kamholz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI1NzI3Ng==",
          "body": "I don't think that's the case, the compiler could check for the absence of `{:then name}` to determine if it's the super-shorthand or not.",
          "createdAt": "2021-04-30T17:46:50Z",
          "author": { "login": "c-bandy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI1Nzc0Ng==",
          "body": "I think this covers all the cases? https://svelte.dev/docs#await",
          "createdAt": "2021-04-30T17:47:37Z",
          "author": { "login": "c-bandy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI1ODMwNA==",
          "body": "> I don't think that's the case, the compiler could check for the absence of `{:then name}` to determine if it's the super-shorthand or not.\r\n\r\nAside from being overly magical (in my opinion) that isn't sufficient, because then you couldn't show something during loading unless you also wanted to show something after the promise was resolved. Svelte shouldn't impose peculiar restrictions like that.",
          "createdAt": "2021-04-30T17:48:31Z",
          "author": { "login": "kamholz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI2MDA2MQ==",
          "body": "> I think this covers all the cases? https://svelte.dev/docs#await\r\n\r\nYes, this is not handling any new cases per se. It's just allowing a simpler syntax for an existing case.",
          "createdAt": "2021-04-30T17:51:05Z",
          "author": { "login": "kamholz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI3MTkxMw==",
          "body": "> Aside from being overly magical (in my opinion) that isn't sufficient, because then you couldn't show something during loading unless you also wanted to show something after the promise was resolved. Svelte shouldn't impose peculiar restrictions like that.\r\n\r\nI'm not sure what you mean. Maybe we are misunderstanding each other? I only mean that we can omit the `then` in this proposed syntax because it doesn't really do anything here. It served as syntax to show which is the output in `{#await promise then value}`. Here it's just extra. Is that too magical?\r\n\r\n> Yes, this is not handling any new cases per se. It's just allowing a simpler syntax for an existing case.\r\n\r\nThat's not what I was referring to, I just mean from a compiler POV it isn't hard to figure out which is which either way.\r\n\r\n",
          "createdAt": "2021-04-30T18:11:30Z",
          "author": { "login": "c-bandy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDI4NTIxOQ==",
          "body": "> I'm not sure what you mean. Maybe we are misunderstanding each other? I only mean that we can omit the `then` in this proposed syntax because it doesn't really do anything here. It served as syntax to show which is the output in `{#await promise then value}`. Here it's just extra. Is that too magical?\r\n\r\nThere are three promise states: pending, resolved, and rejected. `{#await}` can match all three. In the current syntax, this:\r\n\r\n```\r\n{#await promise}\r\n  loading\r\n{/await}\r\n```\r\n\r\nwill match the pending state. With your proposal, there is no clean way to have an `{#await}` block that only matches a pending state. You'd have to do something like:\r\n\r\n```\r\n{#await promise}\r\n  pending\r\n{:then}\r\n{/await}\r\n```\r\n\r\nSo, while your idea does away with the superfluous syntax I'm talking about (`{#await promise then done}`), it introduces a new one. It also makes the syntax more confusing, because now `{#await promise}` would sometimes match the pending case and sometimes match the resolved case. My proposal doesn't contain superfluous syntax for any of the cases and you don't have to look beyond the immediate context to interpret what was intended. It also maintains backwards compatibility.",
          "createdAt": "2021-04-30T18:35:45Z",
          "author": { "login": "kamholz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDMzNjcxNg==",
          "body": "Gotcha. I didn't realize that `{#await promise} {/await}` was valid syntax in Svelte today. Given that, I think there would have to be a keyword to differentiate it like you describe to not introduce a breaking change.",
          "createdAt": "2021-04-30T19:39:00Z",
          "author": { "login": "c-bandy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzI4NDU5NDU=",
    "body": "#6222 has been released in 3.38.0, but it needs to be documented.",
    "closedAt": null,
    "createdAt": "2021-04-30T16:41:48Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzI4NDQ2MzU=",
    "body": "https://github.com/sveltejs/svelte/pull/6237 implemented the RFC for adding style props and was released in 3.38.0. This change allows passing CSS custom properties to components for use cases such as theming.\r\n\r\n[The RFC says](https://github.com/sveltejs/rfcs/blob/master/text/0006-style-properties.md#how-we-teach-this):\r\n\r\n>It would require a new tutorial chapter and updated documentation.",
    "closedAt": null,
    "createdAt": "2021-04-30T16:41:06Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1Mjk0MDEwOA==",
          "body": "made an attempt here https://github.com/sveltejs/svelte/pull/6378",
          "createdAt": "2021-06-02T11:14:21Z",
          "author": { "login": "sw-yx", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDYzMDM1Nw==",
          "body": "Add a warning that this feature breaks accessibility. All children of a component with `display: contents` are removed from the Accessibility Tree due to wrong implementation in all three browsers/rendering engines. \r\n\r\nSee links at [MDN#display: contents](https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_contents) for accessibility concerns. Summary:\r\n- Firefox 61 introduced this [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1455357). Fixed in Firefox 62 in August 2018.\r\n- Chrome 66 fixed introduced the [bug](https://bugs.chromium.org/p/chromium/issues/detail?id=835455). Fix in Chome 89 in March 2021\r\n- Safari [is still broken](https://bugreport.apple.com/web/?problemID=39630240).\r\n\r\nTL;DR if you care about accessibility and supporting Safari and pre-March-2021 Chrome do not use the `<Component --var/>` feature.",
          "createdAt": "2021-06-20T23:49:24Z",
          "author": { "login": "kwangure", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDY2NTQ1MA==",
          "body": "> Add a warning that this feature breaks accessibility. All children of a component with display: contents are removed from the Accessibility Tree due to wrong implementation in all three browsers/rendering engines.\r\n\r\n@kwangure I don't think that's accurate. My understanding of the accessibility bug is that an element with `display: contents` and an accessible role (e.g. list) had its role removed. So applying `display: contents` to a `<ul>` used to prevent a screen reader from identifying it as a list, but the children of the list were still read out to screen readers.\r\n\r\nFrom the MDN doc you linked (emphasis mine):\r\n> Current implementations in most browsers will remove from the accessibility tree any element with a display value of contents __(but descendants will remain)__.\r\n\r\nSo I don't think it's true that the children of an element with `display: contents` would have been removed from the accessibility tree -- it only affected the parent element's role.\r\n\r\nThe Svelte `<Component --var>` feature would not be affected by this accessibility bug, because `display: contents` is applied to a wrapping `<div>`. `<div>`s don't have any additional semantic meaning, so there is no role to remove.",
          "createdAt": "2021-06-21T01:49:04Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDY3MDMxMQ==",
          "body": "I think you're right! I failed to note both things. 1) Only semantic elements such as `<select>`, `<ul>`, `<nav>` etc. are announced by readers. 2) I missed the parenthesized note that \"...descendants will remain\". Oops!",
          "createdAt": "2021-06-21T02:05:02Z",
          "author": { "login": "kwangure", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTQ0MTUwNg==",
          "body": "It would be great to see more on this - I'm happy to help draft documentation if needed, just @ me. Are there reasons why we're holding back on documenting this feature for now? \r\n\r\nAlso this statement stands on its own\r\n> * Safari [is still broken](https://bugreport.apple.com/web/?problemID=39630240).\r\n",
          "createdAt": "2021-06-22T00:54:20Z",
          "author": { "login": "benaltair", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzI4NDM4MDg=",
    "body": "#5628 is implemented in 3.38.0, but this needs to be documented.",
    "closedAt": "2021-04-30T16:42:49Z",
    "createdAt": "2021-04-30T16:40:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDIyMDEwNQ==",
          "body": "Great minds think alike. We both filed issues about this within 38 seconds of each other. Closing this to merge with https://github.com/sveltejs/svelte/issues/6268",
          "createdAt": "2021-04-30T16:42:49Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzI4MDkwNTc=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI often have to use `#if`s for only one element and with one variable name like this:\r\n```svelte\r\n{#if switchable}\r\n  <Switch bind:checked={isOn} />\r\n{/if}\r\n```\r\nThat is a bit annoying over the time.\r\n\r\n**Describe the solution you'd like**\r\nIt would be cool to have a new directive called <code>if:<i>varname</i></code> that is a shortcut to the long if version. This currently throws an error because it thinks it is a normal attribute:\r\n![Bildschirmfoto 2021-04-30 um 18 18 46](https://user-images.githubusercontent.com/62756994/116724184-a0c58600-a9e0-11eb-9594-cf7ec2464842.png)\r\n\r\n**How important is this feature to you?**\r\nI need this feature very often, so it would be a big help for making things shorter and easier to write.",
    "closedAt": "2021-05-01T07:42:55Z",
    "createdAt": "2021-04-30T16:21:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDQ4NTc5NQ==",
          "body": "I would really love a one-liner like this to optionally render an element. It reminds me of an `ng-if=expression` directive in of AngularJS 1.x. \r\n\r\nThis wouldn't replace the {#if expression} block which is still usefull for conditionally rendering multiple sibling elements.",
          "createdAt": "2021-05-01T01:45:40Z",
          "author": { "login": "johnoscott", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDU2OTAzOA==",
          "body": "I don't like having to read all attributes on an element to see if it is really created or not. I think the current syntax is more readable.",
          "createdAt": "2021-05-01T07:11:09Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDU3Mjk1Mw==",
          "body": "You read code more often than you write it, and having the condition inside the tag is less readable. It also would introduce another thing to do the same thing which reduces consistency. I'm therefore going to close this.",
          "createdAt": "2021-05-01T07:42:55Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzI0MDI4MTk=",
    "body": "**Describe the bug**\r\nhttps://svelte.dev/tutorial/select-bindings An accessibility error occurs because on:change is being used over on:blur on the select bindings page of the Svelte tutorial.\r\n```\r\nA11y: on:blur must be used instead of on:change, unless absolutely necessary and it causes no negative consequences for keyboard only or screen reader users. (24:1)\r\n```\r\nI'm sure that this is a result to updates with accessibility, maybe worth reviewing and updating the error message or including on:blur for this section of the tutorial.\r\n\r\n**Severity**\r\nVery minor.",
    "closedAt": "2021-05-03T11:11:38Z",
    "createdAt": "2021-04-30T12:04:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDA1NTI3MQ==",
          "body": "https://svelte.dev/tutorial/media-elements Another one here:\r\n```\r\nA11y: Media elements must have a <track kind=\"captions\"> (111:0)\r\n```\r\nExample doesn't include track tag by default.",
          "createdAt": "2021-04-30T12:19:59Z",
          "author": { "login": "sdserage", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDE2OTM0MA==",
          "body": "For reference: there's been previous PRs to fix the on:blur warning in the tutorial (#6189, #5861, #5037). There's an ongoing discussion in #4946 on whether this warning should be removed entirely, as it seems to only be relevant in very old IE (<11).\r\n\r\nSimilarly, the captions warning on the tutorial is tracked in #6158. There is discussion in #5967 on whether that warning should also be removed, since no browser supports `<track>` in `<audio>` elements.",
          "createdAt": "2021-04-30T15:19:29Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTE5MjYwNg==",
          "body": "Issues already exist, closing duplicate issue.",
          "createdAt": "2021-05-03T11:11:38Z",
          "author": { "login": "sdserage", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzIxNDczNDk=",
    "body": "## Use case\r\n\r\nI’m using progressive enhancement and setting the ARIA role of an element dynamically only if JavaScript is on/loaded and styling the component basd on those ARIA roles.\r\n\r\nSpecifically, I’m creating a Svelte version of Heydon Pickering’s inclusive tabbed interface component. This is a progressively-enhanced tab component that renders as a list of links and sections and is progressively enhanced into a tab interface. \r\n\r\nThe CSS uses `[role=\"tablist\"]`, etc., selectors that apply only if the component is displaying as a tab panel (and not as a regular list of links and sections).\r\n\r\ne.g., (work-in-progress) https://github.com/aral/heydons-accessible-tabs-in-svelte/blob/main/src/lib/TabbedInterface/TabList.svelte\r\n\r\n## The problem\r\n\r\nThe styles are flagged as unused and not included.\r\n\r\nThe closest I’ve been able to come to generating the CSS I need is:\r\n\r\n```css\r\n* :global([role=\"tablist\"]) {\r\n    padding: 0;\r\n  }\r\n```\r\n\r\nBut that generates (e.g.):\r\n\r\n```css\r\n.s-QrjSjQiqMQoF [role=\"tablist\"]\r\n```\r\n\r\nWhereas what I need is a compound rule:\r\n\r\n```css\r\n.s-QrjSjQiqMQoF[role=\"tablist\"]\r\n```\r\n\r\n(The only difference is the lack of the space separator, making it a compound selector).\r\n\r\nWhen I try to remove the space between * and :global() in hopes it would create a scoped compound rule, I get the following error:\r\n\r\n```\r\n:global(...) must be the first element in a compound selectorsvelte(css-invalid-global)\r\n```\r\n\r\n## Proposed solution\r\n\r\nIt would make it possible to create progressively enhanced inclusive components if there was a way to create CSS rules that were:\r\n\r\n1. __Scoped, AND__\r\n2. __Always included__ (even if the selectors do not statically match an element in the component at compile time)\r\n\r\nOne way to achieve this would be to enable `:global()` to create compound selectors.\r\n\r\nSo the following code:\r\n\r\n```css\r\n*:global([role=\"tablist\"]) {\r\n    padding: 0;\r\n  }\r\n```\r\n\r\nWould generate:\r\n\r\n```css\r\n.s-QrjSjQiqMQoF[role=\"tablist\"]\r\n```\r\n\r\n(Note the lack of space between * and `:global()` and the compound selector in the resulting CSS.)\r\n\r\n__Update:__ Looks like @tanhauhau has already implemented this in this PR: https://github.com/sveltejs/svelte/pull/6223 (HT @Conduitry)\r\n\r\nAnother option would be to have a separate `:scoped()` function that specifically has this behaviour.\r\n\r\nSo the following code:\r\n\r\n```css\r\n:scoped([role=\"tablist\"]) {\r\n    padding: 0;\r\n  }\r\n```\r\n\r\nWould generate:\r\n\r\n```css\r\n.s-QrjSjQiqMQoF[role=\"tablist\"]\r\n```\r\n\r\nIn other words, `:scoped()` would mean “always include this rule as a scoped rule.”\r\n\r\n## Workarounds\r\n\r\nThe obvious workaround is to use global styles for this. However, this removes the advantage of using scoped styles in Svelte for progressively-enhanced components and it doesn’t have to be an either/or decision.\r\n\r\n## How important is this feature to you\r\n\r\nIt would definitely be nice to have first-class support for progressively-enhanced components. Especially when the only thing standing in the way is the presence or absence of a single space character :)\r\n\r\n<strike>I’m happy to write this up as an RFC but I wanted to create an issue first to see (a) if there is a way to do this that I haven’t considered and (b) whether this is something you’d consider implementing.</strike> __Update:__ See note about the existing pull request from @tanhauhau, above.",
    "closedAt": "2021-04-30T09:26:44Z",
    "createdAt": "2021-04-30T08:14:47Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTkzNTI1Ng==",
          "body": "This sounds like #6222.",
          "createdAt": "2021-04-30T08:31:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTk0ODAyOQ==",
          "body": "@Conduitry Yep, different use case but same issue. Sorry, I did do a search beforehand but missed it somehow. Please feel free to close this if you’d like to track it with the other.",
          "createdAt": "2021-04-30T08:53:19Z",
          "author": { "login": "aral", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTk0OTE5MQ==",
          "body": "And it looks like this PR would enable this use case also: https://github.com/sveltejs/svelte/pull/6223",
          "createdAt": "2021-04-30T08:55:17Z",
          "author": { "login": "aral", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzE5MjE5MzA=",
    "body": "**Describe the bug**\r\nWhen a reactive `selected` attribute is used to select a default option in a \\<select> element, but the options are populated via a Promise resolving with an array of objects, and an extra option is added outside of the {#await} tag, the default option fails to select on Firefox.\r\n\r\n\r\n**Logs**\r\nN/A\r\n\r\n\r\n**To Reproduce**\r\nMinimal reproduction here:\r\nhttps://svelte.dev/repl/722627570db24a1ea08821cc64f9047e?version=3.21.0\r\n\r\n\r\n**Expected behavior**\r\nThe default option should select in all browsers.\r\n\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n\r\n**Information about your Svelte project:**\r\nN/A - Easily reproduced in Firefox browsers, not project-specific, see above REPL\r\n\r\n\r\n**Severity**\r\nAnnoying. Not really blocking anything, but it is confusing to users.\r\n\r\n\r\n**Additional context**\r\nUsing a reactive statement to manually populate a variable with the results of the promise does not fix the bug. I need to use a promise because the groups come from an API call.\r\n",
    "closedAt": null,
    "createdAt": "2021-04-30T03:37:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDQ4Nzc1Nw==",
          "body": "Another weird detail, if you move the option with value = null before the await, then it works.\r\nAnother thing I noticed in Firefox, `$0.selectedOptions` returns two options\r\n\r\nI was able to repro using this code\r\nhttps://svelte.dev/repl/788e653c5fa34ea9b72f607be4b01766?version=3.38.0\r\n\r\nSo the bug is not specific to svelte\r\n\r\nBasically, when a new option is inserted in the first position, firefox \"selects\" it (adds it to the selected options)\r\nWhen the option that is supposed to be selected is added, that doesn't change anything for firefox since the first option is already selected\r\n\r\nMoving the initial option to the first position avoids the issue since new options are not added in the beginning of the select",
          "createdAt": "2021-05-01T01:57:18Z",
          "author": { "login": "unlocomqx", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDU3NDgxMw==",
          "body": "Thanks for digging into it @unlocomqx. The behavior seems to be perfectly predictable knowing this.\r\n\r\nWorkarounds:\r\n\r\n- Move the null option above the await block, as noted above\r\n- Move the null option inside the await block after the each (so that all options are re-rendered together) \r\n- Make the each also iterate over the null option: `{#each [...groups, {id: null, name: \"No group\" }] as group}`",
          "createdAt": "2021-05-01T07:53:38Z",
          "author": { "login": "Runi-c", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDYyODY1Ng==",
          "body": "I think it should be reported in Bugzilla, can you report it? ",
          "createdAt": "2021-05-01T12:58:44Z",
          "author": { "login": "unlocomqx", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDk4ODYxMA==",
          "body": "Reported to bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1708627",
          "createdAt": "2021-05-03T02:13:46Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzE1NjA3MjQ=",
    "body": "In this code, the assignment does not trigger a refresh\r\n\r\n```js\r\n<script>\r\n  let X = [{name: \"world\"}];\r\n  let update = (x, v) => {x.name = v};\r\n</script>\r\n\r\n{#each X as x}\r\n  <h1>Hello {x.name}!</h1>\r\n  <input value={x.name} on:input={(e) => {update(x, e.target.value);}}>\r\n{/each}\r\n```\r\n\r\n\r\nAn easy fix is:\r\n\r\n```js\r\n<script>\r\n  let X = [{name: \"world\"}];\r\n  let update = (x, v) => {x.name = v};\r\n</script>\r\n\r\n{#each X as x}\r\n  <h1>Hello {x.name}!</h1>\r\n  <input value={x.name} on:input={(e) => {update(x, e.target.value); x=x}}>\r\n{/each}\r\n```\r\n\r\nIs this intended? It's definitely weird!",
    "closedAt": "2021-04-29T22:38:20Z",
    "createdAt": "2021-04-29T21:42:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTY0MDUxMA==",
          "body": "It is intended. What happens inside the `update` function is something that's hard to statically analyze (because we don't know what variable it is that's getting passed as the first argument). Rather than trying to get this partially right and then having to document all the places it doesn't work, there are instead fairly simple rules about what triggers reactivity. Basically, it's assignment to top-level variables in the component and assignments directly within event handlers in an each block to the iterating variable of the each block.\r\n\r\nIt's a known pending to-do that we need to find somewhere to be more explicit about the reactivity rules.",
          "createdAt": "2021-04-29T22:38:20Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDc2MDQyMw==",
          "body": "Thanks for the explanation @Conduitry \r\n\r\n```\r\n<script>\r\n  let x = 123;\r\n\r\n  // When x changes, complicatedCalucation should be called and assign the return value to calculated.\r\n  let calculated = complicatedCalucation(x);\r\n</script>\r\n\r\n{x}\r\n{calculated} does not change.\r\n```\r\n\r\nI see that `calculated` does not change, even though `x` is changed.\r\n\r\nIs there an work around for this problem?",
          "createdAt": "2021-05-02T06:45:12Z",
          "author": { "login": "serv", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDc2MjA5NQ==",
          "body": "I needed to use `$: ` before `calculated`.\r\n\r\n```svelte\r\n<script>\r\n  let x = 123;\r\n\r\n  // When x changes, complicatedCalucation should be called and assign the return value to calculated.\r\n  $: calculated = complicatedCalucation(x);\r\n</script>\r\n\r\n{x}\r\n{calculated} does not change.\r\n```",
          "createdAt": "2021-05-02T07:03:22Z",
          "author": { "login": "serv", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzEyNjE3OTk=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm trying to create a page with multiple login steps, it would be great if I could just use a switch block instead of multiple if blocks.\r\n\r\n**Describe the solution you'd like**\r\n```\r\n<script>\r\n  var x = 'first'\r\n</script>\r\n{#switch x}\r\n  {:case 'first'}\r\n    <h1>First</h1>\r\n  {:case 'second}\r\n    <h2>Second</h2>\r\n{/switch}\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nI have tried svelte client side rendering, but that won't work in the current case because I'm using Sveltekit.\r\n\r\n**How important is this feature to you?**\r\nIt would be nice but unnecessary, I know a lot of svelte is about being fast, and sleek. This would make the developer experience a lot faster. I have also heard that switch statements are faster than if statements.\r\n\r\n**Additional context**\r\nIn this case I just need to switch between small blocks of HTML, so it wouldn't be too much bigger than normal\r\n",
    "closedAt": "2021-04-29T17:43:20Z",
    "createdAt": "2021-04-29T17:20:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTQ2MTAwMQ==",
          "body": "This is a significant enough feature to require an RFC: https://github.com/sveltejs/rfcs\r\n\r\nFWIW, I think this would be a useful feature and plan on putting an RFC together at some point.",
          "createdAt": "2021-04-29T17:43:20Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDk5MTU3OA==",
          "body": "I made a RFC [https://github.com/sveltejs/rfcs/pull/49](https://github.com/sveltejs/rfcs/pull/49), you can contribute any changes you may want.",
          "createdAt": "2021-05-03T02:31:15Z",
          "author": { "login": "TheBlueOompaLoompa", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzA5OTg1Mjk=",
    "body": "https://astexplorer.net/#/gist/2bbf556514bd54e799f8b9c836f6b7c9/3896519c24f22c47c49059def15ffed41c709c82\r\n```svelte\r\n<div foo= ></div>\r\n```\r\n```json\r\n{\r\n  \"start\": 5,\r\n  \"end\": 10,\r\n  \"type\": \"Attribute\",\r\n  \"name\": \"foo\",\r\n  \"value\": []\r\n}\r\n```\r\nUnexpected `\"value\": []`, value is undefined.\r\nExpected either Parser Error or `\"value\": true` (html behavior)",
    "closedAt": null,
    "createdAt": "2021-04-29T13:09:49Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTIzMDU0Ng==",
          "body": "While browsers will repair this, it is invalid. I think this should be a parser error.",
          "createdAt": "2021-04-29T13:18:35Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDcwODYwMg==",
          "body": "It's invalid html according to W3C Validator\r\n\r\nError: Attribute value missing.\r\n",
          "createdAt": "2021-05-01T23:25:39Z",
          "author": { "login": "unlocomqx", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzA5MjcxODM=",
    "body": "https://astexplorer.net/#/gist/7493c123a3c10eade136578aa9ebf4c8/6dc1f7f10625232aa5d214091bf3d6769b2e0558\r\n```svelte\r\n<input foo=a{1} />\r\n```\r\n```json\r\n{\r\n  \"start\": 11,\r\n  \"end\": 13,\r\n  \"type\": \"Text\",\r\n  \"raw\": \"a\",\r\n  \"data\": \"a\"\r\n}      \r\n```\r\nExpected `\"end\": 12`",
    "closedAt": null,
    "createdAt": "2021-04-29T11:45:42Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTc0MzA0OQ==",
          "body": "Correction this happens on every attribute value that has mustache tags, so even `style=\"color:{color};\"` has wrong end position for the first Text node\r\n\r\nhttps://astexplorer.net/#/gist/09380864606687886956085fb0442755/e48a32b2ea9a2a3d3fb5116495c30d7c025d87ff",
          "createdAt": "2021-05-04T07:37:51Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzAzNzQxODc=",
    "body": "**Describe the bug**\r\nWhen using a foreign namespace, svelte is detecting some elements as SVG which changes is handling of the elements including lower casing the attributes. Expected behaviour would be to skip special SVG handling when in a foreign namespace.\r\n\r\nThis has hit `svelte-nodegui` which has an element called 'view' which is triggering svelte to place it in the SVG namespace and force attributes to match SVG case ( https://github.com/nodegui/svelte-nodegui/issues/43 )\r\n```svelte\r\n<svelte:options namespace=\"foreign\" />\r\n<window>\r\n    <view class=\"vertical\">\r\n```\r\n\r\n```js\r\n\twindow_1 = document.createElementNS(\"https://svelte.dev/docs#svelte_options\", \"window\");\r\n\tview2 = svg_element(\"view\");\r\n\tview0 = svg_element(\"view\");\r\n\ttext0 = svg_element(\"text\");\r\n```\r\n\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/a64f21f99f3d48de992a731a76818c32?version=3.37.0\r\n\r\n**Expected behavior**\r\nall elements should be treated as foreign namespace (unless they have an xmlns attribute)\r\n\r\n**Severity**\r\nThis is blocking users of svelte-nodegui from using certain attributes like `readOnly` and `wordWrap`\r\n\r\n",
    "closedAt": "2021-04-30T16:45:44Z",
    "createdAt": "2021-04-28T20:52:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyODc4MjE4NA==",
          "body": "https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/nodes/Element.ts#L110 looks like the culprit\r\n```js\r\n\tif (!parent_element) {\r\n\t\treturn explicit_namespace || (svg.test(element.name)\r\n\t\t\t? namespaces.svg\r\n\t\t\t: null);\r\n\t}\r\n\r\n\tif (svg.test(element.name.toLowerCase())) return namespaces.svg;\r\n\tif (parent_element.name.toLowerCase() === 'foreignobject') return null;\r\n\r\n\treturn parent_element.namespace;\r\n```\r\nTop level elements get the explicit_namespace, but child elements get forced to svg if they match the svg element regex\r\n\r\n",
          "createdAt": "2021-04-28T21:09:56Z",
          "author": { "login": "halfnelson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDIyMTgxNQ==",
          "body": "Your fix for this has been included in 3.38.0 - thanks!",
          "createdAt": "2021-04-30T16:45:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzAyODgyMDQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nImagine the following component composition:\r\n\r\n```svelte\r\n<WithDropdownMenu>\r\n    <Button>a</Button>\r\n\r\n    <DropdownMenu>\r\n        <Button>b</Button>\r\n        <Button>c</Button>\r\n    </DropdownMenu>\r\n</WithDropdownMenu>\r\n```\r\n\r\n`WithDropdownMenu` sets a context item, so that `Button` \"a\", knows that it's used as a dropdown trigger. It does so by checking for the dropdown context: `const hasDropdown = hasContext(DROPDOWN);`.\r\n\r\nHowever know `Button` \"b\", and \"c\", will also think they are dropdown triggers, because they're still in the context of the top `WithDropdownMenu`.\r\n\r\nIt would be nice if we could also use `Map.prototype.delete` with the context map, which I then could use within `DropdownMenu`.\r\n\r\n**Describe the solution you'd like**\r\n\r\n```\r\nimport { deleteContext } from \"svelte\";\r\n\r\ndeleteContext(DROPDOWN);\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI'll set to `undefined` and check for the truthiness of the context item for now.\r\n```\r\n// DropdownMenu.svelte\r\nsetContext(DROPDOWN, undefined);\r\n\r\n// Button.svelte\r\nif (Boolean(getContext(DROPDOWN))) { /* set up as dropdown trigger */ };\r\n```\r\n\r\n**How important is this feature to you?**\r\nNot urgent, but I could write more semantic code using `hasContext` rather than relying on falsiness.",
    "closedAt": null,
    "createdAt": "2021-04-28T19:40:43Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzAxMzc2ODY=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n```js\r\n// CompoentA.svelte\r\n<script>\r\n  export let span = 24\r\n</script>\r\n\r\n// ComponentB.svelte\r\n<script>\r\n  console.log($$props) // output {}, should be { span: 24 }??\r\n</script>\r\n<CompoentA></ComponentA>\r\n```\r\n\r\n**Describe the solution you'd like**\r\n$$props can includes the default value, the default value itself is equivalent to the parameter passed in CompoentB?\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI am writing a component library. In the case of many default parameters, the inability to parse the default value from $$props caused me a lot of trouble.\r\n\r\n```js\r\n  export let span = 24\r\n  export let offset = 0\r\n  export let pull = 0\r\n  export let push = 0\r\n  export let xs: ResponseParamter = {} as SizeObject\r\n  export let sm: ResponseParamter = {} as SizeObject\r\n  export let md: ResponseParamter = {} as SizeObject\r\n  export let lg: ResponseParamter = {} as SizeObject\r\n  export let xl: ResponseParamter = {} as SizeObject\r\n  export let style = ''\r\n  export let use = []\r\n\r\n  let clazz = ''\r\n  export { clazz as class }\r\n\r\n  let gutter: number = getContext('sele-plus-row')\r\n  let __classList = []\r\n  \r\n  $: {\r\n    const ret: string[] = []\r\n    const pos = ['span', 'offset', 'pull', 'push'] as const\r\n    pos.forEach((prop) => {\r\n      const size = $$props[prop] // $$props['span'] !== 24, i must mixin $$props with all default value.\r\n      if (typeof size === 'number' && size > 0) {\r\n        ret.push(prop !== 'span' ? `el-col-${prop}-${$$props[prop]}` : `el-col-${$$props[prop]}`)\r\n      }\r\n    })\r\n    const sizes = ['xs', 'sm', 'md', 'lg', 'xl'] as const\r\n    sizes.forEach((size) => {\r\n      if (typeof $$props[size] === 'number') {\r\n        ret.push(`el-col-${size}-${$$props[size]}`)\r\n      } else if (typeof $$props[size] === 'object') {\r\n        const sizeProps = $$props[size]\r\n        Object.keys(sizeProps).forEach((prop) => {\r\n          ret.push(\r\n            prop !== 'span'\r\n              ? `el-col-${size}-${prop}-${sizeProps[prop]}`\r\n              : `el-col-${size}-${sizeProps[prop]}`,\r\n          )\r\n        })\r\n      }\r\n    })\r\n    // this is for the fix\r\n    if (gutter) {\r\n      ret.push('is-guttered')\r\n    }\r\n\r\n    __classList = ret\r\n  }\r\n```\r\n\r\n**How important is this feature to you?**\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n🔥\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n",
    "closedAt": null,
    "createdAt": "2021-04-28T16:34:18Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjcyMTg4MQ==",
          "body": "This would probably be a breaking change, so the question is whether the current behavior is a bug, and I don't have a clear opinion on that.",
          "createdAt": "2021-05-24T04:22:37Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NzAwOTQ2MDU=",
    "body": "https://svelte.dev/repl/f6c42b35982d4418bc44949b94aaaefd?version=3.37.0\r\n```svelte\r\n<input foo={x}hello{y}world{z} />\r\n```\r\nActual output: `attr(input, \"foo\", \"\" + (x + \"hello\" + y + \"world\" + z));`\r\n\r\nExpected either parser error or same output as `<input foo={x} hello {y} world {z} />`",
    "closedAt": "2021-04-28T16:05:26Z",
    "createdAt": "2021-04-28T15:46:50Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyODU3ODE1Mg==",
          "body": "I'd say this is being parsed correctly. We want to be able to support unquoted attribute values because HTML does, and within attribute values `{` and `}` have special meaning. `foo={x}hello{y}world{z}` is equivalent to `foo=\"{x}hello{y}world{z}\"`.",
          "createdAt": "2021-04-28T16:05:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjkzNjk3NDM=",
    "body": "**Describe the bug**\r\n\r\n$$slots didn't return anything when exported to Custom Element.\r\n\r\n**Logs**\r\n\r\n![115952805-be937680-a51a-11eb-8e58-1d1a5a3991dd](https://user-images.githubusercontent.com/7308718/116327338-27b80a00-a7f9-11eb-929d-28cdf421059d.png)\r\n\r\n**To Reproduce**\r\n\r\nSvelte\r\n\r\n```html\r\n<svelte:options tag=\"my-wc\"/>\r\n\r\n<script>\r\n$: console.log($$slots);\r\n</script>\r\n\r\n<slot name=\"foo\"></slot>\r\n```\r\n\r\nHTML\r\n\r\n```html\r\n<my-wc>\r\n    <span slot=\"foo\">Foobar</span>\r\n</my-wc>\r\n```\r\n\r\n**Expected behavior**\r\n\r\n`$$slots` should return something.\r\n\r\n**Stacktraces**\r\n\r\n```json\r\n\"devDependencies\": {\r\n    \"@rollup/plugin-commonjs\": \"^17.0.0\",\r\n    \"@rollup/plugin-node-resolve\": \"^11.2.1\",\r\n    \"fast-glob\": \"^3.2.5\",\r\n    \"node-sass\": \"^5.0.0\",\r\n    \"rollup\": \"^2.45.2\",\r\n    \"rollup-plugin-css-only\": \"^3.1.0\",\r\n    \"rollup-plugin-livereload\": \"^2.0.0\",\r\n    \"rollup-plugin-multi-input\": \"^1.2.0\",\r\n    \"rollup-plugin-scss\": \"^3.0.0-rc1\",\r\n    \"rollup-plugin-svelte\": \"^7.0.0\",\r\n    \"rollup-plugin-terser\": \"^7.0.0\",\r\n    \"sass\": \"^1.32.11\",\r\n    \"sass-loader\": \"^11.0.1\",\r\n    \"svelte\": \"^3.37.0\",\r\n    \"svelte-preprocess\": \"^4.7.2\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@rollup/plugin-json\": \"^4.1.0\",\r\n    \"sirv-cli\": \"^1.0.0\"\r\n  }\r\n  ```\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Chrome 90\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version: 3.37.0\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Additional context**\r\n\r\nDuplicated issue of https://github.com/sveltejs/svelte/issues/5594, but it seems to be broken again? Also https://github.com/sveltejs/svelte/issues/6165 but the issue was closed so I repost it.\r\n",
    "closedAt": "2021-05-03T07:49:39Z",
    "createdAt": "2021-04-28T00:12:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTA4ODUwMA==",
          "body": "Problem solved by putting `<script>` to the end of the page, or added `defer` tag for `<script>`.\r\n\r\nIt requires the DOM to be loaded to recognize the slots.",
          "createdAt": "2021-05-03T07:49:39Z",
          "author": { "login": "YamiOdymel", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjkyNDA1NTM=",
    "body": "Hi guys, first of all thanks for all the good work on this beautiful framework !\r\n\r\nI am trying to configure a Typescript monorepo using Lerna and for an obscure reason rollup is yelling the following error on build time:\r\n\r\n```\r\n(!) Unresolved dependencies\r\nhttps://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency\r\n@spaceunicorn/shared-utils (imported by src/main.ts)\r\n(!) Missing global variable name\r\nUse output.globals to specify browser global variable names corresponding to external modules\r\n@spaceunicorn/shared-utils (guessing 'sharedUtils')\r\n```\r\n\r\nI made a really simple reproduction repo here: https://github.com/mgrisole/svelte-typescript-monorepo-sample\r\n\r\nIf anyone has any clue on where the problem could come from I would really be grateful.",
    "closedAt": null,
    "createdAt": "2021-04-27T20:33:11Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDQ5NDA5Mg==",
          "body": "@mgrisole We can't access your repo",
          "createdAt": "2021-06-20T03:28:02Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDUyNTE0Nw==",
          "body": "The problem is likely that `@spaceunicorn/shared-utils` isn't installed in `node_modules`. And this isn't really Svelte-related.",
          "createdAt": "2021-06-20T09:25:37Z",
          "author": { "login": "bluwy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjkxMjk0MTM=",
    "body": "**Describe the bug**\r\nWhen you dynamically bind elements in an `#each` block to an array, and those elements have a transition on them, the bound array is not kept in sync when elements are removed.\r\n\r\nThis effectively means I cannot use `bind:this` in an each block if elements will be removed and I want to transition them out.\r\n\r\n**Logs**\r\nn/a\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/6ef0eeb08bc84f268f37281846d836e5?version=3.37.0)\r\n\r\nThe above REPL renders an array (`vals`) with four items and a button to remove each item. Each `<li>` is dynamically bound to an element in the `items` array. The `items` array is rendered below the list to illustrate what items are being bound.\r\n\r\nWhen you remove the bottom element (\"orange\") from the list, `items` is not updated. As you continue to remove elements from bottom-to-top, `items` stays one step behind and is out-of-sync.\r\n\r\n`items` is kept in sync if you remove items top-to-bottom. Also, if you remove the transition directive from the list item, the `items` array seems to be kept in sync.\r\n\r\nExample markup (see REPL for context):\r\n```html\r\n{#each vals as val, i (val)}\r\n\t<li \r\n\t\ttransition:scale\r\n\t\tbind:this={items[i]} \r\n\t\t>{val} <button on:click={() =>\r\n\t\tremove(val, i)}>Remove</button>\r\n\t</li>\r\n{/each}\r\n```\r\n\r\n**Expected behavior**\r\nThe `items` array should be in sync with the current state of the DOM. If I remove \"orange\", the associated DOM element should be removed from the array (or replaced by null/undefined).\r\n\r\n**Stacktraces**\r\nn/a\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 88.0\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version: 3.37.0\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nThis issue is annoying. I can work around it by calling `querySelector`, but that doesn't feel like the most idiomatic way to do it in Svelte.\r\n\r\nFor context, I encountered this issue when trying to render a list of inputs. I need to bind to each input so that I can call `focus` on them when one of them is removed. Since the bound array is not kept in-sync, sometimes the wrong input is focused.\r\n\r\n**Additional context**\r\nhttps://github.com/sveltejs/svelte/issues/4869 seems related, but that's related to binding components instead of DOM elements.\r\n\r\nI encountered this bug when working on https://github.com/sveltejs/kit/pull/1207.\r\n",
    "closedAt": null,
    "createdAt": "2021-04-27T18:16:20Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzgxNzEyMQ==",
          "body": "Also, in my REPL, if you remove the first item (\"apple\") then the new second item (\"cranberry\"), there are two items left in the `vals` array (\"banana\" and \"orange\"), but the bound `items` array only contains the \"orange\" element in the second spot.",
          "createdAt": "2021-04-27T18:21:02Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTI2OTcxNQ==",
          "body": "label: triage: bug?",
          "createdAt": "2021-06-05T17:22:50Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Njg2NTMxNDk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI recently started learning svelte, and I use REPL a lot to try out snippets and code. Currently the only way the written code is saved, is by logging in and saving the code. If I write some code, and then close the tab by mistake, intentionally or otherwise, that code is lost. This issue is for requesting a feature, which will auto save the written code in user's local storage.\r\n\r\n**Describe the solution you'd like**\r\nIt would be great if the code that is written in REPL is periodically saved in user's local storage and when default REPL is opend (https://svelte.dev/repl/), it will load the code saved in local storage, and if no code present in local storage, it will show the simple hello world example. This would be similar to how the Rust playground handles the written code (https://play.rust-lang.org/)  : Initially it gives only hello world, but if one writes some code, or changes configuration, then that is saved in the local storage, and is picked back up, when the next time the website is opened.\r\n\r\n**How important is this feature to you?**\r\nI think currently it only causes minor inconvenience as unsaved code is lost, if for some reason the tab is closed. that said, REPL does provide ability for saving code via github, so this may not be much required feature. \r\n\r\n**Additional context**\r\nOne difference from Rust playground would be that svelte REPL supports multiple files, which means the storing and retrieving of code in local storage must take that into account as well. Also one will need to consider if the code that is saved after logging in should be saved in local storage or not.\r\n\r\nThis issue is for saving code in REPL on user side using local storage ;  different from #4369, which I think asks for saving code across different versions of the code. This is also different from #3729 , which asks for autosaving of the code on server side.\r\n",
    "closedAt": null,
    "createdAt": "2021-04-27T09:25:06Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Njc3MTI5MTY=",
    "body": "Browser: Safari 14.0.3\r\nOS: macOS 11.2.3\r\n\r\nAfter emptying my browse cache, when I navigate to https://svelte.dev/tutorial/basics, seeing...\r\n\r\n- loading editor... below upper rectangle on right\r\n- loading Svelte compiler... below lower rectangle on right.\r\n- \\n\\n\\t\\n\\t\\t\\n\\n\\t\\t\\n\\t\\n\\t\\n appears in the Result in the lower right rectangle\r\n- JavaScript console has these errors:\r\n\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/global.css.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (global.css, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/prism.css.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (prism.css, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/svelte-logo-horizontal.svg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-logo-horizontal.svg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/icons/edit.svg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (edit.svg, line 0)\r\n> [Error] SyntaxError: Invalid escape in identifier: '\\'\r\n> \t(anonymous function) (about:srcdoc:1)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/client/client.d22d392f.js.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (client.d22d392f.js, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/fonts/overpass/overpass-latin-600.woff2.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (overpass-latin-600.woff2, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/fonts/overpass/overpass-latin-300.woff2.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (overpass-latin-300.woff2, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/fonts/fira-mono/fira-mono-latin-400.woff2.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (fira-mono-latin-400.woff2, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/favicon.png.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (favicon.png, line 0)\r\n\r\nWhen navigating to https://svelte.dev/examples, similar issue but many more JavaScript console errors...\r\n\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/global.css.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (global.css, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/prism.css.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (prism.css, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/hello-world.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (hello-world.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/dynamic-attributes.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (dynamic-attributes.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/styling.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (styling.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/nested-components.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (nested-components.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/html-tags.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (html-tags.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/reactive-assignments.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (reactive-assignments.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/reactive-declarations.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (reactive-declarations.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/reactive-statements.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (reactive-statements.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/declaring-props.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (declaring-props.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/default-values.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (default-values.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/spread-props.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (spread-props.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/if-blocks.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (if-blocks.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/else-blocks.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (else-blocks.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/else-if-blocks.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (else-if-blocks.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/each-blocks.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (each-blocks.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/keyed-each-blocks.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (keyed-each-blocks.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/await-blocks.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (await-blocks.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/dom-events.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (dom-events.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/inline-handlers.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (inline-handlers.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/event-modifiers.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (event-modifiers.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/component-events.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (component-events.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/event-forwarding.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (event-forwarding.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/dom-event-forwarding.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (dom-event-forwarding.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/text-inputs.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (text-inputs.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/numeric-inputs.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (numeric-inputs.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/checkbox-inputs.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (checkbox-inputs.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/group-inputs.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (group-inputs.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/textarea-inputs.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (textarea-inputs.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/file-inputs.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (file-inputs.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/select-bindings.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (select-bindings.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/multiple-select-bindings.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (multiple-select-bindings.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/each-block-bindings.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (each-block-bindings.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/media-elements.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (media-elements.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/dimensions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (dimensions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/bind-this.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (bind-this.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/component-bindings.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (component-bindings.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/onmount.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (onmount.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/ondestroy.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (ondestroy.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/update.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (update.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/tick.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (tick.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/writable-stores.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (writable-stores.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/auto-subscriptions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (auto-subscriptions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/readable-stores.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (readable-stores.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/derived-stores.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (derived-stores.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/custom-stores.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (custom-stores.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/tweened.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (tweened.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/spring.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (spring.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/transition.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (transition.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/adding-parameters-to-transitions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (adding-parameters-to-transitions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/in-and-out.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (in-and-out.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/custom-css-transitions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (custom-css-transitions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/custom-js-transitions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (custom-js-transitions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/transition-events.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (transition-events.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/deferred-transitions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (deferred-transitions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/animate.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (animate.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/easing.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (easing.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/clock.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (clock.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/bar-chart.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (bar-chart.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/area-chart.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (area-chart.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/scatterplot.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (scatterplot.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/svg-transitions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svg-transitions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/actions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (actions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/adding-parameters-to-actions.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (adding-parameters-to-actions.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/classes.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (classes.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/class-shorthand.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (class-shorthand.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/slots.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (slots.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/slot-fallbacks.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (slot-fallbacks.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/named-slots.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (named-slots.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/slot-props.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (slot-props.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/conditional-slots.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (conditional-slots.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/modal.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (modal.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/context-api.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (context-api.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/svelte-self.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-self.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/svelte-component.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-component.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/svelte-logo-horizontal.svg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-logo-horizontal.svg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/svelte-window.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-window.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/svelte-window-bindings.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-window-bindings.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/svelte-body.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-body.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/svelte-head.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (svelte-head.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/module-exports.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (module-exports.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/debug.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (debug.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/7guis-counter.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (7guis-counter.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/7guis-temperature.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (7guis-temperature.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/7guis-flight-booker.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (7guis-flight-booker.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/7guis-timer.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (7guis-timer.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/7guis-crud.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (7guis-crud.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/7guis-circles.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (7guis-circles.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/hacker-news.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (hacker-news.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/examples/thumbnails/immutable-data.jpg.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (immutable-data.jpg, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/client/client.d22d392f.js.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (client.d22d392f.js, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/fonts/overpass/overpass-latin-600.woff2.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (overpass-latin-600.woff2, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/fonts/overpass/overpass-latin-300.woff2.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (overpass-latin-300.woff2, line 0)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/fonts/fira-mono/fira-mono-latin-400.woff2.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (fira-mono-latin-400.woff2, line 0)\r\n> [Error] SyntaxError: Invalid escape in identifier: '\\'\r\n> \t(anonymous function) (about:srcdoc:1)\r\n> [Error] FetchEvent.respondWith received an error: Returned response is null.\r\n> [Error] Cannot load https://svelte.dev/favicon.png.\r\n> [Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (favicon.png, line 0)\r\n\r\nWhen I use Google Chrome 90 on the same MacBook, no errors. Everything works as expected.",
    "closedAt": null,
    "createdAt": "2021-04-26T13:35:47Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjg0MzM3MA==",
          "body": "I can't reproduce this in Safari 14. I suspect it was a server or network glitch, unrelated to the browser being used. Are you still seeing this in Safari?",
          "createdAt": "2021-04-26T13:39:11Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjg1NjA0MQ==",
          "body": "Odd. Still running into it right now and I disabled BitDefender Shield, cleared Safari's cache, and restarted Safari just to be sure. No browser extensions are active. On Saturday, the Tutorial worked on Safari but not Examples. Now, no joy for either.\r\n\r\nWould guess it's CDN-related but it works on Chrome.",
          "createdAt": "2021-04-26T13:56:19Z",
          "author": { "login": "nstuyvesant", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzAyMDg1OA==",
          "body": "@Conduitry - what is your exact Safari version and macOS version? Does it match mine (14.0.3 and 11.2.3 respectively)?",
          "createdAt": "2021-04-26T17:34:05Z",
          "author": { "login": "nstuyvesant", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzIyMTI5Nw==",
          "body": "Have been seeing this for a couple days at least. Thought it had something to do with my network. Safari 14.0.3 on macOS 11.2.3. Seems fine in Firefox.",
          "createdAt": "2021-04-27T00:19:28Z",
          "author": { "login": "intrikate", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyODI2MzI4MQ==",
          "body": "Saw a similar problem a few times. 1st time with a friend's app on netlify. Second time yesterday on the svelte website (2 times actually).\r\nEven a full reload (without cache), the website is not properly reloading. This means Opt + Cmd + E and Opt + Cmd + R are not working.\r\nOnly solution to reload the website properly is to remove the data using Preferences > Confidentiality > Manage website data.\r\n",
          "createdAt": "2021-04-28T08:32:47Z",
          "author": { "login": "rdupz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyODUwODQzNA==",
          "body": "@rdupz - thank you. Removing the Cache and Cookies for svelte.dev in Safari solved this problem for me. Like you, I had cleared the browser cache and this did not help.\r\n\r\nSo what about our LocalStorage or cookies got so messed up that it prevented the Tutorial and Examples from working on Safari? That's my larger concern.",
          "createdAt": "2021-04-28T14:36:44Z",
          "author": { "login": "nstuyvesant", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzgxOTgwNw==",
          "body": "So this hit me again. Investigated a bit this time, and I think this is service-worker related issue.  \r\n\r\n![Capture d’écran 2021-05-06 à 19 25 08](https://user-images.githubusercontent.com/4375638/117356963-a6294180-aeb4-11eb-998b-c38bb4c66408.png)\r\n\r\nLeft window: the problem.  \r\nMiddle window: Playing in the console from the service worker of the page having the problem. In the `self.caches.keys()` we can see only one key, the \"offline\" one. Resource linked to this key are properly loaded.  \r\nRight window: Console from the service worker of a page from private browsing - which works fine.  In the `self.caches.keys()` we can see 2 keys, \"offline\" and \"cache\". The \"cache\" is the one allowing fetching all the resources.\r\n\r\nI compared the service-worker.js script loaded in Safari and Safari Private Browsing and they are the same. I also inspected the sqlite database in the Safari internals data (which stores service-workers related data): the stored script is also the same.  \r\nSo same script but different results. \r\n\r\nIn conclusion I think this may be related to this code from service-worker.js, or the way it is loaded, or a Webkit bug:\r\n```\r\nself.addEventListener(\"fetch\", (a => {\r\n        if (\"GET\" !== a.request.method || a.request.headers.has(\"range\"))\r\n            return;\r\n        const n = new URL(a.request.url);\r\n        n.protocol.startsWith(\"http\") && (n.hostname === self.location.hostname && n.port !== self.location.port || (n.host === self.location.host && i.has(n.pathname) ? a.respondWith(caches.match(a.request)) : \"only-if-cached\" !== a.request.cache && a.respondWith(caches.open(`offline${s}`).then((async s => {\r\n            try {\r\n                const n = await fetch(a.request);\r\n                return s.put(a.request, n.clone()), n\r\n            } catch (n) {\r\n                const i = await s.match(a.request);\r\n                if (i)\r\n                    return i;\r\n                throw n\r\n            }\r\n        })))))\r\n```\r\n\r\nEDIT: I put some breakpoints in the service-worker.js to see how it goes... and this worked - the page succeeded to load. Before I was able to understand anything. Weird.\r\n",
          "createdAt": "2021-05-06T19:58:14Z",
          "author": { "login": "rdupz", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Njc2OTYwMjA=",
    "body": "Hi\r\nI was learning svelte from its official website in mobile.\r\nI found an issue while learning from the tutorial..\r\n\r\nWhenever I try to write code in the input, its not writing.\r\n(When I press any key, then immediately a backspace added in the input code and the letter which I typed is suddenly removed.)\r\nThis happens only in mobile browsers. I tried this on many other mobile browsers. I got the same issue.\r\n\r\nPlease fix this issue. I really love svelte over other frameworks.\r\n\r\nRituraj",
    "closedAt": "2021-04-26T13:28:08Z",
    "createdAt": "2021-04-26T13:19:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjgzNTM5Mw==",
          "body": "See #3374. We basically need to wait for CodeMirror 6 to mature a bit more, and then see whether switching to that improves matters.",
          "createdAt": "2021-04-26T13:28:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjcyMTc1NDU=",
    "body": "Is it possible to pass vue-component to a svelte-component in a Vue App ? ",
    "closedAt": "2021-04-26T03:42:07Z",
    "createdAt": "2021-04-26T03:21:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjQ3OTkyMQ==",
          "body": "Not directly. You would need some sort of wrapper for the Vue component to let it be used in a Svelte component.\r\n\r\nGitHub issues aren't the right place for questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-04-26T03:42:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjcxMTA0NTQ=",
    "body": "how do I get the example below to be written in Svelte?\r\nespecially with the line 'things.push (this)';\r\nsince 'this' in a Svelte file references the Window object?\r\n\r\n```\r\nimport things from 'somewhere' // an array\r\n\r\nclass Thing {\r\n   constructor (foo) {\r\n     this.foo = foo;\r\n     this.svg = document.createElementNs('svg');\r\n     this.likeMe = () => things.filter((t) => t.foo === this.foo)\r\n     things.push (this)\r\n   }\r\n}\r\n\r\n```\r\n\r\nI only got this far, but what it holds in the array is the html object and I need the properties of the instance (suppressed parts) ...\r\n\r\n```\r\n<script>\r\n  export let foo\r\n   import {onMount} from 'svelte';\r\n   import things from 'somewhere';\r\n\r\n   let _this\r\n   let likeMe = () => things.filter((t) => /* t.foo === this.foo */)\r\n   onMount (() => {\r\n     things.push (_this)\r\n   })\r\n</script>\r\n\r\n<svelte:self bind:this={foo} >\r\n  <svg></svg>\r\n</svelte>\r\n```",
    "closedAt": "2021-04-26T05:27:20Z",
    "createdAt": "2021-04-25T20:48:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjM4ODc2Mg==",
          "body": "`this` in top-level of any ESM module or top-level of any .svelte component would be `undefined`, this is according to specification of stricter version of JS from ES6 modules.\r\n\r\nsince 'this' in a Svelte file references the Window object? - where do you get `this` to evaluate to Window object ?? that is not possible",
          "createdAt": "2021-04-25T20:57:17Z",
          "author": { "login": "ashokallu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjM4OTkxMQ==",
          "body": "`<svelte:self bind:this={foo} >\r\n  <svg></svg>\r\n</svelte>`\r\n\r\nhttps://svelte.dev/docs#svelte_self\r\n\r\n> It cannot appear at the top level of your markup; it must be inside an if or each block to prevent an infinite loop.\r\n",
          "createdAt": "2021-04-25T21:06:02Z",
          "author": { "login": "ashokallu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjQxMzUxMA==",
          "body": "ok, the code at the beginning is really incorrect, it is just another one of my experiments to try to find the answer, what I would like to know is how do I store a reference of this instantiated component?\r\nInside the <script /> tag if I do console.log (this) Window is returned\r\nI'm after something like:\r\n```\r\nthings.push (?this?) // things = [{foo: 'bar', likeMe:function}, {foo: 'zaz', likeMe:function}]\r\n```\r\nwhere each of the elements would be an instance of that Svelte file.",
          "createdAt": "2021-04-25T23:26:46Z",
          "author": { "login": "rogeriojlle", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjUxMzIzNQ==",
          "body": "I found a way:\r\nI stopped trying to find an \"this\" in Svelte, and started importing a class, leaving Svelte for rendering only",
          "createdAt": "2021-04-26T05:27:20Z",
          "author": { "login": "rogeriojlle", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjYyOTk2Mw==",
          "body": "> ok, the code at the beginning is really incorrect, it is just another one of my experiments to try to find the answer, what I would like to know is how do I store a reference of this instantiated component?\r\n> Inside the <script /> tag if I do console.log (this) Window is returned\r\n> I'm after something like:\r\n> \r\n> ```\r\n> things.push (?this?) // things = [{foo: 'bar', likeMe:function}, {foo: 'zaz', likeMe:function}]\r\n> ```\r\n> \r\n> where each of the elements would be an instance of that Svelte file.\r\n\r\nFirst the component is instantiated, and then the <script> block of the component would be executed in the context of the instantiated component, you cannot reflect the instantiated component from inside of the <script> block using the `this` reference, as `this` would not work inside the <script> block.\r\n\r\nThere is a way to access the instance of the component, which is, we can acccess the component instance from inside of another component.\r\nNormally, we use import a component into another component, and use custom tag syntax `<Demo />` to render a component, the Svelte will take care of instantiating and rendering the component. we have another way also, which is \r\n\r\nhttps://svelte.dev/docs#svelte_component\r\n\r\nApp.svelte \r\n`<script>\r\nimport Demo from './Demo.svelte';\r\nlet demoComponentInstance;\r\n</script>\r\n\r\n// Do not use this\r\n`<Demo />`\r\n \r\nuse the below to render a component when you want to access the component instance programatically inside another component.\r\n`<svelte:component this={Demo} bind:this={demoComponentInstance} />`\r\n\r\n`The <svelte:component> element renders a component dynamically, using the component constructor specified as the this property.`\r\n\r\n`You data bind \"this\" attribute to a local variable in the App component, and you can access the instance of this component in the App component`\r\n\r\nRefer to the example below:\r\nhttps://svelte.dev/repl/8ba4270a9e334f35a591cdbfbac70e8e?version=3.22.3\r\n\r\n\r\n",
          "createdAt": "2021-04-26T08:34:12Z",
          "author": { "login": "ashokallu", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjY1MTE5Mjk=",
    "body": "**Describe the bug**\r\n\r\nI have a component that fetches data into a variable and passes the variable to the default slot, but only if the data is loaded. I wanted to add a named slot, but this caused an error `Cannot read property 'hello' of undefined` due to my `let:` destructuring syntax.\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/a7df02836b344eab9db7e3f01b7ec43f?version=3.37.0\r\n\r\nApp.svelte\r\n```\r\n<script>\r\n\timport HeaderAndData from './HeaderAndData.svelte'\r\n</script>\r\n\r\n<HeaderAndData let:data={{hello}}>\r\n\t<!-- Uncomment this (Cannot read property 'hello' of undefined) -->\r\n\t<!-- <h1 slot=\"header\">Data:</h1> -->\r\n\r\n\t<p>{hello}</p>\r\n</HeaderAndData>\r\n```\r\nHeaderAndData.svelte\r\n```\r\n<script>\r\n\tlet data\r\n\t\r\n\tfunction getData(){\r\n\t\tdata = {\r\n\t\t\thello: 'world'\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<button on:click={getData}>Get Data</button>\r\n\r\n<slot name=\"header\"></slot>\r\n\r\n{#if data}\r\n\t<slot {data}></slot>\r\n{/if}\r\n```\r\n\r\n**Expected behavior**\r\nI would expect `let:` to not be assigned to if the default `<slot>` isn't being rendered, regardless of the presence of additional named slots.\r\n\r\n**Information about your Svelte project:**\r\nSvelte 3.37.0\r\n\r\n**Severity**\r\nI have to avoid using destructuring syntax any time I want to use the named slot, which is a little annoying but not a huge deal.",
    "closedAt": null,
    "createdAt": "2021-04-24T01:02:54Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjU5NTY1NjQ=",
    "body": "In tutorial chap 7.a., `fetch` function in onMount function is failed like below.\r\n\r\n- image\r\n\r\n![image](https://user-images.githubusercontent.com/42367320/115854363-1f607780-a465-11eb-9f7c-b6bebb254362.png)\r\n\r\n- error message\r\n\r\n```\r\nError:\r\nmessage: \"Uncaught (in promise): Failed to fetch\"\r\nstack: TypeError: Failed to fetch\r\n```\r\n\r\n- code: `App.svelte`\r\n\r\n```svelte\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\tlet photos = [];\r\n\r\n\tonMount(async () => {\r\n\t\tconst res = await fetch(`https://jsonplaceholder.typicode.com/photos`);\r\n\t\tphotos = await res.json();\r\n\t});\r\n</script>\r\n\r\n<style>\r\n\t.photos {\r\n\t\twidth: 100%;\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: repeat(5, 1fr);\r\n\t\tgrid-gap: 8px;\r\n\t}\r\n\r\n\tfigure, img {\r\n\t\twidth: 100%;\r\n\t\tmargin: 0;\r\n\t}\r\n</style>\r\n\r\n<h1>Photo album</h1>\r\n\r\n<div class=\"photos\">\r\n\t{#each photos as photo}\r\n\t\t<figure>\r\n\t\t\t<img src={photo.thumbnailUrl} alt={photo.title}>\r\n\t\t\t<figcaption>{photo.title}</figcaption>\r\n\t\t</figure>\r\n\t{:else}\r\n\t\t<!-- this block renders when photos.length === 0 -->\r\n\t\t<p>loading...</p>\r\n\t{/each}\r\n</div>\r\n```\r\n\r\nWhat happens?\r\nIs this problem related to the link `https://jsonplaceholder.typicode.com/photos?_limit=20`?\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-04-23T10:00:19Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTU3NTE3OA==",
          "body": "Looks like https://jsonplaceholder.typicode.com/photos?_limit=20 is down. Not an issue for us, unless their service is no longer being provided in which case we'll have to switch to something else.",
          "createdAt": "2021-04-23T10:51:45Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTU4OTkwMA==",
          "body": "It's back up now for me. This is at least the second issue they've had recently. (The first was letting their certificate expire for a day or so before renewing it.) If this is starting to indicate that this service isn't going to be very well maintained, we should probably think about switching to something else. Or about reworking this tutorial page to not depend on an external service at all.",
          "createdAt": "2021-04-23T11:20:47Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTY2OTE4Mg==",
          "body": "I'm glad to confirm tutorial’s code is correct. I'll leave the problem about this external link to you.\n\nThanks.",
          "createdAt": "2021-04-23T13:45:08Z",
          "author": { "login": "nukopy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDU3NDE4NQ==",
          "body": "shouldnt it be reasonable to use githubraw for this?",
          "createdAt": "2021-05-01T07:51:59Z",
          "author": { "login": "Kapsonfire-DE", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjU3NTc4NjY=",
    "body": "Hello, I'm a new Svelte.js user and I'm facing this problem.\r\n\r\nThe Svelte server crashed 5 times in the last 3 minutes. The server will not be restarted.\r\n\r\nalso in the output tab, it's showing this error\r\n\r\nSyntaxError: Invalid or unexpected token\r\n    at wrapSafe (internal/modules/cjs/loader.js:1054:16)\r\n    at Module._compile (internal/modules/cjs/loader.js:1102:27)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1158:10)\r\n    at Module.load (internal/modules/cjs/loader.js:986:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:879:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\r\n    at internal/main/run_main_module.js:17:47\r\n[Info  - 10:53:48 AM] Connection to server got closed. Server will restart.\r\nC:\\Program Files\\nodejs\\node.exe:1\r\nMZ�\r\n\r\n\r\nplease help me or I won't be able to do my project on time.",
    "closedAt": "2021-04-23T06:11:45Z",
    "createdAt": "2021-04-23T05:31:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTQwNTI1OA==",
          "body": "You're setting the wrong config. Don't set `svelte.language-server.ls-path` with your node.js executable path. That's for `svelte.language-server.runtime`. Also, please open vscode-extension-related issues in https://github.com/sveltejs/language-tools",
          "createdAt": "2021-04-23T05:50:54Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjU0NDExNDc=",
    "body": "(This feature request was workshopped with @slbls.)\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nAs mentioned in the [Svelte docs](https://svelte.dev/docs#2_Assignments_are_reactive), arrays are the exception when it comes to reactivity:\r\n\r\n> Because Svelte's reactivity is based on assignments, using array methods like .push() and .splice() won't automatically trigger updates. Options for getting around this can be found in the [tutorial](https://svelte.dev/tutorial/updating-arrays-and-objects).\r\n\r\nWhile spread syntax is an adequate solution, it still feels awkward to use it over a shorter method like `splice()`. In practice, it provides a roadblock for new users adjusting to a Svelte codebase as it requires reading the docs to learn about this footgun. A user coming from vanilla JavaScript would assume that arrays automatically work reactively as is. Even with prior Vue or React experience, redundant array assignment is a unique Svelte escape hatch that requires reading the docs to understand. While all reactive frameworks, not just Svelte, have to deal with the issue of array reactivity, Svelte may be uniquely positioned to solve this problem at compile time.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAs the official solution presented in the tutorial is redundant assignment (`array = array`), we propose a compiler improvement that detects the usage of a standard library array method such as `push()`, `pop()`, `slice()`, etc. and automatically appends the redundant assignment after it. The user could thus write:\r\n\r\n```js\r\nfunction addNumber() {\r\n    numbers.push(numbers.length + 1);\r\n}\r\n```\r\n\r\nWhich Svelte would compile to:\r\n\r\n```js\r\nfunction addNumber() {\r\n    numbers.push(numbers.length + 1);\r\n    numbers = numbers;\r\n}\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nInstead of redundant assignment, Svelte's compiler could convert a standard function call into its equivalent spread syntax:\r\n\r\n```js\r\nfunction addNumber() {\r\n    numbers = [...numbers, numbers.length + 1];\r\n}\r\n```\r\n\r\nThis may entail more complexity than redundant assignment, however.\r\n\r\n**How important is this feature to you?**\r\n\r\nAs users coming from React, spread syntax is familiar and doesn't impede workflow. When working on teams with new users, however, it is easy to tell that spread syntax feels unnatural compared to standard library array functions that mirror how arrays are mutated in other languages. Instead of forcing beginners learn new language features, being able to use said standard library functions would flatten the learning curve, especially when considering standard library functions already have official documentation. Although spread syntax is officially documented as well, there's no official or \"go-to\" resource for \"how do I do `splice()` with spreads?\", etc.\r\n\r\n**Additional context**\r\n\r\nTwo potential counter arguments to address:\r\n\r\n1. What if a user modifies the array prototype and uses a non-standard library method to mutate an array? Or, what if a user sets an arbitrary variable to a standard library function and then calls it on an array?\r\n\r\nIn the context of all the above, Svelte doesn't need to address such edge cases as the redundant assignment escape hatch would still exist for these users. Plus, modifying standard prototypes is generally not recommended anyway, so users choosing to do so should require consciously using redundant assignment.\r\n\r\nThe benefit of this proposal is that the escape hatch evolves from something a beginner or casual user likely will have to reach for into something an advanced user can optionally reach for when needed.\r\n\r\n2. What if a user doesn't want an array updated reactively until all modifications are complete?\r\n\r\nThis presents a potential problem with large arrays if a user wants to perform multiple operations on them. That considered, this concern exists with all other types of reactive assignments too. For example: what if a user wants to perform multiple operations on a `number`, `string`, etc. before reactively updating?\r\n\r\nA general solution to this is to use a temporary variable as a scratchpad. Once all operations have been completed, the result can then be assigned to the reactive variable.\r\n\r\nThank you for considering our proposal, we look forward to your feedback!",
    "closedAt": "2021-04-22T21:06:12Z",
    "createdAt": "2021-04-22T20:31:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTE4NTY1MA==",
          "body": "This was extensively bikeshed in the past. As with all other comparable frameworks, updates are and should be explicit (`setState`), as an important paradigmatic control of flow.",
          "createdAt": "2021-04-22T21:06:12Z",
          "author": { "login": "arxpoetica", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTIyNzAzNA==",
          "body": "From the blog:  [Svelte 3: Rethinking reactivity](https://svelte.dev/blog/svelte-3-rethinking-reactivity),\r\n\r\n> So we took a step back and asked ourselves what kind of API would work for us... and realised that the best API is no API at all. We can just use the language. Updating some count value — and all the things that depend on it — should be as simple as this:\r\n```js \r\ncount += 1;\r\n```\r\n> Since we're a compiler, we can do that by instrumenting assignments behind the scenes:\r\n```js\r\ncount += 1; $$invalidate('count', count);\r\n```\r\n> Importantly, we can do all this without the overhead and complexity of using proxies or accessors. It's just a variable.\r\n\r\nGiven that Svelte 3 got rid of explicit `setState`, doesn't it make sense that arrays should update implicitly as well?\r\n",
          "createdAt": "2021-04-22T22:38:22Z",
          "author": { "login": "Nexuist", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTg1MTc4Mg==",
          "body": "```\r\ncount += 1;\r\n```\r\n\r\nThis example explicitly sets state, just as `some_variable = []` also explicitly sets state.",
          "createdAt": "2021-04-23T18:47:09Z",
          "author": { "login": "arxpoetica", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTg3Mjc2MQ==",
          "body": "Other reasons against this: Where does it end? \"Oh this works for arrays but not Map and Set, why? Why doesn't it work for my own function?\". Keeping this clear greatly benefits predictability.",
          "createdAt": "2021-04-23T19:28:47Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTE0MTAyOQ==",
          "body": "Just thinking out loud. Would something like `numbers.$push(numbers.length + 1);` be a solution? Where the compiler would see a method starting with `$` and invalidate the array? The `$` usually indicates reactivity in svelte so it may be fitting to use for methods. This would allow the developer to explicitly push an item to the array and indicate that you want the array to update reactively while leaving the normal `.push` intact. This would also solve the issue of supporting user defined methods as it's all explicit and just syntactic sugar for reactivity.\r\n\r\nSo as an example:\r\n```js\r\nfunction addNumber() {\r\n    numbers.$push(numbers.length + 1);\r\n}\r\n```\r\n\r\nwould compile to\r\n```js\r\nfunction addNumber() {\r\n    numbers.push(numbers.length + 1);\r\n    $$invalidate('numbers', numbers);\r\n}\r\n```\r\n\r\nIdk, as I said, this is just me thinking out loud as I'm not entirely sure if it would be acceptable as it would probably introduce some issues with user defined methods that start with `$` wouldn't be called as it would compile to the method name without the `$`.",
          "createdAt": "2021-05-14T09:53:02Z",
          "author": { "login": "rster2002", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTM0MDYzOA==",
          "body": "As mentioned above, this was extensively bikeshed in the past, and is not something we're considering.\r\n\r\nSvelte will always expect explicit assignment.\r\n\r\n```\r\ncount += 1;\r\nsome_variable = [];\r\n```",
          "createdAt": "2021-05-14T16:08:28Z",
          "author": { "login": "arxpoetica", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjUzMDkzNzA=",
    "body": "Svelte Stores are a powerful observable container \"cell\" library which is unique in the Store ecosystem. Even though Svelte Stores can be used without the components, it would be useful for Svelte Stores to be extracted into a separate library so people who are not familiar with Svelte are more inclined to consider Svelte Stores as an option.\r\n\r\nAnother benefit of making svelte/stores a distinct library is that it would be easier to create an ecosystem around svelte/stores.",
    "closedAt": "2021-04-22T18:42:47Z",
    "createdAt": "2021-04-22T18:34:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTA5MDU4NQ==",
          "body": "See https://github.com/holochain/syn/issues/21",
          "createdAt": "2021-04-22T18:35:05Z",
          "author": { "login": "btakita", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTA5NTQxMw==",
          "body": "This has come up before in #3567 and I think the answer is the same. If someone wants to automatically publish this, they are free to.",
          "createdAt": "2021-04-22T18:42:47Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjUxMTU5MDU=",
    "body": "**Describe the bug**\r\nif reactive statement ($: x = function (x) {...}) depend on itself value defined by anonymous function, it return function (and not just that, it returns whole code as it's written in \".svelte\" file, include comments) instead value, but it doesn't give any error, not compiler terminal, not in runtime in browser.\r\n\r\n**Logs**\r\n-\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/76ad951fd53f4fd988bfde674cf6b0da?version=3.37.0\r\n\r\n**Expected behavior**\r\nIt should work fine? (Or I'm just dumb), or when I'm more thinking about it, we are redeclaring function by number, so it should just contain number or throw error or something. But 100% not pass comments of JS code to view / DOM. \r\n\r\n**Stacktraces**\r\n-\r\n\r\n**Information about your Svelte project:**\r\n-\r\n\r\n**Severity**\r\n10/10\r\n\r\n**Additional context**\r\n-\r\n",
    "closedAt": "2021-04-22T16:55:30Z",
    "createdAt": "2021-04-22T15:56:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDk3MjE3MA==",
          "body": "I have absolutely no idea what I would expect this code to do, and I also have absolutely no idea how this could be 10/10 severity. In what sort of situation do you need code like this?",
          "createdAt": "2021-04-22T16:02:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDk3NDMzNQ==",
          "body": "I don't understand how comment in source code can be passed to DOM like this, but I see some security problems (XSS?) with it (code in comment can be executed). And I use $: together with anonymous functions pretty often.",
          "createdAt": "2021-04-22T16:05:20Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTAxNjQyMw==",
          "body": "This works as it should.",
          "createdAt": "2021-04-22T16:55:30Z",
          "author": { "login": "arxpoetica", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjQ5MjMzODI=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\n**Describe the bug**\r\nThe issue is that mouseover events do not fire when emulating different device screen sizes in Firefox/Chromium.\r\n\r\n**To Reproduce**\r\nGo to: [https://svelte.dev/repl/170a4929993247aba2b16f18621729ab?version=3.23.2](https://svelte.dev/repl/170a4929993247aba2b16f18621729ab?version=3.23.2)\r\n\r\nIn browser, tested in Chromeium and Firefox enter inspector mode and select a device screen to simulate e.g. iPhone 6/7/8 etc.\r\n\r\nHovering mouse over circle SVG and observe the colour does not change as it should.\r\n\r\n**Expected behavior**\r\nHovering mouse over SVG circle should change colour from red to green\r\n\r\nChromium Version 90.0.4430.72 (Official Build) snap (64-bit)\r\nFirefox 87.0 (64 bit)\r\nUbuntu 20.04.2 LTS\r\nRunning Svelte compiler version 3.23.2\r\n\r\n\r\n**Severity**\r\nIssue for working with mobile devices though mouse hover event not really an issue on touch mobile devices.\r\n\r\n\r\n\r\n",
    "closedAt": "2021-04-22T13:10:35Z",
    "createdAt": "2021-04-22T13:01:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDgyODAzMw==",
          "body": "This isn't a bug in Svelte. The event isn't being emitted by the browser.\r\n\r\nIf I create an HTML file containing `<div onmouseover=\"alert('test')\">test</div>` and open it in Firefox and enable responsive design mode and touch event simulation, the mouseover isn't triggered.",
          "createdAt": "2021-04-22T13:10:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDg1NzM0OA==",
          "body": "Ahh right ok, thanks for the quick response!",
          "createdAt": "2021-04-22T13:47:48Z",
          "author": { "login": "fincht96", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjQ3OTc1ODg=",
    "body": "### Describe the bug\r\nWhen an if block contains a transition-enabled component that reads from the same store the if block does, the if block will linger after the out transition is finished.\r\n\r\n\r\n### To Reproduce\r\n\r\nREPL: https://svelte.dev/repl/8047903b1d964d48bd0662b8f4a392b7?version=3.37.0\r\n\r\nThis repl contains the simplest conditions I've found so far for this bug to occur. These conditions are as follows:\r\n- External component (\"App\" in the repl) displays one of tab components based on a store state.\r\n- One of the tabs (\"Motion\") contains an array of card components (\"MotionCard\").\r\n- Each card receives the store state as a parameter.\r\n- Each card has an out transition.\r\n\r\nTo witness the bug, select \"Motion\" tab in the menu, then move to any other tab. The \"Motion\" tab will still be visible alongside the correct tab.\r\n\r\n\r\n### Expected behavior\r\n\r\nI expect only one of the if blocks to be visible at a time.\r\n\r\n- The behavior is correct if we remove the out transition.\r\n- The behavior is correct if we don't pass the store state to card components.\r\n- The workaround I found is to wrap the faulty tab with an additional if block. See the workaround repl: https://svelte.dev/repl/e6bbd620b9a0443ab6e55f1cffcef8d7?version=3.37.0\r\n\r\n\r\n### Information about your Svelte project\r\n\r\nREPL was tested in Firefox 88 and Chrome 89 under OSX. Current Svelte version is 3.37.0\r\n\r\n\r\n### Severity\r\n\r\nThere is a workaround. Without it, the transition system is unusable in this case.\r\n",
    "closedAt": null,
    "createdAt": "2021-04-22T10:35:50Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjQ2NzkxMDg=",
    "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n```html\r\n{#await promise then number}\r\n<p>Nice number: {number}</p>\r\n{:catch err}\r\n<p style=\"color:red\">Oh noes! {err.message}</p>\r\n{/await}\r\n```\r\ncompiles, but if `number` rejects, will always throw, rendering the `{:catch}` statement useless and ambiguous.\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\nNot relevant\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n[REPL Link](https://svelte.dev/repl/9fc4169bf79d44d4a2afc5376243ce4c?version=3.37.0)\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nA compiler error that the `{:catch}` is not inside of a correct `{#promise}` block preferably.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10\r\n\r\nN/A\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nN/A\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\n3.37.0\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nN/A\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\nMinor\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\nA fun edge case :). I wonder if this is possibly intended behaviour that I am missing?",
    "closedAt": "2021-04-22T08:22:12Z",
    "createdAt": "2021-04-22T08:20:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDY0NDMyMQ==",
          "body": "Oops. Didn't define the function as being `async`. 🤦🏽‍♂️ ",
          "createdAt": "2021-04-22T08:23:08Z",
          "author": { "login": "hhhapz", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjQ0NTQxOTY=",
    "body": "If i have the following:\r\n\r\n```svelte\r\n<script>\r\n  function action(node) {\r\n     if (some_condition) {\r\n         node.classList.add('xxx');\r\n     }\r\n  }\r\n</script>\r\n\r\n<p use:action />\r\n\r\n<style>\r\n   p.xxx {\r\n      color: green;\r\n   }\r\n</style>\r\n```\r\n\r\nthe selector `p.xxx` will get removed because it didnt match any elements, svelte has no idea that the `p` will have the class `xxx`.\r\n\r\nA workaround would be to use `:global(p.xxx)`, but this would mean it will affect all the `p.xxx` out there.\r\n\r\nWhat I would like to do is `p:global(.xxx)`, while still scoped to `p` within the component, it will treat `.xxx` as global (ie, do not go and match any selector written within `:global()`)\r\n\r\nhowever, this is not yet possible, as it will throw error:\r\n\r\n```\r\n:global(...) must be the first element in a compound selector (8:2)\r\n```\r\n\r\n<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. For example: I'm always frustrated when [...]\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**How important is this feature to you?**\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n",
    "closedAt": "2021-04-30T14:35:40Z",
    "createdAt": "2021-04-22T01:22:59Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDIxOTczMw==",
          "body": "This has been released in 3.38.0, and I've opened #6269 for documenting it.",
          "createdAt": "2021-04-30T16:42:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzYwNTU3NA==",
          "body": "I _think_ this change may have caused an issue with the repl: https://github.com/sveltejs/svelte-repl/issues/159 (it's the only change in 3.38.0 that seems connected)",
          "createdAt": "2021-05-06T15:16:12Z",
          "author": { "login": "tomyan", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjM4Mzg3MTA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI like the svelte stores but I don't like the static get method which gets the value using subscribe/unsubscribe.\r\n\r\n**Describe the solution you'd like**\r\nI'd like the stores to have their own private get method.\r\nI understand it may be again the store philosophy but since svelte provides the static get method, it's not that big deal.\r\n\r\n**Describe alternatives you've considered**\r\nIf you didn't like this idea another alternative for me would be to create a lib which extends stores with the get method.\r\n\r\n**How important is this feature to you?**\r\nNo blocker of course :-)\r\n",
    "closedAt": "2021-04-21T13:04:29Z",
    "createdAt": "2021-04-21T12:53:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDA0MzI3MA==",
          "body": "I don't know what you mean by it being \"private\" - if it's private, you shouldn't be calling it.\r\n\r\nHaving a `get` method has come up before, in #3264 for example, and isn't something we want to do for the reasons laid out in Rich's comment.\r\n\r\nThe important thing to remember about stores is that there's nothing special about the default implementations. All of that could well live in userland. If you want to define your own stores that include `.get()`, go ahead, but it's not something that's needed in the store contract.",
          "createdAt": "2021-04-21T13:04:29Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDA2MDc4MA==",
          "body": "Sry, \"private\" was confusing.. didn't mean it like it shouldnt' be called. Thanks for the link to the issue.\r\n\r\nI understand the contract but this has no impact on it.. same like the writable's update or set methods. It's just about extending the API of the readable, writable and derived stores.",
          "createdAt": "2021-04-21T13:27:55Z",
          "author": { "login": "jindrahm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjM2NTkzOTg=",
    "body": "**Describe the bug**\r\nThere seems to be an issue with the random number generator where the fetch is made upon. Returns `400` in the console.\r\n\r\nhttps://svelte.dev/tutorial/await-blocks\r\n\r\n**Logs**\r\n![image](https://user-images.githubusercontent.com/30809170/115530130-7dbd0880-a261-11eb-9d70-0b626478a356.png)\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\nChrome-89\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nW10\r\n",
    "closedAt": "2021-04-21T09:42:30Z",
    "createdAt": "2021-04-21T09:24:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzkyODY2OA==",
          "body": "You have to click the \"show me\" button in the tutorial or complete the code required for the tutorial to work. That's why it's a tutorial :)",
          "createdAt": "2021-04-21T09:42:30Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzk3MDAyOA==",
          "body": "a ha :) I was just about to submit another `\"issue\"`.",
          "createdAt": "2021-04-21T10:54:47Z",
          "author": { "login": "basaran", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjI5MDgxODk=",
    "body": "I recently ran into this issue where I want to conditionally check if there's a default slot applied to the component. This currently can't be done without working around the current implementation.\r\n\r\nIt's a bit hard to explain but here's a REPL for clarity: https://svelte.dev/repl/6d51332a90e54c658647e7c1aaff9359?version=3.37.0\r\n\r\nOn the second instance of `Item` I expect it to use the fallback value `This should show up!`.\r\n\r\n**Describe alternatives you've considered**\r\nOne workaround is to do the conditional outside of the slot, like so:\r\n```svelte\r\n{#if showContent}\r\n    <Item />\r\n{/if}\r\n```\r\n\r\nThis works but gets pretty wild once you start adding props to the equation.\r\n\r\n**How important is this feature to you?**\r\nIt's a nice-to-have since it can be worked around. It's not something I run into every day.",
    "closedAt": null,
    "createdAt": "2021-04-20T14:57:09Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzQ2MTg0OQ==",
          "body": "Personally I like the way it is now, and implementing that will be a big breaking change.",
          "createdAt": "2021-04-20T17:20:46Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzUwMDYzMQ==",
          "body": "> Personally I like the way it is now, and implementing that will be a big breaking change.\r\n\r\nWhy?",
          "createdAt": "2021-04-20T18:19:29Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU5NjA1OA==",
          "body": "For example, using the VirtualList component in the svelte organization https://github.com/sveltejs/svelte-virtual-list/blob/master/VirtualList.svelte#L166\r\n\r\nVirtualList (largely simplified) : \r\n\r\n```svelte\r\n{#each getVirtualItems() as item}\r\n  <slot {item}>Template not set</slot>\r\n{/each}\r\n```\r\n\r\n**MyComponent**\r\n\r\n```svelte\r\n<VirtualList let:item>\r\n  {#if isVisible(item)}\r\n    {item.name}\r\n  {/if}\r\n</VirtualList>\r\n```\r\n\r\nI don't want the default slot to be rendered here.\r\n\r\nIt's just an example of code which will break with this issue.\r\n",
          "createdAt": "2021-04-20T20:57:59Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjI0NzU5NDQ=",
    "body": "i'm trying do a fetch request in my component but it just keeps sending it to localhost and not to the URL im specifying:\r\n\r\n    function sendDataToApi() {\r\n        fetch(\"http://database.test/api/create\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                first_name: firstName,\r\n                last_name: lastName,\r\n                email: email,\r\n                phone: phone,\r\n                website: env.VITE_WEBSITE_DOMAIN,\r\n            }),\r\n        }).then((response) => {\r\n            console.log(response);\r\n        });\r\n    }\r\n\r\nConsole says the response is sending to the url `localhost:3000`:\r\n\r\n    Response {type: \"cors\", url: \"http://localhost:3000/\", redirected: true, status: 200, ok: true, …}\r\n\r\nthe `database.test` domain is pointing to nginx on my localhost machine\r\n\r\ni'm not sure if this is a svelte related bug...",
    "closedAt": "2021-04-20T10:41:28Z",
    "createdAt": "2021-04-20T06:48:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzE3MjUyNQ==",
          "body": "Svelte itself doesn't do anything with fetch. If this is a SvelteKit issue, please open an issue in that repo, and please use the provided issue template.",
          "createdAt": "2021-04-20T10:41:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjI0MDU4MTM=",
    "body": "**Describe the bug**\r\n```\r\n// MyComponent.svelte\r\n<div>{$$props.class}</div>\r\n\r\n// elsewhere\r\n<script lang=\"ts\">\r\nimport MyComponent from  \"$lib/MyComponent.svelte\"\r\n</script>\r\n\r\n<MyComponent fake=\"fake\" />\r\n```\r\n\r\n**To Reproduce**\r\nTry the above with and without `$$props.class`. With: no typescript error. Without: `Type '{ fake: string; }' is not assignable to type 'IntrinsicAttributes'.`\r\n\r\n**Expected behavior**\r\nTypescript validation should apply when `$$props.class` is accessed. Alternately, is there a more idiomatic way to pass a class prop to a component? `export let class: string | undefined` doesn't work because `class` is a reserved word.\r\n\r\n**Information about your Svelte project:**\r\nEverything at latest pubished versions, kit @ .84 (but I don't think this is a kit issue).\r\n\r\n**Severity**\r\nLow to medium. I'd like to trust the type checker, but nothing is broken.\r\n\r\n**Additional context**\r\nRunning latest @sveltejs/kit beta. Please let me know if I should transfer this bug to that repo.\r\n",
    "closedAt": "2021-04-20T07:08:05Z",
    "createdAt": "2021-04-20T04:44:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMjk3MjU1OQ==",
          "body": "This is by design. Unless there's a way to explicitly specify the type, We can't infer the type from `$$props` usage. \r\nCheck out the [API doc](https://svelte.dev/docs#1_export_creates_a_component_prop) on how to use reserved words as prop name.",
          "createdAt": "2021-04-20T04:55:07Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzAzMTIyNg==",
          "body": "As @jasonlyu123 points out, `$$props` is somewhat of an catch-all escape hatch, which means you are off on your own (typing-wise).\r\n\r\nIn your case do\r\n```\r\n  let className = \"\";\r\n  export { className as class };\r\n```",
          "createdAt": "2021-04-20T07:08:05Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjIzMDUwNTI=",
    "body": "**Describe the bug**\r\n\r\nI am attempting to access context from within a component instantiated through the runtime API. Starting in svelte 3.25.0, the context from the calling component does not proxy through to the child.\r\n\r\n**To Reproduce**\r\n\r\nIn the following REPL, the value of my test variable should be pulled from the context of App.svelte, but instead it is undefined. \r\n\r\nhttps://svelte.dev/repl/a064dfd8096c417fa2e2adf857205fd3?version=3.25.0\r\n\r\n**Expected behavior**\r\n\r\nHere is the working version in 3.24.1:\r\n\r\nhttps://svelte.dev/repl/a064dfd8096c417fa2e2adf857205fd3?version=3.24.1\r\n\r\n**Stacktraces**\r\nNo errors are thrown for this issue.\r\n\r\n**Severity**\r\nThis seems like it could be a fairly large issue for certain users of Svelte. For me, there are workarounds, but I will be quite sad if I can't use a context object.\r\n\r\n**Additional context**\r\n\r\nI don't even have any context in the first place :cry: \r\n",
    "closedAt": "2021-04-20T10:44:29Z",
    "createdAt": "2021-04-20T02:10:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzAxODQzMQ==",
          "body": "I believe this was actually a behavior fixed in Svelte 3.25, which was that `getContext` could be called from `onMount` when that shouldn't have been possible. \r\n\r\nSo context needs to be passed in manually to components created with the runtime API, which was actually impossible until a very recent version. Now you can do it like this: https://svelte.dev/repl/f52d4c6dc42a46ef95bcbcb6b4d6a26c?version=3.37.0. \r\n\r\nThis is still less convenient since you have to manually manage the context, but AFAIK it's the officially sanctioned way.",
          "createdAt": "2021-04-20T06:45:02Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzAyOTI4OQ==",
          "body": "@Conduitry please correct me if I'm wrong but I think this is the desired behavior. Else you wouldn't be able to instantiate multiple Svelte apps on one site without the fear of them taking over each other's context.",
          "createdAt": "2021-04-20T07:04:52Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzE3NDExNQ==",
          "body": "Yeah this is the expected behavior. Things called asynchronously in onMount inheriting context was a bug. However, you can now pass context explicitly into the constructor.",
          "createdAt": "2021-04-20T10:44:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjEwNzQ4MTU=",
    "body": "**Describe the bug**\r\nFor some reason, svelte inserts invalidation of options collection to the select element's change handler.\r\nThis doesn't pose problems unless the collection is exported - then svelte triggers reactive handlers on it each time the selection changes.\r\n\r\n**Logs**\r\nNone\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/04c1febd130c48068f8fab53725aa68d?version=3.37.0\r\n\r\nIf `versions` is exported, the select stops working. If `export` is removed - everything works properly.\r\n\r\n**Expected behavior**\r\n`export` does not change the behaviour of the component.\r\nAlso, I don't see a reason why `verions` should be invalidated in the change handler (visible in JS Output)\r\n\r\nMoreover, the compiler invalidates it twice, which is even more unexpected:\r\n```\r\n\tfunction select_change_handler() {\r\n\t\tversion = select_value(this);\r\n\t\t($$invalidate(1, version), $$invalidate(0, versions));\r\n\t\t$$invalidate(0, versions);\r\n\t}\r\n```\r\n\r\n**Stacktraces**\r\nNone\r\n\r\n**Information about your Svelte project:**\r\nBrowsers:\r\n    Chrome: 89.0.4389.114\r\n    Firefox: 87.0\r\n  npmPackages:\r\n    svelte: ^3.37.0 => 3.37.0 \r\n\r\n**Severity**\r\nUnexpected behaviour. Have to debug compiled code and look for workarounds. This results in extra noise in the code.\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-04-19T08:59:03Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjA4NjAzNTE=",
    "body": "Let's say I have a global property I want to be able to use in any component called `websiteName`.\r\n\r\nWhere do I put this global property and how do I use it in components?",
    "closedAt": "2021-04-19T03:41:30Z",
    "createdAt": "2021-04-19T03:25:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMjE0NDMyNA==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-04-19T03:41:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjA1NzU2Mzg=",
    "body": "image is lossed when build in production node\r\ni found that image in inline style is unresolved\r\n\r\n\"svelte\": \"^3.37.0\"\r\n\"svelte-loader\": \"^3.1.1\",\r\n\"webpack\": \"^5.33.2\",\r\n\r\nsome important webpack config\r\n```\r\n   {\r\n        test: /\\.svelte$/,\r\n        use: [\r\n            {\r\n                loader: 'svelte-loader',\r\n                options: {\r\n                    emitCss: true,\r\n                }\r\n            },  \r\n        ]\r\n    },\r\n    {\r\n        test: /\\.css$/,\r\n        use: [\r\n            { loader: MiniCssExtractPlugin.loader },\r\n            {\r\n                loader: \"css-loader\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        test: /\\.(png|jpg|gif|svg)$/i,\r\n        type: 'asset/resource'\r\n    },\r\n```\r\nFile.svelte as following\r\n```\r\n<script>\r\n    export let name;\r\n</script>\r\n\r\n<span style=\"background-image: url(../assets/img/default_file.svg)\">{name}</span\r\n>\r\n\r\n<style>\r\n    span {\r\n        padding: 0 0 0 1.5em;\r\n        background: 0 0.1em no-repeat;\r\n        background-size: 1em 1em;\r\n    }\r\n</style>\r\n```\r\n\r\nafter compiled\r\n```\r\nfunction create_fragment(ctx) {\r\n\tlet span;\r\n\tlet t;\r\n\r\n\treturn {\r\n\t\tc() {\r\n\t\t\tspan = internal_element(\"span\");\r\n\t\t\tt = internal_text(/*name*/ ctx[0]);\r\n\t\t\tset_style(span, \"background-image\", \"url(../assets/img/default_file.svg)\");\r\n\t\t\tattr(span, \"class\", \"svelte-1j2avkd\");\r\n\t\t},\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert(target, span, anchor);\r\n\t\t\tappend(span, t);\r\n\t\t},\r\n\t\tp(ctx, [dirty]) {\r\n\t\t\tif (dirty & /*name*/ 1) set_data(t, /*name*/ ctx[0]);\r\n\t\t},\r\n\t\ti: noop,\r\n\t\to: noop,\r\n\t\td(detaching) {\r\n\t\t\tif (detaching) detach(span);\r\n\t\t}\r\n\t};\r\n}\r\n```\r\ndefault_file.svg is here\r\n![image](https://user-images.githubusercontent.com/31173307/115134884-afa65300-a046-11eb-850f-0cf2dd450c21.png)\r\n\r\nbut cannot found it in dist directory\r\n![image](https://user-images.githubusercontent.com/31173307/115134914-0318a100-a047-11eb-9374-9c781e06fbd6.png)\r\n\r\n",
    "closedAt": "2021-04-18T09:10:24Z",
    "createdAt": "2021-04-18T05:07:27Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTk1OTM2NQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-04-18T09:10:17Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjA1NTcwNzk=",
    "body": "Hi guys, I'm bit newbie with svelte, I'm trying to run a super basic example, I started a new project\r\n\r\nnpx degit sveltejs/template svelte-typescript-app\r\ncd svelte-typescript-app\r\nnode scripts/setupTypeScript.js\r\n\r\nthen in the App.svelte I did this\r\n\r\n```ts\r\n\r\n<script lang=\"ts\">\r\n\texport let name: string;\r\n\timport {TodoType} from \"./types/todo.type\";\r\n\r\n\tlet todos: TodoType[] = [{id:1,title:\"hello\",done:false}];\r\n\r\n\r\n\r\n</script>\r\n\r\n\r\n```\r\n\r\nfollowing this tutorial\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript\r\n\r\nI created a file under\r\n/types/todo.type.ts\r\n\r\n```ts\r\n\r\nexport type TodoType = {\r\n    id: number\r\n    title : string\r\n    done : boolean\r\n}\r\n\r\n\r\n```\r\n\r\n\r\nthis is the error that appears when compiles\r\n\r\n\r\n```[!] Error: 'TodoType' is not exported by src/types/todo.type.ts, imported by src/App.svelte\r\nhttps://rollupjs.org/guide/en/#error-name-is-not-exported-by-module\r\nsrc/App.svelte (3:9)\r\n1: <script lang=\"ts\">\r\n2:   export let name: string;\r\n3:   import {TodoType} from \"./types/todo.type\";\r\n             ^\r\n4: \r\n5:   /*import { createClient } from \"@supabase/supabase-js\";\r\nError: 'TodoType' is not exported by src/types/todo.type.ts, imported by src/App.svelte\r\n    at error (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:5305:30)\r\n    at Module.error (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:9750:16)\r\n    at Module.traceVariable (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:10138:29)\r\n    at ModuleScope.findVariable (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:8899:39)\r\n    at FunctionScope.findVariable (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:2647:38)\r\n    at ChildScope.findVariable (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:2647:38)\r\n    at ReturnValueScope.findVariable (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:2647:38)\r\n    at Identifier.bind (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:4035:40)\r\n    at Property.bind (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:2734:23)\r\n    at Property.bind (/Users/Admin/Downloads/proj/js/svelte/sveltesupa/sveltesupa2/node_modules/rollup/dist/shared/rollup.js:8503:15)\r\n\r\n\r\n```\r\n\r\nI've tried several ways to fix this: change this to some interface, wrap under {}, use default export, etc...but this doesn't compile in any way...\r\n\r\nhope you can help me...thanks...",
    "closedAt": "2021-04-18T02:38:43Z",
    "createdAt": "2021-04-18T02:27:04Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTkyMDQ1Nw==",
          "body": "See the note in https://svelte.dev/faq#what-about-typescript-support",
          "createdAt": "2021-04-18T02:38:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjAzNjI2MzE=",
    "body": "**Describe the bug**\r\nI'm using @html inside a svg tag, when the svg tag has other children OR something like a {#if false}{/if} the path does not render.\r\n\r\nInspect > Edit as html > Change anything like add a space > Appears\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/4bbca1bbcbb740e5b0ed48fa003474fc?version=3.37.0\r\n\r\n**Expected behavior**\r\nall 4 cases show the svg path\r\n\r\n\r\n**Severity**\r\nconfusing rendering error, work around without @html usage\r\n",
    "closedAt": null,
    "createdAt": "2021-04-17T08:55:56Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTc5NjY2OA==",
          "body": "Same issue as https://github.com/sveltejs/svelte/issues/5764\r\nThe workaround works too : wrap the `{@html }`with a `<g>`",
          "createdAt": "2021-04-17T09:36:27Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTc5ODg5Ng==",
          "body": "I saw that Attribute style thing when I was investigating the difference, thanks for pointing out a solution.\r\n\r\nthis does not seem to be related to the lower case issue, as I pointed out inspect > edit as html > add space > works\r\n\r\nFor now wrapping in <g> seems to work",
          "createdAt": "2021-04-17T09:57:14Z",
          "author": { "login": "iceisfun", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NjAxMTUzMTE=",
    "body": "**Describe the bug**\r\nUnterminated string constant if a string is added with a closing script tag inside\r\n\r\n**Logs**\r\n```\r\nParseError: Unterminated string constant\r\n    at error (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:16746:19)\r\n    at Parser$1.error (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:16822:9)\r\n    at Parser$1.acorn_error (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:16816:14)       \r\n    at Object.read_script [as read] (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:7495:16)\r\n    at tag (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:15881:33)\r\n    at new Parser$1 (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:16781:21)\r\n    at parse$3 (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:16913:20)\r\n    at compile (https://cdn.jsdelivr.net/npm/svelte@3.37.0/compiler.mjs:29943:17)\r\n    at compile (file:///C:/Users/Intellisys/Desktop/Snel/compiler/compiler.ts:33:10)\r\n    at Object.transform (file:///C:/Users/Intellisys/Desktop/Snel/src/shared/bundler.js:131:24) \r\n```\r\n\r\n**To Reproduce**\r\noccurs with the creation of a chain with a closing script tag, in the same way if the line is commented the error occurs\r\n\r\n```html\r\n<script>\r\n  export let name;\r\n\r\n\r\n  const test = \"</script>\"\r\n</script>\r\n\r\n<main>\r\n  <form action=\"/form\" method=\"POST\">\r\n    <label for=\"name\">name</label>\r\n    <input type=\"text\" id=\"name\" name=\"name\">\r\n    <button type=\"submit\">submit</button>\r\n  </form>\r\n</main>\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/47539192/115076391-7fd24080-9eca-11eb-8887-92241f97370a.png)\r\n\r\n\r\n",
    "closedAt": "2021-04-16T19:47:10Z",
    "createdAt": "2021-04-16T19:44:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTUyMzY1Mg==",
          "body": "This is a duplicate of https://github.com/sveltejs/svelte/issues/3039 / https://github.com/sveltejs/svelte/issues/3840 / https://github.com/sveltejs/svelte/issues/4406 / https://github.com/sveltejs/svelte/issues/4996 / https://github.com/sveltejs/svelte/issues/5024 / https://github.com/sveltejs/svelte/issues/5237 / https://github.com/sveltejs/rollup-plugin-svelte/issues/133 / https://github.com/sveltejs/svelte/issues/5810 / https://github.com/sveltejs/rollup-plugin-svelte/issues/182 / maybe others, and is not a bug. This is how parsing inline script tags works in HTML.",
          "createdAt": "2021-04-16T19:47:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTkxNzczMzc=",
    "body": "**Describe the bug**\r\nWhen using the Svelte template and component template a getContext returns undefined for an App-level component that is slotted inside a component from an external component.\r\n\r\nThis may be a duplicate of: #3422 but that issue is from 2019.\r\n\r\nIt is possible that I'm including the component package incorrectly in the app.  Please let me know if that is the case and what the right way to include a built component is when the component is at a local relative path (and not on NPM).\r\n\r\n**Logs**\r\nPlease inspect the console.log output from my example that shows the loading and mounting order of the components and app.\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\nI created a repo with the code here: https://github.com/GeoffCox/svelte-context-issues\r\nIt includes a full readme of exactly how I built the app.\r\n\r\nI hosted the built code here: https://geoffcox.github.io/svelte-context-issue-demo/index.html\r\n\r\n**Expected behavior**\r\nsetContext and getContext work across package boundaries.\r\n\r\n**Stacktraces**\r\nN.A\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz\r\n    Memory: 23.54 GB / 31.94 GB\r\n  Binaries:\r\n    Node: 14.16.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.12.3 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 6.14.12 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 89.0.4389.128\r\n    Edge: Spartan (44.19041.906.0), Chromium (89.0.774.76)\r\n    Internet Explorer: 11.0.19041.1\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.45.2\r\n    svelte: ^3.0.0 => 3.37.0\r\n\r\n**Severity**\r\nThis blocks me from producing a component in Svelte that I want to publish on NPM.  I have to be able to pass information to the component that is placed inside a slot from the caller.  Without that ability, I would have to go back to a render props approach which would defeat the entire advantage of slots.\r\n\r\n**Additional context**\r\nUnrelated to this bug: I would eventually like to produce a typescript version of the component, but the component template does not have a typescript script like the app template does. \r\n",
    "closedAt": "2021-04-21T16:54:04Z",
    "createdAt": "2021-04-15T19:16:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzk5OTMwMA==",
          "body": "@GeoffCox \r\n1. npm i fullpath_to_mycomponent in myapp folder.\r\n2. In myapp/src/App.svelte replace ```import ExternalComponent from \"../../mycomponent/dist/index.js\";``` to ```import ExternalComponent from \"SvelteComponent\";```",
          "createdAt": "2021-04-21T11:49:51Z",
          "author": { "login": "asv7c2", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDIxMTU1Ng==",
          "body": "@asv1 Thank you! I had no idea that local packages could be imported with file: protocol; something I probably should have known <blush>. When I imported directly from the dist folder do you know why most of the code would work but not the context API?",
          "createdAt": "2021-04-21T16:53:56Z",
          "author": { "login": "GeoffCox", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDIxODc1OQ==",
          "body": "@GeoffCox\r\nBecause there two svelte packages imported: one in mycomponent and one in myapp. That's why context is not working. Two different svelte packages are loaded.",
          "createdAt": "2021-04-21T17:05:33Z",
          "author": { "login": "asv7c2", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTkxNDc5ODc=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\nIf we have already created DOM elements outside svelte and we want to add them to the component hierarchy. we can use `bind:this` on the parent and then `appendChild` but the problem is that we cannot use this method with `#if` and `#each` statements\r\n\r\nWe could introduce statement like `{@append element}` with support to reactive statements. something like this:\r\n```svelte\r\n<script>\r\n    let show;\r\n    let elm;\r\n\t\r\n\r\n    const h1 = document.createElement(\"h1\")\r\n    h1.textContent = \"hello world\"\r\n</script>\r\n\r\n<input type=\"checkbox\" bind:checked={show} />\r\n{#if show}\r\n    <div>\r\n        <!-- automatically append and remove h1 -->\r\n        {@append h1}\r\n    </div>\r\n{/if}\r\n```\r\n\r\nWe could now use something like this to achieve similar effect. but it has much less flexibility to work with\r\n```svelte\r\n$:{ \r\n    if (parent) {\r\n        const h1 = document.createElement(\"h1\")\r\n        h1.textContent = \"hello world\"\r\n        parent.appendChild(h1)\r\n    }\r\n}\r\n```\r\n\r\n\r\nMore complex example. If we have a component that support passing svelte components and we want also to support native DOM elements:\r\n\r\n```svelte\r\n<script>\r\n\timport {SvelteComponent} from \"svelte\"\r\n\texport let components = [];\r\n</script>\r\n\r\n{#each components as component}\r\n\t{#if component instanceof SvelteComponent}\r\n\t\t<svelte:component this={component} />\r\n\t{:else}\r\n\t\t{@append component}\r\n\t{/if}\r\n{/each}\r\n```",
    "closedAt": "2021-04-18T16:21:36Z",
    "createdAt": "2021-04-15T18:33:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMDg4OTE4NA==",
          "body": "I have quickly made this fork as an experiment to this idea: https://github.com/mhmd-22/svelte\r\n\r\nHere is an example of the implementation(follow steps to get it to work):\r\nhttps://svelte.dev/repl/7558917acb6c40aaba4131bbcc78cb04?version=3.37.0",
          "createdAt": "2021-04-16T04:00:32Z",
          "author": { "login": "mhmd-22", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTgzMDU1OTE=",
    "body": "**Describe the bug**\r\nOrder of bind:value and on:input in component property list affects `value` in input event listener.\r\n\r\nIf this isn't a bug, I think the behavior should be clearly documented in the tutorial about bindings. I spent a long time troubleshooting before considering that the ordering of the properties might be the cause.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/ee05f3fd37ec4f9baac847cd0390d222?version=3.37.0\r\n\r\n**Expected behavior**\r\nOrdering of bind:value and on:input would not change the behavior of the input event handler\r\n",
    "closedAt": null,
    "createdAt": "2021-04-14T22:15:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTg4NTI2Mw==",
          "body": "This is the intended behavior - #2446 - Agreed that it could be better documented.",
          "createdAt": "2021-04-14T22:20:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTY2NTg2NDQ=",
    "body": "Hi, how do i move my scss to a new file in svelte 3 ? I need to run stylelint which i am not able to do inside .svelte file.\r\n\r\n<script>\r\n  export let brandName = 'Stackoverflow';\r\n</script>\r\n<svelte:options tag=\"component-name\"></svelte:options>\r\n\r\n<style lang=\"scss\">\r\n  h1{\r\n    color: red;\r\n    span {\r\n      color: green;\r\n    }\r\n  }\r\n</style>",
    "closedAt": "2021-04-13T07:24:09Z",
    "createdAt": "2021-04-13T07:18:40Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODUwNzMyNw==",
          "body": "GitHub issues are reserved for bug reports and feature requests. Please ask usage questions on StackOverflow or the Discord server.",
          "createdAt": "2021-04-13T07:24:08Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTYzODAzMTI=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSometimes I need a reference to an element only so I can use it within its own children. I could `bind:this={element}`, but then I have to declare a variable in the component, which is now available all over the place, where I don't really need it. \r\n\r\n```svelte\r\n<script>\r\n  let element;\r\n</script>\r\n<div bind:this={element} id='hello'>\r\n  I would like to access the element, maybe like {element.id}\r\n</div>\r\n```\r\n\r\nThis is more relevant and more difficult when within an `{#each}` block, as now I need an array and to use the index to store all these element references. Also... it didn't seem to just work in the each, it needs an extra `{#if}`\r\n\r\n```svelte\r\n<script>\r\n  let elements = [];\r\n  const data = [1,2,3];\r\n</script>\r\n\r\n{#each data as v, i}\r\n  <div bind:this={elements[i]} id='div{i}'>\r\n    {#if elements[i]}\r\n      {v} is in div {elements[i].id}\r\n    {/if}\r\n  </div>\r\n{/each}\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would like to be able to something like `let:this={element}` to create a scoped reference to a parent container\r\n\r\n**Describe alternatives you've considered**\r\nWell there's the array thing I mentioned above... \r\n\r\nCould also make a component specifically for this each block so that each `element` is scoped to that one component, but that's kind of a lot of boilerplate for this kind of thing.\r\n\r\nOr maybe a component specifically for providing reference to the element like `<Div let:element>`\r\n\r\n```svelte\r\n<script>\r\n  let element;\r\n</script>\r\n\r\n<div bind:this={element}>\r\n  <slot {element} />\r\n</div>\r\n```\r\n\r\n**How important is this feature to you?**\r\nIt certainly would be nice, and clean up some code, but it's definitely something I can work around...\r\n",
    "closedAt": null,
    "createdAt": "2021-04-12T21:36:58Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTE4NjUwOA==",
          "body": "Label: proposal?",
          "createdAt": "2021-06-05T05:25:04Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTYwODU1NDU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nSvelte is really helpful for giving hints such as a11y (eg: `A11y: '' is not a valid href attribute`). \r\nMy point here would be to do kind of the same thing with basic security rules. \r\n\r\nFor instance, one of a security rule would be to not make a `target=_blank` on a link without the attributes `rel=\"noreferrer noopener\"`. \r\n\r\n![image](https://user-images.githubusercontent.com/23191482/114418925-42f90780-9bb3-11eb-853a-33eafd810394.png)\r\n",
    "closedAt": null,
    "createdAt": "2021-04-12T15:20:15Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTYwNzgyODU=",
    "body": "**Describe the bug**\r\n\r\nThe `checked` property of an `<input type='checkbox' {checked} />` is not updated when the bound value is changed inside an event handler which calls `event.preventDefault()` and **when `event.target` is the input element itself**.\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/4d6a70459e1849a994220d46175ee44e?version=3.37.0\r\n\r\n__Please note__ that this is consistent with how browsers work, but that it becomes unexpected in the context of a components framework handling data binding. See https://svelte.dev/repl/8799a07470ff4146bcdb29f2faae8f0b?version=3.37.0\r\n\r\n**Expected behavior**\r\n\r\nThe input's `checked` property should reflect the value it is bound to, no matter what.\r\n\r\n**Severity**\r\n\r\nI can just make sure I don't call `event.preventDefault()` in such kind of event, but that means it goes against generic patterns (I actually had a wrapper around my `on:click` callbacks calling `stopPropagation` and `preventDefault` automatically, and when I changed my UI I've replaced my previous element by a checkbox, and that's when I saw the issue).\r\n\r\nIt is not a high severity.\r\n\r\n**Additional context**\r\n\r\nIf I want to keep calling `event.preventDefault` (which in a specific case of a checkbox would be silly then) the only workaround I found is to delay the assignment of `input.checked` to the next task: https://svelte.dev/repl/1044595f46f34d4a8c2ff38ba77f8ce9?version=3.37.0\r\n\r\nSo `await tick()` doesn't work since it's at the micro task level.\r\n\r\nBtw, this shows a workaround at DOM level, to simulate what could be done in Svelte internals, otherwise on the user end though I would use the `setTimeout` around the assignment: https://svelte.dev/repl/375dfb4f63944c9d8d82eca7f60adfa6?version=3.37.0\r\n",
    "closedAt": null,
    "createdAt": "2021-04-12T15:12:17Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTU4ODc3NTU=",
    "body": "### Is your feature request related to a problem?\r\n\r\nAt this moment, this is the way you can write global styles inside a component: [Example](https://svelte.dev/repl/6c518888c06e4cbfaa6e1151eed0353e?version=3.8.1)\r\n\r\n#### Why this isn't a good solution?\r\n\r\n- One of the biggest positive points of Svelte is \"Write less, do more\", so why the heck make it weirdly complicated, less readable, hard to use, more code, and...\r\n- What if I had 100 CSS selectors that need to be global just inside a specific route (so I can't create a separate file and link it in the `index.html` page)?\r\n- What if I want to change the style of an element based on another component? For example: if component \"a\" was present, apply the global styles (the styles that are written inside the component \"a\") to the component \"b\" classes (when they both are used inside the same component).\r\n- What if I want to change the styles of the body tag `document.body` with help of a component?.\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nComponents styles need to be scoped by default, right? So we can just add `global` attribute to the style tag:\r\n```HTML\r\n<style global></style>\r\n```\r\n\r\nAlso, it most be possible to use 2 style tags:\r\n```HTML\r\n// Scoped\r\n<style></style>\r\n// Global\r\n<style global></style>\r\n```\r\nI mean we need to be able to use 2 style tags, one scoped style for the component and one global style to apply anywhere we use the component.\r\n\r\nRight now it's not possible to use 2 style tags. If anytime this feature was available, it needs to give an error if both style tags were the same and not give an error if one of them has the `global` attribute.\r\n```HTML\r\n<!-- currect-->\r\n<style></style>\r\n<style global></style>\r\n\r\n<!-- error -->\r\n<style></style>\r\n<style></style>\r\n\r\n<!-- error -->\r\n<style></style>\r\n<style></style>\r\n<style></style>\r\n```\r\n\r\n\r\n### How important is this feature to you?\r\n\r\nVery important. It makes the Svelte be one step back from being able to fly to the moon 🌔.\r\n\r\n\r\n### Additional context\r\n\r\nIf you want this feature to become real, please like and share🌼 You don't need to write a commit just to say you agree, because then the issue page becomes less readable and we don't want this to happen. But I think if you have example use cases, it can be helpful to show the maintainers how much this feature is important.",
    "closedAt": null,
    "createdAt": "2021-04-12T11:44:16Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzc0MjQxMA==",
          "body": "`svelte-preprocess` [has already done this exactly](https://github.com/sveltejs/svelte-preprocess#global-style), or is there something novel about this approach that requires it to be part of svelte core?",
          "createdAt": "2021-04-12T11:46:03Z",
          "author": { "login": "GrygrFlzr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzc4Mjc2MA==",
          "body": "> `svelte-preprocess` [has already done this exactly](https://github.com/sveltejs/svelte-preprocess#global-style), or is there something novel about this approach that requires it to be part of svelte core?\r\n\r\nIt's the same feature. Also, I want to be able to write 2 style tags inside the same component (one for global and one for scoped styles).\r\nThe concept of [only expose parts of the stylesheet](https://github.com/sveltejs/svelte-preprocess#global-rule) is complicated (because of the same stuff that I explained above). So being able to write two style tags is needed.\r\nRight now it isn't possible to write two style tags, so if this feature gets added, it needs to be checked that is a component contains two styles of the same scope or not.",
          "createdAt": "2021-04-12T12:48:58Z",
          "author": { "login": "babakfp", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTI4NjExMQ==",
          "body": "+1 for this. It would be a lot of help for component libraries as they do not have to scope their styles so that users can modify the component CSS easily. It would also improve performance. Multiple style tags would also be a plus.",
          "createdAt": "2021-04-14T07:11:15Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzQwMjk3NA==",
          "body": "+1 for this. I would also need this feature for global theming of my website.",
          "createdAt": "2021-05-06T10:05:01Z",
          "author": { "login": "martinjeromelouis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzU3ODExMQ==",
          "body": "A workaround:\r\nPut your style section inside a <svelte:head> tag. All styles defined like this are global.\r\n```\r\n<svelte:head>\r\n  <style>\r\n    .toto {\r\n      color: red;\r\n    }\r\n  </style>\r\n</svelte:head>\r\n```\r\n",
          "createdAt": "2021-05-06T14:40:41Z",
          "author": { "login": "martinjeromelouis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzcxMTkzNw==",
          "body": "> A workaround:\r\n> Put your style section inside a svelte:head tag. All styles defined like this are global.\r\n> \r\n> ```\r\n> <svelte:head>\r\n>   <style>\r\n>     .toto {\r\n>       color: red;\r\n>     }\r\n>   </style>\r\n> </svelte:head>\r\n> ```\r\n\r\nHi\r\nCool, but it isn't best practice to write the styles inside the head, right? There is an ordering rule👮‍♂️:\r\n```HTML\r\n<script></script>\r\n<template></template>\r\n<style></style>\r\n```\r\nSo I think it's good to just have 2 style tags at the bottom of the template. So we don't break any rules and keep the main focus on the script and the template👼.",
          "createdAt": "2021-05-06T17:34:02Z",
          "author": { "login": "babakfp", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzg2MDcwOA==",
          "body": "I fully agree with your request. My proposal is a workaround to keep working while your request is being developed by the Svelte Team. As soon as the dev is ready, all I have to do is remove the `<svelte:head>` tag and insert 'global' in my style tag. Of course, if the Svelte Team were to not develop the requested improvment, I would have to find a better solution.\r\n\r\nBy the way, it's worth saying that, what you request, exists in VUE JS where you can add the scoped keyword to your style tag to make all the content scoped : see https://vue-loader.vuejs.org/guide/scoped-css.html\r\n (conversely if you don't add this key word, all the content of the style tag is global).\r\n\r\nIt's also worth saying that the :global() modifier that can be used on a per-selector basis is worth keeping as it allows for fine-tuning necessary in some cases.",
          "createdAt": "2021-05-06T20:57:19Z",
          "author": { "login": "martinjeromelouis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzkxOTE1Nw==",
          "body": "> I fully agree with your request. My proposal is a workaround to keep working while your request is being developed by the Svelte Team. As soon as the dev is ready, all I have to do is remove the `<svelte:head>` tag and insert 'global' in my style tag. Of course, if the Svelte Team were to not develop the requested improvment, I would have to find a better solution.\r\n> \r\n> By the way, it's worth saying that, what you request, exists in VUE JS where you can add the scoped keyword to your style tag to make all the content scoped : see https://vue-loader.vuejs.org/guide/scoped-css.html\r\n> (conversely if you don't add this key word, all the content of the style tag is global).\r\n> \r\n> It's also worth saying that the :global() modifier that can be used on a per-selector basis is worth keeping as it allows for fine-tuning necessary in some cases.\r\n\r\n\r\nSorry, my bad🙏. I didn't see this👨‍🦯:\r\n\r\n> A workaround:\r\n\r\nI took that you were requesting the feature.\r\n\r\n\r\n> what you request, exists in VUE JS where you can add the scoped keyword to your style tag...\r\n\r\nYeah, Vue has the `scoped` attribute.\r\n\r\n\r\n> It's also worth saying that the :global() modifier that can be used on a per-selector basis is worth keeping as it allows for fine-tuning necessary in some cases.\r\n\r\nI do not really agree with this because of all of the negative things that I said in this issue and also:\r\n- I don't like to see projects or examples that use the old syntax.\r\n- I like appointed stuff because then you don't need to think, how to do x and y. It's stead forward, you do what you need to do, not think about which way is better or...\r\n- I don't like to see tutorials that first teach the old syntax and later say \"actually, you can do this instead, because blah blah blah\", and I'm like why the heck did you teach the other one!!. It's because there are going to be 1000 new projects that the old syntax going to be used...\r\n\r\nMy guesses are that they probably going to keep the `:global(p)` syntax forever or remove it in Svelte 4.0",
          "createdAt": "2021-05-06T22:37:05Z",
          "author": { "login": "babakfp", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTUyNDk1MjA=",
    "body": "**Describe the bug**\r\nI am using typescript with svelte and I cannot export a type from a module script element.\r\n\r\n**Expected behavior**\r\nIt should be possible to export a type from a module script\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Svelte version: 3.29.0\r\n\r\n**Severity**\r\nThe issue is actually not that of a big deal I could export the type from a regular typescript file.\r\n",
    "closedAt": "2021-04-11T08:34:22Z",
    "createdAt": "2021-04-11T08:24:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzI3MDg5Ng==",
          "body": "I assume that you are talking about importing a type exported from `<script context=\"module\">` inside a `.ts` file. If so, that's a duplicate of https://github.com/sveltejs/language-tools/issues/550 ",
          "createdAt": "2021-04-11T08:34:22Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTQ5NTg1NDM=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThe slide transition is great for providing realistic feeling user experiences, because it evokes a sense of space for UI components \"sliding\" out of the screen. However, at the time of me writing this issue, the slide transition only works vertically, with the item shrinking in the justify-direction of the parent element.\r\nWith other transitions allowing for parameters to customize transition specific behavior, I wish the slide transition would have an option to change the axis of shrinking.\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n```javascript\r\n<script>import slide from \"svelte/transition\";</script>\r\n<div transiton:slide={{delay: 500,  axis: \"x\"}}>I slide in from the right.<div>\r\n```\r\n\r\nWhile I am still unsure about the semantics of this proposal, it would definitely be nice to have the possibility to introduce this behavior. With the defaults for axis set to \"y\" the unmodified behavior would not change and existing code would not be broken.\r\nThis behavior could be introduced by modifying the slide function in [svelte/src/runtime/transition](https://github.com/sveltejs/svelte/blob/4e346b9970fa803039d762a02a81d97d15fdec67/src/runtime/transition/index.ts) starting from line 97.\r\n\r\n\r\nAnother possible solution is to allow setting the xAxis and yAxis independently, which would also allow for a diagonal animation in the case that both axes are set to true, further improving on the versatility of the slide transition function.\r\n\r\n**Describe alternatives you've considered**\r\nIt is possible to implement this horizontal sliding feature inside a svelte component just when needed, however, for this one has to first dive into the source code/ advanced documentation to find out how the transitions are implemented. \r\nI just started out web development, and it took me a few hours to get the transition to work as intended. This could be made way more trivial by just allowing for parameters to be passed to the function.\r\nThe alternative to incorporating this feature into svelte, is having the user write the following non-trivial code:\r\n\r\n```javascript\r\n<script>\r\nimport { cubicOut } from \"svelte/easing\";\r\nfunction horizontalSlide(\r\n        node,\r\n        { delay = 0, duration = 400, easing = cubicOut, inverse = 1 }\r\n    ) {\r\n        const style = getComputedStyle(node);\r\n        const opacity = +style.opacity;\r\n        const width = parseFloat(style.width);\r\n        const paddingLeft = parseFloat(style.paddingLeft);\r\n        const paddingRight = parseFloat(style.paddingRight);\r\n        const marginLeft = parseFloat(style.marginLeft);\r\n        const marginRight = parseFloat(style.marginRight);\r\n        const borderLeftWidth = parseFloat(style.borderLeftWidth);\r\n        const borderRightWidth = parseFloat(style.borderRightWidth);\r\n\r\n        return {\r\n            delay,\r\n            duration,\r\n            easing,\r\n            css: (t) =>\r\n                `overflow: hidden;` +\r\n                `opacity: ${Math.min(t * 20, 1) * opacity};` +\r\n                `width: ${t * width}px;` +\r\n                `padding-left: ${t * paddingLeft}px;` +\r\n                `padding-right: ${t * paddingRight}px;` +\r\n                `margin-left: ${t * marginLeft}px;` +\r\n                `margin-right: ${t * marginRight}px;` +\r\n                `border-left-width: ${t * borderLeftWidth}px;` +\r\n                `border-right-width: ${t * borderRightWidth}px;`,\r\n        };\r\n    }\r\n</script>\r\n\r\n<div transiton:horizontalSlide={{delay: 500,  xAxis: 1, yAxis: 0}}>I slide in from the right.<div>\r\n```\r\n\r\n**How important is this feature to you?**\r\nOne of the unique selling points of svelte.js is that it provides transitions out of the box. Increasing the versatility and therefore usability of transition functions therefore is directly related to the ease-of-use of svelte.js and therefore also it's popularity.\r\n\r\n**Additional context**\r\nIf you want to see the feature in action: I use the user-implementation of the horizontal slide transition in production on the contact form of my website [MortimerBaltus.com](https://mortimerbaltus.com)  (window at the top left).\r\nThe reversal of the sliding animation is achieved by dynamically changing the flex-direction of the parent container - from `flex-direction: row;` to `flex-direction: row-reverse;`.\r\nI also created [a repl](https://svelte.dev/repl/baf39c4e70b141409ae72bcfc503be62?version=3.37.0) for this effect implementing both the solution I used on my website and my proposed solution.",
    "closedAt": null,
    "createdAt": "2021-04-10T02:07:38Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTQ4MzA1OTI=",
    "body": "Hi Guys, \r\n\r\nCould you please give me a hint how to test a component with few named slots using jest?\r\n\r\nI managed to get rendered (inside the test) only first slot from the list, rest of them aren’t rendered at all.\r\n\r\nThanks",
    "closedAt": "2021-04-09T21:21:32Z",
    "createdAt": "2021-04-09T20:22:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjk3ODczMg==",
          "body": "There's not currently an official API for programmatically passing slots to a component constructor.\n\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-04-09T21:21:28Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTQ1ODA1Mzg=",
    "body": "In vanilla HTML result of this markup:\r\n\r\n```\r\n<div>\r\n  <div>\r\n  <p>text</p>\r\n</div>\r\n```\r\nor\r\n```\r\n<div>\r\n  <div />\r\n  <p>text</p>\r\n</div>\r\n```\r\nin DOM will look like this:\r\n```\r\n<div>\r\n  <div>\r\n    <p>text</p>\r\n  </div>\r\n</div>\r\n```\r\n\r\nThis is not an expected behavior and svelte [gives an error](https://svelte.dev/repl/b93d7253540d49519bbf351eb0ca1516?version=3.37.0) on unclosed div\r\n\r\nHowever, it gives no error if the div is self-closing and does not behave the same way as HTML\r\n\r\n```\r\n<div>\r\n  <div />\r\n  <p>text</p>\r\n</div>\r\n```\r\n|\r\nv\r\n```\r\n<div>\r\n  <div></div>\r\n  <p>text</p>\r\n</div>\r\n```\r\n\r\nIt would be better if svelte either behaved according to html or gave an error when the div is not closed",
    "closedAt": "2021-04-19T13:38:36Z",
    "createdAt": "2021-04-09T14:32:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjc2NzIxMA==",
          "body": "`<div />` is translated to `<div></div>` by Svelte. Giving an error on `<div>` (unclosed) is good in my opinion because this is almost always an oversight by the developer, and catching that early is good.",
          "createdAt": "2021-04-09T15:33:20Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjc3MjA3Ng==",
          "body": "> Giving an error on `<div>` (unclosed) is good in my opinion because this is almost always an oversight by the developer, and catching that early is good.\r\n\r\n> or gave an error when the div is not closed\r\n\r\nSorry. Translation issue. I meant adding an error message for self-closing div <div /> as done with unclosed div",
          "createdAt": "2021-04-09T15:41:36Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzc4Njc2Nw==",
          "body": "Hi\r\nYou are saying that Svelte needs to show an error for this kind of code?:\r\n```HTML\r\n<div />\r\n```\r\n\r\nIt isn't right. Because in the end, some tangs not going to have content or another tag inside it. So, then you don't need the closing tag. If you don't need something, then why have it, why write it, why take extra space...\r\n```HTML\r\n<button>\r\n  <span>Bark</span>\r\n  <I class=\"fas fa-dog\"> // No closing tag\r\n</button>\r\n```\r\n\r\nIt's the same for the components:\r\n```HTML\r\n<MyComponent></MyComponent>\r\n<MyComponent />\r\n```",
          "createdAt": "2021-04-12T12:54:45Z",
          "author": { "login": "babakfp", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTA1MzEyMw==",
          "body": ">`<I class=\"fas fa-dog\"> // No closing tag`\r\n> It's the same for the components:\r\n\r\nFirst of all, I'm talking exclusively about tags, not components.\r\n\r\nMain point of Svelte maintainers(as I know) is that \"Svelte should be close to HTML/Svelte is a superset of HTML/etc\"\r\n\r\nSo I think it is correct to match a language specification: which (not foreign and non-void in this case) tags are valid and which are not(and should be avoided).\r\n\r\nDOM when you open `index.html` file with this content in `<body>`:\r\n\r\n```html\r\n<div/>\r\n<span/>\r\n<a/>\r\n<p/>\r\n<i/>\r\ntext\r\n```\r\n\r\nWill be:\r\n\r\n```html\r\n<div>\r\n  <span>\r\n    <a>\r\n      <p>\r\n        <i>text</i>\r\n      </p>\r\n    </a>\r\n  </span>\r\n</div>\r\n```\r\nAnd this can certainly be called unexpected behavior(And w3c validator gives an error)\r\n\r\nIn svelte it will turn into:\r\n_Bottom dashes are indents_\r\n```svelte\r\n<div></div>_\r\n<span></span>_\r\n<a></a>_\r\n<p></p>_\r\n<i></i>\r\ntext\r\n```\r\nWhich is even more unexpected behavior.\r\n\r\nIf you remove the slash from these tags, compiler will throw an error, unlike self-closing variant (which is strange because, according to HTML specification, both variants will treat a self-closing/not closed tag simply as an opening one).",
          "createdAt": "2021-04-13T21:02:33Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTA1NjI2Mg==",
          "body": "Personally, I would like to have an error message from compiler when self-closing tags(with behavior like the one shown above) are used, but even a warning would be okay.",
          "createdAt": "2021-04-13T21:08:23Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMjQ2MjYzNQ==",
          "body": "I like Svelte way more, and because of Svelte's components, it's great that `<div />a` translate to` <div></div>a` instead `<div>a</div>` because it would mess with slots and I think, that browsers behaviour is more unexpected.\r\n\r\nIt's interesting how browsers \"HTML\" is messed up,... when You put <script /> or <style /> in head, and put something else after that, it has totally different behaviour than if it's in body,... or selfclosing tags are totally different behaviour like `<br/> `compared to `<div/>`.\r\n\r\n... I like Svelte's version of handling this \"incorrectly correct HTML\" more.\r\n\r\nAnd I think, this is not fixable, because if Svelte fix it, it will broke like 99% of existing Svelte projects on fixed version of Svelte.",
          "createdAt": "2021-04-19T13:22:35Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMjQ3MzcwNQ==",
          "body": "Closing this as this is nothing we want to change now. The current behavior is known by now to most Svelte users and changing it is both unexpected and would hurt DX.",
          "createdAt": "2021-04-19T13:38:36Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzIzOTEwMg==",
          "body": "@dummdidumm What you call _**`known by now to most Svelte users`**_ is not listed _**`anywhere`**_ in the documentation or the API section.\r\n\r\nHow can you say that `most users` knows about it, if user `have to manually test this behavior in repl` in order to know about this behavior?",
          "createdAt": "2021-04-20T12:38:16Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzI5MjQyNQ==",
          "body": "@MarkTanashchuk but it is documented, not that explicitly but You have even example in \"Components section\", where it's visible it is like this... and btw. look what expect as result of that code even non-Svelte html community \r\n\r\n![Snímka obrazovky z 2021-04-20 15-53-37](https://user-images.githubusercontent.com/34808350/115407781-a0630900-a1f0-11eb-8aa0-9773d1e74d0d.png)\r\n\r\nhttps://twitter.com/mlocik97/status/1384162706601611268\r\n\r\nI think, this is saying about what html coders expect.",
          "createdAt": "2021-04-20T13:53:01Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzMwODM5OA==",
          "body": "> @MarkTanashchuk but it is documented, not that explicitly but You have even example in \"Components section\", where it's visible it is like this... and btw. look what expect as result of that code even non-Svelte html community\r\n> https://twitter.com/mlocik97/status/1384162706601611268\r\n> I think, this is saying about what html coders expect.\r\n\r\nThe fact that people don't know how the html specification works is, sadly, the problem of the developers themselves.\r\n\r\nThis behavior is also used in jsx, but it is _clearly documented_ in react \r\nhttps://react-cn.github.io/react/tips/self-closing-tag.html\r\n\r\nAt this point in time, given that this behavior is not documented, I suggested adding a compilation error or warning(since w3c would indicate an error that this is not valid html markup). If this behavior is planned to be kept, it would be good to document it as done in react",
          "createdAt": "2021-04-20T14:13:18Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzQzNzAxNw==",
          "body": "> I suggested adding a compilation error\r\n\r\nNo, it would break a lot of existing projects, that already use code like:\r\n\r\n```\r\n<Component1 />\r\n<Component2 />\r\n```\r\n\r\nwe can add some note to documentation, but changing behaviour of compiler, so it would throw error is risky and really bad solution.",
          "createdAt": "2021-04-20T16:48:37Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzQ0NDIzMg==",
          "body": "@Mlocik97 Please do read my messages, I have already specified that I am NOT talking about COMPONENTS, I am talking EXCLUSIVELY about TAGS.",
          "createdAt": "2021-04-20T16:56:00Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzQ2MzQ2NA==",
          "body": "It doesn't matter if it's component or tag, in both situations it would give same problems, and break existing projects... and btw. it should be consistent, so it's even worse idea to change it just for tags.",
          "createdAt": "2021-04-20T17:23:20Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzQ5ODQwOQ==",
          "body": "Rich and other maintainers position svelte as an extended html.\r\n\r\nThis means that markup in svelte should be treated like html, but with additional rules, js expressions, directives, etc.\r\n\r\nThings that are different in html and svelte are described in the documentation so that the developer can have the ability to overlay knowledge of these features on top of his knowledge of html usage.\r\n\r\nThere are 2 changes mentioned in this issue:\r\n\r\nFor single unclosed tags there has been implemented an error in compile time and so an explanation in the documentation is not even necessary.\r\n\r\nAnd there is no paragraph about behavior of single self-closing tags in the documentation and it is NOT a behavior from html, it is rather a behavior adopted from `jsx`.\r\n\r\nMy point is that there can be several possible scenarios:\r\n1. Do nothing.\r\n2. An option could be added to display either a warning or an error at compile time for such tags, so that when you transfer markup from html to svelte it will be clear which markup may not behave as expected.\r\n3. A paragraph can be added to documentation describing that in svelte the processing of self-closing non-void tags is the norm and the same as in jsx.",
          "createdAt": "2021-04-20T18:16:13Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzUwMDU5Nw==",
          "body": "If nothing is done and no changes are made, sooner or later this kind of UB will find its developer.\r\n\r\n```svelte\r\n<div />Any content\r\n{@html `<div />Some text`}\r\n```\r\n\r\nWhich will be processed in \r\n```svelte\r\n<div></div> Any content\r\n<div>Some text</div>\r\n```",
          "createdAt": "2021-04-20T18:19:25Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzUwMTkyMQ==",
          "body": "To be exact, already found a developer, because I created this issue after one person from the Russian-speaking community got this strange behavior",
          "createdAt": "2021-04-20T18:21:32Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzUwOTE3NA==",
          "body": "I only agree with part:\r\n\r\n```\r\n{@html `<div />Some text`}\r\n```\r\n\r\nshould be parsed as `<div></div>Some text` (So it's consistent) (but still this is huge risk for existing projects, and from comment https://github.com/sveltejs/svelte/issues/6180#issuecomment-823498409 I think option 3 is correct solution.",
          "createdAt": "2021-04-20T18:33:05Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzUxMzgwNw==",
          "body": "What do you disagree with? [Rich's opinion](https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934)?\r\nOr with the fact that jsx has been treating  `<div />` as `<div></div>` long before svelte and essentially started this trend?",
          "createdAt": "2021-04-20T18:40:51Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzUxNjY2Mg==",
          "body": "From your words and a few phrases showing that you did not read my messages ( but put thumbs down emoji ) and continuous, not argued(except your own opinion) disagreement with me I have a feeling that your goal is not to analyze the subject in a constructive way, but to prove me wrong",
          "createdAt": "2021-04-20T18:45:41Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU0MTA1Mg==",
          "body": "You still don't understand, I agree with Rich's opinion, but even he would agree with me with this one... because framework can't do breakable changes like nothing, when a lot of other projects depend on it, change like it would break those projects, so something like this just can't be changed. So it's better to let it be like it's now. And also, there are a lot of things in HTML and CSS that works differently between browsers, so how some framework can do same thing like all browsers that do all different things? Some marginal things just need to be not done as perfectly as plain HTML specification is saying, even browsers can't implement specifications correctly.",
          "createdAt": "2021-04-20T19:24:28Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU0MzA2Ng==",
          "body": "https://github.com/sveltejs/svelte/issues/6180#issuecomment-819056262\r\n\r\n>My point is that there can be several possible scenarios:\r\n\r\n>1. ...\r\n>2. An option could be added to display either a warning or an error at compile time for such tags, so that when you transfer markup from html to svelte it will be clear which markup may not behave as expected.\r\n>3. ...\r\n\r\nHow would an optional warning break a project?",
          "createdAt": "2021-04-20T19:27:42Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU0Mzc5Nw==",
          "body": "You was saying about compile error, and I was reacting on it... I was not reacting on warning,... btw. warning would be also bad idea, because one project has at least 5000 HTML tags, so now we will have 5000 warnings? All more important warnings would be lost in it.",
          "createdAt": "2021-04-20T19:28:55Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU0NTUyMA==",
          "body": "During the conversation did I insist on an error or did I offer a warning (and when the dialogue continued I offered to make it optional)?\r\n\r\nBe kind and read my messages entirely, instead of picking out individual phrases from the conversation.",
          "createdAt": "2021-04-20T19:31:45Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU1MDMxMQ==",
          "body": "Like You are not picking individual phrases from my comments and reacting like that... but whatever,... it doesn't matter...\r\nit's good to add note to documentation, you can do PR for that, but all other solutions you suggested are just not good.",
          "createdAt": "2021-04-20T19:39:34Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU1MjM1Nw==",
          "body": "I respond to messages in full and unlike you I can add quotes showing that you didn't read my messages as complete as I have read yours.",
          "createdAt": "2021-04-20T19:43:09Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMzU1NzI1Ng==",
          "body": "Locking as this was marked closed and this is nothing we want to change now. The current behavior is expected.",
          "createdAt": "2021-04-20T19:51:13Z",
          "author": { "login": "arxpoetica", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTQ0MDY3Njc=",
    "body": "When having multiple times the same component, the default value is sometimes not working.\r\nSee REPL below, try to click 'Add user' multiple times. The default value (in User see `export let name = ''`) will only work for the first component.\r\n\r\nhttps://svelte.dev/repl/e90e9af4e6c34906886403d0e751df88?version=3.37.0",
    "closedAt": null,
    "createdAt": "2021-04-09T10:45:27Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjY2OTYzMA==",
          "body": "The description is not entirely correct: if you pass the index of the item as well as seen in the [REPL](https://svelte.dev/repl/38e97a66cdce44f491e7c51beb28d89a?version=3.37.0) the **old** value is being set to `undefined` while the **new** value get's the default.\r\n\r\n",
          "createdAt": "2021-04-09T13:08:22Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjY2OTg3Ng==",
          "body": "From Discord:\r\n> Idle — Today at 3:02 PM\r\n```\r\n{#each users as user (user.id)}\r\n    <User id={user.id} name={user.name}/>\r\n{/each}\r\n```\r\n>even with that it still bugs\r\n\r\nA keyed each doesn't solve the problem.\r\n\r\nOther comment from Discord:\r\n> Syberag — Today at 2:47 PM\r\nIf you change <User name={user.name}/> to <User {...user}/>  it work\r\nI guess that Svelte see <User name={user.name}/> (with user.name with the exact same value) as the same data and duplicate dom node with init the component.\r\nand in the case of <User {...user}/> it's 2 distinct object\r\n",
          "createdAt": "2021-04-09T13:08:47Z",
          "author": { "login": "thojanssens", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjY4MDkzMA==",
          "body": "If you need the component to \"correct\" your empty object, just use `<User bind:name={user.name}/>` and it will come back just fine.\r\n",
          "createdAt": "2021-04-09T13:26:25Z",
          "author": { "login": "alesvaupotic", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTgwMDkxNQ==",
          "body": "I think this is the intended behavior which might seem odd at first but I think it is logical.\r\n\r\nSo at instantiation the value is _undefined_ which ignores the value so it defaults back to the components default. \r\nHowever when reactivity kicks in after the array has been mutated the value gets update. We still want _undefined_ values being valid prop values, just not att instantiation, which is why for the last item added it always defaults back to that empty string because that's a new instance of **_User_** while the old get it's value updated to an undefined value, which is a valid value after all.\r\n\r\nAnd why spreading the props \"works\" above is because the object being spread doesn't contain a **name** field with the value of _undefined_ so on mutation it won't update the prop.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-05-16T10:55:18Z",
          "author": { "login": "hjalmar", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTQzOTc2NzA=",
    "body": "Not sure if a typescript or a svelte bug…\r\nI get a \"No overload matches this call\" typescript error on that kind of code in VSCode:\r\n\r\n```typescript\r\nconst stores = [writable(''), writable(0)];\r\nconst test1 = derived(stores, () => 'blah'); \r\n```\r\nWeirdly, this works \r\n```typescript\r\nconst test2 = derived([writable(''), writable(0)], () => 'blah');\r\n```\r\n\r\nHovering above the `stores` constant shows that it's inferred to be an array of Writables, i.e. `(Writable<string> | Writable<number>)[]`, whereas in the `test2` example, the array of stores is inferred to be a `[Writable<string>, Writable<number>]` tuple.\r\n\r\nThe `Stores` type declaration in types/runtime/store/index.d.ts (`declare type Stores = Readable<any> | [Readable<any>, ...Array<Readable<any>>];`) is compatible with the second inference, but not with the first one. Adding ` | Readable<any>[]` to the possible types of `Stores` seems to fix the issue.\r\n\r\nHere's the full typescript error:\r\n```\r\nNo overload matches this call.\r\n  Overload 1 of 2, '(stores: Stores, fn: (values: any, set: (value: unknown) => void) => void | Unsubscriber, initial_value?: unknown): Readable<unknown>', gave the following error.\r\n    Argument of type '(Writable<string> | Writable<number>)[]' is not assignable to parameter of type 'Stores'.\r\n      Type '(Writable<string> | Writable<number>)[]' is not assignable to type '[Readable<any>, ...Readable<any>[]]'.\r\n        Source provides no match for required element at position 0 in target.\r\n  Overload 2 of 2, '(stores: Stores, fn: (values: any) => string): Readable<string>', gave the following error.\r\n    Argument of type '(Writable<string> | Writable<number>)[]' is not assignable to parameter of type 'Stores'.\r\n      Type '(Writable<string> | Writable<number>)[]' is not assignable to type '[Readable<any>, ...Readable<any>[]]'.ts(2769)\r\n```\r\n\r\nTested on VSCode 1.55 on macOS 11, svelte 3.37, typescript 4.2.4, rollup.\r\n\r\n--\r\nEdit: after some more digging, I think it's probably related to microsoft/TypeScript#39244",
    "closedAt": null,
    "createdAt": "2021-04-09T10:32:34Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTQyNTg5NDU=",
    "body": "**Describe the bug**\r\nDon't have access to localstorage inside REPL\r\n\r\n**Logs**\r\n[svelte.dev-1617953516779.log](https://github.com/sveltejs/svelte/files/6283937/svelte.dev-1617953516779.log)\r\n\r\n**To Reproduce**\r\nWin 10, Chrome 89/Firefox\r\nhttps://svelte.dev/repl/470dbc6caeda4cc895189033f8aa7c2c?version=3.37.0\r\n\r\n**Expected behavior**\r\nHave access to localstorage \r\n\r\n**Severity**\r\nMedium, I think this should be an easy fix.\r\nI just wanted to write a blog post which would include localstorage and the svelte REPL ;)\r\n",
    "closedAt": "2021-04-09T21:25:53Z",
    "createdAt": "2021-04-09T07:37:59Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjk4MDY5Ng==",
          "body": "Duplicate of https://github.com/sveltejs/svelte-repl/issues/111",
          "createdAt": "2021-04-09T21:25:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTM5MDc5MjA=",
    "body": "Hi Svelte team! Svelte is wonderful – great work.\r\n\r\nI was perusing the docs site and noticed that the contrast ratio of the text on the sidebar appeared to be a bit low. Here's what I am seeing:\r\n\r\n![image](https://user-images.githubusercontent.com/2322305/114095739-a234e000-9872-11eb-95b2-2436e30e1f29.png)\r\n\r\nI dropped the foreground and background colors in a contract checker and saw that they don't meet the minimum contrast of the WCAG AA standard for normal-sized text.\r\n\r\nIf this is of concern to you, it could be resolved by lightening up the text, darkening the background, or both. As an example, changing `--sidebar-text` to be `#E7E7EE` will pass AA.\r\n\r\nNormally I'd have opened a PR, but I wasn't able to find where `--sidebar-text` is defined in the repo. Maybe it lives elsewhere, or I'm just bad at searching 😜\r\n\r\nThanks for reading!\r\n",
    "closedAt": null,
    "createdAt": "2021-04-08T21:01:24Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzE4MDIzMg==",
          "body": "The CSS variables are defined in the site-kit repo, which contains base styles and components for the various svelte.dev sites: \r\n\r\nhttps://github.com/sveltejs/site-kit/blob/01d83baee868053b01b560bc92ee34967616113f/base.css#L33-L45",
          "createdAt": "2021-04-10T18:05:19Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzc1OTkyMA==",
          "body": "I created the PR to update it. But I am not sure if it is the correct place to send the PR. here the link to PR https://github.com/sveltejs/site-kit/pull/42",
          "createdAt": "2021-04-27T16:55:11Z",
          "author": { "login": "vikbert", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTM4NDk1MDc=",
    "body": "REPL: https://svelte.dev/repl/59fe31c44fd54c21ae3cfad3d968b44b?version=3.37.0\r\n\r\nI want to store variables (that I bind to the checkboxes) in an object. I was confused about why the reactive statement `$: console.log(storage['checked2'])` is fired, when only `storage['checked']` and `checked` have changed in value (and vice versa). \r\n\r\nA user on the Svelte discord informed me it is because Svelte only checks 'one level' deep, which in this case I guess would mean all reactive statements pertaining to any `storage` key would fire whenever anything in the `storage` object changes. It does not seem to me that the API docs make it clear that this is expected behaviour.",
    "closedAt": "2021-04-08T20:20:36Z",
    "createdAt": "2021-04-08T20:16:12Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjE1MTQ1OQ==",
          "body": "A more in-depth discussion about how reactivity works is a TODO, and there's probably an issue for this somewhere - but in the meantime, yes, reactivity only tracks which top-level objects have changed, and this is the intended behavior.",
          "createdAt": "2021-04-08T20:20:36Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTM1OTgyODY=",
    "body": "Hi, is it possible to sync prop value with a writable store value, just like how 2-way binding works. In the example below, I have an accordion where one item can be active at a time. Accordion consists of a Body component where a writable store is used with an initial value from a prop. When the prop changes in the Body component writable store value do not change and when the writable store value changes the prop does not change. The writable store is shared with the Item component with help of setContext. In the Item component, the writable store will change to the id of the current item when the item is clicked on. \r\n\r\n[Link to repl](https://svelte.dev/repl/50c7e4dfd59e44b58b0e71c238084c76?version=3.37.0)",
    "closedAt": "2021-04-08T15:50:45Z",
    "createdAt": "2021-04-08T15:34:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNTkzNTY1OQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-04-08T15:50:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNTk1MjUyOA==",
          "body": "I have already asked this question on discord but no one answered. I will ask the question on StackOverflow and see if there is a solution to my problem. The problem is actually a big obstacle for me and if there are no solution to my problem think this should be a feature request, to make a writable store and a prop value synchronize with each other.",
          "createdAt": "2021-04-08T16:09:49Z",
          "author": { "login": "joseDaKing", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTM1NzUwODE=",
    "body": "**Describe the bug**\r\nIt seems that when an element within the :then block of an #await statement is updated after the first rendering, the error variable from the :catch block somehow \"leaks\" and overwrites other variables or causes an exception.\r\n\r\nE.g. if you use {:catch error}, and the {:then} block also uses a variable named \"error\" things start to get weird.\r\nIn my actual application I have a \"global\" component variable named \"error\" that suddenly seems to hold the value of the awaited promise in some cases; and in other cases an exception is thrown within svelte.\r\n\r\n**To Reproduce**\r\nAn exception will be triggered when clicking the button in this REPL; make sure to open e.g. Chrome Dev Tools before clicking the button.\r\nThe issue started in 3.25 - it worked fine with 3.24.1\r\nhttps://svelte.dev/repl/95746deee9e34eb8b45a02a673e00136?version=3.37.0\r\n\r\n**Expected behavior**\r\nThe naming of the error variable for the {:catch} block should not affect the :then block in any way; it should be scoped correctly.\r\n\r\n**Severity**\r\nBlocks update / would require renaming of variables in many component.",
    "closedAt": "2021-04-30T16:44:33Z",
    "createdAt": "2021-04-08T15:09:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzI2MDM0MA==",
          "body": "I also think this is a bug. In this [repl](https://svelte.dev/repl/8aa621af75574acd8d4c041517dee038?version=3) the error variable is overridden by the resolved result of the promise. It only happens inside the await then block after an update happens.\r\n\r\nI think the problem is with this line\r\nhttps://github.com/sveltejs/svelte/blob/3b4d53e6111e2e77a74452f0bf9a835467f93dc3/src/compiler/compile/render_dom/wrappers/AwaitBlock.ts#L237\r\nThe variable with the same name is overridden",
          "createdAt": "2021-04-11T07:01:27Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDIyMTA1NA==",
          "body": "This should be fixed in 3.38.0 - https://svelte.dev/repl/95746deee9e34eb8b45a02a673e00136?version=3.38.0",
          "createdAt": "2021-04-30T16:44:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTIwODg5MjM=",
    "body": "Hi, I have a rather peculiar problem by updating an array and passing the updated value to the event dispatcher. For some reason my reactive declaration gets updated, as expected, but as soon as I want to pass this value to the event dispatcher it doesn't work anymore if I call the dispatcher on a click:\r\n\r\nPseudocode for it:\r\n```\r\nexport let collection = [];\r\nlet currentPage = 1\r\n\r\nfunction handleClick() {\r\n  currentPage += 1;\r\n  dispatch(\"page-change\", {visibleItems});\r\n  }\r\n\r\n(`$: visibleItems = [...collection.slice(0, clickCount)]`)\r\n\r\n<button on:click={handleClick}>Click me</button>\r\n```\r\n\r\nThis `dispatch(\"page-change\", { visibleItems });` is somehow one \"round\" behind what's currently inside `visibleItems` and I don't get quite why.\r\n\r\nI have created a short  REPL with the live [example](https://svelte.dev/repl/9330e42882824e85a0625caa293b4924?version=3.37.0)",
    "closedAt": "2021-04-07T08:09:54Z",
    "createdAt": "2021-04-07T07:11:24Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDcwMjUwNw==",
          "body": "This is the intended behavior. Reactive `$:` blocks don't run don't immediately synchronously run when their dependencies are updates - instead an update is scheduled for the next microtask. You can use https://svelte.dev/docs#tick to wait until updates happen.",
          "createdAt": "2021-04-07T08:09:50Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDcxMzQ5Mg==",
          "body": "@Conduitry, thanks a lot! With `tick` it does work.\r\n\r\nI must admit though that I can't really find any info regarding this topic in the docs. There is only a short info on reactive statements: `Reactive statements run immediately before the component updates, whenever the values that they depend on have changed.`. ",
          "createdAt": "2021-04-07T08:24:55Z",
          "author": { "login": "kwiat1990", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NTE0NzM3NTU=",
    "body": "I encounter the usage of JS Set class inside Svelte final code, which limit the usage in different browsers. for now only Chrome 38 and above are using it.\r\nexcept of the use of polyfill, which is super big. do we have a way to remove the usage of `Set` ? \r\n",
    "closedAt": null,
    "createdAt": "2021-04-06T14:16:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDIyNTU4Mg==",
          "body": "`Set` is available since 2012/2014, even IE11 supports it. https://caniuse.com/mdn-javascript_builtins_set\r\nHow long do you want to wait to use it?\r\nYou can use something like polyfill.io to only load polyfills in browsers that need them. Or you could use babeljs.",
          "createdAt": "2021-04-06T15:44:32Z",
          "author": { "login": "PatrickG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDI0MjQ4NQ==",
          "body": "we have lots of browsers under Chrome 38 for some publishers. also have traffic from Chrome 28 and below which not support SSL TLS 1.2, so we need to deliver HTTP and not HTTPS.\r\nthe problem is the size of the polyfill of `Set`.",
          "createdAt": "2021-04-06T16:06:37Z",
          "author": { "login": "nisimjoseph", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDI1NDU1OQ==",
          "body": "Are you serious? There's no way its svelte job to care about these old browsers. You could fork it and remove the usage by yourself.\r\nBut its better not to support these old browsers in any way. Even Chromium49 can do it and its the last working version for windows xp.",
          "createdAt": "2021-04-06T16:23:26Z",
          "author": { "login": "Kapsonfire-DE", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDI1NzY3MQ==",
          "body": "I know, and I agree with your answer. I know it not Svelte job to do it, I just thought there is a way and asked here for it.\r\nit just we have publishers which have lots of old browsers traffic and we don't want to have multiple versions of bundles, but look like we have no choice here. \r\n\r\nThank you",
          "createdAt": "2021-04-06T16:27:47Z",
          "author": { "login": "nisimjoseph", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDk4NjQ3MDI=",
    "body": "When i use null aware operator inside svelte component like this : \r\n\r\n```\r\n  <ServerConfigController\r\n    urlPath={incomingRequest?.path}\r\n    on:changeUrlPath={e => changeUrlPath(e.detail)}\r\n  />\r\n```\r\nIts not able to handle `incomingRequest?.path` ",
    "closedAt": "2021-04-24T06:35:34Z",
    "createdAt": "2021-04-04T12:27:06Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMzAyNTUwMg==",
          "body": "What does not able to handle mean? That syntax should already be supported in components, but the js engine you try to run it in will need to support it, or you will need to transpile.",
          "createdAt": "2021-04-04T12:33:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDk4NDY5NTI=",
    "body": "When customElement option is set to true $$slots is empty object\r\n\r\nhere is my use case\r\n\r\n```html\r\n<svelte:options tag=\"my-button\" />\r\n\r\n<script>\r\n   onMount(() => {\r\n      console.log($$slots);\r\n   });\r\n</script>\r\n\r\n{#if $$slots.lefticon}\r\n   <span>\r\n\t<slot name=\"lefticon\" />\r\n   </span>\r\n{/if}\r\n\r\n<span>\r\n   <slot />\r\n</span>\r\n\r\n{#if $$slots.icon}\r\n   <span>\r\n\t<slot name=\"icon\" />\r\n   </span>\r\n{/if}\r\n```",
    "closedAt": "2021-04-24T08:28:35Z",
    "createdAt": "2021-04-04T10:38:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDIzMDAzMw==",
          "body": "How are you using it in the parent component? My understanding is that `$$slots` will only have anything in it IF the parent component passes any through.",
          "createdAt": "2021-04-06T15:50:10Z",
          "author": { "login": "jstrother", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDYwNTU3Ng==",
          "body": "@jstrother\r\n\r\nI am using it like this\r\n\r\n```html\r\n<my-button>\r\n   <span slot=\"lefticon\">L</span>\r\n   Hello World!\r\n   <span slot=\"icon\">R</span>\r\n</my-button>\r\n```",
          "createdAt": "2021-04-07T05:12:03Z",
          "author": { "login": "imsamtar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNTA0NzM2Mw==",
          "body": "It looks to me like you're doing everything correctly. I remembered seeing something about custom elements causing issues and saw this issue #6164 that seems to be related. There are a few links there that could help out.",
          "createdAt": "2021-04-07T16:21:58Z",
          "author": { "login": "jstrother", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODQzNDE0NA==",
          "body": "Copy of #6059",
          "createdAt": "2021-04-13T04:49:30Z",
          "author": { "login": "imsamtar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNTI4OTEzNQ==",
          "body": "Are these two (#6059 with this) the same issue? I'm currently facing the same issue and it's more like the `$$slots` variable is not reactive when `customElement` was set as `true`.",
          "createdAt": "2021-04-23T00:32:27Z",
          "author": { "login": "YamiOdymel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjA1NzUwMQ==",
          "body": "`$$slots` is not supposed to be reactive.\r\n\r\nas per the original issue title, this is a duplicate of https://github.com/sveltejs/svelte/issues/5594, and should have been fixed in v3.29.5",
          "createdAt": "2021-04-24T08:28:35Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjA1ODE3NA==",
          "body": "![image](https://user-images.githubusercontent.com/7308718/115952805-be937680-a51a-11eb-8e58-1d1a5a3991dd.png)\r\n\r\nGuess I was wrong, but the issue doesn't get fixed.\r\n\r\nI'm using the same example code from the issue you mentioned above with `\"svelte\": \"^3.37.0\"`\r\n\r\n```html\r\n<svelte:options tag=\"my-wc\"/>\r\n\r\n<script>\r\n$: console.log($$slots);\r\n</script>\r\n\r\n<slot name=\"foo\"></slot>\r\n```\r\n\r\n```html\r\n<my-wc>\r\n    <span slot=\"foo\">Foobar</span>\r\n</my-wc>\r\n```\r\n\r\n",
          "createdAt": "2021-04-24T08:34:24Z",
          "author": { "login": "YamiOdymel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTA4OTYyNg==",
          "body": "Problem solved by adding `defer` to `<script>` tag, to get `$$slots` working it requires the DOM to be loaded first.",
          "createdAt": "2021-05-03T07:51:55Z",
          "author": { "login": "YamiOdymel", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDk3NTg1Nzc=",
    "body": "Svelte's compiler attempts `customElements.define(..)` at the end of each generated `SvelteElement` when `customElement: true` and `tag=\"tag-name\"` are set.\r\n\r\nWhen used in an environment which uses HMR, this causes the following error:\r\n\r\n```\r\nhmr-client.js:218 [ESM-HMR] Hot Update Error DOMException: Failed to execute 'define' on 'CustomElementRegistry': the name \"custom-element-example\" has already been used with this registry\r\n```\r\n\r\nThe \"offending\" line is here:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/d4f98fb63a4cf77c4b3b4f2b359d5b991390f5c1/src/compiler/compile/render_dom/index.ts#L526\r\n\r\n---\r\n### Reproduce:\r\n\r\n1. Setup a new Svelte project with HMR. I've used Snowpack with `@snowpack/svelte-plugin`.\r\n2. Set `customElement: true` in compiler options, like so:\r\n```javascript\r\n// svelte.config.js\r\nmodule.exports = {\r\n  compilerOptions: {\r\n    customElement: true,\r\n  },\r\n};\r\n```\r\n3. In a `.svelte` component file, add `tag=\"tag-name\"` to `svelte:options`, like so:\r\n```svelte\r\n<svelte:options tag=\"custom-element-example\"/>\r\n\r\n<div id=\"custom-element-example\">\r\n  Some content ..\r\n</div>\r\n```\r\n4. Compile your project and run it in browser with console open.\r\n5. Make a change and save it (to trigger an HMR update)\r\n6. Observe console error.\r\n\r\n---\r\n### Expected Behavior:\r\n\r\nSvelte component should be recompiled and properly reregistered within the document scope.",
    "closedAt": null,
    "createdAt": "2021-04-03T23:20:30Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjkzOTk3Nw==",
          "body": "Quick note: This appears to be a common problem with custom elements and HMR in general. Reading for context:\r\n\r\n1. https://dev.to/nicolalc/customelements-webcomponents-live-reload-2m3h\r\n2. https://github.com/WICG/webcomponents/issues/820\r\n3. https://github.com/WICG/webcomponents/issues/829\r\n4. https://github.com/WICG/webcomponents/issues/754",
          "createdAt": "2021-04-03T23:23:08Z",
          "author": { "login": "lorrenbiffin", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDg3MDAzMDU=",
    "body": "------\r\nBefore filing an issue we'd appreciate it if you could take a moment to ensure\r\nthere isn't already an open issue or pull-request.\r\n-----\r\n\r\nIf there's an existing issue, please add a :+1: reaction to the description of\r\nthe issue. One way we prioritize issues is by the number of :+1: reactions on\r\ntheir descriptions. Please DO NOT add `+1` or :+1: comments.\r\n\r\n### Feature requests and proposals\r\n\r\nWe're excited to hear how we can make Svelte better. Please add as much detail\r\nas you can on your use case. To propose an implementation of a large feature or\r\nchange, please create an [RFC](https://github.com/sveltejs/rfcs).\r\n\r\n### Bugs\r\n\r\nIf you're filing an issue about a bug please include as much information\r\nas you can including the following.\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n- Your operating system: (e.x. OS X 10, Windows XP, etc)\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n- Whether your project uses Webpack or Rollup\r\n\r\n- *Repeatable steps to reproduce the issue*\r\n\r\nThanks for being part of Svelte!\r\n-------\r\n",
    "closedAt": "2021-04-01T19:23:54Z",
    "createdAt": "2021-04-01T18:40:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjEyMDU1Mg==",
          "body": "I don't know what this means. It's an unclear issue title with the default blank issue template.",
          "createdAt": "2021-04-01T19:23:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDgzNjkwMzQ=",
    "body": "\r\nBug : when i run `npm run build` , i am getting the following error\r\n```\r\nmain└─ $ npm run build\r\n\r\n> svelte-ace@1.0.13 build\r\n> rollup -c\r\n\r\n\r\nsrc/index.js → dist/index.mjs, dist/index.js...\r\n(!) Plugin typescript: @rollup/plugin-typescript TS2307: Cannot find module './App.svelte' or its corresponding type declarations.\r\nexample/src/main.ts: (1:17)\r\n\r\n1 import App from './App.svelte';\r\n                  ~~~~~~~~~~~~~~\r\n\r\n[!] (plugin svelte) TypeError: The \"path\" argument must be of type string. Received undefined\r\nsrc/AceEditor.svelte\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"path\" argument must be of type string. Received undefined\r\n    at validateString (internal/validators.js:124:11)\r\n    at Object.isAbsolute (path.js:1029:5)\r\n    at loadTsconfig (/home/nateshmbhat/Desktop/svelte-ace/node_modules/svelte-preprocess/dist/transformers/typescript.js:45:27)\r\n    at transformer (/home/nateshmbhat/Desktop/svelte-ace/node_modules/svelte-preprocess/dist/transformers/typescript.js:70:11)\r\n    at Object.transform (/home/nateshmbhat/Desktop/svelte-ace/node_modules/svelte-preprocess/dist/autoProcess.js:37:12)\r\n    at /home/nateshmbhat/Desktop/svelte-ace/node_modules/svelte-preprocess/dist/autoProcess.js:109:29\r\n    at script (/home/nateshmbhat/Desktop/svelte-ace/node_modules/svelte-preprocess/dist/autoProcess.js:137:33)\r\n    at process_single_tag (/home/nateshmbhat/Desktop/svelte-ace/node_modules/svelte/src/compiler/preprocess/index.ts:160:21)\r\n    at async Promise.all (index 0)\r\n    at replace_in_code (/home/nateshmbhat/Desktop/svelte-ace/node_modules/svelte/src/compiler/preprocess/replace_in_code.ts:72:23)\r\n\r\nnpm ERR! code 1\r\nnpm ERR! path /home/nateshmbhat/Desktop/svelte-ace\r\nnpm ERR! command failed\r\nnpm ERR! command sh -c rollup -c\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /home/nateshmbhat/.npm/_logs/2021-04-01T12_23_06_110Z-debug.log\r\n```\r\n\r\n\r\nHere's my `package.json` file : \r\n```\r\n{\r\n  \"name\": \"svelte-ace\",\r\n  \"description\": \"Svelte Ace Editor component with complete TypeScript support\",\r\n  \"version\": \"1.0.13\",\r\n  \"module\": \"dist/index.mjs\",\r\n  \"main\": \"dist/index.js\",\r\n  \"svelte\": \"src/index.js\",\r\n  \"author\": \"Natesh Bhat\",\r\n  \"scripts\": {\r\n    \"dev\": \"rollup -c -w\",\r\n    \"svelte-check\": \"svelte-check\",\r\n    \"build\": \"rollup -c\",\r\n    \"prepublishOnly\": \"npm run svelte-check && npm run build\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@rollup/plugin-commonjs\": \"^14.0.0\",\r\n    \"@rollup/plugin-node-resolve\": \"^8.4.0\",\r\n    \"@rollup/plugin-typescript\": \"^6.0.0\",\r\n    \"@tsconfig/svelte\": \"^1.0.0\",\r\n    \"rollup\": \"^2.44.0\",\r\n    \"rollup-plugin-livereload\": \"^2.0.0\",\r\n    \"rollup-plugin-svelte\": \"^6.1.1\",\r\n    \"rollup-plugin-terser\": \"^7.0.2\",\r\n    \"sirv-cli\": \"^1.0.0\",\r\n    \"svelte\": \"*\",\r\n    \"svelte-check\": \"^1.3.0\",\r\n    \"svelte-preprocess\": \"^4.7.0\",\r\n    \"tslib\": \"^2.0.0\",\r\n    \"typescript\": \"^3.9.3\"\r\n  },\r\n  \"files\": [\r\n    \"dist\",\r\n    \"src\",\r\n    \"@types\"\r\n  ],\r\n  \"peerDependencies\": {\r\n    \"svelte\": \"^3.37.0\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"brace\": \"^0.11.1\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/nateshmbhat/svelte-ace.git\"\r\n  },\r\n  \"keywords\": [\r\n    \"svelte\",\r\n    \"Svelte3\",\r\n    \"ace editor\",\r\n    \"code editor\",\r\n    \"ace typescript\"\r\n  ],\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/nateshmbhat/svelte-ace/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/nateshmbhat/svelte-ace#readme\",\r\n  \"types\": \"@types/index.d.ts\"\r\n}\r\n\r\n```\r\n\r\nHere's the repo on which you can reproduce this issue : https://github.com/nateshmbhat/svelte-ace",
    "closedAt": "2021-04-01T16:59:57Z",
    "createdAt": "2021-04-01T11:09:46Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjA0MjY2Ng==",
          "body": "Turns out that the issue was related to versions and version mismatches of rollup plugins and svelte.\r\nClosing this : #6159",
          "createdAt": "2021-04-01T16:59:57Z",
          "author": { "login": "nateshmbhat", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjk1ODI5OQ==",
          "body": "I'm getting a very similar message after making the following \"Wanted\" upgrades via `npm outdated` and `npm upgrade`:\r\n\r\n```\r\nPackage                      Current  Wanted  Latest\r\n@aws-sdk/client-dynamodb       3.9.0  3.11.0  3.11.0\r\n@aws-sdk/util-dynamodb         3.9.0  3.11.0  3.11.0\r\n@rollup/plugin-commonjs       17.1.0  17.1.0  18.0.0\r\n@rollup/plugin-node-resolve   11.2.0  11.2.1  11.2.1\r\n@rollup/plugin-typescript      8.2.0   8.2.1   8.2.1\r\nelectron                      12.0.1  12.0.2  12.0.2\r\nrollup                        2.42.1  2.44.0  2.44.0\r\nsvelte                        3.35.0  3.37.0  3.37.0\r\nsvelte-check                   1.2.6   1.3.0   1.3.0\r\nsvelte-preprocess              4.6.9   4.7.0   4.7.0\r\n```\r\nAll changes were **minor** version upgrades.  And now I receive the following error when I try to build.\r\n```\r\n$ npm run build:ui\r\n\r\n> auditbrowser@1.0.0 build:ui\r\n> rollup -c\r\n\r\n\r\nsrc/UI/index.ts → dist/mainWin/bundle.js...\r\n[!] (plugin svelte) TypeError: The \"path\" argument must be of type string. Received undefined\r\nsrc/UI/App.svelte\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"path\" argument must be of type string. Received undefined\r\n    at validateString (internal/validators.js:124:11)\r\n```\r\nCould you summarize the version changes that helped you?\r\n\r\n--------------------\r\nEdit: April 4, 2021\r\n\r\nI found my problem was the upgrade of `svelte-preprocess` from `4.6.9` to `4.7.0`.  Bringing it back to `4.6.9` resolves the issue.",
          "createdAt": "2021-04-04T02:19:17Z",
          "author": { "login": "pglezen", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDgwNDQ0NzA=",
    "body": "**Describe the bug**\r\nOn the Svelte website Tutorial Chapter 17 both a) and b).\r\n\r\nThe Svelte compiler issues a warning 'Media elements must have a <track kind=\"captions\"/>' child element. \r\n\r\n**To Reproduce / Context**\r\n\r\nMacbook Pro\r\nBig Sur 11.2.3\r\nChrome browser Version 87.0.4280.88 (Official Build) (x86_64)\r\nWebsite https://svelte.dev/tutorial/\r\nChapter 17 Sharing Code and Module Exports\r\n\r\n![Screen Shot 2021-04-01 at 16 08 59](https://user-images.githubusercontent.com/144485/113251710-7c598980-930e-11eb-9fe0-f591b9f2602f.png)\r\n\r\n\r\n** Solution **\r\n\r\nin repos app-a and app-b AudioPlayer.svelte -  Insert child element in the audio element\r\n<track kind=\"captions\"/>. as requested by the compiler.\r\n\r\n![Screen Shot 2021-04-01 at 17 29 48](https://user-images.githubusercontent.com/144485/113252778-01916e00-9310-11eb-8f5c-9ee77a6d874a.png)\r\n\r\n\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-04-01T06:31:05Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMzg0ODQ3OA==",
          "body": "Suggest label site: tutorial",
          "createdAt": "2021-04-06T06:04:37Z",
          "author": { "login": "MShuttle", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMzg1MTEyOA==",
          "body": "Suggest merging gh-6157 into this issue.  This is the more general issue.",
          "createdAt": "2021-04-06T06:10:17Z",
          "author": { "login": "MShuttle", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDYwMzA2ODY=",
    "body": "Hi Folks,\r\n\r\nCan you please help me  on below issue...\r\n\r\nI have installed Dbatools in offline mode,  but I cant find few functions.. .\r\n\r\n \"The term 'Stop-Function' is not recognized as the name of a \r\ncmdlet, function, script file\"\r\n\r\n\r\nWrite-function, \r\nstop-function,\r\nDbainstancePramter\r\n\r\nThanks in advance.\r\n\r\nThanks\r\nBSREDDY\r\n",
    "closedAt": "2021-03-31T06:57:44Z",
    "createdAt": "2021-03-31T06:54:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDgyMzcwOQ==",
          "body": "This issue does not seem to be related to Svelte, nor is it a bug or feature request for Svelte. Please ask technical questions of platforms like [Stack Overflow](https://stackoverflow.com/).",
          "createdAt": "2021-03-31T06:57:44Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDgyNzg3MA==",
          "body": "Hi dummdidumm,\r\n\r\nthank you for your reply.\r\n\r\nActually. i am new to github. \r\n\r\nI assume that there is issue with dbatools installation.\r\n\r\nI am looking for help. where can i poste the issue !\r\n\r\nCould you please share DBatools insllation forum ?\r\n\r\nThnaks,\r\nBsreddy\r\n\r\n",
          "createdAt": "2021-03-31T07:04:46Z",
          "author": { "login": "bsr-k99", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDg0OTMzNQ==",
          "body": "I don't know anything about dbatools. This is a repository about Svelte, a web frontend framework. I suggest you do a google search like \"github dbatools\" and see if one shows up. Good luck!",
          "createdAt": "2021-03-31T07:40:00Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDg1NjYxNw==",
          "body": "Thank you, i posted wrongly. I will delete the post.",
          "createdAt": "2021-03-31T07:50:55Z",
          "author": { "login": "bsr-k99", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDUxMzc3MTM=",
    "body": "**Describe the bug**\r\n\r\nA` {#key}` block should destroy the component of the previous key.\r\nThis works most of the time, but when an intro is started the components is not destroyed or removed from the dom.\r\n\r\n**To reproduce:**\r\n\r\nMinimal example to reproduce the bug:\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n  import Child from './Child.svelte'\r\n  let index = 0\r\n</script>\r\n{#key index}\r\n  <Child on:click={() => {index++}} />\r\n{/key}\r\n\r\n<!-- Child.svelte -->\r\n<script>\r\n  import { fade } from 'svelte/transition'\r\n  import { createEventDispatcher } from 'svelte'\r\n  const dispatch = createEventDispatcher()\t\r\n  let visible = false\r\n</script>\r\n<button on:click={() => { visible = true; dispatch('click') }}>Next</button>\r\n{#if visible} <div transition:fade /> {/if}\r\n```\r\n\r\nA [REPL](https://svelte.dev/repl/617dd85dcc0649b09a90dd5a1832a981?version=3.36.0) to see the bug in action, just press the \"Next\" button.\r\n\r\n**Expected behavior**\r\nIntro animations should be canceled, outros should start and when the outros are completed the component should be destroyed.\r\n\r\n**Information about your Svelte project:**\r\n  System: OS: macOS 11.2.3\r\n  Browsers:\r\n    Chrome: 89.0.4389.90\r\n    Firefox: 87.0\r\n    Safari: 14.0.3\r\n Svelte: 3.36.0\r\n\r\n**Severity**\r\nThis is breaking pages, showing weird duplicate components.\r\n",
    "closedAt": null,
    "createdAt": "2021-03-30T19:41:07Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDU1NzQ2MQ==",
          "body": "Duplicate of #6150",
          "createdAt": "2021-03-30T20:30:48Z",
          "author": { "login": "Kapsonfire-DE", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDQzNzY3MDY=",
    "body": "**Describe the bug**\r\nThe bug comes out then I use the `out:<any_svelte_transition>` in a list of items (`{#each}...{/each}`).\r\nWhen I reassign the array that I loop through with `each` and the data comes from a `Promise` and the data 'arrives' earlier then the `out` animation finishes, the previous data won't get removed from the DOM, it's going to be hidden, but it takes up the space unnecessarily. \r\n\r\n![image](https://user-images.githubusercontent.com/76699502/112978185-51790500-9157-11eb-902b-93d41b7b192e.png)\r\n\r\n**To Reproduce**\r\nTo reproduce try the example in this repl: https://svelte.dev/repl/7163b83de9b74b7b9d2a84560b73f6bd?version=3.36.0\r\n- Click on filter and you can see the overflow is still there and if you ispect the list container, you can see the previos data in there.\r\n\r\n**Expected behavior**\r\nThe items should disappear from the dom also and should not take up the space.\r\n\r\n\r\n\r\n- Your browser and the version: Firefox, Edge, Chrome\r\n- Your operating system: Windows, Debian\r\n- Svelte version: 3.36.0\r\n- Rollup\r\n\r\n**Severity**\r\nSomewhat annoying when trying to filter an array of products and want to do it with a smooth animation.\r\n",
    "closedAt": null,
    "createdAt": "2021-03-30T11:01:54Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDI1MjQwNg==",
          "body": "I can confirm this bug. Tested a bit around and this happens when you modify during transition. See also #6152 ",
          "createdAt": "2021-04-06T16:20:23Z",
          "author": { "login": "Kapsonfire-DE", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MTg3MTYzOA==",
          "body": "I also can confirm this bug.  It's actually layout-breaking because the \"empty\" leftover nodes are still getting counted as child elements in my grid layout.  You can also repeat this infinitely to get many more leftover nodes if you can trigger the unmount/destroy before the transition finishes.",
          "createdAt": "2021-06-01T06:52:36Z",
          "author": { "login": "jrmoynihan", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDM3MTUwMDc=",
    "body": "**Describe the bug**\r\nI have a component which accepts an array prop. This component has a variable which is reactively updated with the latest array length value.\r\n```\r\n$: new_size = field.length;\r\n```\r\nAlso this variable is bound to the input via bind:value.\r\nEach time user is editing input, this invalidates variable *new_size* and *field* (which is component prop and is not updated at all). This leads to incorrect re-render and re-calculation (there are other variables which reactively depends on this prop, and they are updated even if prop actually wasn't changed)\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a6c7188aeb544a2d8ded0f9b53deb2ce?version=3.35.0\r\n\r\n**Expected behavior**\r\nDo not trigger reactive statements when there is no actual prop change.\r\n\r\n**Additional context**\r\nIn the provided example there is Options button which shows input for 'changing' array (*field* property) size.\r\nOptions component has *isOpen* variable which is set to false each time *field* changes (to hide options section).\r\nBut trying to edit input makes section to disappear because bind:value generates code to invalidate *new_size* variable and prop *field* (which wasn't changed), and it triggers the statement to set isOpen to false.\r\nThe code:\r\n```\r\nfunction input_input_handler() {\r\n\t\tnew_size = this.value;\r\n\t\t($$invalidate(1, new_size), $$invalidate(3, field));\r\n\t}\r\n```\r\n\r\nInteresting that if I combine App and Options into the single component, there is no such situation. So it is somehow related to the fact that *field* is prop.\r\n\r\nAlso, changing from\r\n```\r\n<input bind:value={new_size} />\r\n```\r\nto\r\n```\r\n<input value={new_size} on:input={e => new_size = e.target.value} />\r\n```\r\ndoesn't have such troubles.",
    "closedAt": null,
    "createdAt": "2021-03-29T19:19:00Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzQzMzcyNQ==",
          "body": "I won't claim to fully understand the compiler behavior, but in your reproduction, the erroneous behavior is solved by adding `<svelte:options immutable={true}/>` to the options component. This leads me to believe that the behavior in question has to do with how the compiler is checking for a changed value [detailed here](https://svelte.dev/docs#svelte_compile). This will still update the value when the fields prop is changed, but editing new_size in the input won't change anything outside of the component scope.\r\n",
          "createdAt": "2021-04-12T02:18:23Z",
          "author": { "login": "JEbertPrime", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTg1NTMwNw==",
          "body": "It solves, but still it is not obvious how exactly and what happened.\r\n\r\nAccording to the docs, immutable means \"If true, tells the compiler that you promise not to mutate any objects\". \r\nI dont't mutate any object inside options component, and I don't mutate *field* array at all (even in the App component I reassign it to a new array). So it is not obvious how this option relates to the issue.\r\n\r\nWhen setting immutable to true, the only difference is that it uses **not_equal** instead of **safe_not_equal**. But I still think that the problem is in this part of the generated code:\r\n```\r\nfunction input_input_handler() {\r\n\t\tnew_size = this.value;\r\n\t\t($$invalidate(1, new_size), $$invalidate(3, field));\r\n\t}\r\n```\r\nAs I understood, it tells to refresh/invalidate *field* property when changing input value via bind:value. And that is the problem because the whole component doesn't even write this property (only reads).\r\n\r\nIf this belongs to an immutable option, could you update the docs with a more detailed explanation for a better understanding.\r\n",
          "createdAt": "2021-04-17T17:09:41Z",
          "author": { "login": "nikolay-lesko", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDM0OTI4NDQ=",
    "body": "**Describe the bug**\r\nI noticed why trying some new development with Svelte, that using `bind:value` on an input element does not appear to have the intended effect.  Basically, the value is not getting updated in view.\r\n\r\nI am using `3.35.0`.  Testing further, even the tutorial from <https://svelte.dev/tutorial/text-inputs> is not working.  I've tried the following browsers:\r\n\r\n* macbook pro Big Sur: latest Chrome, Firefox, Safari\r\n* iPhone X with latest updates and OS: Safari\r\n\r\n**Logs**\r\nNo observed errors in the console.\r\n\r\n**To Reproduce**\r\n\r\n1. Browse to <https://svelte.dev/tutorial/text-inputs> on macos or iOS device\r\n\r\nPossibly, this is somehow limited to my device and/or versions??\r\n\r\n**Expected behavior**\r\n\"Hello...\" text should change as text in input control changes and is not.\r\n\r\n**Stacktraces**\r\nn/a - no errors are occurring\r\n\r\n**Information about your Svelte project:**\r\n\r\n\r\n  System:\r\n    OS: macOS 11.2.3\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\r\n    Memory: 2.58 GB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 15.12.0 - ~/.nvm/versions/node/v15.12.0/bin/node\r\n    Yarn: 1.22.10 - ~/.nvm/versions/node/v15.12.0/bin/yarn\r\n    npm: 7.6.3 - ~/.nvm/versions/node/v15.12.0/bin/npm\r\n  Browsers:\r\n    Chrome: 89.0.4389.90\r\n    Firefox: 87.0\r\n    Safari: 14.0.3\r\n  npmPackages:\r\n    svelte: ^3.35.0 => 3.35.0 \r\n\r\n**Severity**\r\num..  High?\r\n\r\nCurrently, I cannot use Svelte.\r\n\r\n**Additional context**\r\nN/A\r\n",
    "closedAt": "2021-03-29T22:07:06Z",
    "createdAt": "2021-03-29T15:35:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwOTQ4ODU0NA==",
          "body": "The text input binding tutorial works for me on iOS 14.4. You may need to click the \"show me\" button -- each tutorial section starts in an unsolved state and expects you to modify the code to get it to work.\r\n\r\nCan you share a [REPL](https://svelte.dev/repl/) that reproduces the issue you're running into?",
          "createdAt": "2021-03-29T15:46:27Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwOTQ5MzE4MA==",
          "body": "Yes, dammit.  That was my issue with the tutorial. Let me dig into my app some more. I’m assuming I’m doing something equally stupid there.",
          "createdAt": "2021-03-29T15:52:41Z",
          "author": { "login": "krcourville", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwOTc0NDk0MA==",
          "body": "As far as my original issue, I figured out that the template I used had put `context=\"module\"` into the script tag.\r\n\r\nSorry, I lost my mind a little bit this morning.",
          "createdAt": "2021-03-29T22:07:06Z",
          "author": { "login": "krcourville", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI4MjY2NTE=",
    "body": "I'm copy pasting parts of [the issue](https://github.com/facebook/jest/issues/11194) I submitted on the jest repo, and on the [svelte-jester](https://github.com/mihar-22/svelte-jester/issues/31). But I'm not sure `svelte-jester` is at fault, it seems the error occurs when `svelte-jester` uses `svelte/compiler` to compile components to `cjs`. Help and guidance are appreciated.\r\n\r\n## 🐛 Bug Report\r\n\r\nWhen I'm testing a svelte component that uses [svelte-spa-router](https://github.com/ItalyPaleAle/svelte-spa-router) route:\r\n```ts\r\nimport { waitFor, render } from '@testing-library/svelte';\r\nimport App from './App.svelte';\r\n\r\nit('Should render home', async () => {\r\n    const { container, getByText } = render(App);\r\n    \r\n    await waitFor(() => expect(container.querySelector('h1').textContent).toEqual('Bug'));\r\n})\r\n```\r\nAnd I have added the `transformIgnorePatterns` to `jest.config.js`:\r\n\r\n```js\r\ntransformIgnorePatterns: [\r\n        'node_modules/(?!(.*(svelte-spa-router|regexparam))/)',\r\n]\r\n```\r\nI get this error:\r\n\r\n```\r\nTypeError: regexparam is not a function\r\n```\r\nApparently `svelte-spa-router` imports  [regexparam](https://github.com/lukeed/regexparam).\r\n\r\nI found [this workaround](https://github.com/mihar-22/svelte-jester/issues/7#issuecomment-657389663) that fixes the problem by adding `moduleNameMapper`, but it feels wrong:\r\n```js\r\nmoduleNameMapper: {\r\n    \"^regexparam$\": \"<rootDir>/node_modules/regexparam/dist/regexparam.mjs\"\r\n}\r\n```\r\n\r\nWhich in the case of using `pnpm`, the path will be:\r\n```\r\n\"<rootDir>/node_modules/.pnpm/regexparam@1.3.0/node_modules/regexparam/dist/regexparam.mjs\"\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n\r\n- Setup an svelte app\r\n- Add the config files\r\n- Use svelte-spa-router to create routes\r\n- Test the component containing the route created in previous step\r\n- Run the tests with `npm run test`\r\n\r\n## Expected behavior\r\n\r\nI expect the test to just work, without needing any workarounds.\r\n\r\n## Link to repl or repo (highly encouraged)\r\n\r\nhttps://github.com/CIAvash/jest-bug\r\n\r\nDo:\r\n- `npm install`\r\n- `npm run test`\r\n\r\n**Stacktraces**\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n```\r\n  TypeError: regexparam is not a function\r\n\r\n      12 |     <Router {routes} />\r\n      13 | </main>\r\n\r\n      at new RouteItem (node_modules/svelte-spa-router/Router.svelte:272:33)\r\n          at Array.forEach (<anonymous>)\r\n      at create_fragment (src/App.svelte:14:11)\r\n      at new App (src/App.svelte:77:3)\r\n      at Object.<anonymous> (src/App.test.ts:5:38)\r\n```\r\n\r\nIn my actual project in which I use `pnpm`, the stack trace is this:\r\n```\r\n at new RouteItem (node_modules/.pnpm/svelte-spa-router@3.1.0/node_modules/svelte-spa-router/Router.svelte:272:33)\r\n      at node_modules/.pnpm/svelte-spa-router@3.1.0/node_modules/svelte-spa-router/Router.svelte:390:24\r\n          at Array.forEach (<anonymous>)\r\n      at instance (node_modules/.pnpm/svelte-spa-router@3.1.0/node_modules/svelte-spa-router/Router.svelte:389:25)\r\n      at init (node_modules/.pnpm/svelte@3.35.0/node_modules/svelte/internal/index.js:1477:11)\r\n      at new Router (node_modules/.pnpm/svelte-spa-router@3.1.0/node_modules/svelte-spa-router/Router.svelte:837:3)\r\n      at create_fragment (src/App.svelte:30:11)\r\n      at init (node_modules/.pnpm/svelte@3.35.0/node_modules/svelte/internal/index.js:1492:37)\r\n      at new App (src/App.svelte:123:3)\r\n      at Object.render (node_modules/.pnpm/@testing-library/svelte@3.0.3_svelte@3.35.0/node_modules/@testing-library/svelte/dist/pure.js:81:21)\r\n```\r\n\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n```\r\n  System:\r\n    OS: Linux 5.11 Arch Linux\r\n    CPU: (2) x64 Intel(R) Core(TM)2 Duo CPU     E8400  @ 3.00GHz\r\n    Memory: 1.62 GB / 7.77 GB\r\n    Container: Yes\r\n    Shell: 3.2.1 - /usr/bin/fish\r\n  Binaries:\r\n    Node: 15.12.0 - /usr/bin/node\r\n    npm: 7.7.3 - /usr/bin/npm\r\n  Browsers:\r\n    Firefox: 87.0\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.41.2\r\n    svelte: ^3.0.0 => 3.35.0\r\n```\r\n\r\n**Severity**\r\nannoying\r\n",
    "closedAt": null,
    "createdAt": "2021-03-28T20:42:26Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODk1NzA4NA==",
          "body": "`svelte/compiler` only produces ESM output. If you're getting CJS, it's coming from something else.\r\n\r\nIf you find a case where the compiler itself is producing incorrect output, we can reopen this, but the Svelte maintainers don't have the bandwidth to help you track down the issue among the several moving parts here, most of which are not written by us or under our control.",
          "createdAt": "2021-03-28T20:48:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODk1ODA5OA==",
          "body": "Maybe I'm mistaken, but isn't [this](https://github.com/mihar-22/svelte-jester/blob/71da8ccd914d2a2719e0aaf4227987c9184b97aa/src/transformer.js#L28-L36) using `svelte/compiler`?",
          "createdAt": "2021-03-28T20:56:50Z",
          "author": { "login": "CIAvash", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODk1ODEwMQ==",
          "body": "> `svelte/compiler` only produces ESM output. If you're getting CJS, it's coming from something else.\r\n\r\nSorry, that's now true. I went crazy apparently.\r\n\r\nIt would still really help if you could reduce the number of moving pieces here. What's wrong with the CJS output? How do you know it's not an issue with Jest or the Jest-Svelte plugin or that router?",
          "createdAt": "2021-03-28T20:56:51Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODk1OTY4NQ==",
          "body": "Well, I opened an issue on the jest repo and [they said](https://github.com/facebook/jest/issues/11194#issuecomment-798897988) it is not a jest bug, but the bug is in svelte-jester or somewhere in the transpilation pipeline.\r\n\r\nI'm not sure if it is svelte-jester's bug or not, but it seems it's not doing much except compiling components to `cjs` using `svelte/compiler` and adding an `esInterop`.\r\n\r\nAnd the router is just importing the `regexparam` module:\r\n```js\r\nimport regexparam from 'regexparam'\r\n```\r\n\r\nEverything works when I run the app, the error only occurs when testing.",
          "createdAt": "2021-03-28T21:08:41Z",
          "author": { "login": "CIAvash", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwOTExMDgwOA==",
          "body": "The comment I mentioned (from the jest repo) also said that `import regexparam from 'regexparam'` is being converted to `const { default: regexparam } = require(\"regexparam\")`. Is that something `svelte/compiler` should handle?\r\n\r\n> This is a bug in svelte-jester (or something else in the transpilation pipeline). It converts https://www.runpkg.com/?svelte-spa-router@3.1.0/Router.svelte#219 into const { default: regexparam } = require(\"regexparam\") which only works for transpiled ESM and not the one resolved for node which is has a normal module.exports = thing. It needs to use some sort of interopRequire thing, like babel adds: https://github.com/babel/babel/blob/e498bee10f0123bb208baa228ce6417542a2c3c4/packages/babel-helpers/src/helpers.js#L558-L562",
          "createdAt": "2021-03-29T06:36:04Z",
          "author": { "login": "CIAvash", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI3NjkwNDk=",
    "body": "**Describe the bug**\r\nWhen destructuring the variables from a function that returns a store, the `validate_store` will fails. https://github.com/sveltejs/svelte/blob/93313982991320c7bf2d65a037565b275addbea8/src/runtime/internal/utils.ts#L52 will fail in the second condition since `store` is that at that moment the function that will return the store. \r\n\r\n**Logs**\r\n*Browser* \r\n```\r\nUncaught Error: 'createStore' is not a store with a 'subscribe' method\r\n    at validate_store (index.mjs:40)\r\n    at instance (App.svelte:4)\r\n    at init (index.mjs:1474)\r\n    at new App (App.svelte:7)\r\n    at main.js:3\r\n    at main.js:8\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a602f67808bb472296459df76af77464?version=3.35.0\r\n\r\n**Expected behavior**\r\nThat `$` would evaluate the returned store of the function. At the moment the function is considered to be the `store` in `validate_store`.\r\n\r\n**Stacktraces**\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\nUncaught Error: 'createStore' is not a store with a 'subscribe' method\r\n    at validate_store (index.mjs:40)\r\n    at instance (App.svelte:4)\r\n    at init (index.mjs:1474)\r\n    at new App (App.svelte:7)\r\n    at main.js:3\r\n    at main.js:8\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n```\r\nSystem:\r\n    OS: Windows 10 10.0.19042\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz\r\n    Memory: 1023.55 MB / 7.73 GB\r\n  Binaries:\r\n    Node: 14.15.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.5 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 6.14.8 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 89.0.4389.82\r\n    Edge: Spartan (44.19041.423.0), Chromium (89.0.774.63)\r\n    Internet Explorer: 11.0.19041.1\r\n```\r\n- Svelte `3.35.0`\r\n\r\n- Rollup \r\n\r\n**Severity**\r\nNot blocking, the current way of solving this is a bit of a detour.\r\n\r\n**Additional context**\r\nIn the REPL there is a way how to \"solve\" this, but it requires an extra step. Could resolve in a lesser dev experience (because of the exra step). I've mentioned this issue in the Svelte discord channel, but haven't had any luck yet.\r\n",
    "closedAt": "2021-03-28T18:10:49Z",
    "createdAt": "2021-03-28T16:03:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODkzNDk2MA==",
          "body": "This isn't a bug, this is the feature working as advertised. Adding a `$` prefix to get the store value only works on top-level variables. The feature you suggest is a bad idea, because it wouldn't be at all clear when the `createStore(1)` part should or shouldn't be re-evaluated.\r\n\r\nThis would also be a breaking change, because `$createStore(1)` is already interpreted as `($createStore)(1)` and you're asking for it to be interpreted as `$(createStore(1))`.",
          "createdAt": "2021-03-28T18:10:49Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI3MjU2NzQ=",
    "body": "Hi,\r\n\r\nIve got this error:\r\n`Uncaught (in promise) TypeError: Cannot read property 'm' of null\r\n    at Object.mount [as m] (listElement.svelte:31)\r\n    at mount_component (index.mjs:1412)\r\n    at Object.mount [as m] (countryList.svelte:25)\r\n    at insert (index.mjs:1168)\r\n    at update_keyed_each (index.mjs:1210)\r\n    at Object.update [as p] (countryList.svelte:23)\r\n    at update_slot (index.mjs:91)\r\n    at Object.update [as p] (List.svelte:26)\r\n    at update (index.mjs:764)\r\n    at flush (index.mjs:732)`\r\n\r\nIt appears when I'm trying to add or remove stuff from an array.\r\nI'm trying to simulate user activity by modifying an array with an interval of five seconds. Every iteration an entry in the array is modified, like a user would have done this in the background. I'cant really trace it down to any specific circumstance, all I know it happens when the underlying array is modified. If you need any further information, let me know. Thanks for you time :)",
    "closedAt": null,
    "createdAt": "2021-03-28T12:13:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODkzNTUxMA==",
          "body": "With only a compiled deployed version somewhere, and without the source of your app, there's nothing that anybody can do.",
          "createdAt": "2021-03-28T18:13:59Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODkzOTA5MA==",
          "body": "It's uploaded with the source maps so the code which produces the error can be viewed. I can't reproduce the error in REPL. Mostly because I don't know it's cause and what to include. Would the source code help?",
          "createdAt": "2021-03-28T18:34:34Z",
          "author": { "login": "m1212e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwOTI3MzcyOQ==",
          "body": "So I FINALLY tracked it down with simply commenting out code snippets each at a time. I still have no idea why, but this was the cause of the svelte internal error which was thrown:\r\n`             {#if index < element.petitions.length - 1}\r\n                <Divider />\r\n            {/if}`\r\n\r\nThe complete component for reference: [Pastebin](https://pastebin.com/gXDg3qHk)\r\nThere were no undefined or null errors, all checks were perfectly valid and gave the correct results on logging.\r\nNo Idea why this happened.\r\nThanks for anyone who took the time :)",
          "createdAt": "2021-03-29T10:36:51Z",
          "author": { "login": "m1212e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMTExMTg5OA==",
          "body": "As it seems it's a svelte error or I made a mistake which I'm unable to identify. @Florian-Schoenherr  managed to reproduce the error in a REPL so you can take a look easyily: https://svelte.dev/repl/837a844775ec43c98dc769de0d95ed07?version=3.36.0 which is originated in this https://github.com/TheComputerM/svelte-materialify/issues/199 issue.",
          "createdAt": "2021-03-31T14:27:41Z",
          "author": { "login": "m1212e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMTExODI4Mg==",
          "body": "@m1212e *This guy managed",
          "createdAt": "2021-03-31T14:36:00Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMTExOTc2Mw==",
          "body": "@Florian-Schoenherr Sorry, didn't mean to forget you xD I edited my comment without proof reading it correctly. Surely the credit belongs to you.",
          "createdAt": "2021-03-31T14:38:04Z",
          "author": { "login": "m1212e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMTEyMjg2NA==",
          "body": "I updated the REPL again, it seems to be some modification error. I set the Interval really low to see the error faster.",
          "createdAt": "2021-03-31T14:42:25Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI2NzIyOTI=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\n**Describe the bug**\r\nAction is called earlier than bind:this.\r\n\r\n**Logs**\r\n\r\n\r\n**To Reproduce**\r\n[Repl](https://svelte.dev/repl/a7f9e3b2d73c49a091d8c7dee2b1ef54?version=3.35.0)\r\n\r\nConsole output: el is undefined\r\n\r\n**Expected behavior**\r\nel is div element\r\n\r\n**Stacktraces**\r\n**Information about your Svelte project:**\r\n**Severity**\r\n\r\n\r\n**Additional context**\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-03-28T06:09:47Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI2MDM0ODc=",
    "body": "**Describe the bug**\r\nSvelte compiles `className` instead of `[className]: className` here: https://svelte.dev/repl/79b421c90b3842fea5a9fbeba5cd747d?version=3.35.0.\r\n\r\n**Severity**\r\nIt's a ~serious~ bug.\r\n\r\n**Additional context**\r\n@lukeed found it here: https://github.com/lukeed/obj-str/issues/12\r\n",
    "closedAt": null,
    "createdAt": "2021-03-27T21:15:29Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODgwNDc4OQ==",
          "body": "It's not a serious bug, but it is a bug.\r\n\r\n```js\r\n// Input:\r\nfoo({\r\n  [className]: className\r\n});\r\n\r\n// Output:\r\n// (REPL snippet)\r\n$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty & /*className*/ 2) {\r\n\t\t\t$: $$invalidate(0, klass = objstr({ \"default\": true, className }));\r\n\t\t}\r\n\t};\r\n```\r\n\r\nCompiler produces object with key named `className` rather than its value as the (dynamic) key name.",
          "createdAt": "2021-03-27T21:26:59Z",
          "author": { "login": "lukeed", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODgwNTA5MQ==",
          "body": "By the way, there is nothing special about it being `className`. This happens with `x`, `y`, -- anything.\r\n",
          "createdAt": "2021-03-27T21:29:57Z",
          "author": { "login": "babichjacob", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODgwNTg1OA==",
          "body": "Yup, definitely 👍  Just the key name that came about from other issue.",
          "createdAt": "2021-03-27T21:36:15Z",
          "author": { "login": "lukeed", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODgwNzgyMg==",
          "body": "This might be a bug in code-red rather than in the Svelte compiler's codebase itself. I haven't looked into this yet.",
          "createdAt": "2021-03-27T21:54:59Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTg5NTE4Ng==",
          "body": "I think it *is* a bug in code-red: https://svelte.dev/repl/8c37c1f52e1944c9a637b1d676507494?version=3.37.0. \r\n\r\nAfter exploring on AST Explorer it seems like if either the key or value is a variable, then the `name` value of either will be the variable as a string. So even if you had:\r\n```javascript\r\nlet foo = \"bar\"\r\n\r\nlet obj = {\r\n  [foo]: foo\r\n}\r\n```\r\nThe AST will have `key.name === \"foo\"` and `value.name === \"foo\"`.\r\n\r\nSo I think [here](https://github.com/Rich-Harris/code-red/blob/3b32d2ef5bd954cb85a0d005f3a328bae57c6a97/src/print/handlers.ts#L1052) when it checks to see if `node.key.name === value[0].content /*value.name*/` it returns true because acorn says it is.\r\n\r\n(After writing all this I realized it might be silly to test for a bug in a compiler using that same compiler to display stuff, but I don't think any of the imported code-red output actually goes through Svelte's code-red).",
          "createdAt": "2021-04-17T22:16:19Z",
          "author": { "login": "kindoflew", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyODgyNzg3OQ==",
          "body": "Reopening until we actually bump code-red in this repo.",
          "createdAt": "2021-04-28T22:40:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI1NjI1ODg=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n`\r\nconst dispatch = createEventDispatcher();\r\nfunction handleClose() {\r\n    // dispatch event to parent\r\n    // and ask can i close self\r\n    dispatch(\"close\", (ok) => {\r\n        if (ok) {\r\n          close = false\r\n       }\r\n    }) \r\n}\r\n`\r\n\r\n**Describe the solution you'd like**\r\nin parent component, use \"event.returnValue\" to reply the dispath event\r\n",
    "closedAt": "2021-03-27T17:28:59Z",
    "createdAt": "2021-03-27T17:26:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODc2NjIzMg==",
          "body": "I don't know what this is asking. GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-03-27T17:28:59Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI1NjA0MjE=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIn Drawer.svelte,  I use \r\n`\r\nimport Button from \"./Button.svelte\"\r\n...\r\n<div class=\"footer\">\r\n<Button class=\"footer-button\">cancel</Button>\r\n<Button class=\"footer-button\" type=\"primary\">confirm</Button>\r\n</div>\r\n`\r\nbut in style, warning unused class selector  ”.footer-button“， why?\r\nIs there a way to set the class of child component\r\n\r\n**Describe the solution you'd like**\r\nsupport set class for child component \r\n",
    "closedAt": "2021-03-27T17:19:36Z",
    "createdAt": "2021-03-27T17:15:46Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODc2NDg4MA==",
          "body": "Setting a `class` on a component just sends that as a prop - there's no special handling, and it doesn't count as an element using that class.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-03-27T17:19:36Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODc2NDg4Mg==",
          "body": "This issue has been raised a huge number of times before. Styles in Svelte are scoped. You can use `:global` to style child components. For support with this please [see discord](https://svelte.dev/chat).\r\n\r\nFor a formalised RFC around a possible solution for styling child components please see https://github.com/sveltejs/rfcs/blob/master/text/0000-style-properties.md",
          "createdAt": "2021-03-27T17:19:36Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI0NzM1ODE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nTo make events like on:click not programmatical callable, I wish the events to check if the event isTrusted. Problem is, i have to check it in each function. \r\n\r\n**Describe the solution you'd like**\r\nA eventModifier like |once or |passive - call it trusted\r\n`<button on:click|trusted={() => console.log('Trusted event'); }></button>`\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-03-27T10:26:21Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI0MDkxOTI=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\n**Describe the bug**\r\nWhen updating a variable via event value from on:input, and then 1-way binding the value of the <input/> element to the variable, it would be expected that when the variable updates, so does the input value.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nREPL link: https://svelte.dev/repl/6ea9d09354874ab79685d1131f7d7d77?version=3.35.0\r\n\r\n**Expected behavior**\r\nThe input updates when the variable bound to value changes\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\nGoogle Chrome | 89.0.4389.90 (Official Build) (64-bit) (cohort: Stable)\r\n-- | --\r\nRevision | 62eb262cdaae9ef819aadd778193781455ec7a49-refs/branch-heads/4389@{#1534}\r\nOS | Windows 10 OS Version 2004 (Build 19041.867)\r\nJavaScript | V8 8.9.255.20\r\n\r\n\r\n\r\n**Severity:**\r\nSevere? I would really expect this to just work. I'd like to have an input with custom validation, and two-way binding causes unnecessary updates, because reacting to the two-way bound variable will always result in two updates (one from raw input update, the next via validation and reassignment to the variable)\r\n\r\n**Raw code:**\r\n\r\n```javascript\r\n<script>\r\n\tlet inputValue = 0;\r\n\tlet previousSafeValue = 0;\r\n\t\r\n\tconst onUpdate = (event) => {\r\n\t\tconst rawInput = event.target.value;\r\n\t\tif (isNaN(+rawInput)) {\r\n\t\t\tinputValue = previousSafeValue;\r\n\t\t} else {\r\n\t\t        // >>bug<< This does NOT update the input \r\n\t\t\tinputValue = previousSafeValue = Number(rawInput);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<input value={inputValue} on:input={onUpdate}/>\r\n```\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-03-27T03:57:32Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODY2OTAxMQ==",
          "body": "I debugged that the reason the update is skipped, is because `previousSafeValue` will always be 0 when typing characters, so the assignment to `inputValue` always becomes 0=0.\r\n\r\nHowever, then it seems that there is a lack of synchronization between the fact that the actual input value may be \"0awaw\", and the variable `inputValue` will be 0. Since the input `value` prop is 1-way binded to `inputValue` I would still expect them to be synchronized.\r\n\r\nThe above example can be resolved with something like: https://svelte.dev/repl/4afa6bc5639546d2a7026aceb5d4baa7?version=3.35.0\r\n\r\n\r\n```javascript\r\n<script lang=\"typescript\">\r\n  let bindedInputValue = 0;\r\n  let previousBlockSize = 0;\r\n\r\n  $: {\r\n    if (!isNaN(+bindedInputValue)) {\r\n      bindedInputValue = previousBlockSize = +bindedInputValue;\r\n    } else {\r\n      bindedInputValue = previousBlockSize;\r\n    }\r\n  }\r\n</script>\r\n\r\n <input bind:value={bindedInputValue} />\r\n```\r\n\r\nHowever, it's a little messy having to create an extra variable to two-way bind to the input explicitly, when 1-way should be synced as I described.",
          "createdAt": "2021-03-27T06:26:47Z",
          "author": { "login": "jajabarr", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDIzNTc4OTk=",
    "body": "**Describe the bug**\r\n```\r\n<style>\r\nh1 {\r\n    @apply foo:bar;\r\n}\r\n</style>\r\n```\r\nColons in `@apply` CSS rules aren't supported, a \"semicolon or block is expected\" error is thrown.\r\n\r\n**To Reproduce**\r\nPaste the above into https://svelte.dev/repl/hello-world\r\n\r\n**Expected behavior**\r\nStrings with colons should be supported, as they are part of the spec and used regularly in the wild (eg, Tailwind).\r\n\r\n**Severity**\r\nI'm new to Svelte and this feels painful and unexpected. Not a dealbreaker as the classes can usually be applied directly to the HTML element.\r\n",
    "closedAt": "2021-03-26T23:40:47Z",
    "createdAt": "2021-03-26T23:33:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODU5MDM0NQ==",
          "body": "I'm not sure why you'd want to use `@apply`. It was an old proposed syntax that is basically unsupported by any browser. https://caniuse.com/?search=%40apply\r\n\r\nUnless I'm missing something, it's unlikely we'd want to support this.\r\n\r\nIf you want the support for this which can be provided by a css preprocessor, then take a look at [svelte-preprocess](https://github.com/sveltejs/svelte-preprocess)",
          "createdAt": "2021-03-26T23:40:47Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODYwMDYwOQ==",
          "body": "The issue is downstream - linting `.svelte` and preprocessing don't play well together. Specifically, https://github.com/sveltejs/eslint-plugin-svelte3 can't lint CSS after pre-processing, and `@apply` is commonly used in the PostCSS ecosystem, including the popular Tailwind framework. \r\n\r\n`@apply` may no longer be part of the spec, but there are lots of other `@` rules in CSS, and colons are probably in the allowed character set for some of them.",
          "createdAt": "2021-03-27T00:15:59Z",
          "author": { "login": "pikeas", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDIzMzQ1MTI=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nDocumentation does not make it clear how to implement our own custom functions with functionality similar to the crossfade transition.  I had to examine the source code to get a clear idea of how it worked.\r\n\r\n**Describe the solution you'd like**\r\nThe crossfade function can be easily broken out to two functions: one utility function for orchestrating the pairing of outgoing/incoming element and the actual crossfade.  If that utility function was exported and documented, it would considerably reduce the barrier to writing custom crossfade like interactions.\r\n\r\nPractical example, since that is far easier to explain than the general case:\r\nhttps://svelte.dev/repl/64e6b0c360bf4cb29704cca6b76f0f30?version=3.35.0\r\n\r\nIn the above REPL, the proposed utility function is located in `util.js`.  It accepts a single function, which is expected to return void or a transition object.  That function is passed the params:\r\n* from - HTMLElement transitioning out\r\n* to - HTMLElement transitioning in\r\n* intro - Boolean.  True if this is transitioning in, false otherwise\r\n* params - Object.  Parameters passed from the transition call in the template\r\n\r\nIn the above REPL, `crossfade.js` contains Svelte's existing crossfade animation, modified to use this utility, to verify that this does not introduce any breaking changes.  `cross-slide.js` shows a similar type of animation, using the same utility.\r\n\r\n🐃: `from` and `to` are simple and straight forward to teach.  I have had to flip them based on `intro` in every single use so far, however.\r\n\r\n**How important is this feature to you?**\r\nTrivial.  This proposal simply makes learning a feature a little easier, but that could be covered by blog posts, tutorials, etc.",
    "closedAt": null,
    "createdAt": "2021-03-26T22:26:42Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDI0MTU5MTE=",
    "body": "**Describe the bug**\r\nText is moving up down\r\n\r\n\r\n**To Reproduce**\r\n[Repo](https://github.com/asv1/svelte_bug)\r\n\r\n**Expected behavior**\r\nText must not moving.\r\n\r\n**Information about your SvelteKit Installation:**\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of SvelteKit entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": null,
    "createdAt": "2021-03-26T20:05:03Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODY1MTM4Mw==",
          "body": "before \r\n![Screenshot from 2021-03-26 21-26-39](https://user-images.githubusercontent.com/322311/112710012-42eecd00-8e7b-11eb-88b3-4a68571c9922.png)\r\n\r\nafter\r\n![Screenshot from 2021-03-26 21-26-40](https://user-images.githubusercontent.com/322311/112710013-42eecd00-8e7b-11eb-8d59-8d2efcb5ded4.png)\r\n\r\nYou can fix this by putting `{text1}` and `{text2}` on the same line. If you change `{text1}` to `text1` the text stops moving as well. I think that SSR and CSR render the text nodes slightly differently. This will be easier to investigate once SvelteKit has the ability to variously toggle CSR vs SSR",
          "createdAt": "2021-03-27T04:43:31Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODY2NTQxMg==",
          "body": "@benmccann \r\nIf replace text nodes to:\r\n```\r\n<div>{text1}</div>\r\n<div>{text2}</div>\r\n```\r\ntext moving too. I think it not related to text nodes only.\r\n\r\nLooks like break new lines are removed after ssr.",
          "createdAt": "2021-03-27T06:03:26Z",
          "author": { "login": "asv7c2", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODg4MTE4Ng==",
          "body": "@benmccann \r\nMaybe just disable ssr during dev?",
          "createdAt": "2021-03-28T11:06:57Z",
          "author": { "login": "asv7c2", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDE4MzU1NjA=",
    "body": "When I inspect under source in Google Chrome/Firefox I can clearly see every file for that particular page under `src` including every dependant component folder and dependencies in `node_modules`. I'll share my production details so that you can recreate the same.\r\n\r\nI'm deploying my svelte SPA in AWS Amplify, a simple deployment where every change in the `main` branch in Github will start a deployment. I'm using the following as build settings and have `NODE_ENV=production` as an environment variable.\r\n\r\n```yml\r\nversion: 1\r\nfrontend:\r\n  phases:\r\n    preBuild:\r\n      commands:\r\n        - npm i\r\n    build:\r\n      commands:\r\n        - npm run build\r\n  artifacts:\r\n    baseDirectory: public\r\n    files:\r\n      - '**/*'\r\n  cache:\r\n    paths:\r\n      - node_modules/**/*\r\n```\r\n\r\n**Expected behavior**\r\nNone of the commented details of src folder should be shown in production and also none of the files from src should be shown other than the compiled ones.\r\n\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\n- Your browser and the version: Chrome / Firefox\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version : 3.32.3\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nI can't release this website in public with all my raw src files exposed. I'm hoping to see only compiled versions for my web app.\r\n",
    "closedAt": "2021-03-26T11:58:26Z",
    "createdAt": "2021-03-26T11:09:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODE2MDA5Mg==",
          "body": "Disable sourcemaps in your Rollup config if you don't want this, or just don't deploy the sourcemap files to production.",
          "createdAt": "2021-03-26T11:58:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDEyMzQ1MTQ=",
    "body": "\r\n**Describe the bug**\r\n`<textarea bind:clientWidth>` doesn't update `clientWidth` when textarea is resized by user.\r\n\r\n**To Reproduce**\r\n[repl example](https://svelte.dev/repl/d5b39103f00b4176a5bf4eaad0d5e9f2?version=3.35.0)\r\n\r\n**Expected behavior**\r\nOn user resize of textarea, I expected the bound value to update. Instead, the values stay stuck at the initial size.\r\n\r\n**Severity**\r\nLow. This is easy to work around, it would just be cleaner if this worked. Or in the alternative, if the documentation made it clear this wouldn't work.\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-03-25T19:17:34Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNzMxODkzOA==",
          "body": "Initial state is correct:\r\n![image](https://user-images.githubusercontent.com/61658/112530905-30ce3b00-8d64-11eb-8faf-52372e66defb.png)\r\nAfter user resize, it is incorrect:\r\n![image](https://user-images.githubusercontent.com/61658/112530942-3b88d000-8d64-11eb-8358-7d3c130378d2.png)\r\n",
          "createdAt": "2021-03-25T19:18:43Z",
          "author": { "login": "colah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNzk5NDc5MA==",
          "body": "These are \"Block-level element bindings\", `textarea` is not a [block-level element](https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements). The current implementation cannot work for `textarea`, see:\r\n\r\nhttps://github.com/sveltejs/svelte/issues/4233\r\nhttps://github.com/sveltejs/svelte/pull/5524\r\n\r\nBut I think there should be a warning in this case.\r\n\r\nAs a workaround wrap the element, but I think you are already aware of that https://svelte.dev/repl/9883af1a955148f0a57ca9caefa59e61?version=3.35.0",
          "createdAt": "2021-03-26T07:13:36Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODAxNTgxNQ==",
          "body": "bind:this={node} > node.clientWidth...",
          "createdAt": "2021-03-26T07:54:01Z",
          "author": { "login": "Valexr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODAyNzM2NA==",
          "body": "> bind:this={node} > node.clientWidth...\r\n\r\n@Valexr maybe I misunderstand your comment, but this is not reactive. You'd have to poll it (e.g. using raf) which can be expensive because the browser might have to do layout every single time you access the `clientWidth` property even though the size rarely changes. That's the reason why solutions like [this](http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/) exist in the first place because polling is (usually) expensive.",
          "createdAt": "2021-03-26T08:15:30Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODIwNjAyNA==",
          "body": "https://svelte.dev/repl/1c7c89b3a80c48708f0f07720fb37a53",
          "createdAt": "2021-03-26T13:15:16Z",
          "author": { "login": "Valexr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODMyODgzOQ==",
          "body": "D'oh, I thought \"block element\" referred to the CSS display property, rather than something else.\r\n\r\nIt would be nice if svelte emitted error messages when a user binds to an element that svelte doesn't support that type of binding to.\r\n",
          "createdAt": "2021-03-26T15:55:21Z",
          "author": { "login": "colah", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4NDExNTAzOTA=",
    "body": "**Describe the bug**\r\nWhen a select dropdown value is bound to a component variable, and this variable doesn't match any of the options in the dropdown, Svelte shows the first option as selected rather than blank. This causes bugs/unexpected behavior when the form is submitted (the submitted value doesn't match what the user sees).\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a7fdeec83c504c00b9706edc679330c6?version=3.35.0\r\n\r\n**Expected behavior**\r\nNo option should be selected when none of the options match the bound value.\r\n\r\nUncomment the two `setTimeout` calls in the above REPL to see the expected behavior.\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Browser: Chromium 89, Firefox 87\r\n- Operating system: Windows 10\r\n- Svelte version: 3.35.0\r\n\r\n**Severity**\r\nI'm currently using Angular and would like to use Svelte instead. For my app it is important that select dropdowns be blank when none of the options match the bound value.",
    "closedAt": null,
    "createdAt": "2021-03-25T17:25:26Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNzk5NzYzMg==",
          "body": ">  No option should be selected when none of the options match the bound value.\r\n\r\n> For my app it is important that select dropdowns be blank when none of the options match the bound value.\r\n\r\nDoes this even work in plain HTML? That's why every `<select>` ever has an option with an empty value that says \"Please select a value...\". I don't think HTML has a concept of not having an option selected. How would that be rendered?\r\n\r\nExample:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\r\n\r\n![Selection_841](https://user-images.githubusercontent.com/679144/112596669-69295400-8e0c-11eb-909a-456231b9e473.png)\r\n\r\nEdit: here's another point to think about: How would a user _undo_ their selection (go back to the no-selected state) without having an explicit empty `<option>`? So even if a `<select>` would by default not show any of the options it would be painful ux if a user could never go back to the state if the selection is optional.",
          "createdAt": "2021-03-26T07:19:11Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODM5NTAxMQ==",
          "body": "@Prinzhorn Thank you for the reply and thoughtful questions.\r\n\r\nFor single select elements in plain HTML, I think you're right that there isn't a concept of not having an option selected. However, in plain HTML there also isn't a concept of binding a select value to an object, `null`, or other non-string value as can be done in Svelte.\r\n\r\nWith a plain HTML form where the page is reloaded on submission, the submitted value always matches that of the selected option. But this expectation is broken in Svelte if an option is shown as selected when it doesn't match the bound value.\r\n\r\n> How would a user undo their selection (go back to the no-selected state) without having an explicit empty `<option>`? So even if a `<select>` would by default not show any of the options it would be painful ux if a user could never go back to the state if the selection is optional.\r\n\r\nFor optional dropdowns, you are correct that an explicit empty option is needed. For such forms it works fine to add a `<option value={null}></option>` element and set the variable bound to the select value back to `null` after the form is submitted. However, this doesn't work for required dropdowns, where the `required` attribute should prevent the form from being submitted if the user hasn't selected an option. Because an option with a value of `{null}` ends up with the string \"null\" in its value property, the browser won't prevent users from submitting the form with that option selected.\r\n\r\nIt seems like the only way I can get close to the expected behavior for required dropdowns is to add `<option value hidden></option>` to every required select element, and then set the bound value to an empty string initially and after the form is submitted. I can't find a way to make it work with `null` as the bound value.\r\n\r\nAdding an extra option element and binding to a blank string seems a bit like a hacky workaround, though. My expectation is that when using a two-way binding Svelte would automatically ensure that an option is only selected if it matches the bound select value.",
          "createdAt": "2021-03-26T17:27:21Z",
          "author": { "login": "theodorejb", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODQxNjU1NA==",
          "body": "I think I misunderstood the original issue and the discussion was missing the point. In HTML there is no `selectedIndex = -1`, you cannot have a \"no-selection\" state with plain HTML. But you can with JavaScript.\r\n\r\nSo to rephrase your feature request: you want `selectedIndex = -1` if none of the `option[value]` matches the `bind:value`. I still think that's odd. Because the state is still inconsistent: your `value` contains something but the select is empty (user doesn't know your state is not empty though)\r\n\r\nHere's what I would do, which matches how basically every select I've ever encountered worked:\r\n\r\nhttps://svelte.dev/repl/1cdd3422d8ef4a6eb12ddf0b25be6e82?version=3.35.0\r\n\r\nEdit: I personally would be very cautions with binding objects and stick to your `id` field. If through some functionality later you update one of the objects to a different one (with the same id) you end up in an inconsistent state. If you have an `id` I personally would always use it and have a `selectedId`. But that depends entirely on your use-case, I just play safe and I hate subtle bugs.\r\n\r\nEdit2: Also regarding the `required` attribute: if you don't play by the rules of HTML (e.g. binding objects) than don't expect HTML features to work. If you go that route you need a custom validation logic.",
          "createdAt": "2021-03-26T18:03:24Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDQwMDQ4MQ==",
          "body": "@Prinzhorn Thank you for the additional perspective.\r\n\r\n> So to rephrase your feature request: you want `selectedIndex = -1` if none of the `option[value]` matches the `bind:value`.\r\n\r\nCorrect. This is how it works in Angular.\r\n\r\n> I still think that's odd. Because the state is still inconsistent: your value contains something but the select is empty (user doesn't know your state is not empty though)\r\n\r\nIf I may push back on this, the state actually would be consistent: no option would be selected since none of them match the `bind:value`. Then if the select input is required, the browser will prevent the form from being submitted in this state with no valid option selected. Currently, the state is more inconsistent since an option appears selected even though its value is different from the `bind:value`.\r\n\r\n> Here's what I would do, which matches how basically every select I've ever encountered worked:\r\n> https://svelte.dev/repl/1cdd3422d8ef4a6eb12ddf0b25be6e82?version=3.35.0\r\n\r\nWhile this approach (manually disabling the submit button when the bound value is `null`) works for extremely simple forms, it breaks down in more complex real-world use cases.\r\n\r\nE.g. in my production app I have a form with six required select dropdowns, along with a few text inputs. The native `required` attribute is all I need for the text inputs, but having to add manual `null` checks for all the select elements adds significant boilerplate for something that I would expect to \"just work\" when the dropdowns have a `required` attribute.\r\n\r\nFurthermore, even if I add all those `null` checks, the user experience is not as good as the native browser required check, since the grayed out submit button doesn't make it clear to the user which field has a problem.\r\n\r\n> If you have an `id` I personally would always use it and have a `selectedId`...Also regarding the `required` attribute: if you don't play by the rules of HTML (e.g. binding objects) than don't expect HTML features to work.\r\n\r\nI have the same issue whether I bind to objects or just IDs. Svelte still shows the first option as selected if the input is bound to `null` or another value that doesn't match one of the options. This inconsistent state leads to unexpected results when a user submits the form, unless a bunch of extra boilerplate code is added to mimic the browser's built in required check.\r\n\r\nI did some experimentation with the Svelte code and it looks like a fix for this issue could be as simple as adding `select.selectedIndex = -1;` on the last line of the `select_option` function in dom.ts (https://github.com/sveltejs/svelte/blob/v3.36.0/src/runtime/internal/dom.ts#L223).",
          "createdAt": "2021-03-30T16:24:41Z",
          "author": { "login": "theodorejb", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDQxMTEyOQ==",
          "body": "> If I may push back on this, the state actually would be consistent: no option would be selected since none of them match the `bind:value`\r\n\r\nMaybe we're having different interpretations of the term \"consistent\". No option is rendered as selected to the user but your `selected` variable contains something. That's what I mean by inconsistent. Currently it renders the first `<option>`, you want `selectedIndex = -1`. In either case it's inconsistent with your application state. The user doesn't see what your variable holds. If you'd do a `fetch` with your state you send something to the server that the user doesn't see.\r\n\r\nTo me personally it's a bug if your value doesn't match any of the options. Like I said to me having a special `<option>` with an empty value is standard practive. I'm not involved with Svelte at all, but I'm definitely against the change you propose. _However_, how about exposing the `selectedIndex` property so you can implemented the behavior you want. This would probably make both of us happy, it's backwards compatible and exposing DOM properties is regular Svelte business.\r\n\r\nSomething like this\r\n\r\n```svelte\r\n<select selectedIndex={questions.indexOf(selected)} on:change={e => selected = questions[e.target.selectedIndex]}>\r\n```\r\n\r\nEdit: on a second thought I'm not against it anymore. I personally always have my selected value in the list of options so your use-case does not apply to me. And having `selectedIndex = -1` makes it slightly more obvious to me that I have a bug. And to you it's a feature, so :+1: . I haven't look at the Svelte source, if you give a PR a try I'll definitely take a look at it.",
          "createdAt": "2021-03-30T16:40:15Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDQzOTIwNw==",
          "body": "You can also use a custom action specific for this task https://svelte.dev/repl/368ce1cecc1b4bb4beb6259c70e0444e?version=3.35.0",
          "createdAt": "2021-03-30T17:22:52Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNDUwODU5Mg==",
          "body": "@Prinzhorn I created PR #6170 to resolve this now. The fix only required adding a single line to Svelte's `select_option` helper function.",
          "createdAt": "2021-04-07T00:03:08Z",
          "author": { "login": "theodorejb", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mzk3NDM4NDA=",
    "body": "_Sorry if this is not the right repo to post this, but I'm a little confused as to where to open it._\r\n\r\n**Describe the bug**\r\nIf you start [the project](https://github.com/frederikhors/svelte-ts-import-ts-component) it throws a Typescript error:\r\n\r\n`Error: The keyword 'interface' is reserved (Note that you need plugins to import files that are not JavaScript) `\r\n\r\n**Logs**\r\n\r\n```\r\n> svelte-app@1.0.0 dev\r\n> rollup -c -w\r\n\r\nrollup v2.42.3\r\nbundles src/main.ts → public\\build\\bundle.js...\r\n[!] Error: The keyword 'interface' is reserved (Note that you need plugins to import files that are not JavaScript)\r\nnode_modules\\svelte-ts-component\\src\\common\\common.ts (1:0)\r\n1: interface Utils {\r\n   ^\r\n2:   title: string;\r\n3: }\r\nError: The keyword 'interface' is reserved (Note that you need plugins to import files that are not JavaScript)\r\n    at error (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:5308:30)\r\n    at Module.error (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:9717:16)\r\n    at Module.tryParse (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:10123:25)\r\n    at Module.setSource (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:10024:24)\r\n    at ModuleLoader.addModuleSource (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:18358:20)\r\n    at ModuleLoader.fetchModule (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:18414:9)\r\n    at async Promise.all (index 1)\r\n    at ModuleLoader.fetchStaticDependencies (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:18\r\n439:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (C:\\a\\node_modules\\rollup\\dist\\shared\\rollup.js:18416:9)\r\n```\r\n\r\n**To Reproduce**\r\n**The REPO**: https://github.com/frederikhors/svelte-ts-import-ts-component\r\n\r\nYou can clone it and\r\n\r\n`npm install`\r\n\r\n`npm run dev`\r\n\r\nIt's a simple `sveltejs/template` project with Typescript.\r\n\r\nIn `App.svelte` I'm trying to use a Svelte TS component `Card` ([here the source code](https://github.com/frederikhors/svelte-ts-component)).\r\n\r\nThe component is imported in `package.json` like this:\r\n\r\n`\"svelte-ts-component\": \"frederikhors/svelte-ts-component\"`\r\n\r\n[In the component's `package.json`](https://github.com/frederikhors/svelte-ts-component/blob/516b7c3749d2c7b7b51b109efc49bdd3f0ac7f07/package.json#L8) I have this line:\r\n\r\n`\"svelte\": \"src/index.ts\"`\r\n\r\nbecause I want Svelte to compile it's source code (I don't wanna use the already compiled bundle from that component's build process).\r\n\r\n**Information about your Svelte project:**\r\nOS: Windows 10\r\nNode: 14.16.0 - C:\\Program Files\\nodejs\\node.EXE\r\nnpm: 7.6.3 - C:\\Program Files\\nodejs\\npm.CMD\r\nrollup: 2.42.3 => 2.42.3\r\nsvelte: 3.35.0 => 3.35.0\r\n\r\n**Severity**\r\nExtremely important: it blocks compilation.\r\n",
    "closedAt": "2021-03-24T13:58:42Z",
    "createdAt": "2021-03-24T13:49:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg0NDg0OQ==",
          "body": "I'm not sure this is possible because I think that Rollup does not compile things inside node_modules, it is expected to be Javascript in there.\r\n\r\nSince this question is more of a usage question, I'm going to close this. I suggest you try to reproduce this without Svelte, only importing a TypeScript file with an interface from node_modules and try to bundle that with rollup. If that does not work, the issue is not related to Svelte. With the results of that reproduction you could ask on StackOverflow for help.",
          "createdAt": "2021-03-24T13:58:42Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg0Njg2OQ==",
          "body": "@dummdidumm I created two different repos on purpose to reproduce the problem.\r\n\r\nThe problem is that I want to use typescript in a svelte component that I import in a svelte project.\r\n\r\nWhere else should I create an issue if not here?\r\n\r\nI don't think it's a usage question.",
          "createdAt": "2021-03-24T14:01:14Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg1MjgyNQ==",
          "body": "I think that Rollup does not transpile anything inside node_modules, so that your use case is not possible, not because of Svelte, but because of Rollup. That's why I suggested you try that without Svelte, just pure Rollup+TS and see if the problem persists. If so, this problem is not related to Svelte.",
          "createdAt": "2021-03-24T14:09:19Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg1NTI5MA==",
          "body": "Ok. I'm trying right now but the problem is still with Svelte: how can I write components in typescript if I can't import them into my main project?",
          "createdAt": "2021-03-24T14:12:31Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg1NzEwMQ==",
          "body": "If you use Rollup, then (if my thinking is right) you can't, if you import them from node_modules. Maybe it works for other bundling tools, but that is not a problem of Svelte but a problem of the bundling tool.",
          "createdAt": "2021-03-24T14:14:54Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg1NzY0OA==",
          "body": "Ok. Still a \"problem\" with Svelte. Is there a way today to do this? With Rollup?",
          "createdAt": "2021-03-24T14:15:40Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg1OTQ1Nw==",
          "body": "Maybe a problem with include / exclude?",
          "createdAt": "2021-03-24T14:17:47Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTg2MjM2OA==",
          "body": "https://github.com/rollup/plugins/issues/832",
          "createdAt": "2021-03-24T14:21:36Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzkwNjc3NTM=",
    "body": "**Describe the bug**\r\nWhen passing a `true` value to a custom data attribute (e.g. `data-active`) in SSR, it renders `data-active=\"\"`.\r\n\r\n**To Reproduce**\r\n```svelte\r\n<script>\r\n\tlet content = true;\r\n</script>\r\n\r\n<div data-active={content}></div>\r\n```\r\n\r\n**Expected behavior**\r\nI'm only expecting an attribute to be rendered as `attr=\"\"` when the value passed to it is `true` if it's a boolean attribute. In the case of any other attribute, `attr=\"true\"` should be rendered instead (as it is when using DOM rendering).\r\n\r\n**Stacktraces**\r\nIt's easy to see the origin of the problem, at https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/ssr.ts#L130-L133\r\n\r\n**Severity**\r\nAnnoying, particularly because of the inconsistency for such attributes between SSR and DOM rendering. For now we're writing things like `data-active={value === true ? 'true' : false}` as a workaround.\r\n\r\nI can open a PR to fix this behavior if it's ok for you :)",
    "closedAt": null,
    "createdAt": "2021-03-23T19:54:18Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mzg2NjE4ODA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI have seen [this code here](https://github.com/matyunya/smelte/blob/97e3bef0c51372a486ea8fc191ef1e4c05bce427/src/components/Button/Button.svelte#L163):\r\n\r\n```svelte\r\n  <button\r\n    use:ripple\r\n    class={classes}\r\n    {...props}\r\n    {type}\r\n    {disabled}\r\n    on:click={() => (value = !value)}\r\n    on:click\r\n    on:mouseover\r\n    on:* <!-- this is what intrigued me -->\r\n  >\r\n    {#if icon}\r\n      <Icon class={iClasses} {small}>{icon}</Icon>\r\n    {/if}\r\n    <slot />\r\n  </button>\r\n```\r\n\r\nespecially this is what intrigued me:\r\n\r\n```svelte\r\non:*\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI tried in my Svelte project and it doesn't work.\r\n\r\n- Button.svelte:\r\n\r\n```svelte\r\n<button on:*>Click me please</button>\r\n```\r\n\r\n- App.svelte\r\n\r\n```svelte\r\n<Button on:click={()=>console.log(\"Clicked\")} />\r\n```\r\n\r\n### **Why is this working there?**\r\n\r\n**How important is this feature to you?**\r\nI can remove a lot of useless code and reuse more easily those components.",
    "closedAt": "2021-03-23T12:18:13Z",
    "createdAt": "2021-03-23T12:13:06Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDg1NjcyMQ==",
          "body": "You should ask the people in charge of the repository, not us.\r\n\r\nRight now such a feature is not implemented, there is an open feature request for that #2837 ",
          "createdAt": "2021-03-23T12:18:13Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mzg0OTkzOTM=",
    "body": "Reactive statements/blocks don't seem to be \"recursive\" (so to speak).\r\nWhen a reactive block checks for a condition to apply and the condition changes within the reactive block itself, the condition is not rechecked.\r\n\r\nSee this [REPL](https://svelte.dev/repl/a70807107620415c99a760469f16e685?version=3.35.0):\r\n![ScreenClip](https://user-images.githubusercontent.com/49537659/112117622-d3978580-8bbb-11eb-8460-e90f2c66aa63.png)\r\n\r\nAt component's creation, the reactive block is evaluated and `count` is assigned itself plus 1.\r\nBut then after this assignment it doesn't go on checking if `count` is less than 10 and increment it accordingly (which is what I was expecting).\r\nAssigning to `count` outside the block through the button makes the block run again (and `count` is added twice, one because of the handler and one because of the block).\r\n\r\nI don't know if this is the expected behavior (that's why I'm writing this as a question and not as an issue), but I would have expected (and wanted) the reactive block to be evaluated any time that `count` changes, be it outside the block or within it.\r\n\r\nMaybe a variable is not deemed a dependency of a block if it's also among its performed assignments? (e.g. `$: count += 1` doesn't work either, while I would have expected it to stack overflow).\r\n\r\nThanks.",
    "closedAt": "2021-03-23T23:48:21Z",
    "createdAt": "2021-03-23T08:57:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTE0NDU1MQ==",
          "body": "REPL seems to work correctly for me. As designed.",
          "createdAt": "2021-03-23T18:45:05Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTM1NTE5MA==",
          "body": "This is the intended behavior, although it is indeed a TODO to find somewhere to document this better. The short answer is that synchronous changes to variables during reactive blocks do not trigger another a run through the reactive blocks afterwards. It's not precisely the question you're asking here, but I talk a bit about what's going on in [this comment](https://github.com/sveltejs/svelte/issues/5848#issuecomment-753431840).",
          "createdAt": "2021-03-23T23:48:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTUyOTQ4Nw==",
          "body": "Your explanation about synchronous code in reactive blocks matches what I found on a stackoverflow question about using `setTimeout()` for another use case. Putting it here makes the block \"loop\" as I expected, too.\r\n\r\nYes, I think that currently the biggest drawback for me in using this technology is lack of detailed documentation (both the tutorial and API docs are fine, but we're programmers and rather than the \"do-this-to-have-that\" sort of bits I'd like to know exactly what happens when I write code).\r\nThank you for the answer.",
          "createdAt": "2021-03-24T06:08:50Z",
          "author": { "login": "atava", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzgzMTA2MTA=",
    "body": "**Describe the bug**\r\n\r\nSpaces are added to the Svelte output causing the rendered text not to appear as expected (for example, looping over and outputting characters in a string).\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/86aa94c8350845e794b27ea9f75624e9?version=3.35.0\r\n\r\n```js\r\n<script>\r\n\tlet name = 'Hello world';\r\n</script>\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n```\r\n\r\n<img width=\"344\" alt=\"Screen Shot 2021-03-22 at 11 22 35 PM\" src=\"https://user-images.githubusercontent.com/1449259/112088074-7d97f300-8b65-11eb-8b64-0a7fc211307d.png\">\r\n\r\n**Expected behavior**\r\nThere should be no spaces in the output.\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\nSafari 14.1\r\nEdge 89.0.774.57\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nmacOS 11\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\nSvelte 3.35.0\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nRollup, reproduced with Repl\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nThis bug is blocking a secondary feature of my website. I am building a preview of formatted text, and need to be able to loop over text and show each one in its own `<span>`. Only spaces in the source text should appear in the HTML.",
    "closedAt": null,
    "createdAt": "2021-03-23T03:20:25Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDY1NjIzOA==",
          "body": "Curiously this only happens in the very last block. If you repeat it more than two times it's always the last block. And if you add anything after the each block the space disappears. I hope this helps.\r\n\r\nNo spaces because of the \"x\" at the end:\r\n\r\n```svelte\r\n<script>\r\n\tlet name = 'Hello world';\r\n</script>\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\n{#each name as character}\r\n\t<span>\r\n\t\t{#if character == \"l\"}\r\n\t\t\tA\r\n\t\t{:else}\r\n\t\t\tB\r\n\t\t{/if}\r\n\t</span>\r\n{/each}\r\n\r\nx\r\n```",
          "createdAt": "2021-03-23T06:33:32Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDg1NjIzNw==",
          "body": "Yea, I actually noticed that after filing but forgot to come back and add it in. It's super variable, (if of course not actually random).",
          "createdAt": "2021-03-23T12:17:28Z",
          "author": { "login": "ezfe", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNzg1ODMwOQ==",
          "body": "Also, we still have these issues https://github.com/sveltejs/svelte/issues/4731 and https://github.com/sveltejs/svelte/issues/189",
          "createdAt": "2021-03-26T01:20:10Z",
          "author": { "login": "stalkerg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNzg4OTkxMg==",
          "body": "heh this space exists but not working inside Svelte runtime tests",
          "createdAt": "2021-03-26T02:32:16Z",
          "author": { "login": "stalkerg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNzg5MTcyNQ==",
          "body": "I found a REPL that actually identifies the same issue: https://svelte.dev/repl/b6c71bf8825f46028793d804facf5e08?version=3.5.1",
          "createdAt": "2021-03-26T02:36:27Z",
          "author": { "login": "ezfe", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNzkyODM0Nw==",
          "body": "@ezfe I think is different issue",
          "createdAt": "2021-03-26T04:33:26Z",
          "author": { "login": "stalkerg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODA0MDU0NA==",
          "body": "ok, I know why it's happens",
          "createdAt": "2021-03-26T08:39:29Z",
          "author": { "login": "stalkerg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODMxNDM0MQ==",
          "body": "because the first \\n (actually something more) between two Fragments (each) we can remove, but the last \\n have no obvious reasons to remove. \r\nThis part in compiler a little tricky... basically here we can see some inconsistency between the parser and internal compiler AST. \r\nI will try to find way to solve it. ",
          "createdAt": "2021-03-26T15:33:09Z",
          "author": { "login": "stalkerg", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzgyMDc3Mzk=",
    "body": "i have a SwBox Component, so the component receive props `m` for _margin_ ,\r\nso when i send props `m=2` the SwBox component will generate string `m-2`.\r\n\r\nUntil this part, the generated string is success,\r\nbut the style of `m-2` won't apply to the element (point 3 below)\r\n\r\n1. When i send props\r\n![image](https://user-images.githubusercontent.com/31404706/112073443-b3110080-8ba6-11eb-86a7-0f06dea950cd.png)\r\n\r\n2. The logic inside SwBox.svelte\r\n![image](https://user-images.githubusercontent.com/31404706/112073589-05522180-8ba7-11eb-8ca4-e4dad386d4ab.png)\r\n\r\n3. The style of `m-2` won't apply to the element\r\n![image](https://user-images.githubusercontent.com/31404706/112073729-3df1fb00-8ba7-11eb-80aa-0167e2f35222.png)\r\n\r\nplease help me",
    "closedAt": "2021-03-23T00:15:20Z",
    "createdAt": "2021-03-23T00:13:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDQ4NjYxNQ==",
          "body": "![image](https://user-images.githubusercontent.com/31404706/112073874-84dff080-8ba7-11eb-84b0-a8c9a997eb5d.png)\r\n",
          "createdAt": "2021-03-23T00:15:20Z",
          "author": { "login": "fmgono", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mzc4NDMwNjI=",
    "body": "The derived store API docs states:\r\n\r\nIf you return a function from the callback, it will be called when \r\n\r\n1. the callback runs again, or \r\n2. the last subscriber unsubscribes.\r\n\r\nBut how to find out if it was called for reason one? or two?.  \r\n\r\nI created a [Repl](https://svelte.dev/repl/f13ac2c8fa3745abb37fe72af47c87e7?version=3.35.0) with a minor changed version of the derived store, which returns a value:\r\n- null : the last subscriber unsubscribes.\r\n- int : showing which store changed\r\n\r\nuse case:\r\n\r\nI make use of a RxJs data source: Firestore RxFire and use Svelte stores to cache and multicast the streamed data. But now when I switch between components I lose the subscription with te data source. Not a big deal, but if it is a lot of data ….\r\n\r\nBut there seeme to be no reason to unsubscribe from the stream if switching components if the stores did not change. The only good reason to unsubscribe and subscribe again is when the stream query changes. This stream query depends on one or more of the derived stores. \r\n",
    "closedAt": null,
    "createdAt": "2021-03-22T15:31:06Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDE2MTUwNA==",
          "body": "It would be nice to if the callback could receive the same info. For instance by providing an additional optional argument to the callback for both versions (sync and async) of the derived store. ",
          "createdAt": "2021-03-22T15:39:57Z",
          "author": { "login": "voscausa", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTE4NzE4Mg==",
          "body": "label: proposal?",
          "createdAt": "2021-06-05T05:32:27Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTIwNDkyNw==",
          "body": "Yes label \"proposal\" makes sense.",
          "createdAt": "2021-06-05T08:23:18Z",
          "author": { "login": "voscausa", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mzc4MTMwMDI=",
    "body": "**Describe the bug**\r\nI try to load a .ts file outside of the svelte project dir. This fails telling me to use a plugin\r\n**Logs**\r\nC:\\dev\\magictale\\app>npm run dev\r\n\r\n\r\n>\timport { ClientTest } from \"../../network/Client/ClientTest\";\r\n>\timport Network from \"../../network/Network\";\r\n\r\n\r\n\r\n\r\n> svelte-app@1.0.0 dev\r\n> rollup -c -w\r\n\r\nrollup v2.42.0\r\nbundles src/main.ts → public\\build...\r\n[!] Error: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n..\\network\\Network.ts (10:26)\r\n\r\n\r\n**To Reproduce**\r\nMy Dir\r\nC:\\dev\\magictale\\app  <<< here is the svelte project\r\nC:\\dev\\magictale\\network  <<< The code I want to share between nodejs server and svelte app\r\nC:\\dev\\magictale\\server <<< nodejs server\r\n\r\n\r\n**Expected behavior**\r\nWell, load the code and use it :-D\r\n\r\n**Stacktraces**\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  [!] Error: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n..\\network\\Network.ts (10:26)\r\n 8:\r\n 9: export default class Network {\r\n10:     static decompress(data: any) : null|Packet {\r\n                              ^\r\n11:         console.log(data);\r\n12:         console.log(typeof data);\r\nError: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n    at error (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:5307:30)\r\n    at Module.error (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:9716:16)\r\n    at Module.tryParse (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:10122:25)\r\n    at Module.setSource (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:10023:24)\r\n    at ModuleLoader.addModuleSource (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:18357:20)\r\n    at ModuleLoader.fetchModule (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:18413:9)\r\n    at async Promise.all (index 2)\r\n    at ModuleLoader.fetchStaticDependencies (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:18438:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (C:\\dev\\magictale\\app\\node_modules\\rollup\\dist\\shared\\rollup.js:18415:9)\r\n\r\n</details>\r\n\r\n",
    "closedAt": "2021-03-22T15:29:44Z",
    "createdAt": "2021-03-22T15:09:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDE1MzQ4OA==",
          "body": "GitHub issues are reserved for feature request and Svelte bug reports. This is a usage question. Please post such questions on StackOverflow or on Discord. I suggest you do a Google search with tags such as \"Rollup TypeScript monorepo shared package\".\r\n\r\nPointers:\r\nhttps://stackoverflow.com/questions/51975831/rollup-typescript-error-when-importing-files-outside-baseurl\r\nhttps://blog.ailon.org/typescript-rollup-and-shared-interfaces-cdeee5db9724 ",
          "createdAt": "2021-03-22T15:29:44Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzcxMjM4MjY=",
    "body": "**Describe the bug**\r\n\r\nI extracted a very simplified version from our code base: https://svelte.dev/repl/2a0e77c4b3e74471a51c110ecf2fcdca?version=3.35.0\r\n\r\nI'm not sure what more to describe. Svelte crashes. Some weird edge case with nested `{#each}` and `input[radio]` I guess.\r\n\r\n**Logs**\r\n\r\nChrome:\r\n\r\n```\r\nVM154:657 Uncaught (in promise) TypeError: Cannot read property 'splice' of undefined\r\n    at Object.destroy [as d] (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:657:80)\r\n    at destroy_each (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:48:31)\r\n    at Object.destroy [as d] (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:583:8)\r\n    at Object.destroy [as d] (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:709:17)\r\n    at destroy_each (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:48:31)\r\n    at Object.destroy [as d] (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:818:8)\r\n    at destroy_block (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:159:15)\r\n    at update_keyed_each (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:231:17)\r\n    at Object.update [as p] (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:873:23)\r\n    at update (eval at handle_message (VM153 about:srcdoc:13), <anonymous>:146:40)\r\n```\r\n\r\nFirefox:\r\n\r\n```\r\nUncaught (in promise) TypeError: ctx[4][0][ctx[11]][ctx[8]] is undefined\r\n    destroy about:srcdoc line 83 > eval:657\r\n    destroy_each about:srcdoc line 83 > eval:48\r\n    destroy about:srcdoc line 83 > eval:583\r\n    destroy about:srcdoc line 83 > eval:709\r\n    destroy_each about:srcdoc line 83 > eval:48\r\n    destroy about:srcdoc line 83 > eval:818\r\n    destroy_block about:srcdoc line 83 > eval:159\r\n    update_keyed_each about:srcdoc line 83 > eval:231\r\n    update about:srcdoc line 83 > eval:873\r\n    update about:srcdoc line 83 > eval:146\r\n    flush about:srcdoc line 83 > eval:114\r\n    promise callback*schedule_update about:srcdoc line 83 > eval:96\r\n    make_dirty about:srcdoc line 83 > eval:281\r\n    ctx about:srcdoc line 83 > eval:317\r\n    removeOperation about:srcdoc line 83 > eval:937\r\n    click_handler about:srcdoc line 83 > eval:947\r\n    click_handler about:srcdoc line 83 > eval:738\r\n```\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/2a0e77c4b3e74471a51c110ecf2fcdca?version=3.35.0\r\n\r\nHit both \"remove\" buttons from top to bottom. The first element (without the radios) is important or else it doesn't reproduce (with just a single item). See:\r\n\r\nhttps://user-images.githubusercontent.com/679144/111912796-8f956b00-8a6b-11eb-9133-7784adc2d6c1.mp4\r\n\r\n**Expected behavior**\r\n\r\nNo error\r\n\r\n**Information about your Svelte project:**\r\n\r\nMostly irrelevant, since it reproduces in repl. In Chrome and Firefox for me.\r\n\r\n```\r\n  System:\r\n    OS: Linux 5.8 Ubuntu 20.04.2 LTS (Focal Fossa)\r\n    CPU: (4) x64 Intel(R) Core(TM) i7-6770HQ CPU @ 2.60GHz\r\n    Memory: 5.69 GB / 15.53 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 14.16.0 - ~/.nvm/versions/node/v14.16.0/bin/node\r\n    npm: 7.6.3 - ~/.nvm/versions/node/v14.16.0/bin/npm\r\n  Browsers:\r\n    Chrome: 89.0.4389.90\r\n    Firefox: 86.0\r\n  npmPackages:\r\n    svelte: ^3.35.0 => 3.35.0\r\n```\r\n\r\n**Severity**\r\n\r\nSince it completely crashes the script / production app this is serious I guess?\r\n",
    "closedAt": null,
    "createdAt": "2021-03-21T16:35:58Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzYxOTA3Mw==",
          "body": "I went back using the repl. It works until 3.31.0 and breaks with 3.31.1. These two changes look promising / related:\r\n\r\n* Fix checkbox bind:group in keyed {#each} where the array can be reordered (#5779)\r\n* Fix checkbox bind:group in nested {#each} contexts (#5811)",
          "createdAt": "2021-03-21T16:42:53Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMzA1NjY4NA==",
          "body": "This might have slipped through, can someone please triage this?",
          "createdAt": "2021-04-04T15:58:17Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzcxMjA3NzI=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\nI have a requirement to dynamically create some global css, and apply it in the head\r\n\r\nThis is how I believe could be done\r\n```\r\n<svelte:head>\r\n\t<style>\r\n\t\t{@css my_custom_css_variable}\r\n\t</style>\r\n</svelte:head>\r\n```\r\n\r\nMy alternative:\r\nSending `my_custom_css_variable` to the server, creating css file there and including it in the head\r\n\r\nIf possible. I believe it shouldn't be too much trouble, looking at the generated js (`style.textContent = \"{@css my_custom_css}\";`)\r\nProbably not much more work than `@html`\r\n",
    "closedAt": "2021-03-22T04:34:14Z",
    "createdAt": "2021-03-21T16:23:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzYxOTAxNQ==",
          "body": "This can already be done with an `{@html}` tag that also includes the style tag opening and closing. I'm not sure there needs to be a separate syntax for this.",
          "createdAt": "2021-03-21T16:42:35Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzc1MzM1NQ==",
          "body": "I guess I shouldn't be working on Sundays :)",
          "createdAt": "2021-03-22T04:34:14Z",
          "author": { "login": "isvaljek", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzcwNDE1Mzc=",
    "body": "After getting to beta stage of svelte-kit, it would be great to add note to docs for Svelte, Sapper and Svelte-kit, something like:\r\n\r\n\r\n> Svelte is front-end framework-like compiler, for creating UI, it doesn't contain server-side except sirv, for serving generated static files to browser. If You want to have production ready website, You will need some server-side, so You can deploy it on PaaS services like Heroku or Google App Services, or You will need to use server-less platform like Vercel. It's recommended to use Sapper or Svelte-kit for server-side. Sapper is in relatively stable stage, so it's better to use it than Svelte-kit now, but Sapper itself is in stage between being in development stage and deprecated stage. When Svelte-kit will be in version 1.0, Sapper will be deprecated. But don't worry, there is migration guide on our website: https://kit.svelte.dev/migrating ... right now, Svelte-kit is still in early beta stage and You can watch progress of developing on https://github.com/sveltejs/kit/milestones\r\nOnce Svelte-kit will be in version 1.0, it will replace Sapper, and unify way to starting project, so there is no more missunderstanding when to use Svelte and when Sapper.\r\n\r\nwell, it should be rewritten and corrected, but it would be good to add some note like this to docs.",
    "closedAt": "2021-04-02T13:41:44Z",
    "createdAt": "2021-03-21T10:41:35Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzY5MTU3MDk=",
    "body": "Please re-open #875, don't work with camelCase export if attribute is kebabCase:\r\n\r\nHTML:\r\n```html\r\n<my-component header-text=\"hello\"></my-component>\r\n```\r\n\r\nSvelte file:\r\n```html\r\n<svelte:options tag=\"my-component\" />\r\n<script>\r\n\texport let headerText;\r\n</script>\r\n\r\n<div>\r\n{headerText}\r\n</div>\r\n\r\n<style lang=\"scss\">\r\n</style>\r\n\r\n```\r\n\r\n`headerText` is undefined.\r\n\r\n### Workaround: \r\nYou can use `{$$props[\"header-text\"]}` but if user change the html attribute, svelte, don't re-render html and webcomponent show always \"hello\".\r\n\r\nSimiliar issue: #3852",
    "closedAt": "2021-03-21T00:42:23Z",
    "createdAt": "2021-03-20T21:34:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzQ5MTg3MA==",
          "body": "This isn't a similar issue to #3852 , it's the same issue. Hyphenated properties aren't visible because we don't do any conversion between cases, so you have to define the property as either lowercase without hyphens, or camelCase (which won't work with web components).\r\n\r\nEither way it's the same issue so I'm closing this one and leaving that one open. Please ensure that you subscribe to it so that you are made aware of any updates.",
          "createdAt": "2021-03-21T00:42:23Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzY4OTcxODE=",
    "body": "Dispatching an event in a reactive statement doesn't work if the component is not yet mounted, see REPL below:\r\nhttps://svelte.dev/repl/1f0c4745c52147538ee8a39e0a3c3805?version=3.35.0\r\n\r\nIt works if I execute both:\r\n```\r\ndispatch('foo', 'hello');\r\nonMount(() => dispatch('foo', 'hello'));\r\n```\r\n\r\nReal use case:\r\nMy input components (e.g. Select, TextInput, ...) receive validation props such as `required={true}`, `minLength={3}`, etc.\r\nThose components dispatch error events in case the value is not valid. The value is changed on user input, but as the initial value is passed by the parents, and that the parent might change the value as well as those validation props' values, I must check for errors in a reactive statement:\r\nhttps://svelte.dev/repl/e2e819f5bfba464bbdce6683ea916ee1?version=3.35.0\r\nBut when the component is being mounted nothing will be dispatched unfortunately, so I need to duplicate those dispatch instructions to include them inside the `onMount` callback as well.",
    "closedAt": "2021-03-24T00:04:31Z",
    "createdAt": "2021-03-20T19:49:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzY0MDc4MQ==",
          "body": "I can't really comment on the `dispatch` situation, but to me this doesn't look svelte-esque. I hardly encounter use-cases for dispatch. How about you `bind` `error`, `type` and `message` so that the outer component can reactively use them? You can also combine them in a single `validation` object. I don't have time for a full repl, it'd look like this:\r\n\r\n```svelte\r\n<script>\r\n    let validation = {error: false}\r\n</script>\r\n\r\n{#if validation.error}\r\n    <div class=\"error\">{validation.message}</div>\r\n{/if}\r\n<Select bind:validation required />\r\n\r\n\r\n\r\n\r\n// In the Select component:\r\n\r\n<script>\r\nexport let validation;\r\nexport let required;\r\n\r\nlet value = '';\r\n\r\n$: {\r\n    if (required && !value) {\r\n        validation = {\r\n            error: true,\r\n            type: 'empty',\r\n            message: 'can\\'t be blank'\r\n      }\r\n    }\r\n}\r\n</script>\r\n```",
          "createdAt": "2021-03-21T18:52:25Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzY0MTk1NQ==",
          "body": ">  I don't have time for a full repl, it'd look like this:\r\n\r\neh https://svelte.dev/repl/6a9c95d9f746499e9e5198d711a88d49?version=3.35.0\r\n\r\nWhat I've learned using Svelte:\r\n\r\n1. Reactivity > events (no need for `dispatch`)\r\n2. Stores > promises (no need for `{#await}`)",
          "createdAt": "2021-03-21T19:00:33Z",
          "author": { "login": "Prinzhorn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNTM2MTQ5Mw==",
          "body": "This has come up before somewhere, although if it was in an issue, I can't find it right now. Essentially, the issue isn't that the event is being emitted before the component is mounted, it's that the event is being emitted synchronously during the instantiation of the component class, and the event listeners aren't attached until after it's instantiated:\r\n\r\n```js\r\n\tcomponent = new Component({});\r\n\tcomponent.$on(\"foo\", /*foo_handler*/ ctx[0]);\r\n```\r\n\r\nTo change the behavior of this (and I'm not sure that we'd want to), we'd need some API to attach event listeners to a component _as it's being instantiated_, rather than after.\r\n\r\nSomething that would be safer to do now would be to make sure you wait until the next microtask (https://svelte.dev/docs#tick) before emitting the validation status events.",
          "createdAt": "2021-03-24T00:04:31Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzY4OTQ1Mjg=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nProblem is I have long long list of REPLs, and can't delete old ones.\r\n\r\n**Describe the solution you'd like**\r\nI have 35488674 REPLs on https://svelte.dev/apps and can't delete old REPLs. Please add feature to do it.\r\n\r\n**Describe alternatives you've considered**\r\n-\r\n\r\n**How important is this feature to you?**\r\n-1/10\r\n\r\n**Additional context**\r\n-\r\n",
    "closedAt": "2021-03-20T19:42:14Z",
    "createdAt": "2021-03-20T19:35:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzQ1MzE2NQ==",
          "body": "Duplicate of #3457.",
          "createdAt": "2021-03-20T19:42:14Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzY4ODU5NTU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI would like to set a constant in my Svelte app (an API url) based on whether the app was compiled with the `dev` option or not. If it was compiled with `dev` the url will be a localhost address and if not, it will be the the production webserver.\r\n\r\n**Describe the solution you'd like**\r\nWithin a `.svelte` app, maybe you could do `import { info } from 'svelte/info'; const dev = info.is_dev;`\r\n\r\n**Describe alternatives you've considered**\r\nMaybe `npm run start` can be made to generate a `config.js` module which it makes by looking up environment variables. I'm not sure how to implement this. Then I could just write my API url to an environment variable.\r\n\r\n**How important is this feature to you?**\r\nThis is important to deploying my app.\r\n",
    "closedAt": "2021-03-20T19:07:04Z",
    "createdAt": "2021-03-20T18:52:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzQ0NzEzMg==",
          "body": "Actually I found a [blog post ](https://www.donielsmith.com/blog/2020-05-11-how-to-use-dotenv-with-svelte-3/) which looks like it solves my problem using rollup.",
          "createdAt": "2021-03-20T19:06:59Z",
          "author": { "login": "markisus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzQ0NzE0NA==",
          "body": "Duplicate of #6082.\r\n\r\nThis will be available in SvelteKit in any case, but that other issue is a feature request for it being available directly in Svelte.",
          "createdAt": "2021-03-20T19:07:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzU2NjYyNjQ=",
    "body": "**Describe the bug**\r\nIt appears the binding on the window for `outerWidth` doesn't update when you maximize the window, or go fullscreen. Note that this doesn't happen on all browsers. It appears certain actions simply don't trigger outerWidth to update. More specifically, if I run `<svelte:window bind:outerWidth />`, I do not see it update if I fullscreen or maximize the window. \r\n\r\nI'm on a Mac, and I find this happening only on specific browers: Chrome and Safari. It appears it cannot be reproduced on Firefox.\r\n\r\nI've noticed it's actually only semi-consistent on Chrome, but it 100% consistent on Safari.\r\n\r\n**To Reproduce**\r\n1. Use either Safari or Chrome (It's easily repro'd on Safari)\r\n2. Go to https://svelte.dev/repl/867c433fd36a463fa5bb257cec2c1766?version=3.35.0\r\n3. Manually resize the window to about half your screen. Take note of the OuterWidth value\r\n4. Either Fullscreen the window (On Mac, you would hit the green Fullscreen button in the top left), or maximize the window by double clicking the window's chrome\r\n5. Notice that the OuterWidth value has not updated, but all other window bindings have.\r\n\r\n**Expected behavior**\r\nThe outer width successfully updates for maximize and fullscreen operations\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Chrome 89.0.4389.90, Safari 14.0.3\r\n\r\n- Your operating system: OS X 10.15.7\r\n\r\n- Svelte version 3.35.0\r\n\r\n**Severity**\r\nNot too severe. There's an easy workaround to just listen for media query changes. Alternatively, innerWidth updates fine, so you could arguably react to innerWidth, and simply read window.outerWidth at that time with something like:\r\n```\r\n<script>\r\n  $: innerWidth: number;\r\n  $: outerWidth = typeof innerWidth === 'number' ? window.outerWidth : 0; \r\n</script>\r\n\r\n<svelte:window bind:innerWidth />\r\n```\r\n\r\n**Additional context**\r\nI'm happy to try and fix it myself but I'm not quite sure where this specific code lives",
    "closedAt": null,
    "createdAt": "2021-03-19T07:52:57Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzUwMTg2ODk=",
    "body": "How about supporting this feature?\r\n\r\n- [ ] style:name={value}, and\r\n- [ ] style={...styles}\r\n\r\nSimilar to class:name directive.",
    "closedAt": "2021-03-18T16:29:57Z",
    "createdAt": "2021-03-18T16:24:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMjA4MjE4Nw==",
          "body": "Please see [this RFC](https://github.com/sveltejs/rfcs/pull/42) and use the issue template in future :)",
          "createdAt": "2021-03-18T16:29:57Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMjA5NDQyNA==",
          "body": "Sorry, and thanks for your assistance.\r\n\r\n> Please see [this RFC](https://github.com/sveltejs/rfcs/pull/42) and use the issue template in future :)\r\n\r\n",
          "createdAt": "2021-03-18T16:36:49Z",
          "author": { "login": "Funlang", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzQ2ODM0NjY=",
    "body": "`ButtonGroup.svelte`\r\n```sevelte\r\n<script lang=\"ts\">\r\n  export let size:string\r\n</script>\r\n\r\n<div>\r\n  <slot />\r\n</div>\r\n```\r\n\r\n`Button.svelte`\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let size:string\r\n\r\n  $: {\r\n    // How to get ButtonGroup component props?\r\n    $$parent.size && (size = $$parent.size)\r\n  }\r\n</script>\r\n\r\n<button class=\"a-button\" class={size ? `a-button--${size} : ''`}>\r\n  <slot />\r\n</button>\r\n\r\n<style lang=\"scss\">\r\n.a-button{\r\n  &--mini{\r\n    height: 24px;\r\n  }\r\n  &--medium{\r\n    height: 36px;\r\n  }\r\n}\r\n</style>\r\n```\r\n\r\n`App.svelte`\r\n```svelte\r\nimport ButtonGroup from  './ButtonGroup.svelte'\r\nimport Button from './Button.svelte'\r\n\r\n<ButtonGroup size=\"mini\">\r\n  <Button>button1</Button>\r\n  <Button>button2</Button>\r\n</ButtonGroup>\r\n```",
    "closedAt": "2021-03-18T11:35:48Z",
    "createdAt": "2021-03-18T11:17:15Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTg0OTAwMA==",
          "body": "You can use the context API.\n\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-03-18T11:35:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMjU4OTczNw==",
          "body": "> You can use the context API.\r\n> \r\n> GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).\r\n\r\nThis is example: https://svelte.dev/repl/7dc284db80ac4fd1bab0b5fcd2013181?version=3.35.0\r\nWhen Radio changes, how to listen for changes in RadioGroup?",
          "createdAt": "2021-03-19T06:25:57Z",
          "author": { "login": "PingTouG", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzQwMTQ3MTA=",
    "body": "![Snímka obrazovky z 2021-03-17 18-20-28](https://user-images.githubusercontent.com/34808350/111509950-8b0c4200-874d-11eb-925f-fe67f442359b.png)\r\n\r\nbrowser: Chrome, Firefox",
    "closedAt": "2021-03-17T17:48:03Z",
    "createdAt": "2021-03-17T17:22:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTI2ODIzMg==",
          "body": "Is this still happening? How long has it been happening for?\r\n\r\nIt seems like an infra issue, not happening in London, UK, and the site hasn't been touched recently.",
          "createdAt": "2021-03-17T17:25:53Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTI3MDgwNQ==",
          "body": "Yes, still happening. I don't know how long, I opened it like 20 minutes ago, and this was what I saw... I tried other browsers, computers, Internet connections, same...",
          "createdAt": "2021-03-17T17:29:37Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTI3MjU5Mg==",
          "body": "![Snímka obrazovky z 2021-03-17 18-31-27](https://user-images.githubusercontent.com/34808350/111511442-08848200-874f-11eb-85fa-eab756c96afd.png)\r\n\r\nhttps://downforeveryoneorjustme.com/svelte.dev",
          "createdAt": "2021-03-17T17:31:57Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTI4NTE2NA==",
          "body": "Not happening for me, and downforeveryoneorjustme is now reporting that it's back up. There's not really anything else to bother with looking into for this at this time. Probably a glitch in Google Cloud.",
          "createdAt": "2021-03-17T17:48:03Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTI4NjM2Mw==",
          "body": "well it seems it started to work now, like minute ago.",
          "createdAt": "2021-03-17T17:49:52Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzM5MTE3Nzg=",
    "body": "This originally broke source maps with SvelteKit. [A workaround was added to Vite](https://github.com/vitejs/vite/pull/2441), but we still don't get source maps for static files.\r\n\r\nSvelte generates a segment-less sourcemap when there's no dynamic content in the template. Appears it's coming from the use of code-red to print out the AST tree: https://github.com/Rich-Harris/code-red/blob/3b32d2ef5bd954cb85a0d005f3a328bae57c6a97/src/print/index.ts#L60-L86\r\n\r\nNormally, the AST being printed would contain loc objects that point into the original code. But when Svelte is processing a file without any dynamic code, it doesn't attach any locs (though it does add start and end). I think this is a bad behavior, Svelte should be associating source location for static code as well. Eg, something like the following:\r\n\r\n```\r\n<h1>decoded-sourcemap</h1>\r\n<div>replace me</div>\r\n```\r\n\r\nThe `h1` should be associated with `{ start: { line: 1, column: 2 } }`, the decoded-sourcemap with `{ start: { line: 1, column: 5 } }`, etc. With the AST given the correct loc associations, code-red's printer will make a sourcemap with valid segments, and the bug will disappear.\r\n\r\nCC @milahu @dmitrage as our source map experts",
    "closedAt": null,
    "createdAt": "2021-03-17T15:30:00Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTE5NDEwNg==",
          "body": "<details>\r\n\r\n<summary>how NOT to reproduce</summary>\r\n\r\n```svelte\r\n<div>\r\n  <button onclick=\"console.log('this is App.svelte line 2')\">click me</button>\r\n</div>\r\n```\r\n\r\nactual result\r\n```\r\nthis is App.svelte line 2                 (index):19\r\n```\r\n\r\n~~probably this should say `App.svelte:2`~~\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>where does chunk come from?</summary>\r\n\r\n```js\r\n// in code-red print(): console.dir(chunk);\r\n{ content: 'main', loc: undefined, has_newline: false }\r\n{ content: '.', loc: undefined, has_newline: false }\r\n{ content: 'innerHTML', loc: undefined, has_newline: false }\r\n{ content: ' = ', loc: undefined, has_newline: false }\r\n{ content: '`', loc: undefined, has_newline: false }\r\n{\r\n  content: '<button onclick=\"console.log(&#39;this is App.svelte line 2&#39;)\">click me</button>',\r\n  loc: undefined,\r\n  has_newline: false\r\n}\r\n// console.trace(chunk):\r\nTrace: {\r\n  content: '<button onclick=\"console.log(&#39;this is App.svelte line 2&#39;)\">click me</button>',\r\n  loc: undefined,\r\n  has_newline: false\r\n}\r\n    at print (compiler.js:1978:10)\r\n    at Component.generate (compiler.js:20088:9)\r\n    at compile (compiler.js:21405:19)\r\n    at Object.transform (rollup-plugin-svelte/index.js:111:21)\r\n```\r\n\r\n`Component.generate`\r\n\r\n```js\r\ngenerate(result) {\r\n\r\n  const program = { type: 'Program', body: result.js };\r\n\r\n  js = print(program, {\r\n    sourceMapSource: compile_options.filename\r\n  });\r\n```\r\n\r\n`compile`\r\n\r\n```js\r\nfunction compile(source, options = {}) {\r\n  const ast = parse$2(source, options);\r\n  const component = new Component(\r\n    ast,\r\n    source,\r\n    options.name || get_name_from_filename(options.filename) || 'Component',\r\n    options,\r\n    stats,\r\n    warnings\r\n  );\r\n  const result = dom(component, options);\r\n  //const result = ssr(component, options);\r\n  return component.generate(result);\r\n}\r\n```\r\n\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>where is the source location lost?</summary>\r\n\r\nrelevant code in [src/compiler/compile/render_dom/wrappers/Element/index.ts](https://github.com/sveltejs/svelte/blob/ce3a5791258ec6ecf8c1ea022cb871afe805a45c/src/compiler/compile/render_dom/wrappers/Element/index.ts#L303) line 303\r\n\r\n```ts\r\nto_html((this.fragment.nodes as unknown as Array<ElementWrapper | TextWrapper>), block, literal, state, can_use_raw_text);\r\n```\r\n\r\n`this.fragment.nodes` has source locations of html elements\r\n\r\n```js\r\nthis.fragment.nodes[0] ==\r\nElementWrapper {\r\n  node: Element$1 {\r\n    start: 8,\r\n    end: 84,\r\n    type: 'Element',\r\n    attributes: [Array],\r\n    name: 'button',\r\n\r\n```\r\n\r\n\r\nafter `to_html`, the locations are lost:\r\n```js\r\nstate.quasi ==\r\n{\r\n  type: 'TemplateElement',\r\n  value: {\r\n    raw: '<button onclick=\"console.log(&#39;this is App.svelte line 2&#39;)\">click me</button>'\r\n  }\r\n}\r\n```\r\n\r\n[src/compiler/compile/render_dom/wrappers/Element/index.ts](https://github.com/sveltejs/svelte/blob/ce3a5791258ec6ecf8c1ea022cb871afe805a45c/src/compiler/compile/render_dom/wrappers/Element/index.ts#L306) line 306\r\n```js\r\nblock.chunks.create.push(\r\n  b`${node}.${this.can_use_innerhtml ? 'innerHTML' : 'textContent'} = ${literal};`\r\n);\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>what is b`....` ?</summary>\r\n\r\nwhat is ``( b`....` )``? [code-red](https://github.com/Rich-Harris/code-red/blob/3b32d2ef5bd954cb85a0d005f3a328bae57c6a97/src/index.ts#L188)\r\n\r\n```js\r\nfunction b(strings, ...values) {\r\n  const str = join$1(strings);\r\n  const comments = [];\r\n  const ast = acorn.parse(str,  acorn_opts(comments, str));\r\n  inject(str, ast, values, comments);\r\n  return ast.body;\r\n}\r\n```\r\n\r\n```js\r\nast.body[0].expression.right ==\r\n{\r\n  type: 'TemplateLiteral',\r\n  expressions: [],\r\n  quasis: [\r\n    {\r\n      type: 'TemplateElement',\r\n      value: {\r\n        raw: '<button onclick=\"console.log(&#39;this is App.svelte line 2&#39;)\">click me</button>'\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n</details>\r\n\r\nto trace markup, we would need major changes in `render_dom` and `render_ssr`\r\n",
          "createdAt": "2021-03-17T15:50:00Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTE5NTM4Nw==",
          "body": "I think the empty source map makes sense in a way because there is no JS transformation done on a html-only code, so Svelte does not add any mappings. In order to support this case, the compiler needs to add some mappings to the html-part, don't know how tricky that would be.",
          "createdAt": "2021-03-17T15:51:42Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTQxNTMzNg==",
          "body": "> I think the empty source map makes sense in a way because there is no JS transformation done on a html-only code, so Svelte does not add any mappings.\r\n\r\nNote that even when I fix https://github.com/ampproject/remapping/issues/116, your sourcemaps are going to look broken. The remapped output would look like:\r\n\r\n```json\r\n{\r\n  \"version\": 3,\r\n  \"mappings\": \"AAAA,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;;;;;;\",\r\n  \"names\": [],\r\n  \"sources\": [ \"App.svelte\" ]\r\n}\r\n```\r\n\r\nNotice the `;;;;;;;`, and only segments on the first line. Well, the first line of svelte output is `/* App.svelte generated by Svelte v3.35.0 */`. If you were to load this into a sourcemap visualizer, it'd look like a comment was created from HTML elements (the `<h1>` and `<div>`). It won't make any sense.\r\n\r\n> In order to support this case, the compiler needs to add some mappings to the html-part, don't know how tricky that would be.\r\n\r\nNot too tricky. You're already tracking `start` and `end` indexes as @milahu details in the \"where is the source location lost?\" section. You just need to convert that to `{ line: number, column: number }` by figuring out how many newline characters came before the `start`/`end` indexes (and how many columns into that line you are). A datastructure to track the last index lookup and incrementally process would make it decently fast.",
          "createdAt": "2021-03-17T20:18:28Z",
          "author": { "login": "jridgewell", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTQ5MzAwNQ==",
          "body": "Well, yes we already have the `start` and `end` position, it is not hard to get the `loc(action)`, which is the `line + column` of the `start` and `end` position\r\n\r\nthe tricky part of the figuring out sourcemap for the markup is that 1 line in `.svelte`\r\n\r\n```svelte\r\n<h1></h1>\r\n```\r\n\r\nis broken down to multiple stages / pieces of code in `.js`\r\n\r\n- declaring the variable `let h1`\r\n- creating the element `h1 = element(\"h1\")`\r\n- inserting the element into the DOM `append(target, h1)`\r\n- updating the element\r\n- removing the element from the DOM `detach(h1)`\r\n\r\nso if there's a breakpoint on `<h1></h1>` where should it break at?\r\n\r\n---\r\n\r\ntrying out all the options, breaking at the `append(...)` call expression make the most sense to me right now:\r\n\r\nhttps://user-images.githubusercontent.com/2338632/122856794-03386400-d34a-11eb-8b4e-45ce8b477fff.mov\r\n\r\nit is most visual, as, stepping next, will see the element inserted into the DOM immediately.",
          "createdAt": "2021-06-22T03:08:13Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzExOTA2ODQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIn the case of complex components which take a ton of attributes (something like a generic `CrudForm` or things like that) I usually split them up to one per line. In this case it would sometimes be useful to add comments to specific attributes to explain something about them. Right now there is no way (that I know of) to add any sort comment in the middle of an attribute list.\r\n\r\n**Describe the solution you'd like**\r\nI would like to be able to add comments of some sort in the middle of an attribute list, for example:\r\n\r\n```html\r\n<ComplexComponent\r\n  stuff1=\"stuff1\"\r\n  stuff2=\"STUFF2\" <<< I'd like to write something about why stuff2 is uppercase here\r\n  stuff3=\"stuff3\"\r\n/>\r\n```\r\n\r\nAn idea of how this could look would be to use `{/* ... */}` as syntax (and in extension to allow, albeit meaningless, `{}` and just emit a warning for it - right now it crashes, see #6086):\r\n\r\n```html\r\n<ComplexComponent\r\n  stuff1=\"stuff1\"\r\n  stuff2=\"STUFF2\" {/* stuff2 needs to be uppercase because reasons */}\r\n  stuff3=\"stuff3\"\r\n/>\r\n```\r\n\r\nOpen to better ideas of course...\r\n\r\n**Describe alternatives you've considered**\r\nOne alternative would be to pass props using `{...{a: 'a', b: 'b'}}` instead of `a=\"a\" b=\"b\"` (which is a JS expression and therefore allows `/* ... */` in the middle), but that means that it looks and behaves differently from other usages of attributes, so it's not ideal. Also, you can't do that with `bind:x`, `let:x`, `on:x` or `slot` then.\r\n\r\n```html\r\n<ComplexComponent {...{\r\n  stuff1: 'stuff1',\r\n  stuff2: 'STUFF2' // stuff2 needs to be uppercase because reasons\r\n  stuff3: 'stuff3'\r\n}} />\r\n```\r\n\r\nThe way I currently use is `{...{/* comment */}}` which works but is ugly of course.\r\n\r\n```html\r\n<ComplexComponent\r\n  stuff1=\"stuff1\"\r\n  stuff2=\"STUFF2\" {...{/* stuff2 needs to be uppercase because reasons */}}\r\n  stuff3=\"stuff3\"\r\n/>\r\n```\r\n\r\n**How important is this feature to you?**\r\nNot that important, just a nice-to-have\r\n\r\n",
    "closedAt": "2021-03-14T15:58:13Z",
    "createdAt": "2021-03-14T15:55:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODkzMTQ4Mw==",
          "body": "Duplicate of https://github.com/sveltejs/rfcs/pull/43 ",
          "createdAt": "2021-03-14T15:58:13Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODkzMTY3Nw==",
          "body": "Oh. Good to know someone else had the exact same idea already, I looked in the issues here but not in RFCs. Thank you!",
          "createdAt": "2021-03-14T15:59:27Z",
          "author": { "login": "CherryDT", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzExODgzNDU=",
    "body": "**Describe the bug**\r\n`{}` in an attribute list causes the compiler/linter to crash instead of producing a meaningful error.\r\n\r\n**To Reproduce**\r\n```html\r\n<span {}></span>\r\n```\r\nhttps://svelte.dev/repl/e8b23903c76b4e9daf28185841799a87?version=3.35.0\r\n\r\nThe result is an exception `TypeError: Cannot read property 'length' of null` which doesn't really indicate what happened and where (in VSCode this shows at (1, 1)).\r\n\r\n**Expected behavior**\r\nA meaningful error like `Variable name or spread operator expected`.\r\n\r\n**Stacktraces**\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  bundler.js:11 TypeError: Cannot read property 'length' of null\r\n    at read_attribute (compiler.js:16002)\r\n    at tag (compiler.js:15862)\r\n    at new Parser$1 (compiler.js:16787)\r\n    at parse$3 (compiler.js:16919)\r\n    at Object.compile (compiler.js:29918)\r\n    at Object.transform (bundler.js:11)\r\n    at bundler.js:11\r\n</details>\r\n\r\n- Svelte version: 3.35.0",
    "closedAt": null,
    "createdAt": "2021-03-14T15:45:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODkzMTM3MA==",
          "body": "If this would parse and return as an entry in the list of warnings afterwards it would also help #4818  ",
          "createdAt": "2021-03-14T15:57:27Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODkzMjIyMA==",
          "body": "@dummdidumm What would you want it to parse as? The same as if it weren't there at all?",
          "createdAt": "2021-03-14T16:02:05Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODk0MTg1NA==",
          "body": "Honestly I don't care, I just don't want it to abort parsing, which would improve editor intellisense 😄 treating it as if it weren't there at all makes the most sense to me.",
          "createdAt": "2021-03-14T17:03:34Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTk4OTQyNw==",
          "body": "#6217 was merged, giving a more meaningful error for this situation. I'm not sure if we should close this now or keep it upon until we decide if this should be a warning in the future, or only do that in a more loose AST parsing mode, which would need to be implemented and which would help for #4818",
          "createdAt": "2021-06-22T13:34:57Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzExMjA3OTA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI try using integrate the third library (specifically, [https://github.com/tw-in-js/twind](https://github.com/tw-in-js/twind)) using svelte `use:action`, and the `parameters` pass to action is usually a string, in order to use directive I have to wrap the param in a bracket `{}` and a quote `''`. It seems much more than we actually need `use:action={'mystring-params'}`\r\n\r\n```js\r\n\tfunction tw(node: HTMLElement, twClass: string) {\r\n\t\tnode.className = twind(twClass)\r\n\t\treturn {\r\n\t\t\tupdate(twClass: string) {\r\n\t\t\t\tnode.className = twind(twClass)\r\n\t\t\t},\r\n\t\t\tdestroy() {},\r\n\t\t}\r\n\t}\r\n```\r\n```js\r\n\t<div use:tw={'flex items-center justify-center'}>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nIt would be nice if svelte can support passing literal `string` params in the directive. Something like\r\n```js\r\n\t<div use:tw=\"flex items-center justify-center\">\r\n```\r\n\r\n**How important is this feature to you?**\r\nIn addition to the convenience short syntax, for example, I can take advantage of Tailwind IntelliSense.\r\n\r\n![image](https://user-images.githubusercontent.com/62163604/111064816-d40f8c80-84e8-11eb-936f-9da9d702b287.png)\r\n![image](https://user-images.githubusercontent.com/62163604/111064913-6f086680-84e9-11eb-9ac1-39a02d472e9c.png)\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-03-14T10:21:12Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzA5MzQ4MDU=",
    "body": "## Description\r\n\r\nWhen the expression is extracted into a function and use the function call as the condition, Svelte does not recalculate the condition.\r\n\r\n## Steps to reproduce\r\n\r\nhttps://svelte.dev/repl/f09867fff6564431b9aa6f9c4423a5e8?version=3.35.0\r\n\r\n## Expected behavior\r\n\r\nThe condition is re-evaluated when the variables change.\r\n\r\n## Other information\r\n- Browser: Firefox 87.0b9\r\n- OS: Arch\r\n\r\n## Severity\r\n\r\nIn Angular, extracting the expression into a function is common, so people moving from Angular to Svelte may get into this problem. The short-term solution I'm thinking about is fixing the doc so people are aware of this problem, because there is already an elegant way to make it work: reactive value.",
    "closedAt": "2021-03-13T17:00:48Z",
    "createdAt": "2021-03-13T16:29:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODYzMzc1Ng==",
          "body": "This is the intended behavior. The compiler looks at what variables are specifically referenced in an expression. Attempting to follow expressions outside of the template or outside of reactive blocks would be much more complicated, never possible to fully do at compile time, and would lead to more confusion about when things are reactive or not. The current rules are much simpler. There's an issue somewhere about improving the docs with a more fleshed-out description of what triggers reactivity.",
          "createdAt": "2021-03-13T17:00:48Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzA2MzkzODc=",
    "body": "Hi,\r\n\r\nI got a component PopupNotification which displays some info. Since there can be multiple notifications concurrently they're displayed in an each loop. When I delete one notification in instantly create a new one without waiting, the onMount of the newly created component isn't getting called. I use a writable state to store the component data.\r\n\r\n[I rebuilt the setup real quick](https://svelte.dev/repl/9d7b77dec7b34366ab0087b02bfc940b?version=3.35.0)\r\n\r\nIf you would create a new component with only 1ms delay it would work again.\r\n\r\nThanks for the great work and this framework, it's amazing! :D",
    "closedAt": "2021-03-13T13:27:37Z",
    "createdAt": "2021-03-12T23:12:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODM2NjI4OA==",
          "body": "Hello @m1212e !\n\nI don't know if ti should be working or not (going through the onMount callback) but you can probably use a keyed each block to achieve that. It will make sure that the new array item is different from the previous one.\n\nThe key should be representative of your items. It can be used with this syntax:\n\n```\n{#each array as item (item)}\n```\n\nYou could also go with item.message in your case.\n\nHope it helps.",
          "createdAt": "2021-03-13T13:20:10Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODM3NzYzNQ==",
          "body": "This works. Thank you!",
          "createdAt": "2021-03-13T13:27:37Z",
          "author": { "login": "m1212e", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzA1Nzk2MDA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThere are times when a component needs to know how it is being compiled.   The default Sapper template uses `@rollup/plugin-replace` to populate `process.browser` and `process.env.NODE_ENV` and this works well, but only when the author of a component is also the one deploying it.\r\n\r\nWhen authoring components to be shared, relying on globals like these is ill advised.  There's no consistency on these names between projects (JungleJS uses `process.env.PRODUCTION` instead of `process.env.NODE_ENV === 'production'` for example).  A component can't try to detect these either since Rollup is doing string replacement, not defining them in the global scope.   Using `typeof process` will never work and just typing `process.env.NODE_ENV` in the code will prevent compilation if it is not defined.\r\n\r\n**Describe the solution you'd like**\r\nComponents should be able to access compiler options.  In particular, `generate`, `dev`, and `legacy` seem like the highest priority ones.\r\n\r\nFor discussion purposes, here are the two possible syntax solutions that have occurred to me:\r\n\r\n```<svelte:options bind:dev />```\r\n\r\n```import { dev } from 'svelte/config'```\r\n\r\nAs long as they end up compiling to `const dev = true`, then tree-shaking should still work and not increase client JS sizes.",
    "closedAt": null,
    "createdAt": "2021-03-12T22:29:21Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzA1MDk5Nzk=",
    "body": "can i use the svelte with uikit?\r\n[https://github.com/uikit/uikit](https://github.com/uikit/uikit)\r\n",
    "closedAt": "2021-03-12T21:44:13Z",
    "createdAt": "2021-03-12T21:42:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Nzc3MzA1NA==",
          "body": "I don't know. This isn't the right place to ask questions like that.",
          "createdAt": "2021-03-12T21:44:13Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Nzc3MzIwNA==",
          "body": "Github issues are reserved for bug reports and feature requests. Please ask usage questions or technical questions on StackOverflow or the Svelte discord. https://svelte.dev/faq#where-can-i-get-support",
          "createdAt": "2021-03-12T21:44:34Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzA0NjU1OTM=",
    "body": "I do not understand the \"error model\" of svelte. Runtime error in one component causes whole app to stop responding. Only way out of it is to reload (f5) the browser. This does not feel resilient to me. IMO only the affected component should fail. Am I thinking about it wrongly, or missed something in the docs about this?\r\n\r\nHere is a example demonstrating the case.\r\nhttps://svelte.dev/repl/f097db80392243ab8edc8a8d6a355e98?version=3.35.0",
    "closedAt": "2021-03-12T21:25:33Z",
    "createdAt": "2021-03-12T21:09:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Nzc2NDI3NQ==",
          "body": "What you seem to be looking for are error boundaries. There is an open rfc for it https://github.com/sveltejs/rfcs/pull/46 . \r\nDuplicate of #1096 ",
          "createdAt": "2021-03-12T21:25:33Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjY5MDM5Ng==",
          "body": "Are their any onboarding guides for this project? Not that straight forward how to add/contribute. \r\n\r\nAdded rudimentary onError event lifecycle to prevent app from locking up, if anyone is interested. https://github.com/Baxterboom/svelte/pull/1\r\n\r\n`<script lang=\"ts\">\r\n    import {onError} from 'svelte';\r\n\r\n    onError(e => {\r\n        console.warn(\"onError\", e);\r\n        return true;\r\n    });\r\n\r\n</script>`",
          "createdAt": "2021-04-02T20:06:43Z",
          "author": { "login": "Baxterboom", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzAxOTIxNDk=",
    "body": "**Describe the bug**\r\nI cannot run a freshly copied svelte template in dev mode\r\n\r\n**Logs**\r\n```\r\n[!] Error: Package exports for '/home/joel/dev/playing/svelte/hello/node_modules/svelte' do not define a valid './compiler' target\r\nError: Package exports for '/home/joel/dev/playing/svelte/hello/node_modules/svelte' do not define a valid './compiler' target\r\n    at resolveExportsTarget (internal/modules/cjs/loader.js:460:13)\r\n    at resolveExports (internal/modules/cjs/loader.js:393:16)\r\n    at Function.Module._findPath (internal/modules/cjs/loader.js:492:20)\r\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:787:27)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:693:27)\r\n    at Module.require (internal/modules/cjs/loader.js:864:19)\r\n    at require (internal/modules/cjs/helpers.js:74:18)\r\n    at Object.<anonymous> (/home/joel/dev/playing/svelte/hello/node_modules/rollup-plugin-svelte/index.js:4:33)\r\n    at Module._compile (internal/modules/cjs/loader.js:971:30)\r\n    at Module._extensions..js (internal/modules/cjs/loader.js:1011:10)\r\n```\r\n\r\n**To Reproduce**\r\n```\r\nnpx degit sveltejs/template hello\r\ncd hello\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\n**Expected behavior**\r\nThe template app should run in development mode\r\n\r\n**Information about your Svelte project:**\r\n```\r\n  System:\r\n    OS: Linux 4.19 Ubuntu 18.04.5 LTS (Bionic Beaver)\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz\r\n    Memory: 130.74 MB / 1.94 GB\r\n    Container: Yes\r\n    Shell: 5.4.2 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 13.0.1 - ~/.nvm/versions/node/v13.0.1/bin/node\r\n    npm: 7.6.3 - ~/.nvm/versions/node/v13.0.1/bin/npm\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.41.1\r\n    svelte: ^3.0.0 => 3.35.0\r\n```\r\n",
    "closedAt": "2021-03-12T15:21:55Z",
    "createdAt": "2021-03-12T14:51:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzU0NTMwNA==",
          "body": "Node 13 has been end-of-life for nearly a year. First try switching to a currently supported version.",
          "createdAt": "2021-03-12T15:01:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzU1ODIzNQ==",
          "body": "@Conduitry that worked. I thought I had the latest LTS, but apparently the command I used was incorrect. Thank you!",
          "createdAt": "2021-03-12T15:21:55Z",
          "author": { "login": "joelft", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MzAxMjA0Mzc=",
    "body": "Hello,\r\n\r\nHere's a Repl I created, which is a part of a bigger project but I could not run it. It compiles without error but it throws this error at the runtime: `[HMR][Svelte] Unrecoverable error in <CatalougeView>: next update will trigger a full reload`\r\n`Uncaught (in promise) TypeError: ctx[1] is undefined`\r\n\r\nI've created a repl at here: https://svelte.dev/repl/f9a25ddc5f134aefbd1c27b66541948f?version=3.35.0\r\nand event the repl just freezes and crashes.\r\n\r\nIs this a bug in svelte?\r\n",
    "closedAt": "2021-03-12T13:37:54Z",
    "createdAt": "2021-03-12T13:29:23Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mjk3MjgyOTg=",
    "body": "Typescript prop type is not enforce inside VS Code, and no warning when type mismatch occur.\r\n\r\nCard.svelte\r\n```svelte\r\n<script lang=\"ts\">\r\n  export let val: number;\r\n</script>\r\n\r\n<h1>Value is: {val * 12}</h1>\r\n```\r\nApp.svelte\r\n```svelte\r\n<script>\r\n  import Card from \"./components/Card.svelte\";\r\n\r\n  export let name;\r\n  let str = \"test\";\r\n  let num = 12;\r\n</script>\r\n\r\n<main>\r\n  <h1>Hello {name}!</h1>\r\n  <p>\r\n    Visit the\r\n    <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a>\r\n    to learn how to build Svelte apps.\r\n  </p>\r\n  <Card val={num} />\r\n  <Card val={str} />\r\n</main>\r\n```\r\n\r\n\r\n<img width=\"776\" alt=\"Screen Shot 2021-03-12 at 10 39 05 AM\" src=\"https://user-images.githubusercontent.com/17086745/110888661-3583ff80-831f-11eb-8572-6f5d21a0890f.png\">\r\n\r\n\r\nAs can be seen, svelte accept both type string and number for \"val\".\r\nThere is no warning during compilation phase well when run \"npm run dev\" (rollup -c -w)\r\n\r\n- VS Code: 1.54.1\r\n- Svelte for VS Code: 104.6.4\r\n\r\n\r\n- tsconfig\r\n```javascript\r\n{\r\n\"extends\": \"@tsconfig/svelte/tsconfig.json\",\r\n    \"compilerOptions\": {\r\n      \"strict\": true,\r\n    },\r\n    \"include\": [\"src/**/*\"],\r\n}\r\n```\r\n\r\n- package.json\r\n```javascript\r\n{\r\n\"devDependencies\": {\r\n    \"@rollup/plugin-commonjs\": \"^17.1.0\",\r\n    \"@rollup/plugin-node-resolve\": \"^11.2.0\",\r\n    \"@rollup/plugin-typescript\": \"^8.2.0\",\r\n    \"@tsconfig/svelte\": \"^1.0.10\",\r\n    \"rollup\": \"^2.41.1\",\r\n    \"rollup-plugin-css-only\": \"^3.1.0\",\r\n    \"rollup-plugin-livereload\": \"^2.0.0\",\r\n    \"rollup-plugin-svelte\": \"^7.1.0\",\r\n    \"rollup-plugin-terser\": \"^7.0.2\",\r\n    \"svelte\": \"^3.35.0\",\r\n    \"svelte-check\": \"^1.2.5\",\r\n    \"svelte-preprocess\": \"^4.6.9\",\r\n    \"tslib\": \"^2.1.0\",\r\n    \"typescript\": \"^4.2.3\"\r\n  },\r\n  \"dependencies\": {\r\n    \"sirv-cli\": \"^1.0.11\"\r\n  }\r\n```\r\n",
    "closedAt": "2021-03-12T04:36:51Z",
    "createdAt": "2021-03-12T03:40:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzIxMzk5MA==",
          "body": "Does it work if you add the Lang to the script?",
          "createdAt": "2021-03-12T03:43:21Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzIyODQ5NQ==",
          "body": "Damn this is a silly mistsake... \r\n\r\nI am embarrassed haha..",
          "createdAt": "2021-03-12T04:36:51Z",
          "author": { "login": "vh13294", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mjk2MjI5MzY=",
    "body": "Hello guys, I have encountered a problem with slot props, the scenario of the issue is:\r\nWhen component A ( which have slot element and export slot props ) inserted in the named slot of component B ( have both named and default slot elements ) using the slot property and try accessing component A's slot props will results in \"undefined\" values, however, everything works fine  if the component used as default slot\r\n\r\nI have created a reproduction of the issue in REPL, please check out this link:\r\nhttps://svelte.dev/repl/c1284a4af1eb48768a2e66ece04abe8d?version=3.35.0\r\n",
    "closedAt": null,
    "createdAt": "2021-03-11T23:47:13Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzM1NDI0Mg==",
          "body": "[https://svelte.dev/repl/7527e3ba5ae148389cb43a5453e3b828?version=3.35.0](https://svelte.dev/repl/7527e3ba5ae148389cb43a5453e3b828?version=3.35.0)",
          "createdAt": "2021-03-12T09:18:05Z",
          "author": { "login": "meiseayoung", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzM5ODAwMA==",
          "body": "@meiseayoung <svelte:fragment slot=\"name\" let:prop> is also working fine, the issue appears only when using component as a named slot",
          "createdAt": "2021-03-12T10:32:17Z",
          "author": { "login": "ryu-man", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTgzNTU2OA==",
          "body": "A component that has a slot attribute will not provide his slot props, but rather you will access the slot props provided by the direct parent",
          "createdAt": "2021-04-14T21:11:12Z",
          "author": { "login": "ryu-man", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mjk1MTQ4MDY=",
    "body": "Running `npm install` with npm 7 on the repo currently doubles the length of the lockfile as part of converting it to version 2. I'm not sure what's going on here. When I just had to add a new dependency, I ended up manually editing some of the changes to the lockfile back out. At least `npm ci` with npm v7 seems to leave things unchanged.\r\n\r\n(Maybe this is a good opportunity to switch to using pnpm?)",
    "closedAt": null,
    "createdAt": "2021-03-11T20:53:24Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzA0NjAzNw==",
          "body": "The v2 file is backwards compatible with the v1 file (perhaps that's why it's larger?). I can't imagine the size of it really matters. I'd say we just go ahead and upgrade",
          "createdAt": "2021-03-11T21:01:22Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzA4MDYxNQ==",
          "body": "I remember running into other issues before too, like none of the node_modules/.bin files being created, although I can't seem to reproduce that now. I'd like to take another look at that first at least.",
          "createdAt": "2021-03-11T22:04:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzI3MzM5Mw==",
          "body": "Stop asking and get it . GO GET IT\n\nOn Thu, Mar 11, 2021 at 2:05 PM Conduitry ***@***.***> wrote:\n\n> I remember running into other issues before too, like none of the\n> node_modules/.bin files being created, although I can't seem to reproduce\n> that now. I'd like to take another look at that first at least.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/6074#issuecomment-797080615>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ARJ6A4O6PIRHFOPJOKCQO6DTDEV77ANCNFSM4ZBAGY7Q>\n> .\n>\n",
          "createdAt": "2021-03-12T06:41:29Z",
          "author": { "login": "MrBigBanks", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzI3NDE5NA==",
          "body": ">\n> LIKE WHY NOT I BUT YOU NOT ME AS IN NOT I NOR U FOR ME . I\n\n\nOn Thu, Mar 11, 2021 at 10:41 PM MrBigBanks ***@***.***>\nwrote:\n\n> Stop asking and get it . GO GET IT\n>\n> On Thu, Mar 11, 2021 at 2:05 PM Conduitry ***@***.***> wrote:\n>\n> > I remember running into other issues before too, like none of the\n> > node_modules/.bin files being created, although I can't seem to reproduce\n> > that now. I'd like to take another look at that first at least.\n> >\n> > —\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/sveltejs/svelte/issues/6074#issuecomment-797080615>,\n> > or unsubscribe\n> > <\n> https://github.com/notifications/unsubscribe-auth/ARJ6A4O6PIRHFOPJOKCQO6DTDEV77ANCNFSM4ZBAGY7Q\n> >\n> > .\n> >\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/6074#issuecomment-797273393>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ARJ6A4IQEIUFJOTVUZXHPMDTDGZSRANCNFSM4ZBAGY7Q>\n> .\n>\n",
          "createdAt": "2021-03-12T06:43:19Z",
          "author": { "login": "MrBigBanks", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzI3NDUzOA==",
          "body": "✒🗓📉📇📡📤💹✒✒✒\n\nOn Thu, Mar 11, 2021 at 10:43 PM Mason DaBanks ***@***.***>\nwrote:\n\n> LIKE WHY NOT I BUT YOU NOT ME AS IN NOT I NOR U FOR ME . I\n>\n>\n> On Thu, Mar 11, 2021 at 10:41 PM MrBigBanks ***@***.***>\n> wrote:\n>\n>> Stop asking and get it . GO GET IT\n>>\n>> On Thu, Mar 11, 2021 at 2:05 PM Conduitry ***@***.***> wrote:\n>>\n>> > I remember running into other issues before too, like none of the\n>> > node_modules/.bin files being created, although I can't seem to\n>> reproduce\n>> > that now. I'd like to take another look at that first at least.\n>> >\n>> > —\n>> > You are receiving this because you are subscribed to this thread.\n>> > Reply to this email directly, view it on GitHub\n>> > <https://github.com/sveltejs/svelte/issues/6074#issuecomment-797080615\n>> >,\n>> > or unsubscribe\n>> > <\n>> https://github.com/notifications/unsubscribe-auth/ARJ6A4O6PIRHFOPJOKCQO6DTDEV77ANCNFSM4ZBAGY7Q\n>> >\n>> > .\n>> >\n>>\n>> —\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/sveltejs/svelte/issues/6074#issuecomment-797273393>,\n>> or unsubscribe\n>> <https://github.com/notifications/unsubscribe-auth/ARJ6A4IQEIUFJOTVUZXHPMDTDGZSRANCNFSM4ZBAGY7Q>\n>> .\n>>\n>\n",
          "createdAt": "2021-03-12T06:44:12Z",
          "author": { "login": "MrBigBanks", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzI3NTEwNg==",
          "body": "TO INFINITY AND ELON !🔐🔓🔨🗝🗿🌐\n\nOn Thu, Mar 11, 2021 at 10:43 PM Mason DaBanks ***@***.***>\nwrote:\n\n> ✒🗓📉📇📡📤💹✒✒✒\n>\n> On Thu, Mar 11, 2021 at 10:43 PM Mason DaBanks <\n> ***@***.***> wrote:\n>\n>> LIKE WHY NOT I BUT YOU NOT ME AS IN NOT I NOR U FOR ME . I\n>>\n>>\n>> On Thu, Mar 11, 2021 at 10:41 PM MrBigBanks ***@***.***>\n>> wrote:\n>>\n>>> Stop asking and get it . GO GET IT\n>>>\n>>> On Thu, Mar 11, 2021 at 2:05 PM Conduitry ***@***.***> wrote:\n>>>\n>>> > I remember running into other issues before too, like none of the\n>>> > node_modules/.bin files being created, although I can't seem to\n>>> reproduce\n>>> > that now. I'd like to take another look at that first at least.\n>>> >\n>>> > —\n>>> > You are receiving this because you are subscribed to this thread.\n>>> > Reply to this email directly, view it on GitHub\n>>> > <https://github.com/sveltejs/svelte/issues/6074#issuecomment-797080615\n>>> >,\n>>> > or unsubscribe\n>>> > <\n>>> https://github.com/notifications/unsubscribe-auth/ARJ6A4O6PIRHFOPJOKCQO6DTDEV77ANCNFSM4ZBAGY7Q\n>>> >\n>>> > .\n>>> >\n>>>\n>>> —\n>>> You are receiving this because you are subscribed to this thread.\n>>> Reply to this email directly, view it on GitHub\n>>> <https://github.com/sveltejs/svelte/issues/6074#issuecomment-797273393>,\n>>> or unsubscribe\n>>> <https://github.com/notifications/unsubscribe-auth/ARJ6A4IQEIUFJOTVUZXHPMDTDGZSRANCNFSM4ZBAGY7Q>\n>>> .\n>>>\n>>\n",
          "createdAt": "2021-03-12T06:45:32Z",
          "author": { "login": "MrBigBanks", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMjcxMzIzOQ==",
          "body": "For the time being I've taken to running `npm install -g npm@6` when working on Svelte and then `npm install -g npm@latest` when I'm done so I can go back to working on my other projects. This is a painfully stupid workflow but at least I'm unblocked",
          "createdAt": "2021-04-19T19:07:31Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0OTM5NDMxNQ==",
          "body": "I remember running into a similar issue, where I was the one messing up the lockfile, but as someone pointed out in the resulting conversation, you can use `npm ci` to make it respect the lockfile",
          "createdAt": "2021-05-27T07:14:17Z",
          "author": { "login": "MeerBiene", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjkxMjkyMTU=",
    "body": "I would like to use svelte but within visual studio 2019. \r\nYou have already created VS Code extension and I would like to see something like that for Visual Studio 2019.\r\nDo you have any plans creating extension for Visual Studio as well?\r\n",
    "closedAt": "2021-03-15T22:05:59Z",
    "createdAt": "2021-03-11T12:59:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NjgxMzI5MA==",
          "body": "Might be possible to port the vscode extension to visual studio. I could try it though. But this is definitely out of the scope of this repo as well as the language-tools repo.",
          "createdAt": "2021-03-11T15:19:53Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Njg3MzkxNw==",
          "body": "> But this is definitely out of the scope of this repo as well as the language-tools repo.  \r\n\r\nyes I agree with you ;)  \r\n\r\nwhat would be the best place for this feature? \r\n",
          "createdAt": "2021-03-11T16:40:21Z",
          "author": { "login": "croban", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Nzk5MTE3MQ==",
          "body": "Got a prototype in [my repo](https://github.com/jasonlyu123/SvelteVisualStudio) now. It's just a simple wrapper for visual studio 2019. The core is the same as the official extension. If I can solve the biggest problem I am facing now. I can probably publish it to the vs marketplace. \r\n\r\n----\r\nreleased https://marketplace.visualstudio.com/items?itemName=lyu-jason.svelte-vs",
          "createdAt": "2021-03-13T09:06:40Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5OTc2Mjg5OA==",
          "body": "> Got a prototype in my repo now. It's just a simple wrapper for visual studio 2019. The core is the same as the official extension. If I can solve the biggest problem I am facing now. I can probably publish it to the vs marketplace.\r\n\r\nI would like to try it for real production use case, would that be a possible, or should I go with vs code? What do you think? ",
          "createdAt": "2021-03-15T21:25:25Z",
          "author": { "login": "croban", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5OTc4NjA0Mg==",
          "body": "Can you discuss this in the svelte chat or elsewhere please :)",
          "createdAt": "2021-03-15T22:05:53Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mjc4NTUwNDM=",
    "body": "**Describe the bug**\r\n I need to sorted my list by some criteria, and find the list cannot reorder correctly, I don't know If I make some mistakes or this is a bug\r\n**To Reproduce**\r\nwhen I checked the checkbox it will show resort list correctly, but when I unchecked nothing changed\r\n\r\nhttps://codesandbox.io/s/aged-frog-6x514?file=/App.svelte\r\n```\r\n<script>\r\nimport {  writable } from \"svelte/store\";\r\n\r\nexport const list = writable([\r\n  {\r\n    id: 1,\r\n    color: 'green'\r\n  },\r\n  {\r\n    id: 2,\r\n    color: 'red'\r\n  },\r\n  {\r\n    id: 3,\r\n    color: 'blue'\r\n  }\r\n]);\r\n\r\n  let sort = false;\r\n  $: sortList = !sort ?\r\n    $list:\r\n    $list.sort((a, b) => a.color.localeCompare(b.color));\r\n</script>\r\n\r\n<main>\r\n<h1>Hello CodeSandbox</h1>\r\n\t{#each sortList as list (list.id)}\r\n    <div>{list.id}</div>\r\n    <div>{list.color}</div>\r\n  {/each}\r\n  <input type=\"checkbox\" id=\"\" bind:checked={sort}>\r\n</main>\r\n```",
    "closedAt": "2021-03-10T15:03:39Z",
    "createdAt": "2021-03-10T14:48:12Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NTU2MjAyMA==",
          "body": "`.sort()` mutates the array it's called on, so the `$list` array no longer reflects the actual value in the store. (If the `list` store is later updated, `$list` will be as well, but until then it will have the wrong value.) If you do `$list.slice().sort(...)`, you'll instead be sorting a copy of the array, and this works.",
          "createdAt": "2021-03-10T15:03:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mjc2ODM1MjY=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm trying to export spring stores but I can't specify their types as ```Spring<...>``` for the external binding variables.\r\n\r\n**Describe the solution you'd like**\r\nCan the ```Spring``` interface be exported?\r\n\r\nhttps://github.com/sveltejs/svelte/blob/ce3a5791258ec6ecf8c1ea022cb871afe805a45c/src/runtime/motion/spring.ts#L61-L67\r\n\r\n### Use case\r\n```svelte\r\n<!-- file: welcome.svelte -->\r\n<!-- some unrelated markup -->\r\n<div \r\n    class=\"circle\"\r\n    style=\"\r\n        --x:{$x}px;\r\n        --y:{$y}px;\r\n    \"\r\n>r</div>\r\n<!-- some more unrelated markup -->\r\n<style>\r\n.circle{\r\n    --x:0;\r\n    --y:0;\r\n    top:var(--y);\r\n    left:var(--x);\r\n}\r\n</style>\r\n<script lang=\"ts\">\r\n//...\r\nimport { spring } from 'svelte/motion';\r\n\r\nexport let x = spring(0,{\r\n    stiffness: 0.1,\r\n    damping: 0.25\r\n});\r\nexport let y = spring(0,{\r\n    stiffness: 0.1,\r\n    damping: 0.25\r\n});\r\n//...\r\nonMount(()=>{\r\n    document.addEventListener(\"mousemove\",e=>{\r\n        //some logic\r\n\r\n        x.set(/*some value*/);\r\n        y.set(/*some value*/);\r\n    });\r\n})\r\n</script>\r\n```\r\nBeing able to do this and specify types would be useful:\r\n```svelte\r\n<!-- file: home.svelte -->\r\n<Welcome bind:x bind:y/>\r\n<script lang=\"ts\">\r\nimport type { Spring } from 'svelte/motion';    // <=== this would be useful\r\nimport Welcome from './welcome.svelte';\r\n\r\nlet x:Spring<number>;\r\nlet y:Spring<number>;\r\n\r\n//now I know for sure that x and y are Spring<number>\r\n</script>\r\n```\r\n---\r\n\r\nSame thing with Tweened:\r\nhttps://github.com/sveltejs/svelte/blob/ce3a5791258ec6ecf8c1ea022cb871afe805a45c/src/runtime/motion/tweened.ts#L66-L70",
    "closedAt": "2021-03-24T14:46:48Z",
    "createdAt": "2021-03-10T12:46:59Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4Mjc1MDMxMzI=",
    "body": "Hello,\r\n\r\nThanks for svelte !!!!\r\n\r\nI would like to get a different transition between desktop and mobile / tablet.\r\nHow this make happened ?\r\n\r\nThank you",
    "closedAt": "2021-03-10T11:05:44Z",
    "createdAt": "2021-03-10T10:30:53Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NTI1NTkzOA==",
          "body": "Hi Aylay - please ask usage questions in the [chat](https://svelte.dev/chat) as mentioned in the issue template, we reserve github issues for bugs and feature requests only.",
          "createdAt": "2021-03-10T11:05:44Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NTI3MzA1MQ==",
          "body": "Sorry ;)",
          "createdAt": "2021-03-10T11:21:15Z",
          "author": { "login": "Aylay", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjcwNTgxNTM=",
    "body": "**Describe the bug**\r\nEvent is still dispatched after component is destroyed\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a1c8fff50d6d4197abcfd35676bd59b8?version=3.35.0\r\n\r\n**Expected behavior**\r\nEvent should not be dispatched after component is destroied\r\n",
    "closedAt": "2021-03-18T16:13:21Z",
    "createdAt": "2021-03-10T04:03:12Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODM4MDc3NQ==",
          "body": "Hello @orange4glace !\n\nIs this a sveltejs bug or just a javascript behavior? Have you tried with JavaScript alone?\n\nDid you try to cancel the event or the serTimout function is the component onDestroy callback?\n\nI think that if you want this issue to be considered, you'd better add details about a usefull usecase about it.\n\nSome people might want to keep this behavior in some cases.\n\nHave a great day!",
          "createdAt": "2021-03-13T13:29:43Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODQxODI0Mg==",
          "body": "Hi @Ennoriel ! In my defence, I think event should not be dispatched after component is destroyed *semantically* even though event is even fired by `setTimeout` or something else.\r\n\r\n> Some people might want to keep this behavior in some cases.\r\n\r\nBut it also seems make sense. I think we need some considerations for this!",
          "createdAt": "2021-03-13T14:02:42Z",
          "author": { "login": "orange4glace", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMjA1NzE2Nw==",
          "body": "I think the current behaviour is the behaviour we would want to retain - anything else would be unpredictable to somebody familiar with Javascript, which is definitely not what we want. We're not here to reinvent the whole language!\r\n\r\nOn an unrelated note, I don't think we could even fix this without tracking arbitrary operations made by the user, which definitely isn't our concern.\r\n\r\nThe component is destroyed, but the memories remain :notes: ",
          "createdAt": "2021-03-18T16:13:21Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzk5NjA3Nw==",
          "body": "The semantics of what the `dispatch` function does isn't related to the semantics of the programming language used to code, it's not at the same level (it would be like saying our program is JavaScript - no, it uses JavaScript, which gives possibilities to do anything we define).\r\n\r\nIt's an arbitrary choice whether to let the event go through after the component instance the dispatcher is attached to has been destroyed. Wouldn't it be something like (roughly): \r\n\r\n```javascript\r\nfunction dispatch(arg) {\r\n    // ...\r\n    if (isDestroyed(component)) return;\r\n    // ...\r\n}\r\n```\r\n\r\nNow, that: \r\n\r\n- it would be a breaking change: yes\r\n- it would be unexpected: depends on the definition which is given to the event dispatcher entity\r\n- both versions might be wanted by the users: yes, in which case it's either a clearly documented arbitrary choice, or a compiler / runtime option\r\n\r\nAt the very minimum, in the current state, it requires documentation, because nothing in JavaScript at all can tell what is the expected behavior (hence the opening of the GitHub issue).",
          "createdAt": "2021-03-22T11:38:09Z",
          "author": { "login": "ymeine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDAxODc1Mg==",
          "body": "Agree with @ymeine\r\nI don't think the behavior of `dispatch` is about **how javascript works**, but **how svelte works**.\r\nIt's more nature that `on:event` emits the event as long as the component is alive.\r\nWhen the component is destroyed, it means that we do not need to (or, we do not want to) subscribe the event of destroyed component anymore.",
          "createdAt": "2021-03-22T12:18:01Z",
          "author": { "login": "orange4glace", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDA5MjQxNA==",
          "body": "I believe the nature of this change would require doing something which differs from the expected behaviour of Javascript, which we are a superset of. This is contrary to the principle of least surprise.\r\n\r\nIn the REPL listed you are creating a memory pointer to the `dispatch` function which continues to live beyond the component lifecycle, since the garbage collector will not clean up references to objects which are still in use. This is the expected behaviour of Javascript. In this trite example, the `onDestroy` function could simply clear the timeout, as mentioned earlier. `setTimeout` is not within the component lifecycle, and is in fact part of the browser's own lifecycle.\r\n\r\nI'd even be hesitant to document this, because we are then simply documenting how the v8 engine's garbage collector works, which is out of the scope for the Svelte documentation. The joy of not diverging from the behaviour of Javascript/v8 itself is that we don't need to document how this sort of thing behaves because we're not changing that behaviour.",
          "createdAt": "2021-03-22T14:10:11Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNDE1ODk3Mg==",
          "body": "The issue here is not about referencing a `dispatch` function because the written code isn't defining that at all. What it does is: \r\n\r\n- defining an event listener on a component on one side\r\n- defining an event dispatcher inside the component on the other side\r\n\r\nBtw, those two things are already expressed in terms of Svelte's semantics, not JavaScript's semantics.\r\n\r\nCalling the dispatcher eventually leads to calling the listener. But that ain't nothing to do with JavaScript, V8, DOM or whatsoever: this is business code related to internals of Svelte. You can define whatever behavior you want regarding `dispatch`'s implementation.\r\n\r\nHence the necessity to at least document that, if not opening it to change (which would require more specs).\r\n\r\n__PS: we're not talking about clearing the timeout which will anyways execute (and that is indeed due to JavaScript's behavior), we're talking about defining the behavior of the `dispatch` function after the component is destroyed__",
          "createdAt": "2021-03-22T15:36:48Z",
          "author": { "login": "ymeine", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjQ2ODg3NDA=",
    "body": "Currently when I want to create a reusable button component for default styling, there is no elegant way to allow all default html button attributes for the button. In React it can be done like this\r\n\r\n```ts\r\nimport React from 'react';\r\n\r\ntype ButtonProps = {\r\n\tvariant?: 'solid' | 'outline';\r\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button = ({\r\n\tvariant = 'solid',\r\n\t...props\r\n}: ButtonProps) => {\r\n\treturn (\r\n\t\t<button\r\n\t\t\t{...props}\r\n\t\t\tclassName={variant}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n```\r\nAnd then I can easily use any attribute I want, and it even gives me intellisense\r\n```jsx\r\n<Button variant=\"outline\" onClick={someFunc} type=\"submit\" />\r\n```\r\n\r\nHowever in Svelte, as far as I can see, there are two ways to do this neither of which are very good. The first is to use `$$props`:\r\n```svelte\r\n<script lang=\"ts\">\r\n      export let variant: \"solid\" | \"outline\" = \"solid\"\r\n</script>\r\n\r\n<button {...$$props} class={variant} >\r\n      <slot />\r\n</button>\r\n```\r\nHowever this does not give me intellisense when using it somewhere else, and events are not forwarded among other things\r\n```svelte\r\n<Button variant=\"outline\" on:click={isNotForwarded} type=\"submit\"  />\r\n```\r\n\r\nThe other way is to explicitly specify every single attribute possible for an html button, and forward the events manually\r\n```svelte\r\n<script lang=\"ts\">\r\n      export let variant: \"solid\" | \"outline\" = \"solid\";\r\n      export let type: string = \"button\";\r\n      // All other attributes\r\n</script>\r\n\r\n<button {...$$props} {type} on:click class={variant} /* Handle other forwarding and stuff */ >\r\n      <slot />\r\n</button>\r\n```\r\nHowever that quickly becomes a very large file, boilerplate-y, and boring to write\r\n\r\nNow I propose something more similar to React\r\n```svelte\r\n<script lang=\"ts\">\r\n\ttype ButtonProps = {\r\n\t\tvariant?: 'solid' | 'outline';\r\n\t} & svelte.JSX.DOMAttributes<HTMLButtonElement> &\r\n\t\tsvelte.JSX.HTMLAttributes<HTMLButtonElement>;\r\n        // or maybe something more succinct if it exists\r\n\r\n\texport let {variant = \"solid\", ...props}: ButtonProps;\r\n</script>\r\n\r\n<button {...props} class={variant}>\r\n\t<slot />\r\n</button>\r\n```\r\nAnd then you could use it like this and get intellisense, automatic event forwarding\r\n```svelte\r\n<Button variant=\"outline\" on:click={someFunc} type=\"submit\" />\r\n```\r\n\r\nAn alternative could also be to strongly type the $$props to get intellisense, and automatically forward events.",
    "closedAt": "2021-03-08T16:41:34Z",
    "createdAt": "2021-03-08T15:49:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Mjg4NzgzNg==",
          "body": "The props typing would be addressed by [this rfc](https://github.com/sveltejs/rfcs/pull/38). \r\nThe forwarding of all events is a different issue and tracked in #2837 . I'm therefore closing this as a duplicate. Feel free to comment if you think this should be reopened.",
          "createdAt": "2021-03-08T16:41:33Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjQ2Njk4NTM=",
    "body": "**Describe the bug**\r\nThe AST for components using a slotted element is missing the slotted element.\r\n\r\n**Logs**\r\nn/a\r\n\r\n**To Reproduce**\r\nCompile `<Component><div slot='foo'></div></Component>` with Svelte 3.35.0 and look at the AST.\r\n\r\n**Expected behavior**\r\nThe AST should be as it was in 3.34.0 and include the `<div>`.\r\n\r\n**Stacktraces**\r\nn/a\r\n\r\n**Information about your Svelte project:**\r\nSvelte 3.35.0\r\n\r\n**Severity**\r\nThe right JS code looks like it's still being generated, so this isn't huge. But it will affect tooling. Medium-high I'd say.\r\n\r\n**Additional context**\r\nThis was brought to light by https://github.com/sveltejs/eslint-plugin-svelte3/issues/94\r\n",
    "closedAt": "2021-03-30T02:55:53Z",
    "createdAt": "2021-03-08T15:27:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Mjg2MTA0MQ==",
          "body": "Hi! Is this somehow related to such compilation errors as below? Sometimes I get them on 6-7 components (mostly simple) that use slots. Couldn't reproduce it in REPL, unfortunately. ( Repeats unpredictably on 3.35.0 (only) during compilation.\r\n\r\n```\r\nERROR in ./app/components/layout/Tabs.svelte\r\nModule build failed (from ./node_modules/svelte-loader/index.js):\r\nError: TypeError: TypeError: renderer.add_string is not a function\r\n    at C:\\path_to_my_project\\node_modules\\svelte-loader\\index.js:74:12\r\n```\r\n\r\n",
          "createdAt": "2021-03-08T16:06:31Z",
          "author": { "login": "kkarpeev", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NDE2NTE0Ng==",
          "body": "@tanhauhau I'm looking at this now, and am a bit confused by what's going on. It looks like there's a `new SlotTemplateWrapper` for each child of an inline component, regardless of what's happening in the component there.\r\n\r\nhttps://github.com/sveltejs/svelte/blob/1d6e20f2a967aebfa9c3eab769ca587345169632/src/compiler/compile/render_dom/wrappers/InlineComponent/index.ts#L82\r\n\r\nIs this intended? Did the AST change significantly with your changes for `<svelte:fragment>`? What I'm also confused about is that the AST that's output for something like `<A><div/></A>` still looks correct, with no `SlotTemplate` nodes.",
          "createdAt": "2021-03-09T17:00:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NDY0Mzc2NQ==",
          "body": "oh no 😦\r\n\r\nI rearranged the children of the `InlineComponent` node to wrap `<element slot=\"xxx\">`, `<Component slot=\"xxx\">` with `<svelte:fragment slot=\"xxx\">`, and all the remaining elements with `<svelte:fragment>`\r\n\r\nIn this step, I mutated the AST node. (L114)\r\n\r\nhttps://github.com/sveltejs/svelte/blob/1d6e20f2a967aebfa9c3eab769ca587345169632/src/compiler/compile/nodes/InlineComponent.ts#L109-L150\r\n\r\nSo, I have 2 options from here:\r\n\r\n1. used the updated AST with `<svelte:fragment>` inserted\r\n\r\n```diff\r\n\r\n+ // assign back the children with updated children\r\n+ info.children = children\r\n  this.children = map_children(component, this, this.scope, children);\r\n```\r\n\r\n2. freeze the `ast.html` before mutation as well\r\n\r\nhttps://github.com/sveltejs/svelte/blob/2925a00eff74414d5bc1d28a492e54ff827d00a6/src/compiler/compile/Component.ts#L117-L124\r\n\r\n```js\r\nthis.original_ast = {\r\n\thtml: JSON.parse(JSON.stringify(ast.html)),\r\n\tcss: ast.css,\r\n\tinstance: ast.instance && JSON.parse(JSON.stringify(ast.instance)),\r\n\tmodule: ast.module\r\n};\r\n```\r\n\r\nor rather\r\n\r\n```js\r\nthis.original_ast = JSON.parse(JSON.stringify({\r\n\thtml: ast.html,\r\n\tcss: ast.css,\r\n\tinstance: ast.instance,\r\n\tmodule: ast.module\r\n}));\r\n```",
          "createdAt": "2021-03-10T00:17:16Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Njg5MTkyNQ==",
          "body": "Maybe it is better to involve community in testing this sort of changes in their production projects before pushing it to the master? Tell them what to look for or something.\r\n\r\nCurrent way of getting to know something has regressed involves reading PR diffs and trying to speculate on that.\r\n\r\nBut that could be more transparently communicated from feature-pushers, saving time and making bug-squashing a more straightforward process. :thinking: \r\n\r\nFAQ assures that you shouldn't bother with testing svelte implementation details: https://svelte.dev/faq#how-do-i-test-svelte-apps\r\n\r\nI think it would be better to live up to that expectation.",
          "createdAt": "2021-03-11T17:04:38Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NjkwMTkxNg==",
          "body": "@Conduitry can you elaborate on what you found funny?",
          "createdAt": "2021-03-11T17:18:33Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NjkzMTU2NA==",
          "body": "This problem is entirely internal. The AST is no specced and we make no guarantees of its stability. This has zero implication on production applications as it does not change the output of the compiler. ",
          "createdAt": "2021-03-11T18:04:08Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NjkzNzE2OQ==",
          "body": "> Hi! Is this somehow related to such compilation errors as below? Sometimes I get them on 6-7 components (mostly simple) that use slots. Couldn't reproduce it in REPL, unfortunately. ( Repeats unpredictably on 3.35.0 (only) during compilation.\r\n> \r\n> ```\r\n> ERROR in ./app/components/layout/Tabs.svelte\r\n> Module build failed (from ./node_modules/svelte-loader/index.js):\r\n> Error: TypeError: TypeError: renderer.add_string is not a function\r\n>     at C:\\path_to_my_project\\node_modules\\svelte-loader\\index.js:74:12\r\n> ```\r\n\r\n@pngwn I wouldn't write that if we didn't end up in a situation where 3.35 randomly throws compilation errors on components with slots.\r\nLooks like something is trying to access a field of a null, and I've found related code in PR's diffs.\r\nDo you have an idea how we should proceed to better isolate the issue?",
          "createdAt": "2021-03-11T18:10:06Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NjkzOTY1MA==",
          "body": "Open a new issue with a simple reproduction. ",
          "createdAt": "2021-03-11T18:14:02Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzAzNjg3Nw==",
          "body": "@tanhauhau I probably wouldn't be against cloning the whole AST. I do think I would want to try something like lukeed's https://github.com/lukeed/klona though, rather than `JSON.parse(JSON.stringify(foo))` though. I think there are other places where we could benefit from its increased performance over stringify/parse as well. I'll take a look.",
          "createdAt": "2021-03-11T20:45:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzA2NTQ3MQ==",
          "body": "One issue with the above suggestion of cloning the whole AST at that point for use later is that we'd fail the https://github.com/sveltejs/svelte/tree/master/test/parser/samples/textarea-children test, because we'd now be returning the `<textarea>` contents as children rather than normalizing them to be a `value` attribute. I'm not sure how important this is to have. It shouldn't affect the generated code, just the AST.",
          "createdAt": "2021-03-11T21:35:36Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzI4MjM0OA==",
          "body": "I want to point out that language tools (with svelte2tsx), the prettier plugin and the eslint plugin all rely on the AST to some extend, so while the API is technically private, it's still something we can't change it at will.",
          "createdAt": "2021-03-12T07:02:42Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5OTAwMDAyOA==",
          "body": "Base on this issue message it's can be only SSR render but base on user's reports they don't use SSR. It's strange. ",
          "createdAt": "2021-03-14T23:25:25Z",
          "author": { "login": "stalkerg", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjQ0MzMyODI=",
    "body": "Hello, I trying to make sort of a directive tooltip.\r\nSo simple version kinda works, but the problem appears when I trying to show content in the tooltip dynamically.\r\nhttps://svelte.dev/repl/780f2bfdbf3449ecae943a312cc0b615?version=3.35.0\r\n\r\nHow can I solve this?",
    "closedAt": "2021-03-08T10:50:42Z",
    "createdAt": "2021-03-08T10:44:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjY2OTMwMg==",
          "body": "GitHub issues are reserved for bugs and feature requests. This is a usage question, please ask these on StackOverflow or the Discord channel.\r\n\r\nThat said, have a look at the [update function](https://svelte.dev/docs#use_action) of actions, which will solve your issue.",
          "createdAt": "2021-03-08T10:50:42Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjY4NjM0MQ==",
          "body": "@dummdidumm Amazing, great thank you!",
          "createdAt": "2021-03-08T11:18:29Z",
          "author": { "login": "thousandsofraccoons", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjQzNTY0OTU=",
    "body": "**Describe the bug**\r\n\r\nI'm getting this error (and a failure to initialize of the Svelte app) in a specific case:\r\n\r\n- I'm using another JS framework, which works so that it re-creates the page html from the scratch every time the page (and url) has changed.\r\n- I'm initializing Svelte by injecting script tag into the html (after the page has been created)\r\n\r\n**Logs**\r\n```\r\nApp.svelte:7 Uncaught DOMException: Failed to execute 'define' on 'CustomElementRegistry': the name \"hello-svelte\" has already been used with this registry\r\n    at http://localhost:5000/build/bundle.js:441:20\r\n    at http://localhost:5000/build/bundle.js:449:2\r\n(anonymous) @ App.svelte:7\r\n(anonymous) @ main.js:5\r\n```\r\n\r\n**To Reproduce**\r\n\r\nClone this repo https://github.com/ile/svelte-reproduction, install & run.\r\n\r\n```\r\ngit clone https://github.com/ile/svelte-reproduction\r\ncd svelte-reproduction\r\nnpm i\r\nnpm run dev\r\n```\r\n\r\n... When running the app, the error happens when clicking the link to \"/\" the first time. At that point the page is re-created and the script tag is injected the second time and this causes the conflict.\r\n\r\n**Thoughts**\r\n\r\nI'm not sure if you would want to fix this as this is a specific case. But of course it would be nice if Svelte could handle this case.\r\n\r\n",
    "closedAt": "2021-03-08T12:34:21Z",
    "createdAt": "2021-03-08T09:14:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjYyMzE5OQ==",
          "body": "Maybe this could be fixed manually: I could do some \"house cleaning\" before initializing Svelte. So that there would be a clean table to install Svelte into.\r\n\r\nEdit: if possible. Maybe `CustomElementRegistry` doesn't allow that.\r\n\r\nAnother edit: a very dirty workaround would be to define a new (random) tag name every time Svelte is initialized. That would be a ***very*** dirty workaround. This seems to work, so I guess I'll just use this for now.\r\n\r\nI guess another way could be to pass an option to Svelte to re-use the same tag name again. It could be set like `<svelte:options tag=\"my-component\" re-use=\"true\" />` for example.",
          "createdAt": "2021-03-08T09:38:23Z",
          "author": { "login": "ile", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjcyNjU1MA==",
          "body": "If you need code that can be safely re-run, I'd probably register the tag myself, and make sure I didn't register it if it already existed. You can configure the Svelte compiler to generate files that just export the custom element class without registering it.",
          "createdAt": "2021-03-08T12:34:18Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjQzNTQ5NjY=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nWe don't have const enum in TS support due to `isolatedModules` setting (more on this here: https://github.com/sveltejs/svelte-preprocess/issues/281).\r\nBut I want it so bad.\r\n\r\n**Describe the solution you'd like**\r\nA cool workaround would be to allow terser to inline const objects.\r\nHere's the code:\r\n```js\r\nconst States = { veryLongKey: 1, unusedKey: 2 }\r\n\r\nexport function blablah() {\r\n  return States.veryLongKey\r\n}\r\n```\r\nIf you run it in the [Terser REPL](https://try.terser.org/), it will turn it into this:\r\n```js\r\nconst n=1;export function blablah(){return n}\r\n```\r\n, which is more or less what const enum does (in reality it inlines the stuff, so there's no variables at all, but that doesn't matter imo).\r\n\r\nBut here's the problem. If you copy the compiled code from [this simple Svelte component](https://svelte.dev/repl/828b50323b91445c93df6592f692b25f?version=3.35.0), and run it through Terser, the `States` variable won't disappear! Here, it's highlighted in the image.\r\n![Снимок экрана 2021-03-08 в 12 03 02](https://user-images.githubusercontent.com/2846746/110298992-3f97bc80-8006-11eb-89a4-3e86a3c90df4.png)\r\nAnd the reason, I believe, is that the content of `context='module'` in the compiled version of the code goes way down to the `function instance`. But if you move the declaration up so it's right below the imports, it will be inlined! (highlighted as well)\r\n![Снимок экрана 2021-03-08 в 12 05 54](https://user-images.githubusercontent.com/2846746/110299378-a4ebad80-8006-11eb-8b1a-4c521313ebe4.png)\r\n\r\nAs far as I understand it shouldn't break anything in the components/runtime, but will help us get a little bit more optimized code. Free optimization, a very low hanging fruit and a functional replacement for `const enum`!\r\n\r\n**Describe alternatives you've considered**\r\nNone.\r\n\r\n**How important is this feature to you?**\r\nVery nice to have :)",
    "closedAt": null,
    "createdAt": "2021-03-08T09:12:36Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjM3MTU5NjM=",
    "body": "**Describe the bug**\r\nUsing multiple slots with the same name is now an error. Previously in version 3.34.0 this would render the slots.\r\n\r\n**To Reproduce**\r\nThe repl examples below are the same code, but with different svelte versions.\r\n\r\n * Error in 3.35.0: https://svelte.dev/repl/f99436e1fcb44720a03dd6daef7c0843?version=3.35.0\r\n * Works in 3.34.0: https://svelte.dev/repl/f99436e1fcb44720a03dd6daef7c0843?version=3.34.0\r\n\r\n**Expected behavior**\r\nWith all the work recently on slots, I'm not sure if this would be a regression or intended behavior moving forward.\r\n",
    "closedAt": null,
    "createdAt": "2021-03-06T18:35:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjAxNTAxOQ==",
          "body": "This is described here : https://github.com/sveltejs/rfcs/blob/4efcda208abe007e6a786c18fd38377e25707589/text/0000-slot-attribute.md#2-disallow-more-than-1-named-slot-of-the-same-name",
          "createdAt": "2021-03-06T18:41:01Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjA2MjQ2OQ==",
          "body": "> Slots can be rendered zero or more times, and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive.\r\n\r\nSvelte [docs](https://svelte.dev/docs#slot_let) say a slot can be rendered zero or more times. Should naming a slot change that behavior? I'd hope [this example](https://svelte.dev/repl/f99436e1fcb44720a03dd6daef7c0843?version=3.34.0) is a use-case in favor of allowing multiple named slots.\r\n\r\n",
          "createdAt": "2021-03-06T21:38:16Z",
          "author": { "login": "larryosborn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjM0ODAxNQ==",
          "body": "With all the changes on slots I believe the docs are currently a bit outdated. It looks like there are breaking changes in v3.35.\r\n\r\nBut now it's possible to have components inside slots, using `svelte:fragment`. So maybe you can extract whatever logic you already have (with multiple slots) into a component. Examples here:\r\n\r\n- https://github.com/sveltejs/svelte/blob/master/test/runtime/samples/component-svelte-slot/main.svelte\r\n- https://github.com/sveltejs/svelte/blob/master/test/runtime/samples/component-svelte-slot-let-in-slot/main.svelte",
          "createdAt": "2021-03-07T20:36:37Z",
          "author": { "login": "paulovieira", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Mjk1MjMzNg==",
          "body": "Looks like the breaking change was mentioned in [RFC comments](https://github.com/sveltejs/rfcs/pull/18#issuecomment-650571104) about using duplicates. \r\n\r\n>Basically agree with this whole RFC but since some aspects are technically breaking changes we will probably need to just warn loudly for now, and continue with the current behaviour if someone does nest slots or have duplicates or whatever. Unless we choose to use the semver ju-jitsu of calling the changes a bugfix\r\n\r\n",
          "createdAt": "2021-03-08T17:57:38Z",
          "author": { "login": "larryosborn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5ODg3NTcyMg==",
          "body": "In general the new `<svelte:fragment>` syntax is great and solves so many problems for me, thanks a lot for this improvement!\r\n\r\nHowever, I also have to say I find it less than ideal to push a breaking change in a **minor** version update (violating semver spec) and on top of that not reflecting the change in the docs (the docs don't even mention `<svelte:fragment>` and instead still say slots can be repeated). Only because I ran into this error, googled it and then followed the links here to the (also not so easily discoverable) RFC and RFC comments and read through those threads I was able to understand what the change is and how the new functionality works. (It's not enough to look at just one place because the RFC talks about `<svelte:slot>` while later it became `<svelte:fragment>`, and in the middle there is also some talk about `<svelte:template>`.)\r\n\r\nI by the way disagree with calling this a bugfix because it was documented before (\"Slots can be rendered zero or more times\" with no limitation for default slots). I understand the issue it caused with `let` conflicts, but due to the overall design of this feature there is just no way to fix that without breaking this, so it should have been left \"unfixed\" until the next major version upgrade (because this isn't really a fix in that shooting yourself in the foot will no longer harm your foot, but you are just taking the gun away so you can't shoot anything else either).\r\n\r\nIt would have been OK if the old syntax would still have worked and maybe just emitted a warning - then `<svelte:fragment>` would have been undocumented for the moment but no harm done because nothing broke, but with both disabling the old way in a minor version update _and_ not documenting the new way I think it causes some unnecessary headache for developers.\r\n\r\nMy system for example uses duplicate slots heavily, and it would be a much smoother transition if I could refactor components that use this over time, with having both the old and the new way working at the same time for a while.\r\n\r\nIn my opinion the best thing to do now would be to bring back the old way with a warning and release that as 3.35.1, turning it back to an error only in 4.0.0.",
          "createdAt": "2021-03-14T09:28:08Z",
          "author": { "login": "CherryDT", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjE5MjYyNw==",
          "body": "Just ran `npm update` and stumbled on this. I agree with @CherryDT. The change should have been only a warning.\r\n\r\nIn one of our older project we too use the previous duplicated slots behavior heavily and now we have to keep svelte to its last working version because we currently cannot dedicate the time to rewrite all our design system components at once with `<svelte:fragrament>`.",
          "createdAt": "2021-06-22T17:38:44Z",
          "author": { "login": "ganigeorgiev", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjM2NzI3MTg=",
    "body": "**Describe the bug**\r\nIf you forward a slot (ex. `<slot name=\"label\" slot=\"label\" />`) the slot is always considered passed to the parent even if not passed to the child.  This breaks any conditional logic based on passed slots within the parent.\r\n\r\n**To Reproduce**\r\nHere is a REPL demonstrating the issue: https://svelte.dev/repl/d0cd92776d534349acf8e3e2deb074fa?version=3.35.0 (see console output).\r\n\r\n**Expected behavior**\r\nReferencing the REPL, I would expect `$$slots.description` to not be present as a passed slot in the parent `Field` component, just like `$$slots.description` within `TextField`.  \r\n\r\n**Severity**\r\nThe only workaround is to duplicate code across components and not leverage composition with slot forward, which isn't terrible nor optimal.",
    "closedAt": null,
    "createdAt": "2021-03-06T15:17:57Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzgxMzAzMA==",
          "body": "I struggle with same issue..\r\nI would welcome that the svelte compiler would mark slots that result in empty markup (or consisting of whitespaces) as 'not provided'.\r\nThus allowing us to write constructs like conditional rendering of slots.",
          "createdAt": "2021-03-12T23:31:36Z",
          "author": { "login": "TheMaikXX", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzgzMTE1Mg==",
          "body": "@TheMaikXX While I struggle with that issue as well, I think that is more related to https://github.com/sveltejs/svelte/issues/5312 where the slot is defined, but rendered empty from a `{#if}` conditional.  This issue is the lack of slot usage with forwarding.\r\n\r\nGiven some thought, both these issues might be solved in the runtime (and not compiler) by using a [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) and watching `childList` changes.  Would be great to be handled by the compiler and `$$slots`, but might be at least a workaround.  I haven't had time to experiment to confirm though...",
          "createdAt": "2021-03-13T00:32:01Z",
          "author": { "login": "techniq", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5Nzg0MjQ3OQ==",
          "body": "> @TheMaikXX While I struggle with that issue as well, I think that is more related to #5312 where the slot is defined, but rendered empty from a `{#if}` conditional. This issue is the lack of slot usage with forwarding.\r\n\r\nI mean something little bit different... Here I created very similar REPL to yours: https://svelte.dev/repl/36e864ce20704538a32a063f77e51981?version=3.35.0\r\nBut it more clearly illustrates what I was talking about.\r\nWhen I inspect the generated HTML:\r\n![image](https://user-images.githubusercontent.com/30082602/111013550-2002ea00-83a0-11eb-8e02-d09d8d8f91e4.png)\r\nThe div `<div class=\"header\"></div>` is empty so the slot `header` must be empty as well. And I think that this case could be handled (at least partially) at compile-time to say something like (from `Child`'s point of view): \"The slot is given to me but it resolved into no content so I will treat it as not provided at all.\"\r\nOr it could be handled by the user if he would have access to the inner content the slots so that the user could check if the slot is not empty..",
          "createdAt": "2021-03-13T01:29:21Z",
          "author": { "login": "TheMaikXX", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjAxNjEyNw==",
          "body": "> Or it could be handled by the user if he would have access to the inner content the slots so that the user could check if the slot is not empty..\r\n\r\nIf $$slots contained a reference to the passed HtmlElement instead of a simple `true`, you are right that it would be easy to check. And i see many other perks to it. \r\n\r\nBut that would still only be a workaround to fix slot forwarding.",
          "createdAt": "2021-04-24T01:54:06Z",
          "author": { "login": "Marr11317", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjM2MjEwODY=",
    "body": "This issue is about tutorial content.\r\n\r\n**Description**\r\n\r\nIn these chapters, the easing function is described as `p => t`.\r\nI think the argument is time, and the return value is position or progression.\r\nSo it should be described as `t => p`.\r\n\r\n**Chapters related to this issue**\r\n\r\n- https://svelte.dev/tutorial/tweened\r\n- https://svelte.dev/tutorial/custom-css-transitions\r\n\r\nIf this issue is right, I'll make a pull request to fix it.\r\n\r\nBy the way, I'm learning svelte from this tutorial and it's so fun!",
    "closedAt": null,
    "createdAt": "2021-03-06T11:02:18Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjA1NjE0MA==",
          "body": "Hello!\n\nFrom what I understand, the easing parameter is the representaion of the transition duration, between 0 and 1. At a given time of the transition, it can be calculated by:\n```\nparameter = t / transitionDuration\n```\nIt means that it is unitless (time divided by time). However, it might be less confusing to call it p nonetheless.\n\nThe return parameter seem to me more like a time distortion (whether the transition should be fast at the beginning and/or at the end for example).\n\nI think that if you find it confusing, it's probably a good idea to change the tutorial explanations.",
          "createdAt": "2021-03-06T21:17:43Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjE3NzU3Mw==",
          "body": "Hi @Ennoriel !\r\n\r\nThank you for your comment. I'm not familiar with web animations and svelte well, so your comment is helpful for me.\r\nI understand from your comment that the argument of easing function in svelte is unitless.\r\nDoes 'time distortion' mean like 'velocity'? It's difficult word for me...\r\n\r\nFor your information, I list reasons why I think the function should be `t => p`.\r\n\r\n1. I used [this pdf](https://web.archive.org/web/20190728180357/http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf) as a reference, which can be accessed from [the link](https://web.archive.org/web/20190805215728/http://robertpenner.com/easing/) in https://svelte.dev/tutorial/tweened.\r\nIn this pdf, x-axis of graphs is `t` (time) and y-axis is `p` (position), which means the argument is `t` and the return value is `p`.\r\n\r\n2. I found that the easing function's type is described as `(t: number) => number` in [source code](https://github.com/sveltejs/svelte/blob/master/src/runtime/transition/index.ts#L4).\r\n\r\nI think the most confusing point is that there are no descriptions of `p` and `t` in tutorial, not variable names.\r\nI know this is not a main topic in those chapters, but I wanted explanations even if only slightly when I read them.\r\n\r\nI don't know what `p` stands for, so I don't have any good ideas in terms of adding explanations at the moment...\r\nDo you (or anyone) have any good ideas?",
          "createdAt": "2021-03-07T02:39:03Z",
          "author": { "login": "chikuwa111", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjIzMTU3NQ==",
          "body": "Hello @chikuwa111 ,\r\n\r\nI have not been very clear. The Svelte API explains the transition functions ([here](https://svelte.dev/docs#Custom_transition_functions)):\r\n\r\n```\r\nTransitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element.\r\n\r\nThe t argument passed to css is a value between 0 and 1 after the easing function has been applied.\r\n```\r\n\r\nWhich means that if you have a transition object like:\r\n\r\n```\r\n{\r\n\tdelay: 100,\r\n\tduration: 200,\r\n\teasing: t => t,\r\n\tcss: t => `width: ${200 * t}px`\r\n}\r\n```\r\n\r\nthe easing function will be applied to the css function: `css(easing(t))`\r\n\r\nWith this example, the width of the transitioned object will have a width starting from 0px and transitioning to 200px with an easing function being linear.\r\n\r\nIf you have a different easing function, say `easing: t => Math.sqrt(t)` (it is valid since `sqrt(0) = 0` and `sqrt(1) = 1`), what is going to happen is that the easing function is going to be replaced in the css function: ``css: t => `width: ${200 * easing(t)}px` `` which would be equivalent to ``css: t => `width: ${200 * Math.sqrt(t)}px` ``\r\n\r\nThe easing parameter will go from 0 to 1. The easing return value should also go from 0 to 1. If not, the element will have an unsmooth transition ([REPL demo](https://svelte.dev/repl/5914a08a87bd4e76b289cd081c30acab?version=3.35.0)).\r\n\r\nI don't know if I am clearer on explaining the easing function. \r\n\r\nFor the tutorial, `p => t` is definitely not clear because it could mislead some readers. However, it is still correct in term of j. What is mean by `p => t` is the javascript function definition (takes one argument and returns one value, which, if not explained further is believed to be a base type value I guess). For me, the clearest is the (typescript ?) typed definition in the doc: `easing?: (t: number) => number`.\r\n\r\nWhat do you think of adding the doc explanation: `The t argument passed to css is a value between 0 and 1 after the easing function has been applied.` ?",
          "createdAt": "2021-03-07T07:24:26Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjcxMjQ0MA==",
          "body": "Hi @Ennoriel !\r\n\r\nThank you for your explanation and idea.\r\nI understand easing functions in svelte and your opinion.\r\n\r\n> What do you think of adding the doc explanation: `The t argument passed to css is a value between 0 and 1 after the easing function has been applied. `?\r\n\r\nIt's nice for https://svelte.dev/tutorial/custom-css-transitions.\r\nHowever https://svelte.dev/tutorial/tweened is the first chapter that has `p => t` description.\r\n`tweened` function doesn't have `css` option, so we can't use that explanation there.\r\n\r\nHow about `num => t`?\r\nIf we can't find an appropriate argument name, it might be less confusing than `p`, because `num`'s meaning is obvious and there is no room to guess.\r\nI think the return value name `t` is fine because `interpolate` function in `tweened` and `css` function has `t` argument.",
          "createdAt": "2021-03-08T12:07:04Z",
          "author": { "login": "chikuwa111", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjM2MDk5MzU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI am working on a Component Library for myself. I would like to use the `slot='...'` attribute in a component without being a child of the component. Currently i get the following error: \r\n\r\n`Element with a slot='...' attribute must be a child of a component or a descendant of a custom element`\r\n\r\nREPL:\r\nhttps://svelte.dev/repl/9fbd3ef30184481a9edae5dbde4e574b?version=3.35.0\r\n\r\nCurrently i have to use the slot name on the Component itself like this:\r\n```html\r\n<Navbar>\r\n\t...\r\n\t<NavItem>\r\n\t\t<NavIcon slot=\"icon\">Icon 1</NavIcon>\r\n\t\t<NavLabel slot=\"label\">Label</NavLabel>\r\n\t</NavItem>\r\n\t...\r\n</Navbar>\r\n```\r\n\r\nThis feels somewhat redundant.\r\n\r\n**Describe the solution you'd like**\r\nI would like to be able to directly insert the children without the slot name, because the child itself knows the slot name:\r\n```html\r\n<Navbar>\r\n\t...\r\n\t<!-- I would like to use it like this, where the Component itself knows the slot -->\r\n\t<NavItem>\r\n\t\t<NavIcon>Icon 3</NavIcon>\r\n\t\t<NavLabel>Label 3</NavLabel>\r\n\t</NavItem>\r\n\t...\r\n</Navbar>\r\n```\r\n\r\nand in NavIcon.svelte:\r\n```html\r\n<div slot=\"icon\">\r\n\t<slot />\r\n</div>\r\n```\r\n\r\nTechnically the component **is** a child of a component or a descendant of a custom element, If the `slot='...'` attribute is restricted to be a single top level element of a component.\r\n\r\n**How important is this feature to you?**\r\nNice to have.\r\n",
    "closedAt": null,
    "createdAt": "2021-03-06T09:54:45Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTkyMDk2Mw==",
          "body": "Duplicate of #5979",
          "createdAt": "2021-03-06T11:41:06Z",
          "author": { "login": "PatrickG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTkzMzc3NQ==",
          "body": "@PatrickG I don't think it's a duplicate. #5979 would like to be able to \"feed\" multiple slots from one component. I would only like to be able to move the slot name to the child itself when there is just a single top element. Of course they are related but i also think they need a different approach to be solved.",
          "createdAt": "2021-03-06T12:57:24Z",
          "author": { "login": "firewave-remo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzMxODQ4Mw==",
          "body": "The concept is great if you are making a UI library and user only need to use `<NavItem>` instead of `<div slot=\"item\">`. I've seen lots of React component libraries doing this with swapping children but this might be easier with JSX. ",
          "createdAt": "2021-05-06T08:01:43Z",
          "author": { "login": "YamiOdymel", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjM1MjgwODY=",
    "body": "I'm using Svelte with TypeScript, and I've got a function that should only accept a Svelte component as its argument. I want to be able to do something like this:\r\n```typescript\r\nimport Button from './Button.svelte';\r\n\r\nmyFunction(Button)\r\n// or perhaps a generic version:\r\nmyFunction<Button>()\r\n```\r\nNeedless to say, I want to enforce that the parameter must be a Svelte component, so that if anything else is passed, I get an error:\r\n```typescript\r\nmyFunction(123) // <= Should give an error\r\nmyFunction(\"Hello\") // <= Should give an error\r\n```\r\n\r\nI initially intuitively thought it must be the `SvelteComponent` class, but unfortunately, when I do the following:\r\n```typescript\r\nimport { SvelteComponent } from 'svelte';\r\nimport Button from './Button.svelte';\r\nlet foo: SvelteComponent = Button;\r\n```\r\nI get the following error:\r\n```\r\nType 'typeof Button__SvelteComponent_' is missing the following properties from type 'SvelteComponentTyped<any, any, any>': $set, $on, $destroy, $$prop_def, and 5 more\r\n```\r\n![image](https://user-images.githubusercontent.com/26527405/110190332-fbef5800-7e37-11eb-893c-c633809be220.png)\r\n\r\n`SvelteComponentTyped` doesn't seem to work either, same error:\r\n```typescript\r\nimport { SvelteComponentTyped } from 'svelte';\r\nimport Button from './Button.svelte';\r\nlet foo: SvelteComponentTyped = Button;\r\n```\r\n![image](https://user-images.githubusercontent.com/26527405/110190625-740a4d80-7e39-11eb-93f2-327353a1ab58.png)\r\n\r\nImported from `svelte/internal`, still doesn't work; again, same error:\r\n\r\n![image](https://user-images.githubusercontent.com/26527405/110192071-34dffa80-7e41-11eb-804e-ab6653e1bf81.png)\r\n\r\n\r\n\r\nI've also created a simple GitHub repo that reproduces the error, in case you need it:\r\nhttps://github.com/AradAral/SvelteBaseClass\r\n\r\nIs this intentional or a bug? If it's intentional I think it can be misleading; and is there, therefore, no way to achieve what I just described in Svelte? Isn't there any type one would use to enforce a Svelte component?",
    "closedAt": "2021-03-06T08:40:04Z",
    "createdAt": "2021-03-06T01:35:26Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTg0MzAyMQ==",
          "body": "Also, judging by the JS output in the Svelte REPL, all component classes DO ultimately extend the `SvelteComponent` class:\r\n\r\n![image](https://user-images.githubusercontent.com/26527405/110191847-f0a02a80-7e3f-11eb-810a-5487026c4931.png)\r\n\r\n Therefore, if the output is `class App extends SvelteComponent`, then one could reasonably argue that you would certainly expect `let c: SvelteComponent = App;` to work. Don't you agree?\r\n\r\nI initially asked this question on the Svelte Discord server, I thought perhaps I'm missing something here. But people started suggesting that I try different classes from different modules (`SvelteComponent` or `SvelteComponentTyped`, or from 'svelte/internal`, etc.). which means that they too intuitively assumed that it _should_ work.\r\nUltimately, they realized that it apparently doesn't, to their surprise.",
          "createdAt": "2021-03-06T02:22:05Z",
          "author": { "login": "AradAral", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTg4Nzk1MA==",
          "body": "The type you need to use is `typeof SvelteComponent`.",
          "createdAt": "2021-03-06T07:13:53Z",
          "author": { "login": "PatrickG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTg4ODE1Nw==",
          "body": "@PatrickG ~~Not true:~~\r\n\r\n![image](https://user-images.githubusercontent.com/26527405/110198622-24437a80-7e69-11eb-84f8-46031fc8010e.png)\r\n\r\n~~Plus, this is not how it works in TypeScript. If class `B` extends class `A`, then you should/could have `let foo: A = B;`, and not `let foo: typeof A = B;`~~\r\n\r\n![image](https://user-images.githubusercontent.com/26527405/110198691-8f8d4c80-7e69-11eb-90ea-495fa4db43ad.png)\r\n",
          "createdAt": "2021-03-06T07:16:06Z",
          "author": { "login": "AradAral", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTg5NTY5Mg==",
          "body": "In your reproduction repository, if I change `let comp2: SvelteComponent = Button;` to `let comp2: typeof SvelteComponent = Button;` it works as expected (as @PatrickG pointed out).\r\nAlso, your example to show that `let foo: A = B` works is flawed because there are no properties defined on `A`. If you do\r\n\r\n```ts\r\n\r\n    class A {\r\n        foo: string;\r\n    }\r\n\r\n    class B extends A {}\r\n\r\n    const foo: A = B;\r\n```\r\n\r\nYou'll get an error.",
          "createdAt": "2021-03-06T08:30:30Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTg5NjY3Nw==",
          "body": "Turns out I was importing `SvelteComponent` from `svelte/internal` when I was trying `typeof SvelteComponent`.\r\nThanks @dummdidumm, @PatrickG.",
          "createdAt": "2021-03-06T08:40:03Z",
          "author": { "login": "AradAral", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTg5OTU0Mw==",
          "body": "For future reference, one is the type of an instance and the other is a function. The example only works because it is basically an empty object.",
          "createdAt": "2021-03-06T09:05:20Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjMzMTcwODk=",
    "body": "First of all, thanks for such an amazing framework! \r\n\r\nI'm wondering, is there a plan to introduce localization for the documentation on the Svelte website? More languages – more engagement!\r\n\r\nIf there's a plan or ongoing work I could contribute to the implementation or/and localization of some parts.",
    "closedAt": "2021-03-05T18:25:04Z",
    "createdAt": "2021-03-05T18:23:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTU5OTQyNQ==",
          "body": "Just found https://github.com/sveltejs/svelte/issues/5568, nevermind ",
          "createdAt": "2021-03-05T18:25:04Z",
          "author": { "login": "vladkampov", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjMwMjY4Nzk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSnowpack has been a long requested integration for HMR, but there still are weird quirks with it that cause frustrating issues during development.\r\n\r\n**Describe the solution you'd like**\r\n[Vite 2.0](https://vitejs.dev/), which previously was a VueJS bundler, is framework-agnostic now, so it can be integrated with svelte. [Svite](https://github.com/dominikg/svite) is a community project that already provides a plugin for integration with Vite 1.0 with a lot of patchworking, but Vite 2.0 could make it a lot easier to support it officially.\r\nVite also includes Rollup deeply integrated as a bundler already, so there isn't any friction with an external bundler as with Snowpack.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n - Get Snowpack working well\r\n - Write a svelte-native HMR solution\r\n\r\n**How important is this feature to you?**\r\nJust a thought I had :-)",
    "closedAt": "2021-03-05T13:03:33Z",
    "createdAt": "2021-03-05T12:09:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTQwMTkyNA==",
          "body": "@GitGangGuy It's coming (unless something changes)...SvelteKit now uses Vite instead of Snowpack as of [1.0.0-next.35](https://unpkg.com/browse/@sveltejs/kit@1.0.0-next.37/CHANGELOG.md) and leverages a [@sveltejs/vite-plugin-svelte](https://unpkg.com/browse/@sveltejs/kit@1.0.0-next.37/package.json) plugin.\r\n\r\nSvite v2 is also in the [works](https://github.com/svitejs/svite) based on Vite 2, not sure of the overlap (uses different packages per NPM, but the creator of Svite is [aware](https://github.com/dominikg/svite/issues/77#issuecomment-789033994) of it (he maybe collaborating on both, hard to tell without the source for SviteKit and related public yet).\r\n\r\nIn short, be patient :) \r\n",
          "createdAt": "2021-03-05T12:55:45Z",
          "author": { "login": "techniq", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTQwNTg0OA==",
          "body": "Yup, the public beta of SvelteKit, the successor to Sapper is just around the corner, and it uses Vite.",
          "createdAt": "2021-03-05T13:03:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTUzODk1Mg==",
          "body": "Alright, great. Can't wait for SvelteKit to become stable!",
          "createdAt": "2021-03-05T16:42:02Z",
          "author": { "login": "GitGangGuy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjE2NjMzNjU=",
    "body": "`Button.svelte`\r\n\r\n```\r\n<script lang=\"ts\">\r\n  export const type: string | undefined = undefined\r\n</script>\r\n\r\n<button class:type={type ? type : ''}>\r\n  <solt />\r\n</button>\r\n```\r\n\r\n`App.svelte`\r\n\r\n```\r\nimport Button from './button.svelte'\r\n\r\n<Button class=\"submit-btn\">submit</Button>\r\n```\r\n\r\nerror: \r\n`Type '{ class: string; }' is not assignable to type 'IntrinsicAttributes & Partial<{ type?: string;}>'.\r\n  Property 'class' does not exist on type 'IntrinsicAttributes & Partial<{type?: string; }>'`",
    "closedAt": "2021-03-05T02:10:07Z",
    "createdAt": "2021-03-04T01:30:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDQyMzk3MQ==",
          "body": "a couple of things, spelling mistake on slot, class is reserved in JS, you are putting an html class property on a component when that component only exposes a prop called type not class and uses that prop of type to conditionally add a class named 'type' to the button based on whether the type prop is passed any value?  i don't think you mean to or want to do any of that.\r\n\r\nI'd recommend going through the Svelte tutorials on the main site, they are quite good and cover this.\r\n\r\nHere is a REPL showing passing a className to a component:\r\nhttps://svelte.dev/repl/0c826bf7443f40bb9ecd997edafbba08?version=3.35.0\r\n\r\nHope that helps, best of luck.",
          "createdAt": "2021-03-04T08:25:40Z",
          "author": { "login": "JoshuaJarman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTA4NDM2Ng==",
          "body": "Thanks. The REPL  is ok. Can't it be supported by default like react?",
          "createdAt": "2021-03-05T01:52:52Z",
          "author": { "login": "PingTouG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTA5Mjk1MA==",
          "body": "No, we don't want to treat `class` specially as a prop name - and there's not necessarily a single top-level element that it would make sense to apply it to anyway.",
          "createdAt": "2021-03-05T02:10:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjE1MTAyOTA=",
    "body": "**Suggested Solution:** Class Directive support for OR modifier for swapping classes easily (syntactic sugar).\r\n```\r\nclass:on|off={isOn}\r\n```\r\n**Problem and Alternatives:** We currently have to use a less optimal pattern such as a second directive like so:\r\n```\r\nclass:on={isOn} class:off={!isOn}\r\n```\r\nor something hacky like:\r\n```\r\nclass={`whatever-other-classes ${(isOn) ? 'on' : 'off'}`}\r\n```\r\n**Importance:** It isn't a deal breaker, but other directives have modifiers and it might not be a big deal to add and could possibly add some additional value to a directive people use all the time?\r\n\r\nThanks! Love ❤Svelte 👍\r\n\r\n**BONUS SUGGESTION Append and Remove Class Lists:** Have you considered:\r\n```\r\nclass+={ ...function that returns space separated classes to append to classlist if not exists... }\r\nclass-={ ...function that returns space separated classes to remove from classlist if not exists... }\r\n```\r\n(_i dislike css utility class libraries like tailwind, but that pattern would really reduce adding and removing bunches of utility classes.  again, thanks for the consideration._)",
    "closedAt": null,
    "createdAt": "2021-03-03T21:43:05Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDA4NjcyNQ==",
          "body": "You can also use `class='whatever-other-classes {isOn ? 'on' : 'off'}'`, which is only a couple of characters more than `class='whatever-other-classed' class:on|off={isOn}` and is more explicit. This doesn't feel like an especially valuable addition to me.",
          "createdAt": "2021-03-03T21:52:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDA4ODQ0NA==",
          "body": "i included a version of that hacky option in my initial comment, which only works when you already have an explicit class on the element, not when class is also something more dynamic.\r\n\r\nit is a less optimal pattern for several reasons.\r\n\r\nIt isn't ideal and inefficient to start with as it is hacking a string in, and it breaks as soon as you already use dynamic classes:\r\n```\r\n🚫 class={dynamic} class=\"{isOn ? 'on' : 'off'} {darkMode ? 'dark' : 'light'} {isAdmin ? 'is-admin' : 'is-user'}\"\r\n```\r\nto do it properly using current svelte class directive we currently have to resort to the less than ideal double entries:\r\n```\r\n👎  class={dynamic} class:on={isOn} class:off={!isOff} class:dark={darkMode} class:light={!darkMode} class:is-admin={isAdmin} class:is-user={!isAdmin}\r\n```\r\nWhereas the suggested pattern would always work and can be implemented internally using a more optimal class insertion rather than string manipulation on the property and would improve the syntax to:\r\n```\r\n✅ class={dynamic} class:on|off={isOn} class:dark|light={darkMode} class:is-admin|is-user={isAdmin}\r\n```\r\n(_you don't always want to swap. just showing how much less fragile and more clear and inline with svelte class directive this pattern extension would be.  the other is a workaround that fails at places.  hope that helps explain better why this would be a valuable improvement.  it's like a new superpower for the class directive and the cleanest, tightest, clearest notation.  the class directive `class:whatever` wouldn't exist if string manipulation in the class parameter was ideal.  this suggested follows that philosophy._)\r\n\r\nWhat I'm suggesting is `class:on|off={isOn}` as syntactic sugar shortcut for the ideal unbreakable pattern `class:on={isOn} class:off={!isOff}` and that `class={isOn ? 'on' : 'off'}` should be used with care as it is breaky/fragile with how it combines with the svelte class directive and it does string insertion on the property which is far less ideal that direct class injection.  Hopefully the value of that addition makes sense.  Thanks.",
          "createdAt": "2021-03-03T21:55:49Z",
          "author": { "login": "JoshuaJarman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDE0ODcwOQ==",
          "body": "I'm not completely against this, although I think it is a nice-to-have, rather than incredibly valuable.\r\n\r\nI do think that this is a bit less readable:\r\n\r\n```svelte\r\n<div class='whatever-other-classes {isOn ? 'on' : 'off'}' />\r\n```\r\n\r\nthan this:\r\n\r\n```svelte\r\n<div class='whatever-other-classes' class:on|off={isOn} />\r\n```\r\n\r\nBut there isn't a huge amount in it.",
          "createdAt": "2021-03-03T23:29:18Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDIyMDU0NQ==",
          "body": "apparently people instinctively reach for an anti-pattern and recommend that without understanding all the implications or are fine with the tradeoff for in exchange having to write less code (still more than the suggestion).\r\n\r\nwe have the class directive specifically to avoid hacking on the class property string and the problems associated with that.   if it were simply writing less code i'd let the tooling/vscode handle that automatically and never look back,  it isn't that although that is also true and nice, it is about making doing it right easier than doing it in a way that the class directive was created to avoid.  does that make sense?\r\n\r\nif people are reaching for an anti-pattern, it is a sign we should make doing it the proper way easier.\r\ni agree, this is not critical, but worth recommending and should be simple, so i captured the suggestion.\r\n\r\nagain this isn't just about readability or verbosity, the hacky pattern is also less efficient (doing string manipulation on the property instead of class injection/browser internals and efficiency) and breaks when used under various standard svelte class directive scenario like alongside dynamically declared classes.  it isn't good practice and it is fragile and if it were good practice we wouldn't even have the class directive we'd just do that.\r\n\r\nthanks for considering, especially since other svelte directives use modifiers in a similar fashion.\r\nthis was supposed to have been tagged \"proposal\", not sure why it wasn't.",
          "createdAt": "2021-03-04T01:49:16Z",
          "author": { "login": "JoshuaJarman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTMwODY5NA==",
          "body": "For described situation I use this workaround (it seems to be more readable than suggested solution)\r\n\r\n```svelte\r\n<div class:on={isOn}>XXX</div>\r\n\r\n<style>\r\n:not(.on) [\r\n  /* style for OFF variant */\r\n}\r\n</style>\r\n```",
          "createdAt": "2021-03-05T09:53:52Z",
          "author": { "login": "janproch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTMzNDAwMA==",
          "body": "@janproch your workaround works very nicely if you have full control over the styling, you don't even need the `:not(.on)`, just make the 'off' styling default and override where required in the `on` style.\r\n\r\nBut this approach becomes harder when using css utility frameworks like tailwind where you would want to toggle between two classed defined elsewhere\r\n\r\n```html\r\n<div class:bg-gray-400|bg-red-400={active}>...</div>\r\n```\r\n",
          "createdAt": "2021-03-05T10:36:40Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwODU5MTg3MQ==",
          "body": "I think my issue with this proposal is that we've generally used the pipe | character for modifiers, whereas `class:on|off` uses it as a sort of `or` statement. I don't like that inconsistency.",
          "createdAt": "2021-03-26T23:46:11Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDQ5NDgwNw==",
          "body": "@antony do you think it would be better to use syntax that more closely follows js like\r\n`class:on||off={isOn}`",
          "createdAt": "2021-06-20T03:39:11Z",
          "author": { "login": "Zachiah", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjE1MDA2NjA=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nA clear and concise description of what the problem is. For example: I'm always frustrated when [...]\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**How important is this feature to you?**\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n",
    "closedAt": "2021-03-03T21:41:52Z",
    "createdAt": "2021-03-03T21:28:58Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MjA4ODY4NTY=",
    "body": "Seems, this issue is more like a proposal.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nThere are many situations when would be useful to know the final class names of the component after scoping. For example, e2e test when we need to query elements and initial class names are not specific enough to be sure we work with exact elements.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI imagine it could look like the other things eg. `$$props/$$slots/$$restProps` etc. - `$$cssHash`.\r\n",
    "closedAt": null,
    "createdAt": "2021-03-03T08:42:23Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NjI4ODgzMQ==",
          "body": "I would probably recommend a method like test-attributes (i.e. `data-test-id=\"foo\"`) for testing, rather than relying on a svelte internal which is (intentionally) not exposed.\r\n\r\nDo you have any other concrete cases for needing the css hash? bearing in mind that they change every time you compile.",
          "createdAt": "2021-03-10T23:34:39Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTk4MDgwMjk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIn the moment writing any kind of component switching (tabs, router, etc) can become quite difficult, because Svelte removes the component state if it is hidden via {$if} or <svelte:component>. So if you switch back the old state is destroyed unless it's stored somewhere else outside the component (a writable for example).\r\n\r\n**Describe the solution you'd like**\r\nIn Vue there is a special tag which signals to not remove the component state but just unmount the DOM. So after switching back. the framework can easily restore the old state from the stored date. Something similar would be very useful in Svelte too.\r\n\r\nIn Svelte there could be a new <svelte:keep-alive> tag which changes the way the inner components are created/destroyed. By writing something like\r\n\r\n```<svelte:keep-alive><svelte:component ..../><svelte:keep-alive>```\r\n\r\ncomponents could be switched without losing state.\r\n\r\n**Describe alternatives you've considered**\r\nI tried two ways: Letting the DOM live and using \"display:none\" to only switch it's visibility or use a store to store the component state externally to restore it afterwards.\r\n\r\nBoth solutions aren't ideal.\r\n\r\nLetting the DOM alive can result in lots of DOM nodes which aren't really used but are still updated in the background after changes. This is in conflict with Sveltes otherwise quite efficient execution model.\r\n\r\nUsing stores to externalize state makes the application much harder to write. If you've created your application without the problem in mind, it may require huge changes afterwards. Doing it right requires wrapping lots of fields in writables, and registering them somewhere to reload them after re-mounting a component.  This is not easy to do it correct and leads to much harder to understand code.\r\n\r\nIsn't it the job of the framework to solve those problems? Doing all the state management by hand is a clear contradiction to the otherwise quite programmer-friendly model of Svelte.\r\n\r\n**How important is this feature to you?**\r\nI consider it quite important for big applications. In the moment I'm not sure how to continue with my current project because of the mentions drawbacks given above.\r\n\r\n",
    "closedAt": "2021-03-02T15:42:55Z",
    "createdAt": "2021-03-02T09:07:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODc3Mjc4OA==",
          "body": "The DOM isn't a place to store state, and Svelte discourages it. A keepalive would be in direct conflict with this model.\r\n\r\nThe goal of Svelte is to automatically render a view which is in-sync with your data model, and reactively re-render that view if the model changes.\r\n\r\nIf your state's \"source of truth\" is inside your navigation component, that signals that data is already flowing in the wrong direction. A navigation component should be reading state from above it in the application, since links and such to change pages would need to be setting that state.\r\n\r\nI feel like the problem you're describing is a symptom of a problem with the way you're storing state in your application.\r\n\r\n> Using stores to externalize state makes the application much harder to write\r\n\r\nMoving state to a more central place where it sits above its consumers makes the application **slightly** harder to write but **vastly** easier to reason about.\r\n\r\n> If you've created your application without the problem in mind, it may require huge changes afterwards\r\n\r\nAdding a special tag as a workaround for applications that have been built in a sub-optimal way is not really a problem that we'd look to solve. As a developer, as your application iterates, it's often necessary to refactor various parts as it takes shape.\r\n\r\nIf you can provide a worked example of what you mean, it might become clearer, but right now it feels like your state sounds like it is being stored in the wrong place, and the flow of your data isn't quite right, which is why you're looking for a workaround.",
          "createdAt": "2021-03-02T09:43:34Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODgxMzM5OA==",
          "body": "Looking in the Discord I've found lots of question regarding this feature. So I'm not the only one who's missing it.\r\n\r\nThe point is that Svelte isn't stateless. And I consider this a feature because it makes writing components much easier. In React they saw this too and created the concept called hooks to solve it. I've also used real stateless VDom libs (like snabbdom) and it gets quite ugly if you want to write composable and maintainable code. Not because of the state of your data-model which is of course external but because of the ui-state which also needs to be maintained and bound to the right components.\r\n\r\nSo I came to Svelte, really liking it's component model where I don't have to think about all this - just to discover, that it fails at some point, missing an important feature.\r\n\r\nAn example: \r\n\r\nConsider creating a 'tabbed' component where you can switch between tabs via <svelte:component>. Those tab-components implement \"forms\" which are loaded on onMount from a DB. This data is loaded into the component to edit it via field-components. But if you edit data in one form, then switch to another and then back, the component is mounted again and the data is reloaded, overwriting your edits.\r\n\r\nThose forms aren't part of the data-model, they display temporary ui-data until the user does a submit which writes the data back to the data-model. This kind of ui-data should be stored in the component according to the way Svelte works and according to the examples. And as long I use a single form-component without putting it in tabs, everything would be perfectly fine. But in the moment I put it in my tab-component, my forms won't work anymore.  I consider this a violation of the principle of composability.\r\n\r\nNow in this example I can workaround the problem by implementing the tab-component by switching via DOM display:none. But that's IMO not a good solution because it would require holding all tabs in the DOM which wouldn't scale well.\r\n\r\nAnother way would be to store the form-state in a global store and let the components edit parts of them. But if you've written the forms in the \"canonical\" way (as [here](https://svelte.dev/examples#multiple-select-bindings) for example) using locals to store the state of the form-fields, you need to a big refactroring of your code. You also need to decide where to store the state and when to remove it.\r\n\r\nOne problem is that you can't write \"standalone\" form-components anymore, you always need external infrastructure to manage it's state externally. While this is certainly possible, why should this be a concern of the programmer? \r\n\r\nAnd it's not bad design to store temporary data in a component. Svelte does this all over the place and I consider this a good thing because of my experience with real stateless VDom. And it generally works quite well.\r\n\r\n\r\n",
          "createdAt": "2021-03-02T10:45:52Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODgyNzg3MQ==",
          "body": "I can see the point that it's desireable to have state that is not visible still around. The example you mentioned with forms is something I also experienced. But in my case, even if the form was big and spread throughout steps, it was never a problem to just use `display:none`. Still I agree that this does not scale to infinity.\r\n\r\nJust a quick thought:\r\n\r\n```svelte\r\n<svelte:outlet target={aDomNode}>\r\n   stuff that is rendered into the target. If the target is undefined, it's rendered nowhere but the things inside still \"live\".\r\n</svelte:outlet>\r\n```\r\n\r\nSomewhat related concepts: Angular `ng-template` and React portals.",
          "createdAt": "2021-03-02T11:09:00Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODgyODcwOA==",
          "body": "> Moving state to a more central place where it sits above its consumers makes the application slightly harder to write but vastly easier to reason about.\r\n\r\nThis is true if you share state (which is generally true for the data models). But it is not true for non-shared ui-state!\r\n\r\nIf you have to manage the state of every component in your UI (like \"is a drop-down menu currently open\", \"which is the current-selected row in a list\", \"is a fold-component open or hidden\", etc) you don't gain any clarity or ease. In fact you complicate your code massively (unless you have some clever abstractions to manage it). \r\n\r\nThis is why React has hooks (or component-objects earlier) and why Svelte allows you to write very compact code.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-03-02T11:10:28Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODgzNTk1Nw==",
          "body": ">But in my case, even if the form was big and spread throughout steps, it was never a problem to just use `display:none`. Still I agree that this does not scale to infinity.\r\n\r\nTrue. And I will probably go this way too because it's much to cumbersome to rewrite everything to externalize the relevant ui-state, optimizing only the real big components somehow.\r\n\r\nStill it's annoying that Svelte can't handle this case more easily. In Vue it wouldn't be easy to solve (but Vue has other problems which Svelte solved much better).\r\n\r\nAt least there should be some kind of warning in the docs. And at least an example of the canonical way to write forms in a way this problem wouldn't happen. \r\n\r\nIn the moment you implement your forms freely away - just to discover that they lose their state after you've put them into a router and that there is no easy way around it.",
          "createdAt": "2021-03-02T11:22:51Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODg0NTE1Ng==",
          "body": "> In the moment you implement your forms freely away - just to discover that they lose their state after you've put them into a router and that there is no easy way around it.\r\n\r\nReading your points above, it all appears to boil down to the above statement, and I think my original analysis still holds.\r\n\r\nYou talk about \"ui state\" which is akin to \"storing state in the dom\".\r\n\r\nThe dom isn't a place to store state. It's a view over your state. The reason it's not a good place to store state is in your original issue - because when you delete it, the state is lost. That's because it's not a good place to store state.\r\n\r\nThe correct way to do the multi-page form you talked about before would be to create a store, place it in the form's context, and bind your inputs to it. You can then freely remove components at will, and the state will persist. It's very much the correct place to store state, and it's bounded (using set/get context) to the form.",
          "createdAt": "2021-03-02T11:39:24Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODg2NDA5Ng==",
          "body": "> The dom isn't a place to store state. It's a view over your state.\r\n\r\nThis is not the way Svelte works and advertises itself. And that's the reason I use Svelte. Because this \"view over your state\" doesn't scale and doesn't compose well. I've tried it.\r\n\r\nAlso why does Swelte has (and promotes in every example) internal state, if it's unnecessary or even bad?\r\n\r\n>  because when you delete it, the state is lost\r\n\r\nYes, and this is intended! If I open a CRUD form to edit some data, it's temporary and its state should be lost if I close it. \r\n\r\nBut those forms may be switched temporarily by the UI to make usability better. Displaying all data in one big monster-form isn't ideal and resource friendly. And if I implement for example a calculator app or a notification list in a different page, I don't want my form to lose its edits just because I quickly switched over it and then back. \r\n\r\nIn the moment I have to store state in the DOM because otherwise it would be lost, resulting in poor UX. Which BTW breaks Sveltes animation-system which doesn't work anymore if I use display:none.\r\n\r\n> place it in the form's context, and bind your inputs to it.\r\n\r\nYes, this would work. But it would also complicate things unnecessarily. And it would create additional external dependencies and shared mutated state, making the design of the app worse. \r\n\r\nI also has other drawbacks: Do I put all fields in one store or do I create a map of stores which each stores the fields? The first is easier but every change invalidates the whole form now, so the second one should be used. But then I have a big object containing multiple stores which I can't use as easily as \"normal\" values, because I now have to wrap/unwrap every access to every field. Lots of boilerplate now instead of clear design.\r\n\r\nSo why does svelte a clever compiler-based \"invalidate\" mechanism on local state, if I shouldn't use it?\r\n",
          "createdAt": "2021-03-02T12:10:52Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODg4NjAzNA==",
          "body": "> This is not the way Svelte works and advertises itself.\r\n\r\n\"Svelte writes code that surgically updates the DOM when the state of your app changes\"\r\n\r\n>  Because this \"view over your state\" doesn't scale and doesn't compose well. I've tried it.And that's the reason I use Svelte. \r\n\r\nThen Svelte might not be a good fit for your use-case or patterns and you might be better off with something else. FWIW \"view over state\" absolutely does scale and composes fantastically.\r\n\r\n> Also why does Swelte has (and promotes in every example) internal state, if it's unnecessary or even bad?\r\n\r\nBecause internal (component) state is absolutely what you should use where possible. However if you need the component to be conditional and the state persisted, then you should be storing the state somewhere else - simply - in the parent, or for more complex use cases - in a store.\r\n\r\n> > because when you delete it, the state is lost\r\n\r\nBecause you are storing state in something that you then delete. That's completely logical.\r\n\r\n> Yes, and this is intended! If I open a CRUD form to edit some data, it's temporary and its state should be lost if I close it.\r\n\r\nWhen you close it, clear the the thing that holds the state (most likely, a store)\r\n\r\n> But those forms may be switched temporarily by the UI to make usability better. Displaying all data in one big monster-form isn't ideal and resource friendly. And if I implement for example a calculator app or a notification list in a different page, I don't want my form to lose its edits just because I quickly switched over it and then back.\r\n\r\nHow you display state is of no relevance, and is entirely up to you. If you need data to persist over \"page\" (view) changes, then store it in a place which doesn't get disposed (in contrast to your suggestion that there should be a mechanism to not dispose of things which get removed)\r\n\r\n> In the moment I have to store state in the DOM because otherwise it would be lost, resulting in poor UX. Which BTW breaks Sveltes animation-system which doesn't work anymore if I use display:none.\r\n\r\nThat's right. Don't use the DOM as a store of state. That's not what it's for. It's for rendering state (at least in the Svelte model, along with numerous other libraries)\r\n\r\n> Yes, this would work. But it would also complicate things unnecessarily. And it would create additional external dependencies and shared mutated state, making the design of the app worse.\r\n\r\nI fail to see how using a store to store state is more complicated than storing it in transient / uncontrolled dom elements and hoping it sticks around. The design of an app which stores state correctly is infinitely better than the alternatives.\r\n\r\nState is designed to be mutated, that's how reactivity works. \r\n\r\n> I also has other drawbacks: Do I put all fields in one store or do I create a map of stores which each stores the fields? The first is easier but every change invalidates the whole form now, so the second one should be used.\r\n\r\nStores are intentionally simple. They're just hashes of data which you can subscribe to to observe mutations. How you structure a hierarchy of these is up to you, and how best fits your application. Storing state in \"buckets\" (i.e grouped into a number of dependent stores) is a great way to ensure that cross-field validity is synced when a value changes.\r\n\r\n>> But then I have a big object containing multiple stores which I can't use as easily as \"normal\" values, because I now have to wrap/unwrap every access to every field. Lots of boilerplate now instead of clear design.\r\n\r\nThis is akin to saying sticking your entire app in a single file is clear design and having to `import` other files is boilerplate. Technically you're right but there's a reason we don't do things like this.\r\n\r\nStore states in stores. Let the dom be \"surgically updated\" when store values change. That's about as simple and crystal clear as it can get.\r\n\r\n> So why does svelte a clever compiler-based \"invalidate\" mechanism on local state, if I shouldn't use it?\r\n\r\nI'm not 100% sure what you mean by this, to be honest.\r\n\r\n",
          "createdAt": "2021-03-02T12:51:40Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODkzNjY2Mg==",
          "body": "> Then Svelte might not be a good fit for your use-case or patterns and you might be better off with something else. \r\n\r\nSvelte generally works fantastic for me. Because it allows local mutable component state. My problem is not Svelte it's that certain things in Svelte aren't implemented completely.\r\n\r\n> FWIW \"view over state\" absolutely does scale and composes fantastically.\r\n\r\nThat's the Elm-way of thinking. I'm talking about Svelte.\r\n\r\n>I fail to see how using a store to store state is more complicated than storing it in transient / uncontrolled dom elements and hoping it sticks around. \r\n\r\nBecause you have to manage it. And it's not the Svelte-way of doing things.\r\n\r\nNearly every example on svelte.dev uses local-mutable state. So it's obviously the way it's done in Svelte.\r\n\r\nOf course you need to distinguish between data-model and ui-component state. data-model-state is clearly external and should be. But ui-component-state is always implemented as mutable local-state in the examples. \r\n\r\nIf I want to compose an application correctly I build components which uses components etc. But components often have internal complexities which should be hidden. For example if I implement a 'popup-component', would you want to call it as\r\n\r\n```<Popup value={currentValue}>...</Popup>```\r\n\r\nor as\r\n\r\n```<Popup popupIsOpen={popupState} value={currentValue}>...</Popup>```\r\n\r\n?\r\n\r\nThe first one is clearly better because it shouldn't matter to the caller of \"Popup\" if there even is a \"Popup-State\" and how to manage it.\r\n\r\nIf you agree, why shouldn't the same be true for a form? Why shouldn't I call it for example as\r\n\r\n```<CustomerData customerId={id}/>```\r\n\r\nInstead of \r\n\r\n```<CustomerData data={customerData}/>```\r\n\r\n? Why should the caller even now, how customerData ist fetched, or written back? And is \"data\" even complete, maybe it should contain various additional state which is only relevant for the ui and has nothing to do with the data model. Why should the caller think about it? It would be the same as expecting to supply `popupState` above.\r\n\r\nComposable components should expose as less internals as possible. The first way would do this perfectly, it's totally up to `CustomerData` how data is fetched, written, displayed, etc. The second one is a kludge to circumvent conceptual problems of the framework. \r\n\r\nAnd in Svelte using the first way works nearly perfectly. Only if you put the component into some \"switch\" component, it breaks down. Of course it's still possible to write components in the first way by building some internal state-management-system storing state in some global store. But why do I even need to build this when Svelte could in principle handle it automatically?\r\n\r\nAnd again: It's not about storing things in the DOM, it's about letting a Svelte component \"live\" while it's DOM is deleted. So the component could be remounted and rebuild it's DOM without requiring the programmer to do all the state management.\r\n\r\n> Stores are intentionally simple. \r\n\r\nYes, and this is good. But it also means that you can only changes stores \"as one\" (at least from Sveltes perspective) which requires even more boilerplate code. To do it correctly the \"customerData\" above need to have a store for every data-field. Possible, of course. But why bother the programmer with this kind of bookkeeping?\r\n\r\n> Store states in stores. Let the dom be \"surgically updated\" when store values change. That's about as simple and crystal clear as it can get.\r\n\r\nThen why don't the examples on svelte.dev don't do this and use `let state = ...` instead? Most of the examples don't use any store, they always store state in locals via `let`.\r\n\r\n> I'm not 100% sure what you mean by this, to be honest.\r\n\r\nIf you look at the generated code, you see the invalidation mechanism of changed locals in action. The compiler detects which locals are changed and generate code like\r\n\r\n```\r\n\tfunction input_change_handler() {\r\n\t\tvisible = this.checked;\r\n\t\t$$invalidate(0, visible);  \r\n\t}\r\n```\r\n\r\nThe ```$$invalidate(0, visible);``` is the mechanism I'm talking about - which would be totally unnecessary if you are right and state should always be managed by stores.\r\n\r\nAgain: You describe the Elm-Way of doing UIs. Svelte works differently and the examples and tutorials show this clearly.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-03-02T14:11:36Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODk1MDI2NA==",
          "body": "I disagree with your view of \"the Svelte way\". Just because the tutorials and examples do not make heavy use of global state does not mean it's discouraged. The tutorials and examples are little snippets where it would be overkill to use global state, that's why they are not used there. I also disagree that by using Stores you are automatically doing the \"elm way\", you just lift the state management one level up.",
          "createdAt": "2021-03-02T14:31:40Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODk2MTAzNw==",
          "body": "But why do the examples in a way which won't work in real applications? And in fact this way work very well implementing UI elements (and forms are UI elements, just as a popup-menu is). \r\n\r\nOf course if different UI elements *share* state, you need to use an adequate solution. That what stores are for. But why should I make state artificially shared only to implement some persistence mechanism by hand to circumvent a small oversight in the design of the framework? That's exactly the opposite of good design.\r\n\r\nVue is very similar to Svelte in many regards. All points brought up in this discussion are equally true for Svelte and Vue. And Vue has this \"keep-alive\" feature. Why do you think, they did that?\r\n \r\n",
          "createdAt": "2021-03-02T14:47:34Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODk2MTY5NQ==",
          "body": ">> That's the Elm-way of thinking. I'm talking about Svelte.\r\n\r\nI've never used Elm, I've used Svelte extensively for the last four years. I refer you again to the sentence written on the Svelte homepage - \"Svelte writes code that surgically updates the DOM when the state of your app changes.\"\r\n\r\nYou seem to be fixated on the fact that because Svelte allows you to keep component state locally, and the fact that there are references to this in the documentation and examples, that it's the de-facto, and only way to store state. It's an excellent way to store state until you need slightly more extensible state management. For this we provide stores. May I therefore point you at the store documentation, which is also detailed in the examples and Svelte documentation:\r\n\r\nhttps://svelte.dev/docs#svelte_store\r\n\r\nYour use case describes a common scenario where local state is no longer sufficient for your needs and where you should move required state into stores. Rather than trying to bend component local state into something which it is not designed for, and requesting the Svelte API to be extended with facilities to allow you to use it for a purpose it is not suitable for, may I suggest that you instead use the mechanism that we provide for this specific use-case among others.\r\n\r\n>> And again: It's not about storing things in the DOM, it's about letting a Svelte component \"live\" while it's DOM is deleted\r\n\r\nThe only reason to need this is because you're storing state in an unsuitable place for your use case (the dom/component)\r\n\r\n>>  Of course it's still possible to write components in the first way by building some internal state-management-system storing state in some global store.\r\n\r\nNo need to build your own state management state. We provide one, called Stores.\r\nNo need for it to be global, you can control its bounds using `setContext/getContext`\r\n\r\n>> But why do I even need to build this when Svelte could in principle handle it automatically?\r\n\r\nIt does. It's called Svelte Stores. You're looking for a different mechanism to preserve state by shoehorning it into a place that doesn't make sense, and persisting it using a mechanism which needlessly allows you to have that floating around in your application after it should have been destroyed by the component lifecycle.\r\n\r\n>>  if you are right and state should always be managed by stores.\r\n\r\nI am right, but you keep reading what I'm writing in black and white for some reason. Local state where suitable, Stores where you need something more complex. The two mechanisms are not mutually exclusive.\r\n\r\n>> But components often have internal complexities which should be hidden.\r\n\r\ninternal complexities = local state\r\nexternal complexities = store state (or bound state)\r\n\r\nI'm not sure why you keep fixating on using one or the other. Use each where appropriate. Don't put your entire app into stores. Just put state which is required outside of a single component or parent-child component into stores.\r\n\r\n>> Then why don't the examples on svelte.dev don't do this\r\n\r\nAs @dummdidumm said. Simplicity for examples. But also because it's the right way. The data being stored is only relevant to the component. Look at the mapbox example. Stores + Context.\r\n\r\n>> But why do the examples in a way which won't work in real applications\r\n\r\nBecause they are *examples*, focussed on and intentionally simplified to demonstrate a *specific* concept without the complexity of everything else getting in the way.\r\n\r\n>> why should I make state artificially shared only to implement some persistence mechanism\r\n\r\nputting state in a store doesn't make it shared, it allows it to persist outside of the component lifecycle, which is precisely what you are asking for in this feature request.\r\n\r\n>> Why do you think, they did that?\r\n\r\nmore importantly, who cares? They implemented the feature because they saw a need for it. we have a different mechanism, which also works well. We don't implement features because other libraries have them, we implement features based on a need for them. in this instance, using Svelte the way it was designed to be used would solve your use-case.\r\n\r\n",
          "createdAt": "2021-03-02T14:48:25Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODk4Mzg3Nw==",
          "body": "> You seem to be fixated on the fact that because Svelte allows you to keep component state locally, and the fact that there are references to this in the documentation and examples, that it's the de-facto, and only way to store state.\r\n\r\nNo, but from the example (and my own experience using Svelte) I consider this the canonical way for non-shared local ui-state.\r\n\r\nAs I stated for shared UI-state, external storage is of course necessary and I've used stores extensively for it.\r\n\r\nBut what is so bad about creating a form this way:\r\n\r\n```\r\n<form>\r\n   Name: <input bind:value={name}>\r\n   Address: <input bind:value={address}>\r\n\r\n   <button on:click={submit}>Submit</button>\r\n</form>\r\n\r\n<script>\r\n   export let id;\r\n   let name = '', address = '';\r\n  \r\n   function submit( ) {\r\n     put('url/' + id, { name, address });\r\n  } \r\n   onMount(async () => \r\n       const r = await get('url/' + id);\r\n       name = r.name;\r\n       address = r.address;\r\n   );\r\n</script>\r\n```\r\n\r\nIt's a self contained, compact, well readable component. Why should I bother to make this clean design more complex by externalizing state?\r\n\r\n> It's an excellent way to store state until you need slightly more extensible state management.\r\n\r\nBut what if I don't want to manage my state and only want to let components stay alive even if they are invisible for some time? And this isn't some strange use-case, every SPA uses it.\r\n\r\n> The only reason to need this is because you're storing state in an unsuitable place for your use case (the dom/component)\r\n\r\nI don't consider it an \"unsuitable place\" but in fact the most suited one. As in the \"Popup\" example: Local state belongs as close to the component as possible.\r\n\r\n> No need to build your own state management state. We provide one, called Stores.\r\n\r\nThose stores don't create and store them self. They must be supplied, created, destroyed. I call this \"management\".\r\n\r\n> you can control its bounds using setContext/getContext\r\n\r\nBut why should I need to think about that? Why can't I create a self-contained component and just use it supplying the necessary arguments and nothing more? \r\n\r\nIn fact it's possible to do that in Svelte - until you want to switch for example via a router to a different page for short time and back without losing component state. \r\n\r\nWhy not simply be able to declare components on use as \"store the state\" instead of requiring the programmer to rewrite an otherwise completely fine program?\r\n\r\n> I'm not sure why you keep fixating on using one or the other. Use each where appropriate. \r\n\r\nExactly that's what I want. But then I lose page-switching without losing state in my program. Which isn't an option because of UX.\r\n\r\n> Just put state which is required outside of a single component or parent-child component into stores.\r\n\r\nExactly that's my point: I don't want to expose state which isn't required outside just to make page-switching possible.\r\n\r\nI want clear design, no workarounds just to make the framework happy.\r\n",
          "createdAt": "2021-03-02T15:17:33Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODk5NDcxMQ==",
          "body": "> Because they are examples, focussed on and intentionally simplified to demonstrate a specific concept without the complexity of everything else getting in the way.\r\n\r\nAnd where are the real-world examples? But why even make it possible to implement it this way when it's not intended, not the \"Svelte-way\"? Shouldn't the examples show how a framework should be used? \r\n\r\n> putting state in a store doesn't make it shared,\r\n\r\nOf course. And without sharing, it wouldn't be a solution to the stated problem. It's shared between the component and some persistence mechanism (which only consists of a single reference to the store, but nonetheless...).\r\n\r\nBut the big question remains: Why does Svelte have mutable local state and a clever and well thought out mechanism of observing changes of this state, it it's supposedly \"unnecessary\" and not the intended way to do it? And why do most examples and also most component libs I've looked at extensive use of this mechanism if it's so bad?\r\n\r\n> which is precisely what you are asking for in this feature request.\r\n\r\nI ask for a simple solution which fits well into the framework. \r\n\r\n> They implemented the feature because they saw a need for it. we have a different mechanism, which also works well. \r\n\r\nNo, you don't. That's the problem. Vue also has stores like Svelte (implemented  a bit differently but could be used quite similar) and they could also propose a very similar solution as yours above. Still they decided to create the keep-alive feature because they deemed it necessary.\r\n\r\n",
          "createdAt": "2021-03-02T15:32:14Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTAwMjM1MQ==",
          "body": "This is a significant enough feature request that it warrants an RFC. Please create an RFC at https://github.com/sveltejs/rfcs in order to discuss this feature request further. ",
          "createdAt": "2021-03-02T15:42:55Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTg5NDIwOTc=",
    "body": "Hi, I'm a member of Svelte Japan Community.\r\nWe have started to translate svelte.dev into Japanese. `Tutorial`, `FAQ` and `API` are done, and now we are working on translating `blog`.\r\n\r\n- GitHub : https://github.com/svelte-jp/svelte-site-jp\r\n- Website : https://sveltejp.dev/\r\n  - hosted on Heroku, using Cloudflare.\r\n\r\nWe would like our site to be hosted on Japanese subdomain(https://ja.svelte.dev) like Russian site(https://ru.svelte.dev/).\r\nWould it be possible for you to provide us the subdomain?\r\n\r\nThanks.",
    "closedAt": null,
    "createdAt": "2021-03-01T14:51:47Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTg5MzgzNzk=",
    "body": "@jycouet @sudomaxime @torgebauer @orgertot @shedali @clineamb @kilianso\r\nif you could kindly post the following about your issues, so that we could better look into it:\r\n\r\n- Reproduction of the issue, github link / svelte repl (https://svelte.dev/repl) (Preferrable)\r\n- Svelte version you are using (Run `yarn why svelte` or `npm list svelte`)",
    "closedAt": null,
    "createdAt": "2021-03-01T14:47:54Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODA2NjQzOA==",
          "body": "My issue is not reproducible with svelte 3.17.3",
          "createdAt": "2021-03-01T16:04:40Z",
          "author": { "login": "shedali", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODA5NjczMA==",
          "body": "> My issue is not reproducible with svelte 3.17.3\r\n\r\nSo the latest svelte version is 3.34.0, is it fixed since 3.17.3? Or its a regression bug on 3.34.0?",
          "createdAt": "2021-03-01T16:45:04Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODE5NDY0OQ==",
          "body": "I have this behavior with `\"svelte\": \"3.34.0\"` (it was also the case with `\"3.32.3\"`)\r\n(Actually, my exact message is `Uncaught TypeError: Cannot read property 'removeChild' of null`, there is no `(in promise)`)\r\n\r\nUnfortunately, I can't share my repo, and I don't find the root cause to isolate the issue and create a repl.\r\nFortunately, I ❤️ Svelte and will spend time to find how to reproduce it.\r\nI hope to be able to create a repl soon",
          "createdAt": "2021-03-01T19:06:33Z",
          "author": { "login": "jycouet", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODI0ODk4Mw==",
          "body": "Sapper-based project, this in a .svelte file crashes the app and requires a reload on navigating away from the relevant Sapper route:\r\n```\r\n<div class=\"note-box\" bind:clientWidth={elemWidth}>\r\n  {@html svg}\r\n</div>\r\n```\r\nThe element whose parentNode no longer exists is an IFRAME and I assume it has been added to the DIV to help measure width and/or detect resizes. It seems that the logic cleaning up `@html` blocks on unmount does not take into account the presence of this IFRAME, and the later logic that attempts to clean up the IFRAME does not consider that it might no longer be in the DOM?\r\n\r\nI attempted a demo here but I don't know how to make it un-mount the component like it does during navigation - or perhaps there's some other trigger I have not discovered. I hope this helps anyway.\r\nhttps://svelte.dev/repl/e67564eaa8d24312bbeb91e0a402f7fc?version=3.34.0\r\nEdit: using svelte@3.34.0 for project now, still seeing the problem.",
          "createdAt": "2021-03-01T20:26:35Z",
          "author": { "login": "hallvors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODMwNDQ0Nw==",
          "body": "On my side, I'm not on sapper, just Svelte.\r\nAnd I think that it's link with a removal of an unfinished transition. \r\nBut after a few hours on it I have to say that I couldn't reproduce it in [my REPL](https://svelte.dev/repl/747b8a3626624afab7f1640635190591?version=3.34.0) 😞 \r\n\r\nI don't even know where to look at to help ><",
          "createdAt": "2021-03-01T21:25:07Z",
          "author": { "login": "jycouet", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODcxMDU1Mg==",
          "body": "Do you know what element it crashes when it tries to remove? In devtools, you can set a conditional breakpoint on the line that throws and make the condition !element.parentNode - then it will stop just before throwing.",
          "createdAt": "2021-03-02T08:14:14Z",
          "author": { "login": "hallvors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTI4NjYxNg==",
          "body": "Thx a lot @hallvors , I never use this debugging way!\r\nAnd it worked very well in my repo.\r\n\r\nIt's in a component where I have:\r\n```\r\n<script lang=\"ts\">\r\n    ....\r\n</script>\r\n\r\n{#if showEdit}\r\n    ...\r\n{/if}\r\n```\r\n=> no parentNode.\r\n\r\n\r\nI updated this component like this:\r\n```\r\n<script lang=\"ts\">\r\n    ....\r\n</script>\r\n\r\n<div>\r\n  {#if showEdit}\r\n      ...\r\n  {/if}\r\n</div>\r\n```\r\nAnd now, I don't have the error anymore.\r\n\r\n\r\nI tried to reproduce here https://svelte.dev/repl/747b8a3626624afab7f1640635190591?version=3.34.0 But I don't manage to have my not working behavior. 😞\r\n\r\n\r\nNot sure what to do now. Should we close the issue? Or?",
          "createdAt": "2021-03-02T23:03:35Z",
          "author": { "login": "jycouet", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTUyMzQ5MA==",
          "body": "I think the Svelte developers likely want to fix something here, so let's leave that decision to them :) ",
          "createdAt": "2021-03-03T08:08:05Z",
          "author": { "login": "hallvors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTU1MDU3Mw==",
          "body": "> I updated this component like this:\r\n> \r\n> \r\n> And now, I don't have the error anymore.\r\n\r\nIf it can help, you should take into account the parent creating this component in order to reproduce this issue. IIRC there are a lot of \"anchoring\" cases when your component has only a condition on the top level, and the anchor is provided by the parent.\r\n",
          "createdAt": "2021-03-03T08:55:41Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDIzMjE2OA==",
          "body": "@jycouet \r\n\r\nlet me check if understand your situation correctly,\r\nso it is still throwing errors if you do this in a component? \r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    ....\r\n</script>\r\n\r\n{#if showEdit}\r\n    ...\r\n{/if}\r\n```\r\n\r\nand it occurs when you toggling on/off of the `showEdit`?\r\n\r\nMaybe can explain further on how this component is being used by the parent\r\n- whether there's other logic that tries to show / hide the component\r\n- any transitions involved\r\n- any actions involved manipulating the dom elements",
          "createdAt": "2021-03-04T02:18:23Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDQ2NDQ1MQ==",
          "body": "@tanhauhau it's already a component.\r\n\r\n---\r\n\r\nLet me try to explain with a drawing showing the different steps:\r\n![Issue 6037](https://user-images.githubusercontent.com/5312607/109935331-c4fd3300-7ccd-11eb-9226-5f06124025fe.png)\r\nIt's what I want and what I did here: https://svelte.dev/repl/747b8a3626624afab7f1640635190591?version=3.34.0\r\nAs you can see in the REPL, you have no errors, and it's working well.\r\n\r\nOn my project, and in browser debug mode (thx @hallvors) I have the steps 3.1 and 4.1 added\r\n![Issue 6037_2](https://user-images.githubusercontent.com/5312607/109937000-cc710c00-7cce-11eb-98e5-17e87b2d3568.png)\r\n\r\nSo I'm closing the first Dialog before the second one. \r\nI think that the issue I have right now is `logic that tries to show / hide the components` in the wrong way. \r\n=> As it's working well in the REPL, I will refactor my current spaghetti.\r\n\r\nNotes:\r\n- I have 2 transitions in the dialog component\r\n- I have 0 action involved manipulating the dom elements\r\n\r\n---\r\n\r\nIn the end, I think that it's me and my own logic and not really an issue for Svelte.\r\nMaybe I'm opening a pandora box, but what could be nice is that Svelte tells you: \"Nothing to remove on xxx\"",
          "createdAt": "2021-03-04T09:21:37Z",
          "author": { "login": "jycouet", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NTA1NDI1Mw==",
          "body": "https://github.com/sveltejs/svelte/issues/2086#issuecomment-787896877 \r\n@jycouet \r\nYou asked me how I managed to workaround the issue. \r\nYou will find the \"root cause\" in npm_modules/svelte/internal/index.js line 202 (varies with your svelte version)\r\nFor local development you can simple change it there but this will not help you for production. My simple and really stupid solution is to string replace it during the bundle \r\nChanges in my rollup.config.js\r\n`\r\ntransform(code, id) {\r\n\treturn code.replace('node.parentNode.removeChild(node)', 'if(node.parentNode)node.parentNode.removeChild(node)');\r\n\t}\r\n}\r\n`\r\nI checked the issue also with a conditional breakpoint and a lot of things were related to animations with svelte/transition. I changed all transition to local transitions. But like I said it is still an issue for us and I decided to dirty fix it with the string replacement. When I find some time I can try again to isolate the issue with conditional breakpoints.\r\n\r\nWe do similar things like you: Open closing dialogs and overlays and changing big parts of the DOM. We have a pretty interactive page (mini games) and we are using a lot of different components which are dynamically shown and hidden all the time.",
          "createdAt": "2021-03-10T08:05:43Z",
          "author": { "login": "torgebauer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMDMwNDk4OQ==",
          "body": "Just in case it's useful to anyone else, here's what specifically caused this issue for me and how I solved it:\r\n\r\nMy code:\r\n```\r\n{#each headers as header}\r\n      <th on:click=\"{() => sortTable(header.key)}\">\r\n          {#if searchParams.sort === header.key && searchParams.order === 'asc'}\r\n             <span><span style=\"height: 10px;\" class=\"iconify\" data-icon=\"fa:angle-up\" data-inline=\"false\"></span></span>\r\n          {:else if searchParams.sort === header.key && searchParams.order === 'desc'}\r\n             <span><span style=\"height: 10px;\" class=\"iconify\" data-icon=\"fa:angle-down\" data-inline=\"false\"></span></span>\r\n          {/if}\r\n          {header.name}\r\n      </th>\r\n{/each}\r\n```\r\n\r\nBasically, I have a sortable table where I wanted to place an icon next to the header of the column being sorted. I'm using Iconify icons and inserting them using `<span>` tags, but when the icons are actually loaded, the `<span>`s get converted to `<svg>`s. So, when I clicked the header to change the sort direction from ascending to descending, the `<span>` tag was no longer there for Svelte to remove. My solution above to to wrap an additional span around each element, so that that element can be located and targeted for removal.",
          "createdAt": "2021-03-30T14:25:16Z",
          "author": { "login": "apop880", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjUyMjQ0OQ==",
          "body": "Hello!\r\nI'd like to just bump this issue a bit and perhaps (hopefully) increase the urgency for a solution.\r\n\r\nWe're seeing a lot of issues with users using Google Translate. Some cases we've solved by simply adding \"notranslate\" classes to affected components, but we'd really like to avoid spraying that all over our app.\r\n\r\nIf you want to see it in action, you can reproduce one case like this:\r\n- Enable translation for german\r\n- Visit https://contabo.com/de/about-us/\r\n- Navigate to the \"Careers\" page using the menu\r\n",
          "createdAt": "2021-04-09T08:38:47Z",
          "author": { "login": "OskarHeden", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjExMzQ5Mg==",
          "body": "Hello there ! \r\nI can confirm one of by beta users stumbled upon this bug while using automatic translations on Google Chrome.\r\nWhen I suggested her to try to turn the translation off, it worked like a charm.",
          "createdAt": "2021-04-24T15:59:07Z",
          "author": { "login": "Nokorbis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTAzMjU1Mg==",
          "body": "> You will find the \"root cause\" in npm_modules/svelte/internal/index.js line 202 (varies with your svelte version)\r\n> For local development you can simple change it there but this will not help you for production. My simple and really stupid solution is to string replace it during the bundle\r\n> Changes in my rollup.config.js\r\n> `transform(code, id) { return code.replace('node.parentNode.removeChild(node)', 'if(node.parentNode)node.parentNode.removeChild(node)'); } }`\r\n\r\nThanks for this workaround. Instead of configuring rollup to change output bundle, I use https://www.npmjs.com/package/patch-package - this works both for local development and for production bundle",
          "createdAt": "2021-04-29T08:13:59Z",
          "author": { "login": "janproch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NDcxMjM0Nw==",
          "body": "Related to @apop880 comment (https://github.com/sveltejs/svelte/issues/6037#issuecomment-810304989), I encountered this issue recently when using fontawesome icons that I did not have wrapped in <span> tags - once I wrapped them in <span> tags, went away. Was not an issue previously but I am unsure how many versions ago that was.",
          "createdAt": "2021-06-04T13:09:37Z",
          "author": { "login": "kbitz", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTg2MjI3NDI=",
    "body": "There has been issues opened and closed regarding this issue:\r\n\r\nhttps://github.com/sveltejs/svelte/issues/5873 - Closed reason: \"issues such as this should be raised with a view to discuss a problem, not with a predetermined, preselected, unilaterally decided solution. It fosters a better discussion and therefore a better solution.\"\r\n\r\nDisagree in reasoning, but since that is the reason to close the issue, I am opening one with a title that does not suggest a solution even though it does in the discussion.\r\n\r\nWhy I disagree with close reason:\r\nYes, your reasoning is sound in most cases, but I do not see an issue with it in this topic. \r\n\r\n1. Discord is a chat app, not Q/A app and search is broken beyond believe. \"word1 word2\" search ignores the quotes and returns all searches; impossible to scroll through hundreds of results that does not provide context of the summary result.\r\n\r\n2. Stack Overflow is not the solution (was a possible solution before Discussions was avail in github). \r\nReasons: \r\n- It requires user to go to an external site\r\n- it is not for svelte only, so requires users to know the [svelte] tag or see irrelevant results\r\n- Very poor UX in comparison to Discussions in github (just take a look at https://stackoverflow.com/questions/tagged/svelte vs. any Discussion page at github).\r\n- users need to signup there to ask question. Not all developers are users there. Case in point, I've been a developer for over 20 years and still not a user there.\r\n- you don't have control over questions being dropped\r\n\r\n3. Discussions is Stack Overflow done right and targeted to your project only. It is part of the svelte product since it is in github, the home of the project. If anyone disagree with using Discussions, let them come up with alternatives. In the meantime, by closing the issue because it \"suggests a solution\" is just trying to not face the elephant in the room, which is we need a better Q/A then Stack Overflow and Discord. Not only that, suggestion a solution here makes more sense than asking for one since we can start pointing out reasons why \"Discussion doesn't fit what you want to achieve\" as stated in the other related issue https://github.com/sveltejs/svelte/issues/5857 but never answered instead of bike shedding on coming up with other alternatives.\r\n\r\nI am frustrated as a user since some questions I found in Issues is closed by redirecting to Discord and Stack Overflow but Discord and Stack Overflow search did not provide results. Your are driving users away by strong holding the belief that Stack Overflow works when it doesn't and not providing the reasons for the beliefs.\r\n\r\nMaybe some of the Svelte contributors may be frustrated too, as the suggested alt title was \"Re-answering is annoying\".\r\n\r\nThere are many Discussions in github that seems to be working, like https://github.com/vercel/next.js/discussions pointed out in above issue, and 2 I recently find useful - https://github.com/supabase/supabase/discussions and https://github.com/tradingview/lightweight-charts/discussions .\r\n\r\nSo please can you state your reason for \"Discussion doesn't fit what you want to achieve\" and let the users either agree or disagree with reasons?",
    "closedAt": null,
    "createdAt": "2021-03-01T08:39:08Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzgxNjQ4Nw==",
          "body": "First off, raising an issue where you're openly pretending to be agnostic about the technology choice, and then providing a heavily one-sided argument, extolling the virtues of discussions to a team of people who have already stated numerous times that they don't like it, whilst *technically* meeting the requirements of my previous closure reason, is a thinly veiled \"use discussions!\" issue, and shall be considered as such.\r\n\r\nFurthermore, telling us to justify our reluctance to use github discussions so that they can be put to a public jury for judgement is also not a particularly constructive way of proceeding. We are again looking for a \"problem requiring a solution\", not a \"solution requiring github issues\" here.\r\n\r\nRich articulated the disdain for discussions well in our recent maintainers meeting. We have discussed discussions a lot, and no single maintainer thinks it's a good idea. Some maintainers think it's a terrible, broken idea. Whichever way you look at it, we don't want to maintain and moderate yet another forum, whether other library authors think it's great or not. For what it's worth, vercel used to use a tool, the name skips my mind, but it was categorically the worst tool I've ever seen or used in my life, and they eventually abandoned it due to user complaints. Just because other people do something, doesn't mean it is a good idea.\r\n\r\nDiscussions has been noted as a poor way to maintain a conversation thread, it's hard to search and hard to keep track of things there, and it has a disconnect from actual issues. Things get forgotten and lost, and answers become stale. I'm sure others can come up with better arguments against it, since I'm probably the one maintainer who is least resistant to discussions being used. Whether they will spend the time doing so in this github issue, on the other hand, is up to them.\r\n\r\nEither way. We've no intention of using github discussions, so it would be in your best interests to come up with a truly agnostic issue to solve the problem you have, as I don't believe this one is going to have the desired outcome.\r\n\r\n",
          "createdAt": "2021-03-01T09:51:49Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzgxNjY2Mg==",
          "body": "Regarding your dislike of Stackoverflow: For me it's the other way round. I'm used to Stackoverflow, I clearly can differentiate between the question, answers and the accepted answer. It pops up early in search results from Google. Also, while you may have an account on GitHub but not on Stackoverflow, it is the opposite for many people.\r\n\r\nOne thing which makes me unconfortable using GitHub discussions is that it has somewhat of an official stance, and with it go responsibilities such as ensuring that there's no toxic behavior which - speaking only for myself here - I neither want nor have the time to do.\r\n\r\nI'm also still not sure that something like this is absolutely needed. Take React or Angular for example, they both have no official support forum and people are fine using various other channels such as Stackoverflow or Reddit. [React has a page about it](https://reactjs.org/community/support.html) which I like, which we maybe also could add to guide people where to look for support.",
          "createdAt": "2021-03-01T09:52:07Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Nzg0MDYwNQ==",
          "body": "I fully agree with @dummdidumm here that not having any 'dedicated' tools seems to work for React/Angular and think the Svelte community should go in the same direction.  Perhaps it could be useful to have a \"Where to get support\" page on svelte.dev though, the section on StackOverflow could even list relevant tags (or link directly to the tag) to help users better find the answers needed.\r\n\r\nThat said, I am usually following on Discord from 7AM to around 10PM, and the 'recurring questions' have subsided a lot, it would be more interesting in looking _why_ the once that come back do come back instead, and so far I've found 6 categories of questions:\r\n\r\n1) I didn't not read the docs **at all** and don't seem willing to do so\r\n2) I read the docs but am still confused\r\n3) How do you handle this common situation ?\r\n4) Anyone knows a ready-made-component that does X ?\r\n5) How to setup Svelte with technology Y ?\r\n6) Help, I don't understand why my code is buggy 😭\r\n\r\nUsers that fall in category 1 will not be helped by **any** alternative approach, they are like a pestilence you have to live with (I tend to filter them out)\r\n\r\nFor those in category 2, we should take note and see if adapting the docs/tutorial is required (note that this already happens, writing documentation is hard and the Svelte maintainers are unlike Svelte itself, not perfect)\r\n\r\nCategory 3 is a bit trickier, this falls in the field of 'recipes', 'cookbooks', etc... There is an independent site [Svelte Society](https://sveltesociety.dev/recipes) that tries to gather some of those, but this is community supported, not by the maintainers. This is also the group that will get help on StackOverflow often.\r\n\r\nCategory 4 is more or less the same as 3, with the extra note that I am not aware of any framework that actively promotes third party component (libraries) so why would Svelte ?.\r\n\r\nFor those in category 5, this is completely out of scope for Svelte itself, this becomes the grey area of blogs and youtube and others.  \r\n\r\nThat leaves us those in category 6, where often the answer is fully suited for their particular use case, a category that is perfectly suited for Discord in my opinion.  Fair enough, sometimes this is a recurring error, but often not a first glance, only after digging deeper into it you will see it is due to a misunderstanding of a core concept, but especially beginners will not have the knowledge to realize that, even if any other system is setup, they will just start a new discussion/question/issue because of this, negating any value you might win from said system.\r\n\r\nCurrently most recurring questions deal with SvelteKit, which is normal because it has not been released or documented yet. (I simply ignore those) and that falls in the category of questions that deserve no answer 😉\r\n",
          "createdAt": "2021-03-01T10:32:35Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Nzg0NDY0OA==",
          "body": "@antony Thank you for telling us that \"no single maintainer thinks it's a good idea\". If that's all maintainers think Discussions is bad based on experience, then that closes it as a replacement for Stack Overflow. I know the 2 referenced issues were closed, so maintainers may not be aware that there are are users still waiting for followups and reasoning. I think that if this information was updated there or somewhere more easily accessible, it would have help users (maybe just me) understand it better. Not too important, but I disagree on being \"pretending to be agnostic about the technology choice\" as I don't think I did any pretending at all. I only phrase the title due to the reason already given. If I came across as pretending, sorry, that was not my intent.\r\n\r\n@dummdidumm Thank you for pointing out the moderation side, I had not thought about that. Yes, I also understand many may find the Stack Overflow UX to be better. I don't think however that there can be more developers with StackOverflow accounts than github accounts since most developers can't really develop nowadays without cloning and commiting to github. But let's not sidetrack into that. My main point is Discussions seems ideal since everything is here - repo, readme, issues, discussions. Yes, we will most likely see projects such as React not using Discussions because it is a new product that did not exist when they started. There is much less motivation for them to switch. Since Svelte is much younger, I believe there is less of \"let's keep things the way it is\" mentality. \r\n\r\nThank you both for the feedback. It help a lot knowing that no maintainers like Discussions, so we can put that to rest. \r\n\r\nEdit: I just see @stephane-vanraes' post and not have the time to read it yet. I will do that and reply tomorrow.",
          "createdAt": "2021-03-01T10:38:59Z",
          "author": { "login": "fuzzthink", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Nzg5MjkwMw==",
          "body": "@fuzzthink \"If I came across as pretending, sorry, that was not my intent.\"\r\n\r\nApologies, I probably worded that badly. I meant the issue was pretending, not you. Essentially an issue that claims to be an open discussion about solutions to a problem and is in fact a foregone conclusion with a proposed solution.\r\n\r\nBut yes, unless somebody has just not spoken up about it, there aren't any of us who like discussions. It's definitely in the interests of us and the community to have a better way to provide support, but discussions isn't it.",
          "createdAt": "2021-03-01T11:57:20Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTgwNzM3OTg=",
    "body": "https://github.com/sveltejs/svelte/blob/1d6e20f2a967aebfa9c3eab769ca587345169632/src/compiler/compile/nodes/Element.ts#L538\r\n\r\nThe line above is a bit confusing to people who are either new to web development, new to a11y, or both. Case and point: https://discord.com/channels/457912077277855764/457912077277855766#chat-messages-815326230277652560\r\n\r\n> A webkit person figured out the bound <audio> music player bug!!!!!!!!!!!!!!!!!\r\n>\r\n> Turns out adding <track kind=\"captions\"> to the <audio> element WITHOUT actually having a captions track in it made iOS Safari on an iPhone 12 Pro fail to execute playback...\r\n>\r\n> But by simply removing  <track kind=\"captions\"> it works now!!!!!!!!!!\r\n\r\nThe wording of this message makes it seem to some folks that simply adding literally `<track kind=\"captions\">` is all that is needed for accessibility. It _is_ all that is needed to make the warning go away, so it is understandable that some people simply add it, shrug, and move on.\r\n\r\nI'd suggest\r\n```\r\nA11y: Media elements should have a captions track. Consider creating one and adding it to your media element. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\r\n```",
    "closedAt": "2021-03-01T21:58:43Z",
    "createdAt": "2021-02-28T01:34:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODE5NjIyMw==",
          "body": "Related: https://github.com/sveltejs/svelte/issues/5967",
          "createdAt": "2021-03-01T19:08:41Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODMyODQyNg==",
          "body": "That related issue has, in my opinion a better solution than this one. Closing in favor of plain old removal. This could be reopened if removal is off the table for some reason.",
          "createdAt": "2021-03-01T21:58:43Z",
          "author": { "login": "happycollision", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTc4MDAwMzk=",
    "body": "**Describe the bug**\r\nThere is a reactivity problem when I use slot forwarding through the couple of components and passing props back.\r\nThe forwarded slot I use twice. One within {#if} block and the second one in {#each} (so slot it some template markup for Grid Component with inline editor). The one within #each renders normally. But when slot inside the #if condition appears, the parent component doesn't show markup within its own #if block (the condition involving passed back props is true, but the :else block is rendered).\r\nI couldn't reproduce this bug in REPL example. But I tried. I've noted there a wrong behavior (see comments and console.log).\r\n\r\n[](https://svelte.dev/repl/529e825ed3f24f33a01924ddf2dc7be9?version=3.31.2)\r\n\r\nCan't attach the real component here, sorry. But the principle there is almost the same.\r\nHere's what's generated from the real component: [](https://pastebin.com/hdyA7E27)\r\n\r\nThere is a call of ```select_block_type(ctx, [-1])``` at the line 262.\r\nIf I understand correctly: [-1] means that everything is dirty (all bit are 1's).\r\nSo **dirty** is an array with one element here.\r\nAnd at the line 257 we have such precondition for #if block:\r\n```if (dirty[1] & 137494528)```\r\nAnd that's strange because there is not second element in dirty. So condition is always falsy.\r\nSeems to be a bug.\r\n\r\n**Severity**\r\nSevere.\r\nSo thanks in advance for quick fix or some workaround hint.\r\n\r\n**Additional context**\r\nNote that slot in Comp2 in the repl example is used twice (just like in my real component). Maybe this somehow affects.\r\nAlso if I click at the div where :else content (inside < div slot=\"\" > of parent component) is rendered, it immediately switches to #if block as it should be from the beginning. If this helps.\r\n\r\n\r\n<details>\r\n  <summary>Generated code part</summary>\r\n```\r\n// (195:4) <div slot=\"cellTemplate\" let:listItemData>\r\nfunction create_cellTemplate_slot(ctx) {\r\n    let div;\r\n    let t0;\r\n \r\n    let t1_value = (/*r*/ ctx[49] === -1\r\n    ? console.log(/*mode*/ ctx[51], /*editorValues*/ ctx[52], /*row*/ ctx[47], /*col*/ ctx[48])\r\n    : \"\", \"\") + \"\";\r\n \r\n    let t1;\r\n    let t2;\r\n    let show_if;\r\n    let current_block_type_index;\r\n    let if_block;\r\n    let current;\r\n    const if_block_creators = [create_if_block, create_else_block];\r\n    const if_blocks = [];\r\n \r\n    function select_block_type(ctx, dirty) {\r\n//HERE IS THE PROBLEM MAYBE\r\n        if (dirty[1] & /*mode, editorValues, listItemData, col*/ 137494528) show_if = !!([const__WEBPACK_IMPORTED_MODULE_5__.ENUM.MODE.LIST_EDITOR.CREATE, const__WEBPACK_IMPORTED_MODULE_5__.ENUM.MODE.LIST_EDITOR.MODIFY].includes(/*mode*/ ctx[51]) && /*editorValues*/ ctx[52][keyField] === /*listItemData*/ ctx[58][keyField] && !/*col*/ ctx[48].readonly);\r\n        if (show_if) return 0;\r\n        return 1;\r\n    }\r\n//OR HERE\r\n    current_block_type_index = select_block_type(ctx, [-1]);  //<--is [-1] correct? Because dirty[1] is undefined in this case.\r\n\r\n    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);\r\n ```\r\n</details>\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-02-27T02:34:59Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Njk5MDI2OQ==",
          "body": "Oh, I think it may be the same as #4318.\r\nBecause the main problem is exactly the same: if goes to else (because of the dirty, I think).\r\nupd: And #4263",
          "createdAt": "2021-02-27T02:43:49Z",
          "author": { "login": "kkarpeev", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTc2MjUyMzU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nAdd ability to get reference of current component. Something like bind:this, but bind:this works only for child component\r\n\r\nUse case:  \r\nI need to register active component to global handler. I have global menu, there is eg. command \"Refresh\" and this command should call \"export function refresh() {}\"  of current component\r\n\r\n**Describe the solution you'd like**\r\nProbably the best way would be some API, like getCurrentComponent(), similar to getContext() API. \r\n\r\n**Describe alternatives you've considered**\r\nThere are two workarounds:\r\nBind in parent component and pass down in prop:\r\n```svelte\r\n<script>\r\n  let activeComponent;\r\n</script>\r\n\r\n<Child instance={activeComponent} bind:this={activeComponent} />\r\n```\r\nOr a bit tricky solution using svelte:self  \r\nSee this REPL: https://svelte.dev/repl/3b32cfb5331843b286f02e2bb28a294a?version=3.33.0\r\n\r\n**How important is this feature to you?**\r\nThere are workarounds, but if would be nice to be able to do this directly\r\n",
    "closedAt": null,
    "createdAt": "2021-02-26T19:58:37Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzEyODg4NA==",
          "body": "you can do this:\r\n```html\r\n<!-- MyComponent.svelte -->\r\n<script>\r\nimport { get_current_component } from \"svelte/internal\"\r\nconst self = get_current_component()\r\n</script>\r\n```\r\n\r\nin case you wonder, this is not officially documented. I first heard of it asking a question in the [Svelte Discord channel](https://discord.com/channels/457912077277855764/457912077277855766), now I always take a look at \"svelte/internal\" module if I need something exotic.\r\n",
          "createdAt": "2021-02-27T20:13:54Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzQxMDg2MQ==",
          "body": "Thanks, it works perfect. Svelte/internal is good start point to see, how it works.\r\n\r\nI have asked this question on svelte discord channel, I have got here 2 workarounds, which are described in this issue.\r\n\r\nI am not closing this issue, it's question, whether not to publish get_current_component in public API.",
          "createdAt": "2021-02-28T07:33:46Z",
          "author": { "login": "janproch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNjg4ODk4MQ==",
          "body": "You can do that, although it's strange\r\n```js\r\n<script>\r\nconst self = arguments[0]\r\n</script>\r\n```",
          "createdAt": "2021-03-25T14:50:56Z",
          "author": { "login": "cereschen", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTY3MjAwMDM=",
    "body": "**Describe the bug**\r\nSvelte don't compile SCSS\r\n\r\n**Logs**\r\n[!] Error: Identifier directly after number (Note that you need plugins to import files that are not JavaScript)\r\nsrc\\App.css (1:12)\r\n1: h1.svelte-15o61yy.svelte-15o61yy{color:red}div.svelte-15o61yy.svelte-15o61yy{background:green}div.svelte-15o61yy>p.svelte-15o61yy{color:#fff}\r\n               ^\r\nError: Identifier directly after number (Note that you need plugins to import files \r\nthat are not JavaScript)\r\n    at error (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:5171:30)\r\n    at Module.error (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:9603:16)        \r\n    at tryParse (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:9517:23)\r\n    at Module.setSource (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:9902:30)    \r\n    at ModuleLoader.addModuleSource (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:17777:20)\r\n    at ModuleLoader.fetchModule (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:17831:9)\r\n    at async Promise.all (index 1)\r\n    at ModuleLoader.fetchStaticDependencies (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:17855:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (C:\\Users\\Workstation04\\Downloads\\svelte-sass-template-master\\svelte-sass-template-master\\node_modules\\rollup\\dist\\shared\\rollup.js:17832:9)\r\n\r\n**To Reproduce**\r\n```\r\ngit clone https://github.com/dceddia/svelte-sass-template.git\r\ncd svelte-sass-template\r\nnpm i\r\nnpm i svelte@3.33.0 rollup-plugin-svelte@7.1.0\r\nnpm run build\r\n```",
    "closedAt": "2021-02-25T19:57:57Z",
    "createdAt": "2021-02-25T19:16:27Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjE0NjA2Mw==",
          "body": "@Filyus it's not particularly useful to us to point us at somebody else's possilby broken template in order to fix an issue which exists in a different project.\r\n\r\nCan you please create a clean reproduction of the issue, using the official svelte template, with the rollup and relevant svelte-preprocess plugins included, in order to demonstrate the issue.",
          "createdAt": "2021-02-25T19:28:19Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjE1NjI3MA==",
          "body": "There only difference is not installed \"rollup-plugin-css-only\" module and missed `css({ output: 'bundle.css' }),` line in rollup.config.js. Perhaps a stupid mistake, but it took a long time to figure out what the reason was.",
          "createdAt": "2021-02-25T19:47:00Z",
          "author": { "login": "Filyus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjE2MDkwNQ==",
          "body": "`// css({ output: 'bundle.css' }),` wiil produce compile error\r\nhttps://github.com/Filyus/svelte-scss-error",
          "createdAt": "2021-02-25T19:55:25Z",
          "author": { "login": "Filyus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjE2MjI2Mg==",
          "body": "This is a breaking change documented in the rollup-plugin-svelte documentation.\n\nWhen upgrading major versions of a node module you should always Read the docs, that's why we bump major versions.",
          "createdAt": "2021-02-25T19:57:53Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTY2MTAyODM=",
    "body": "**Describe the bug**\r\nA node with two actions with the same name (but different options) is flagged `duplicate-attribute` as an error, and prevents compilation.\r\n\r\n**Logs**\r\n```\r\n✗ server\r\nsrc\\routes\\index.svelte\r\nAttributes need to be unique\r\n205:     class=\"copied\"\r\n206:     use:property={[\"top\", copied.top]}\r\n207:     use:property={[\"left\", copied.left]}>\r\n         ^\r\n208:     {$t(\"copied\")}\r\n209:   </div>\r\n✗ client\r\nsrc\\routes\\index.svelte\r\nAttributes need to be unique\r\n205:     class=\"copied\"\r\n206:     use:property={[\"top\", copied.top]}\r\n207:     use:property={[\"left\", copied.left]}>\r\n```\r\n\r\n**To Reproduce**\r\nLet me know if you need a reproduction.\r\n\r\n**Expected behavior**\r\nNo `duplicate-attribute` flag, compilation succeeds as it does in Svelte 3.32.3.\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\n```\r\n  System:\r\n    OS: Windows 10 10.0.18363\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz\r\n    Memory: 2.63 GB / 15.88 GB\r\n  Binaries:\r\n    Node: 14.15.5 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 6.14.11 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 88.0.4324.182\r\n    Edge: Spartan (44.18362.449.0)\r\n    Internet Explorer: 11.0.18362.1\r\n  npmPackages:\r\n    rollup: ^2.39.1 => 2.39.1\r\n    svelte: ^3.32.3 => 3.32.3\r\n```\r\n\r\n**Severity**\r\nAnnoying and blocking an upgrade.",
    "closedAt": "2021-02-25T18:13:59Z",
    "createdAt": "2021-02-25T16:47:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjA0NzYwMw==",
          "body": "I do need a reproduction. `<div class=\"copied\" use:property={[\"top\", copied.top]} use:property={[\"left\", copied.left]}></div>` is not throwing any compiler errors in the REPL for version 3.33.0, so there must be something else going on.",
          "createdAt": "2021-02-25T16:53:49Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjEwMDg0NQ==",
          "body": "Hi @Conduitry, must be a false alarm on my part. I had rolled back to 3.32.3 and restarted both the server and the language server and the message disappeared. Now I did the same for 3.33.0 and it is still good. I have a few projects with the same pattern, so if I see it again I'll make sure it's reproducible.",
          "createdAt": "2021-02-25T18:13:59Z",
          "author": { "login": "yuriys-kentico", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTY1NzM3ODg=",
    "body": "**Describe the bug**\r\non input event triggered by text input - binded value is actual value of input\r\non input event triggered by select - binded value is preceding (old) value of select\r\n\r\n**To Reproduce**\r\n\r\nRepl:\r\nhttps://svelte.dev/repl/b3d28512804e48a783736f3dfe29301d?version=3.32.3\r\n\r\nTo reproduce:\r\n1. in console, you see initial data\r\n2. select option opt1, you see 2x initial data (on select input - old data - without opt1 value)\r\n3. type 'a' to text input (new console line - actual data - with 'a' value)\r\n4. select option opt2, you can again see 2x preceding state (on select input - old data - opt1 value)\r\n\r\n**Expected behavior**\r\nConsistent behavior - binded value of select should be actual inside event handler.\r\n\r\n**Severity**\r\nAnnoying",
    "closedAt": null,
    "createdAt": "2021-02-25T16:03:55Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzA3MTk3OA==",
          "body": "`<select bind:value />` works on `select:change` event, meaning `form:input` event fires before the binding gets updated.\r\nIf the mentioned behavior is EXPECTED, we can update the `value` on `select:input` event manually.\r\nLike so,\r\n```\r\nlet value = \"\";\r\n<select on:input={function () { value = this.value }}>\r\n...\r\n</select>\r\n```\r\n---\r\n\r\nIMO, that's not how we(maybe I) code in `svelte`. The values are already bound. We can just `$: console.log(formData)`.\r\nListening on `form:input` event feels redundant.",
          "createdAt": "2021-02-27T13:21:49Z",
          "author": { "login": "mdynnl", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTY0NjM0NTE=",
    "body": "**Describe the bug**\r\nimpure expression in each block causes infinite loop in runtime\r\n\r\n**Severity**\r\nlow priority\r\n\r\n**To Reproduce**\r\n[repl](https://svelte.dev/repl/132fec6757c94430beb3de6d4d4067ee?version=3.32.3) - uncomment `//state[key] = val;` to crash the browser tab\r\n\r\n```svelte\r\n<script>\r\n  const data = { k1: 'v1' };\r\n  const state = {};\r\n</script>\r\n{#each\r\n  ['k1'].map(key => {\r\n    const val = data[key];\r\n    console.log('step'); // should be called only once\r\n\r\n    //state[key] = val;\r\n    // this global assignment makes the each-expression impure\r\n    // and causes an infinite loop in the svelte runtime\r\n    // 'step' is printed over and over in the browser console\r\n\r\n    return [key, val];\r\n  }) as [key, val]\r\n}\r\n  <div>{key}: {val}</div>\r\n{/each}\r\n```\r\n\r\n**Expected behavior**\r\nprobably this impurity should be detected by the svelte compiler as fatal error\r\nat least i cannot think of a use case where this should work\r\n\r\n**Possible Solutions**\r\n\r\n1\\. compile time\r\n\r\nparse the expression and look for assignments to non-local variables ([sample code](https://stackoverflow.com/a/66372081/10440128))\r\n\r\nthis would at least detect the simple case shown above.\r\nits harder to detect impure functions, that write to the global state\r\n\r\n2\\. runtime\r\n\r\nin the dev mode runtime, detect the infinite loop, stop it, and help to analyze (start devtools debugger?)\r\n\r\n**Related**\r\n\r\n* https://softwareengineering.stackexchange.com/questions/321794/programatically-determine-that-some-functions-are-pure\r\n* https://stackoverflow.com/questions/29858699/algorithmically-identifying-pure-functions-in-javascript\r\n   * i posted some sample code as a proof of concept\r\n* https://glebbahmutov.com/blog/test-if-a-function-is-pure-revisited/\r\n\r\n**Env**\r\nSvelte version 3.32.3\r\n",
    "closedAt": null,
    "createdAt": "2021-02-25T14:00:08Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTYwNjg5MTU=",
    "body": "Can someone please explain why `specialUsers` is being updated every time when the value for the select box changes (as can be seen in the console)?\r\n\r\nNote, that if `bind:value={selectValue}` is removed it doesn't behave this way.\r\n\r\nREPL: https://svelte.dev/repl/9c8559d388f94de4a31909a32723bac0\r\n\r\nThanks\r\n",
    "closedAt": null,
    "createdAt": "2021-02-25T04:21:12Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NTY1NDAyMw==",
          "body": "seems the same as [a closed issue](https://github.com/sveltejs/svelte/issues/2747#issue-443384420)",
          "createdAt": "2021-02-25T06:35:51Z",
          "author": { "login": "cctor", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NTk0NTU4Mw==",
          "body": "@cctor Yes, it very much does. I'm using v3.32.3 of Svelte.",
          "createdAt": "2021-02-25T14:43:33Z",
          "author": { "login": "seanthingee", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjAzNDkzMQ==",
          "body": "This might be notable. If the index from`#each` is used as the options's value, then it works as expected.\r\n\r\nhttps://svelte.dev/repl/04f5d3f9679e4e2e8ab9fd82d4242ccd?version=3.32.3",
          "createdAt": "2021-02-25T16:35:58Z",
          "author": { "login": "seanthingee", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1ODc3MjM2OA==",
          "body": "Just got this issue, in some cases it prevents ability to change select value\r\n\r\nhttps://svelte.dev/repl/c477cddf87c7419a978284d292fffd84?version=3.38.2\r\n\r\nWould be always `Joe`\r\n",
          "createdAt": "2021-06-10T16:35:49Z",
          "author": { "login": "istarkov", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1ODc4MzE4MQ==",
          "body": "In my case `<svelte:options immutable={true} />` fixes the issue, It also fixes first example",
          "createdAt": "2021-06-10T16:52:29Z",
          "author": { "login": "istarkov", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTU3MzY2MTk=",
    "body": "**Describe the bug**\r\n\r\n[Svelte API reference](https://svelte.dev/docs#Component_props) suggests `<svelte:options accessors={true}/>` will \"merely\" expose component's props (*by generating getters and setters*) and perform an immediate component update after using an accessor as a setter, though there is a **caveat when referencing a component** which can result in **huge performance differencies** and **hard to predict update ( flush ) behavior**, especially with complex component structures (*components / slots nested several levels deep*).\r\n\r\nFor example, given this `App`:\r\n\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n\tlet childRefs = {}\r\n</script>\r\n\r\n<Parent>\r\n    <Parent>\r\n        <Parent>\r\n            {#each { length: 1000 } as _, i}\r\n                <Child bind:this={childRefs[\"child-\"+i]} propNum={0}/>\r\n            {/each}\r\n         </Parent>\r\n    </Parent>\r\n</Parent>\r\n\r\n```\r\n---\r\n***Update Behavior***\r\n\r\nChanging the `propNum` of a `<Child/>` component can result in completely different update ( flush ) behaviors, depending on how the `<Child/>` was referenced:\r\n\r\n\r\n```javascript\r\n\r\n// updates ( flushes ) `App` + the whole component-tree on each `propNum` change!\r\n// updates ( flushes ) `App` + all `<Parent>` components but not `<Child/>` if `propNum` was assigned the same value!\r\n\r\nfn() {\r\n    for (let child in childRefs) {\r\n      \r\n        childRefs[child].propNum = 1 // compiled as: $$invalidate(0, childRefs[child].propNum = 1, childRefs)\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n```javascript\r\n\r\n// updates ( flushes ) a `<Child/>` only\r\nfn() {\r\n    for (let child in childRefs) {\r\n\r\n        let childRef = childRefs[child]\r\n        childRef.propNum = 1\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\nSee this **REPL**: [\"change props - accessors - reference path caveat - ( check  flush / updates )\"](https://svelte.dev/repl/032947cc2db943638e769469b6df0694?version=3.32.3) for more details. Here I've also saved `childRefs` inside `<Parent>` components in order to test different `childRefs` paths' update behavior:\r\n\r\n`childRefs[child].propNum = 1` --> updates: the whole `App` / compontents-tree\r\n\r\n`parent0.childRefs[child].propNum = 2` -->  updates: `<Child/>`, `App`\r\n`parent1.childRefs[child].propNum = 3` -->  updates: `<Child/>`, `App`, `parent-0`\r\n`parent2.childRefs[child].propNum = 4` -->  updates: `<Child/>`, `App`, `parent-0`, `parent-1`\r\n\r\n`let childRef = childRefs[child]; childRef.propNum = 5` -->  updates: only `<Child/>`\r\n\r\nalso ...\r\n\r\ngiven `App` where a reference to a `<Child/>` is saved as an `App`-prop (*not inside `childRefs`*):\r\n\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n\tlet child\r\n</script>\r\n\r\n<Parent>\r\n    <Parent>\r\n        <Parent>\r\n                <Child bind:this={child} propNum={0}/>\r\n         </Parent>\r\n    </Parent>\r\n</Parent>\r\n\r\n```\r\n```javascript\r\n\r\n// updates ( flushes ) `App` + the whole component-tree on each `propNum` change!\r\n// updates ( flushes ) `App` + all `<Parent>` components but not `<Child/>` if `propNum` was assigned the same value!\r\nfn() {\r\n\r\n    child.propNum = 1 // compiled as: $$invalidate(0, child.propNum = 1, child)\r\n\r\n}\r\n```\r\n\r\n```javascript\r\n\r\n// updates ( flushes ) a `<Child/>` only\r\n\r\nfn() {\r\n\r\n    let childRef = child\r\n    childRef.propNum = 1\r\n\r\n}\r\n\r\n```\r\n---\r\n\r\n ***Performance***\r\n\r\nIn this **REPL**: [\"change props - performance (nested) - accessors vs. $set\"](https://svelte.dev/repl/fdfad265ddfa4184adae7b74f4ee071c?version=3.32.3) I've tested the **performance difference** between accessors & `$set` by changing `propNum` of 1000 `<Child/>` components with various ways of referencing, the results:\r\n\r\n`childRefs[child].propNum = 1` --> **320 ms** (by far **slowest**)\r\n`let childRef = childRefs[child]; childRef.propNum = 1` --> **9 ms** (**35x faster!**)\r\n\r\n`childRefs[child].$set({propNum:1})` --> **6 ms** (**53x faster!**)\r\n`let childRef = childRefs[child]; childRef.$set({propNum:1})` --> same as `childRefs[child].$set({propNum:1})` **6 ms**\r\n\r\n\r\n***Conclusion***\r\nUsing accessors can cause significant performance drop and hard to predict update ( flush ) behavior depending on how a component was referenced. To be honest, atm I'm not even sure if what I've observed is a bug or a feature, and I would appreciate some more light being shed on this matter. Thanks!\r\n\r\n\r\n**To Reproduce**\r\n\r\nREPL: [\"change props - accessors - reference path caveat - ( check  flush / updates )\"](https://svelte.dev/repl/032947cc2db943638e769469b6df0694?version=3.32.3)\r\nREPL: [\"change props - performance (nested) - accessors vs. $set\"](https://svelte.dev/repl/fdfad265ddfa4184adae7b74f4ee071c?version=3.32.3)\r\n\r\n\r\n**Expected behavior**\r\n\r\nI would expect an accessor to update only the corresponding component without having to worry about component-referencing, basically just like `$set()` (*which seems to be reference- & performance-safe*) but with an immediate component-update after each assignment.\r\n\r\n**Information about your Svelte project:**\r\nGeneral testing.\r\n\r\n- Chrome 88.0.4324.182 (Official Build) (64-Bit)\r\n\r\n- Your operating system: (Windows 10)\r\n\r\n- Svelte version : 3.32.3 (REPL)\r\n\r\n\r\n**Severity**\r\nIt could be severe concerning performance of apps with complex component structures (*components / slots nested several levels deep*).",
    "closedAt": "2021-03-02T15:56:26Z",
    "createdAt": "2021-02-24T18:30:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjgyNzY1NA==",
          "body": "Attempting to \"fix\" this by myself, I'm currently trying to wrap this line:\r\nhttps://github.com/sveltejs/svelte/blob/c4479d976b2fbb00ffd08980de58f12ac20b7f2f/src/compiler/compile/render_dom/invalidate.ts#L69\r\nin a conditional statement which would prevent this line:\r\n\r\n`childRefs[child].propNum = 1`\r\n\r\nto be compiled as:\r\n\r\n`$$invalidate(0, childRefs[child].propNum = 1, childRefs)`\r\n\r\nif a component has the corresponding acccessor / was compiled with the `accessors = {true}` option.\r\n\r\nSo far I've came up with this:\r\n\r\n```javascript\r\nlet leftObj\r\nlet leftPropName\r\n\r\nif(node.left?.property?.name) leftPropName = node.left.property.name\r\nif((node.left?.object?.type === 'Identifier')) leftObj = node.left.object.name\r\nif((node.left?.object?.type === 'MemberExpression')) leftObj = node.left.object\r\n\t\t\t\t\t\r\n// if 'node.left' is Identifier.Identifier or MemberExpression.Identifier\r\nif(leftObj && leftPropName) {\r\n\r\n  // will render as conditional statement\r\n  // if 'node.left.object' references a component and this component has a setter with the 'name' of 'node.left.property'\r\n  invalidate = b `if (${leftObj}.$$ && Object.getOwnPropertyDescriptor(Object.getPrototypeOf(${leftObj}), \"${leftPropName}\").set) {\r\n    ${extra_args.length ? [node, ...extra_args] : node}\r\n  } else {\r\n    $$invalidate(${renderer.context_lookup.get(head.name).index}, ${node}, ${extra_args})\r\n  }`[0]\r\n\r\n} else {\r\n  invalidate = x `$$invalidate(${renderer.context_lookup.get(head.name).index}, ${node}, ${extra_args})`;\r\n}\r\n```\r\n\r\nthis will compile `childRefs[child].propNum = 1` as:\r\n```javascript\r\nif (childRefs[\"child\"].$$ && Object.getOwnPropertyDescriptor(Object.getPrototypeOf(childRefs[\"child\"]), \"propNum\").set) {\r\n    childRefs[\"child\"].propNum = 1;\r\n} else {\r\n    $$invalidate(1, childRefs[\"child\"].propNum = 2, childRefs);\r\n}\r\n```\r\nwhich will leave `childRefs[\"child\"].propNum = 1` as it is and will update only the corresponding `child`, nothing else.\r\n\r\nI've already tested it in a pretty complicated / extreme performance demanding project and while it's not breaking anything and I believe to see better performance than before (have no exact numbers yet), it seems the `getOwnPropertyDescriptor`-check is expensive. Unfortunately I don't see any component-property that would indicate it was compiled with the `accessors = {true}` option and I wasn't able to find some `svelte/internal` function (yet) that would perform that check.\r\n\r\nIf something like `$$.acc` (boolean) would be available it'd probably make the check much faster:\r\n```javascript\r\n// will render as conditional statement\r\n// if 'node.left.object' references a component and this component was compiled with `accessors = {true}`\r\ninvalidate = b `if (${leftObj}.$$?.acc) { ...\r\n``` \r\nNext I'll try to inject the `acc` indicator (somewhere) + test the accessors-check speed with that.",
          "createdAt": "2021-02-26T18:47:07Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzA4MTg0MQ==",
          "body": "> Next I'll try to inject the acc indicator (somewhere) + test the accessors-check speed with that.\r\n\r\nok, this:\r\n\r\n```javascript\r\nif(component.component_options.accessors) {\r\n  accessors.push({\r\n    type: 'MethodDefinition',\r\n    kind: 'get',\r\n    key: { type: 'Identifier', name: '$component_compiled_with_accessors' },\r\n    value: x `function() {\r\n    return true\r\n  }`\r\n });\r\n}\r\n```\r\n\r\ninserted here: https://github.com/sveltejs/svelte/blob/c4479d976b2fbb00ffd08980de58f12ac20b7f2f/src/compiler/compile/render_dom/index.ts#L178\r\n\r\nwill add `$component_compiled_with_accessors`:`true` to each component instance which was compiled with `accessors = {true}`.\r\nWith  `$component_compiled_with_accessors` the accessors-check can't get any simpler, so it should be performance-safe:\r\n\r\n`if (${leftObj}.$component_compiled_with_accessors) { ...`\r\n\r\ninside the new \"hack\"-version:\r\n\r\n```javascript\r\n\r\n// performance --> 300 updates, throttling: off\r\n// using $set(): 5.00 sec (60 fps) --> updates only corresponding component, scheduled flush\r\n\r\n//const use_hack = false // 17.34 sec ( 17 fps )\r\nconst use_hack = true // 9.58 sec ( 31 fps ) --> updates only the corresponding component, but still flushes it after each change of each prop (not scheduled as with 'set()')\r\n\r\n\r\nif(use_hack) {\r\n\r\n  let leftObj = undefined\r\n  let leftPropName = undefined\r\n\r\n  if(node.left?.property?.name) leftPropName = node.left.property.name\r\n  if((node.left?.object?.type === 'Identifier')) leftObj = node.left.object.name\r\n  if((node.left?.object?.type === 'MemberExpression')) leftObj = node.left.object\r\n\t\t\t\t\t\t\r\n  // if the node.left is 'Identifier'.'Identifier' or 'MemberExpression'.'Identifier'\r\n  if(leftObj && leftPropName) {\r\n\r\n    invalidate = b `if (${leftObj}.$component_compiled_with_accessors) {\r\n        ${extra_args.length ? [node, ...extra_args] : node}\r\n      } else {\r\n        $$invalidate(${renderer.context_lookup.get(head.name).index}, ${node}, ${extra_args})\r\n      }`[0]\r\n    }\r\n\r\n  else {\r\n    invalidate = x `$$invalidate(${renderer.context_lookup.get(head.name).index}, ${node}, ${extra_args})`;\r\n  }\r\n}\r\nelse {\r\n  invalidate = x `$$invalidate(${renderer.context_lookup.get(head.name).index}, ${node}, ${extra_args})`;\r\n}\r\n\r\n```\r\n\r\n***pro / con \"hack\":***\r\n\r\n*PRO*: **nearly doubles the performance / speed** when using accessors (updates only the corresponding component)\r\n*CON*: **still flushes after each change of each prop** (not scheduled) so it just **cannot be as performant as using `$set()`**\r\n*CON*: **bundle size could potentially become much larger** (code sections have two different versions wrapped in conditional statements). *Though I think this could be \"fixed\" by creating a new function extra for this purpose.*\r\n\r\n\r\n***Conclusion so far***:\r\n\r\nSo (imo), the **most performant solution** would be replacing any accessor-statements with corresponding `$set()`-statements, means also omitting the standard setter-`flush()` (*otherwise we end up with the current accessors / setter implementation which is flushing after executing `$set()`*).\r\n\r\n\r\n❓  ***Conclusion leaves me with the question:***\r\n\r\nIn which scenario would an immediate `flush()` after prop change be **really important** and would have a (significant) advantage over using `$set()` (waiting for other props' update before the `flush()`)? 🤔\r\n\r\nFeedback much appreciated! 👍\r\n",
          "createdAt": "2021-02-27T14:35:50Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzUyMTM2OA==",
          "body": "I'm thinking a lot about this and what exactly feels so wrong now I've stumbled upon it. Basically: \r\n\r\n1. I like what `$set()` does (high performance + reference-safe + predictable updates), but I dislike the cumbersome, `$` + brackets-heavy syntax.\r\n\r\n2. I like the `accessors`-syntax (feels more svelte), but I dislike what it does (potentially low performance and tricky because of the caveats described in this issue). Also: I'm not even sure if those are really caveats or just intended behavior?! 🤷🏼‍♂️\r\n\r\nAnyway, what I think would be really cool to have is:\r\n\r\n- **one syntax** for prop manipulation 👉 the `accessors`-syntax\r\n- with the functionality of `$set()`\r\n- (+) some other (per statement) thingy to indicate a prop value change should be followed by an immediate `flush()` if needed (not generally).\r\n\r\n",
          "createdAt": "2021-02-28T20:54:45Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTAxMTY3Mg==",
          "body": "Meanwhile I've successfully managed to find a solution / change the compiler, which basically limits updates (flushes) to a component of which the prop was changed via an accessor + it can (optionally) make the accessors-syntax work like `$set()`. Though making this behavior optional / configurable (currently) involves introducing two new accessors-related compiler options, changes to the `invalidate()` function, adding a new function for runtime component check etc.\r\n\r\nSince this would be a rather major change to the existing API (feature request), I'm closing this issue while further optimizing / testing my solution and will consider filing a new feature-request / RFC (?) / pull-request.\r\n\r\nUntil then I think I'll better rely on using `$set()` in my performance critical (probably) edge case.\r\n\r\nFeedback / thoughts on this issue are still (+ in future) very welcome! 👍\r\n",
          "createdAt": "2021-03-02T15:56:26Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTUwODY0NjQ=",
    "body": "If I want to use Svelte without typescript and instead use \"ReScript\" (which has support for React), what would I have to do to achieve this? Can I create some kind of bindings for Svelte? Is this possible? If yes, then can some one give me some pointers so that I can look more into it?",
    "closedAt": "2021-02-24T08:46:20Z",
    "createdAt": "2021-02-24T04:46:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDc5NDY1Mw==",
          "body": "Wow I just looked into ReScript and I must say it looks very nice. TypeScript does a really good job of control flow analysis and making distinctions between `null` and `undefined`, and vice versa, but it is still annoying that we don't have proper enums (tagged unions) with pattern matching. And compilation _issss_ pretty slow. Good luck with this issue though because AFAIK Svelte managed to support TypeScript only because it is a superset and getting the TypeScript compiler to strip types before passing the near-identical JS through the Svelte compiler was **relatively** easy.\r\n\r\nWhen writing Svelte code using JS, you don't even need to declare reactive variables. If you simply write `$: plus2 = someVar + 2;`, Svelte will automatically insert `let plus2;` for you. When writing Svelte with TypeScript you must make sure to add the `let` declaration yourself. Not to mention store autosubscriptions and such. My point is that supporting TypeScript didn't require the Svelte compiler to understand TypeScript. Supporting other languages would likely require serious work on the compiler..",
          "createdAt": "2021-02-24T05:39:36Z",
          "author": { "login": "samclaus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDg0MTA0Mg==",
          "body": "You will need to write your own preprocessor for it, which is described here https://svelte.dev/docs#svelte_preprocess . You will not get editor support inside Svelte files though. I don't know what else is needed for interop with JavaScript node modules.",
          "createdAt": "2021-02-24T06:59:28Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDkxMTQzMA==",
          "body": "This is a usage question and should be directed to [the discord](https://svelte.dev/chat) as explained in the issue template. Github is reserved for bugs and feature requests.",
          "createdAt": "2021-02-24T08:46:20Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NTQwMjI3Ng==",
          "body": "@samclaus  @dummdidumm  thanks for the helpful information.\r\n@antony Sorry for raising the issue in Github instead of the discord as I was not aware of it.\r\n\r\nJust to give some update, I was able to integrate ReScript with Svelte (although not completely but for now it works for me). What I am doing right now is that I am only using Svelte to define html/css/state & observers and importing the transpiled JS code from ReScript in Svelte file for all the business logic / Api request etc.\r\n\r\nEg: Let say for counter app,  the buttons, click event and the state is inside the Svelte file but the logic to increment/decrement/reset is in the ReScript.\r\n\r\nThank you everyone for the input once again. \r\n",
          "createdAt": "2021-02-24T21:39:36Z",
          "author": { "login": "sabinbajracharya", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTg5MTY0NA==",
          "body": "@sabinbajracharya care to share a small working example app? It would be most useful and I would be most grateful! I'm but a mere Swift developer getting started with web dev, and ReScript caught my attention earlier this year and Svelte seems the best choice for UI framework.",
          "createdAt": "2021-03-06T07:54:58Z",
          "author": { "login": "Sajjon", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTkyNjU1Mw==",
          "body": "Hey @Sajjon, You can check my repo\r\nhttps://github.com/sabinbajracharya/Svelte-with-Rescript.git\r\nIt has a basic app to increase/decrease a counter and also shows random number from Svelte Random Number generator API.",
          "createdAt": "2021-03-06T12:13:20Z",
          "author": { "login": "sabinbajracharya", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTQ3MjIxMjM=",
    "body": "**Describe the bug**\r\nWhen the each block contains a comment, the compiler throws an `invalid-animation` error\r\n\r\nThe reason seems to be that [`EachBlock`](https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/nodes/EachBlock.ts#L62) doesn't filter-out comments when testing if `this.children.length !== 1`\r\n\r\n**To Reproduce**\r\nSee https://svelte.dev/repl/d868b86121f64a67986c420d21e32bc8?version=3.32.3\r\n\r\n**Expected behavior**\r\nComments should be ignored by the validation\r\n\r\n**Severity**\r\nSomewhat annoying, as realizing that the comment counts as a child might take a while.\r\n",
    "closedAt": null,
    "createdAt": "2021-02-23T18:26:36Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTQ1NTcyNzc=",
    "body": "\r\nI searched a way to iterate over a structure like:\r\n```javascript\r\n{\r\n    id_1: {foo: 'bar'},\r\n    id_2: {foo: 'bar2'}\r\n}\r\n```\r\n\r\nhttps://github.com/plentico/plenti/issues/77 and https://github.com/sveltejs/svelte/issues/894 let me think it's not obvious to beginners. I suggest to add an exemple in the documentation.\r\n\r\nI tested the following code in the svelte REPL. It works. I can send a PR to add it to https://svelte.dev/examples.\r\n\r\n```html\r\n<script>\r\n\tlet cats = {\r\n\t\t'J---aiyznGQ': { name: 'Keyboard Cat', tag: 'music' },\r\n\t\t'z_AbfPXTKms': { name: 'Maru', tag: 'home' },\r\n\t\t'OUtn3pvWmpg': { name: 'Henri The Existential Cat', tag: 'black and white' }\r\n\t};\r\n</script>\r\n\r\n<h1>The Famous Cats of YouTube</h1>\r\n\r\n<ul>\r\n\t{#each Object.entries(cats) as [id, cat]}\r\n\t\t<li><a target=\"_blank\" href=\"https://www.youtube.com/watch?v={id}\">\r\n\t\t\t{cat.name} -- {cat.tag}\r\n\t\t</a></li>\r\n\t{/each}\r\n</ul>\r\n```\r\n\r\nAre you interested by such PR?\r\n\r\n",
    "closedAt": "2021-02-23T18:02:58Z",
    "createdAt": "2021-02-23T15:14:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDM2NTYyMw==",
          "body": "My aversion to this is that we'd end up having to add docs for iterating other types of Iterable too.\r\n\r\nGetting a set of items to iterate over from an object is a JavaScript construct, it's not specific to Svelte, and we don't want to end up documenting how to use JavaScript here.\r\n\r\nSo I'm going to vote against this being a PR.",
          "createdAt": "2021-02-23T17:21:22Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDM5MzY2NQ==",
          "body": "I think I'm also against this. What this comes down to is just turning various types of data into arrays in various ways, and that's a JS concern, and not really a Svelte one.",
          "createdAt": "2021-02-23T18:02:58Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTQxNTg1OTM=",
    "body": "**Describe the bug**\r\nThis is a duplicate of #3290 which was closed, though the issue still exists. \r\n\r\n`beforeUpdate` is called twice when using `bind:this`.\r\n\r\n**Logs**\r\nNo errors were shown in logs\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/3381c9b40dc8441a8e4ebfa48fd8c178 (credit to beomy)\r\n\r\n```JS\r\n<script>\r\n  import { beforeUpdate, afterUpdate } from 'svelte';\r\n  let p;\r\n\r\n  beforeUpdate(() => {\r\n    console.log('beforeUpdate');\r\n  })\r\n\r\n  afterUpdate(() => {\r\n    console.log('afterUpdate');\r\n  })\r\n</script>\r\n\r\n<p bind:this={p}></p>\r\n```\r\n\r\nOpen the console to view the behavior. It produces:\r\n```\r\nbeforeUpdate\r\nafterUpdate\r\nbeforeUpdate\r\n```\r\n\r\n**Expected behavior**\r\nbeforeUpdate should only be called once during a single update cycle.\r\n```\r\nbeforeUpdate\r\nafterUpdate\r\n```\r\n\r\n**Severity**\r\nSeverity is **High**, as the the cycle should always end with an `afterUpdate` and not a repeated `beforeUpdate`.\r\n\r\n**Other**\r\nhttps://github.com/sveltejs/svelte/pull/3308, was made to potentially fix this issue but appears that it was never merged. The reason given was that it was fixed in 3.18.2, but the issue still exists. https://svelte.dev/repl/3381c9b40dc8441a8e4ebfa48fd8c178?version=3.18.2.\r\n",
    "closedAt": null,
    "createdAt": "2021-02-23T06:30:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDE0NzA2NQ==",
          "body": "I might not have realized when I submitted them but there is one important concept change to my PR #3308. \r\n> It chooses to call the `bindings` before the `beforeUpdate` and that fixes the issue but that could have many possible side-effects",
          "createdAt": "2021-04-30T14:48:28Z",
          "author": { "login": "deviprsd", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTM4ODY1MjE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nRelated to: #6013\r\nRequested after: https://github.com/sveltejs/svelte/issues/6013#issuecomment-783514866\r\n\r\nSignificant performance difference (amount of component updates being triggered) when changing / updating components props between:\r\n- using an accessor - e.g. `comp.prop = \"something\"` (*synchronous update* -> potential performance bottleneck) ...\r\n- ... and using `$set` - e.g. `comp.$set({prop: \"something\"})` (*asynchronous update* -> excellent performance)\r\n\r\nespecially in Apps with:\r\n- complex component-structures (e.g. several levels of nested slots)\r\n- (+) need of very frequent updating of multiple props (extreme example: on each requestAnimationFrame callback)\r\n\r\nresulting in a develeoper having to use `$set` for performance reasons only, although the accessor syntax would be much better suited for the project and is generally less code / better readability.\r\n\r\n**Describe the solution you'd like**\r\nAn additional per component compiler option `accessorsAsync` which would allow developers to choose whether accessors should perform a synchronous or an asynchronous update:\r\n\r\n`<svelte:options accessors={true} accessorsAsync={true}/>`\r\n\r\n`accessorsAsync={true}` would omit  [`@flush()`](https://github.com/sveltejs/svelte/blob/9a9b934a08f92a2dad615201a93171f0de394817/src/compiler/compile/render_dom/index.ts#L154) from setters.\r\n`accessorsAsync={false}` would add  [`@flush()`](https://github.com/sveltejs/svelte/blob/9a9b934a08f92a2dad615201a93171f0de394817/src/compiler/compile/render_dom/index.ts#L154) to setters. (*current default*)\r\n\r\nThis way the shorter / more straight forward accessor syntax e.g. `comp.prop = \"something\"` could also be used for asynchronous / scheduled prop updates.\r\n\r\n**Describe alternatives you've considered**\r\n- Simply using the longer `$set` syntax: potentially frustrating (more writing, less readable).\r\n- I'm currently trying to figure out how to add my own setters to a component with `accessors` set to `false` in order to omit the `flush()`. One possible solution could be extending an existing component class and adding custom setters (not there yet). Having a compiler option for this would be much better of course.\r\n\r\n**How important is this feature to you?**\r\nVery important. I'm developing [svelthree](https://github.com/vatro/svelthree) which heavily depends on per AnimationFrame performance. Even though Svelte is working great out of the box, 'Scenes' (generally components with a lot of slots) can easily get very complex: multiple levels of nested slots, high amounts of components / objects and props being updated on every AnimationFrame etc., hitting the point of framerate going down happens much sooner when using accessors (*synchronous update*) due to the amount of updates being triggered with each prop assignment. When using `$set` the performance is almost as fast as using vanilla JS without Svelte, which is very cool btw. Unfortunately the `$set` syntax is pretty cumbersome when dealing with many props per component which need to be updated by different (e.g. animation etc.) functions and has to be written often. \r\n\r\n**Additional context**\r\nsee #6013\r\nsee https://github.com/sveltejs/svelte/issues/6013#issuecomment-783514866\r\n",
    "closedAt": "2021-02-23T16:32:01Z",
    "createdAt": "2021-02-22T21:39:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzY5Nzk3NQ==",
          "body": "This would probably be fairly easy to add, but I'm not convinced it's a good idea. It's another bit of configuration, and another way that a component could behave subtly differently based on something that's not externally visible. And, as you indicated, `.$set()` already works for this purpose, and so this is essentially asking syntactic sugar for something that can currently be done.",
          "createdAt": "2021-02-22T21:49:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mzc1MTAzOA==",
          "body": "@Conduitry \r\nyes, it would basically offer a possibility of using the better readable and less code accessor-syntax for scheduled (async(?)) updates, which seem to be crucial for very performance critical projects / libraries (AF dependent computations etc.). I wasn't aware of the huge impact difference on performance until I did some extreme tests and the difference is at some point so huge that it actually completely disqualifies accessors usage in my case 😕.\r\n\r\nThat's why I believe this feature would be interesting for authors using Svelte to develop game engines, animations, WebGL or anything else related to having a lot of complex components which need very frequent (re)computation of props. Authors could simply hint devs (users) that using any syntax for setting props is \"performance-safe\", instead of urging / advising them to use `$set` in order to avoid performance problems / get best possible performance + on the syntax side it's basically something like:\r\n\r\n `comp.pos = [posX, posY, posZ]`\r\nvs.\r\n `comp.$set({pos:[posX, posY, posZ]})`\r\n \r\n it feels kind of... \"unfair\" 😉 \r\n \r\n I'm also considering alternative ways that wouldn't need this option / new feature like:\r\n - overriding compiled setters\r\n - adding custom setters to components by extending their classes\r\n - ...\r\n \r\n But I'm not there yet, any hints / help regarding this are very welcome!  👍\r\n \r\n P.S. A good example of the importance of using scheduled updates as default approach: https://github.com/sveltejs/svelte/issues/3881#issuecomment-552505903",
          "createdAt": "2021-02-22T23:25:16Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDMxODU5Nw==",
          "body": "I'm currently making more tests concerning changing props and have found a new caveat when using accessors. I'll create a general, summarized report over the next days while thoroughly rethinking this feature request.\r\n\r\nClosing, but might reopen.\r\n\r\nEDIT:\r\n> I'll create a general, summarized report over the next days\r\n\r\nsee #6021",
          "createdAt": "2021-02-23T16:15:07Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTM4NTU5MjI=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n## **Is your feature request related to a problem? Please describe.**\r\nWe cannot create a part of HTML as a local variable (`let compileThisHtml = <span>{anotherVar}</span>;`), then inject it in different part of a component HTML (`<div>{compileThisHtml}</div>`) and being compiled to be reactive like the rest of the HTML.\r\n\r\nBeing reactive implies to support all Svelte features available in HTML:\r\n- Logic keywords (#if, #each, ...)\r\n- bind:\r\n- event calls on:click\r\n- etc...\r\n\r\n\r\nFor ex, this **will not work**:\r\n\r\n```svelte\r\n<script>\r\nlet count = 0;\r\n\r\nfunction handleClick() {\r\n  count += 1;\r\n}\r\n\r\n//---> Won't be reactive <---\r\nlet txtClickedCount = `\r\n  <span>\r\n    You have clicked {count}\r\n    {#if count <= 1} <span>time</span>\r\n    {:else if count > 1} <span><strong>times</strong></span>\r\n    {/if}\r\n  </span>`;\r\n</script>\r\n\r\n{#if count >= 1}\r\n  <div class=\"custom-nav\">\r\n    <span class=\"nav-item\">\r\n      <a href=\"#/gohome\">Go Home because {txtClickedCount}</a>\r\n    </span>\r\n  </div>\r\n{/if}\r\n\r\n<!-- some code -->\r\n\r\n{#if count === 0}\r\n  <button on:click={handleClick}>{txtClickedCount}</button>\r\n{/if}\r\n```\r\n\r\n\r\n\r\n## **Describe the solution you'd like**\r\n**Without** creating a new component, we would like to make reactive (to be compiled) a string in a local variable. In the exemple below, it will be:\r\n```svelte\r\n<script>\r\nlet txtClickedCount = `\r\n  <span>\r\n    You have clicked {count}\r\n    {#if count <= 1} <span>time</span>\r\n    {:else if count > 1} <span><strong>times</strong></span>\r\n    {/if}\r\n  </span>`;\r\n</script>\r\n```\r\n\r\nThen use it in HTML and tell to Svelte to compile the content of the var:\r\n```html\r\n<div>\r\n  {@compile txtClickedCount}\r\n</div>\r\n```\r\n\r\n## **Describe alternatives you've considered**\r\nIn general, this is why people like JSX. It can be stored in local vars and reused acros a component, it can be passed as props, it allow to implementing some interesting patterns like render props...\r\n\r\nAllowing the usage of JSX (with Svelte reactivenes) would be the Rolls Royce but having the {@compile} tag would already make life easier.\r\n\r\n\r\n##  **How important is this feature to you?**\r\nI have a big project with Svelte (v2 to be honest, not yet ported because of major breaking changes) which I need to keep evolving. I'm missing the JSX flexibility when I work with Svelte. I hate to repeat code and I hate to make tens of files just to fit the gap of Svelte compared to JSX.\r\nConverting a piece of code to a component, come with the cost of useless complication of managing props and slots (in the case of a more complex code). When just a compile tag will do the job nicely.\r\n\r\n\r\n#### Contributing to Svelte\r\nI'm open to contribute to Svelte core project.\r\nAny information about compiler internal code would be nice.",
    "closedAt": "2021-02-22T21:36:00Z",
    "createdAt": "2021-02-22T20:54:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzY3ODE5NQ==",
          "body": "I like the idea. Eventhough, it would make svelte more complicated to learn (the interaction of these types of components would probably add a lot of complexities), it could simplify a lot of things.\n\nI'm not sure the component definition you propose is the best one. I would probably go for something new like <script context='component'>... which would me more literal.",
          "createdAt": "2021-02-22T21:13:13Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzY5MDg0Nw==",
          "body": "This is not practical. We don't want to be shipping all of the Svelte compiler along with compiled components. And part of the reason that the compiler is able to produce optimized code is that it is able to see at compile time what variables are present and which can be changed.",
          "createdAt": "2021-02-22T21:36:00Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzcxMTcxMw==",
          "body": "> This is not practical. We don't want to be shipping all of the Svelte compiler along with compiled components. And part of the reason that the compiler is able to produce optimized code is that it is able to see at compile time what variables are present and which can be changed.\r\n\r\nYou have been very quick to close the issue =)\r\n\r\nThe proposal is to analyse the tag at compile time, not runtime.\r\nI'm thinking about something that you can parse before compiling.\r\n- Parse the compile tag and insert the string literal into html (without literal character)\r\n- The code has become a standart html code\r\n- Continue to compile as usual\r\n\r\nCan we reopen the issue to let others see it and discus about the different ways of feasability ? ",
          "createdAt": "2021-02-22T22:11:31Z",
          "author": { "login": "Ataginsky", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mzc0NjU1OA==",
          "body": "The approach suggested here is not practical because of the dynamic nature of javascript. In your example the variable referring to the string representing the component source is in the same file but this expression could be anything in reality. It could be a string or a template literal or a function returning a string. There is simply no way for the svelte compiler to figure all of this out at compile time. \r\n\r\nAdditionally, the semantics of the suggested approach would suggest to users that such a source string could be changed at runtime and work as expected. This would be very confusing because it would never work. \r\n\r\nThere is an rfc that would solve this issue which takes a more suitable approach: https://github.com/sveltejs/rfcs/pull/34\r\n\r\nWe won’t be reopening this issue.",
          "createdAt": "2021-02-22T23:15:27Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mzc0NzExNw==",
          "body": "> The proposal is to analyse the tag at compile time, not runtime.\r\n\r\nIf you're analysing a string of Svelte code at compile time why would you store it as a string?\r\n\r\n> I'm thinking about something that you can parse before compiling.\r\n\r\nThat's what a Svelte component is.\r\n",
          "createdAt": "2021-02-22T23:16:39Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDEyMDM0Nw==",
          "body": "@pngwn Thanks for the link, this RFC is exactrly what I tried to explain (with less success 😄 ) !\r\n\r\n@antony Storing it as a string was only a proposal, as stated in the RFC#34, it can be stored anywhere you want (<svelte:fragment />, ...)\r\n\r\n> That's what a Svelte component is.\r\n\r\nYes, but the goal is to avoid boilerplate. User **dummdidumm** explained it very well:\r\n> _It's about saving some boilerplate when doing something within the component. That template/fragment/partial/whatever-we-will-call-it is **private** to the component._\r\n\r\nThe word private is important here =)",
          "createdAt": "2021-02-23T11:06:14Z",
          "author": { "login": "Ataginsky", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTM2MTM2NTY=",
    "body": "**Describe the bug**\r\nI wouldn't say this is a bug, but it has a negative effect on developer experience in a certain (edge case?) scenario.\r\n\r\nUpdating / changing component props in Apps with ...\r\n- complex component-structures (e.g. several levels of nested slots)\r\n- (+) need of very frequent updating of multiple props (extreme example: on each `requestAnimationFrame` callback)\r\n\r\n... \"forces\" a dev to use `$set` -> e.g. `comp.$set({prop: \"someValue\"})` - instead of a more straight-forward (less code) accessor -> e.g. `comp.prop = \"someValue\"` for **performance reasons**.\r\n\r\n***Why \"for performance reasons\"?***\r\n\r\nUsing an [**accessor**](https://svelte.dev/docs#svelte_options) (*synchronous update*) `<svelte:options accessors={true}/>` -> e.g. `comp.prop = \"someValue\"` will run **updates on the whole complex (*several levels of nested slots*) component tree** on **each prop / assignment ( ! )** which will cause a **significant performance drop** (*in the scenario described above*) compared to using `$set` which updates (*asynchronous update*)  only a specific component of which the prop / props have been changed.\r\n\r\nsee console output of [REPL \"change props : accessors vs. $set ( check flush / updates )\"](https://svelte.dev/repl/b4348ee2aca2421c91dca043fcc42e51?version=3.32.3) \r\n\r\nThis happens because of the [`flush()`](https://github.com/sveltejs/svelte/blob/9a9b934a08f92a2dad615201a93171f0de394817/src/compiler/compile/render_dom/index.ts#L154) in the prop's setter: https://github.com/sveltejs/svelte/blob/9a9b934a08f92a2dad615201a93171f0de394817/src/compiler/compile/render_dom/index.ts#L146-L156\r\n\r\nI've tried **removing** [`@flush()`](https://github.com/sveltejs/svelte/blob/9a9b934a08f92a2dad615201a93171f0de394817/src/compiler/compile/render_dom/index.ts#L154) from the setter in the `compiler.js` and this seems to basically make an accessor a \"shorthand\" for `comp.$set({prop: \"someValue\"})` with the same update behavior (*updates only a specific component of which the prop / props have been changed*) which is actually how I've initially assumed an accessor would work.\r\n\r\n***Conclusion:***\r\nI would like to understand / get some feedback on why there is (needs to be) a [`flush()`](https://github.com/sveltejs/svelte/blob/9a9b934a08f92a2dad615201a93171f0de394817/src/compiler/compile/render_dom/index.ts#L154) in the prop's setter? 🤔 \r\nAlso, please correct me If I got something wrong! Thanks! 👍\r\n\r\n**Logs**\r\nsee console output of: [REPL \"change props : accessors vs. $set ( check flush / updates )\"](https://svelte.dev/repl/b4348ee2aca2421c91dca043fcc42e51?version=3.32.3) \r\n\r\n**To Reproduce**\r\nsee: [REPL \"change props : accessors vs. $set ( check flush / updates )\"](https://svelte.dev/repl/b4348ee2aca2421c91dca043fcc42e51?version=3.32.3) \r\n\r\n**Expected behavior**\r\nI would expect that using an accessor would be somewhat similar to using `$set`.\r\nI would expect that using an accessor will update only a specific component of which the prop / props have been changed.\r\n\r\n**Information about your Svelte project:**\r\nGeneral testing of updating / changing props with a focus on component updates / flushes and using that knowledge for developing / optimizing [svelthree](https://github.com/vatro/svelthree)\r\n\r\n**Severity**\r\nIt's not severe, but I would have to use / advise devs to use `$set` only when updating component props and consequently disable / deprecate accessors usage in order to get highest performance possible / avoid possible performance problems.\r\n\r\n**Additional context**\r\nI've also asked (tackles one additional issue and is more general) on Svelte Discord, see: https://discord.com/channels/457912077277855764/457912077277855766/813228586877059082\r\nhttps://discord.com/channels/457912077277855764/457912077277855766/813374029058408458\r\nhttps://discord.com/channels/457912077277855764/457912077277855766/813383538878971924\r\n",
    "closedAt": "2021-02-22T21:46:41Z",
    "createdAt": "2021-02-22T15:38:26Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzUxNDg2Ng==",
          "body": "🤔 thinking further...\r\n\r\nso it seems an **accessor** is basically a way to perform / force a **[synchronous](https://svelte.dev/docs#Component_props) update**, while `$set` is [**asynchronous**](https://svelte.dev/docs#$set) / scheduled, means (imo) actually two different things especially looking at the potentially significant performance side effect.\r\n\r\nAt this point I think it would be very cool to have an **additional accessors option** allowing a dev to choose whether accessors should perform a synchronous or an asynchronous update. Something like:\r\n\r\n`<svelte:options accessors={true} accessorsAsync={true}/>` with an `accessorsAsync` default value set to `false` (like atm)\r\n\r\nwhich would simply remove / add [`@flush()`](https://github.com/sveltejs/svelte/blob/9a9b934a08f92a2dad615201a93171f0de394817/src/compiler/compile/render_dom/index.ts#L154) from setters.\r\n\r\nThis way the **shorter / more straight forward** accessor syntax e.g. `comp.prop = \"something\"` could also be used for asynchronous updates which are more performant.",
          "createdAt": "2021-02-22T16:52:42Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzY5NjI5Nw==",
          "body": "Closing this, so the more specific conversation can happen in #6015. The current behavior where using accessors to updates props is synchronous is the intended behavior.",
          "createdAt": "2021-02-22T21:46:41Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTM0OTgyODk=",
    "body": "Today if you want to use a svelte component inside a webcomponent it's mandatory to compile all yours components as a webcomponents as well. Because of this following code:\r\n\r\n```typescript\r\nif (should_add_css) {\r\n  body.push(b`\r\n\tfunction ${add_css}() {\r\n\t\tvar style = @element(\"style\");\r\n\t\tstyle.id = \"${component.stylesheet.id}-style\";\r\n\t\tstyle.textContent = \"${styles}\";\r\n\t\t@append(@_document.head, style); \r\n\t}\r\n`);\r\n}\r\n```\r\n\r\nthe issue by injecting the style element into the head is that: there is no way for the dev to bootstrap a svelte component into a web component (because the style will be not apply to it), sometime you don't want to expose all components as a web components.\r\n\r\nWhat would be interesting to have is: the ability to specify the \"head\" element:\r\n\r\n```typescript\r\nimport App from './App.svelte';\r\n\r\nnew App({\r\n   target: targetInsideAShadowElement,\r\n   styleDestination: shadowRoot,\r\n});\r\n```\r\n\r\nOr another solution would be to always inject the style at the root node of the current component: \r\n\r\n```typescript\r\nconst doc = element.getRootNode(); // this will return the document or the current shadowRoot\r\n@append(doc.head || doc, style);\r\n```\r\n\r\nToday in our company we are not using svelte because of this issue, we have a large application using multiple frameworks (Angular, Vue, Stencil) All those app are exposed as web components. We are using the web component API to abstract all micro frontends technologies.\r\n\r\nThe main idea there is to be able to wrap a large svelte app inside a webcomponent, today it's mandatory for us to expose all svelte components as webcomponents :/ we are loosing the props typings and so on... It would be nice to have the ability to export only the root of the app as a web component or something like this. What do you think?\r\n\r\nOther people are waiting this feature: https://dev.to/stefanonepa/svelte-app-wrapped-in-a-web-component-24ki 😌",
    "closedAt": "2021-02-22T21:51:14Z",
    "createdAt": "2021-02-22T13:24:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzU2NjUwMA==",
          "body": "hi @lseguin1337,\n\nI created a PR that solves this issue:\nhttps://github.com/sveltejs/svelte/pull/5870\n\nUnfortunately, I am  still waiting for a svelte-maintainer to check the implementation. ",
          "createdAt": "2021-02-22T18:11:03Z",
          "author": { "login": "ivanhofer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzY5ODcyOQ==",
          "body": "Closing this as a duplicate of #5869.",
          "createdAt": "2021-02-22T21:51:14Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTMwODQwOTc=",
    "body": "Regarding:\r\nbind:value, on:change\r\n\r\nUser status: beginner.\r\n\r\nI have made a autocomplete function for my app and it updates the input value using vanilla js document.getElemntById(\"foo\"). value \r\n\r\n`function autocomplete() {\r\n    ...\r\n    document.getElementById(\"someId\").value = some_variable\r\n}`\r\n\r\nWhen clicked on the suggestions (autocomplete) the value gets updated in input but, it is NOT reflected in my variable(svelte variable). \r\n\r\n`<input type=\"text\" id=\"someId\" bind:value={itemName} >`\r\n\r\nAfter the autocomplete function changes the input value the item name variable doesn't get updated.\r\n\r\nHow to achieve this? Earlier in Vue I was using v-model.lazy \r\n\r\n\r\n",
    "closedAt": "2021-02-22T09:50:49Z",
    "createdAt": "2021-02-22T03:47:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzI0NjA2MA==",
          "body": "Update the bound value instead.\n\nTwo-way binding listens for events on the element, which are not emitted when you programmatically update its value.",
          "createdAt": "2021-02-22T09:50:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTI4MzcyMDA=",
    "body": "**Describe the bug**\r\nWrong `svelte(missing-declaration)` warning when using a variable on the same slot node where it was instantiated via a `let:X` statement but using it before that instantiation.\r\n\r\n**To Reproduce**\r\nThis code \r\n```svelte\r\n<script>\r\n\timport Bla from './Bla.svelte';\r\n</script>\r\n\r\n<Bla>\r\n\t<div slot=\"foo\" class:bar let:bar>.</div>\r\n</Bla>\r\n```\r\nproduces a wrong `svelte(missing-declaration)` warning for `bar`. If I put `class:bar` behind `let:bar`, the error goes away. Code compiles just fine in both cases.\r\n\r\n**Expected behavior**\r\nNo warning.\r\n\r\n**Information about your Svelte project:**\r\nAny browser, any system, Svelte 3.32.3\r\n\r\n**Severity**\r\nInconvenient, an easy workaround exists\r\n\r\n**Additional context**\r\nOriginally reported by @brunnerh in https://github.com/sveltejs/language-tools/issues/817#issuecomment-782836609 \r\n",
    "closedAt": null,
    "createdAt": "2021-02-21T11:52:02Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTI0NTMwMTE=",
    "body": "**Describe the bug**\r\nAssignments inside of an `{#if}` (which can be useful if the value being assigned is the return value of a function and it should be checked and used without calling the function twice) create an inconsistent state: The correct value is rendered, but event handlers see an old value.\r\n\r\n**To Reproduce**\r\nCheck this REPL: https://svelte.dev/repl/f24c001c7e284906a61d215b02dd0928?version=3.32.3\r\n\r\n```html\r\n<script>\r\n\tlet name = 'foo';\r\n</script>\r\n\r\n{#if (name = 'bar')}\r\n\t<button on:click={() => alert(name)}>I should alert \"{name}\"</button>\r\n{/if}\r\n```\r\n\r\nNote that the alert says `foo` when clicking the button, despite the button text itself saying `bar`.\r\n\r\n**Expected behavior**\r\nAlert should say `bar`.\r\n\r\n**Severity**\r\nNot causing any immediate issue for me, I can work around it.",
    "closedAt": null,
    "createdAt": "2021-02-20T00:33:18Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjQ4MDE2Ng==",
          "body": "The `{#if}` block is just resulting in `(/*name*/ ctx[0] = \"world\")` - presumably it should also generate an `$$invalidate` call like other expressions in the template do.",
          "createdAt": "2021-02-20T00:37:17Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTI0NDMwMjE=",
    "body": "`<style>\r\n\t#nameInput {\r\n\t\twidth: 200px;\r\n\t\theight: 40px;\r\n\t\t/* \tborder-radius: 5px;\r\n\t\toutline: none; */\r\n\t\tborder-width: 3px;\r\n\t\t/* border-style: solid; */\r\n\t\tborder-color: #e40763;\r\n\t\t/* border: 3px solid #e40763; */\r\n\t}\r\n</style>\r\n<input id=\"nameInput\" type=\"text\" value={name} on:input={nameInputHandler} />\r\n`\r\nI think there is a small css bug that I noticed, I will be glad if the person informs, I gave width 200px height 50 px for any input style and any color for border-color.For input created with these three css codes, 2 of the corners are the color I give, while the other two are different colors, but If I give border-style or if I give a style as border directly in the second parameter, there is no such problem.\r\n\r\n\r\nedit : There was no bug, it was just a basic css information that was overlooked.",
    "closedAt": "2021-02-20T00:26:43Z",
    "createdAt": "2021-02-20T00:07:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjQ3NDkxOA==",
          "body": "Issues on GitHub aren't the right place to ask general CSS questions.",
          "createdAt": "2021-02-20T00:26:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTIzOTc1ODk=",
    "body": "\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10): Version 14.0.3 (16610.4.3.1.4)\r\n- Your operating system: (e.x. OS X 10, Windows XP, etc): macOS 11.2\r\n- Svelte version (Please check you can reproduce the issue with the latest release!): Latest\r\n- Whether your project uses Webpack or Rollup: Reproduced on REPL\r\n\r\nhttps://svelte.dev/repl/9609d1cf935b4569a8f253f34b770f58?version=3.32.3\r\n\r\nUltimately I'd assume changes to foo.bar here would trickle down to foo.boo. Unfortunately, foo.boo is always 1 value behind changes",
    "closedAt": "2021-02-19T23:10:21Z",
    "createdAt": "2021-02-19T22:26:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjQzOTg5NQ==",
          "body": "This is behaving as intended.\r\n\r\nThe code for those reactive blocks that Svelte generates is:\r\n\r\n```js\r\n\t$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty & /*foo*/ 1) {\r\n\t\t\t$: $$invalidate(1, bar = foo.bar);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty & /*foo*/ 1) {\r\n\t\t\t$: $$invalidate(2, baz = foo.baz);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty & /*bar*/ 2) {\r\n\t\t\t$: updateBaz(bar);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty & /*baz*/ 4) {\r\n\t\t\t$: updateBoo(baz);\r\n\t\t}\r\n\t};\r\n```\r\n\r\nSo, `bar` gets set to `foo.bar` (the new value), and then `baz` gets set to `foo.baz` (the old value), `foo.baz` gets set to `bar` (the new value), and then `foo.boo` gets set to `baz` (which is _still the old value_), and so the text on the page is updated with the old value.",
          "createdAt": "2021-02-19T23:10:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTIzNTE2OTU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIt's not rare or unusual to format your code (in this example particularly your CSS classes) in the following style:\r\n![image](https://user-images.githubusercontent.com/26527405/108560880-a2a10800-7312-11eb-8ac8-cea0bd4f7b9f.png)\r\nIn fact, I believe Prettier and other formatting tools encourage a similar thing: \"breaking up\" a long line of code into several lines of code.\r\n\r\nBut this apparently causes the Svelte compiler to generate code like this:\r\n```\r\nclass: button_class_value = \"button\\r\\n           button--size--\" + /*size*/ ctx[0] + \"\\r\\n           button--theme--\" + /*theme*/ ctx[1] + \"\\r\\n           \" + (/*$$restProps*/ ctx[6].class || \"\")\r\n```\r\n![image](https://user-images.githubusercontent.com/26527405/108561560-b7ca6680-7313-11eb-9700-be59bfdb5298.png)\r\n\r\nNotice all the unnecessary \"\\r\"s, \"\\n\"s, and multiple whitespace characters.\r\nThis:\r\n- Makes the bundle size bigger completely unnecessarily.\r\n- Makes the HTML output rather ugly:\r\n![image](https://user-images.githubusercontent.com/26527405/108561511-9f5a4c00-7313-11eb-81ad-77199d571424.png)\r\n\r\n\r\n**Describe the solution you'd like**\r\nSince multiple whitespaces, tabs, and line breaks inside HTML attribute values are always ignored by browsers and cause no functional difference, the Svelte compiler could easily ignore these characters, and \"normalize\" the whitespaces in attribute values, without causing any harm.\r\nSo that the result would look like this:\r\n```\r\nclass: button_class_value = \"button button--size--\" + /*size*/ ctx[0] + \" button--theme--\" + /*theme*/ ctx[1] + (/*$$restProps*/ ctx[6].class || \"\")\r\n```",
    "closedAt": null,
    "createdAt": "2021-02-19T21:09:23Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjQ3ODY4Ng==",
          "body": "As of version 1.3.0, via https://github.com/sveltejs/prettier-plugin-svelte/pull/145, the Prettier plugin no longer formats `class` attributes, to keep in line with Prettier's HTML formatting.\r\n\r\nI have mixed feelings about whether the compiler should collapse whitespace in `class` attributes. It should definitely not collapse whitespace in all attributes, though.",
          "createdAt": "2021-02-20T00:31:30Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjQ3OTU2MA==",
          "body": "@Conduitry  Okay, but even if Prettier doesn't do that anymore, it still makes perfect sense to format your classes that way if you have a lot of them; otherwise if they're all on a single line it would become ridiculously long and pretty hard to look at! Wouldn't you agree?\r\n\r\n> I have mixed feelings about whether the compiler should collapse whitespace in class attributes.\r\n\r\nI can't think of any cases where that could be undesirable or problematic, since it would make no functional difference whatsoever. (in the case of the `class` attribute at least, I'm not quite sure about others.)\r\nCan you provide some examples? Why exactly do you have mixed feelings about this?",
          "createdAt": "2021-02-20T00:35:07Z",
          "author": { "login": "AradAral", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mjc0NTEzNg==",
          "body": "It also happens to HTML only components even if you don't split the opening tag. You get a lot of \\n and whitespaces that are not needed and increase the bundle size. Just commenting because I think a whitespace stripping option should also include these so we can create even smaller production bundles.\r\n![image](https://user-images.githubusercontent.com/15054534/108607613-b22b5a00-73c1-11eb-8922-ec62a825db38.png)\r\n\r\n",
          "createdAt": "2021-02-20T20:31:31Z",
          "author": { "login": "kran6a", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mjc0NjAxNQ==",
          "body": "I agree. I think not only the classes but all the whitespaces in the entire HTML should be taken car eof, any redundant whitespaces should be removed. There is no reason not to do this.\r\n\r\nAs mentioned, they just increase the bundle size completely unnecessarily.\r\n\r\n> ...It should definitely not collapse whitespace in all attributes, though.\r\n\r\nWhy shouldn't it?! In what attribute does that make any difference?",
          "createdAt": "2021-02-20T20:38:20Z",
          "author": { "login": "aahmadi458", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjgxMzQ5OA==",
          "body": "Removing whitespace inside HTML content (not attributes) can be dangerous because people might style the element such that it should preserve whitespace. ",
          "createdAt": "2021-02-21T07:24:39Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mjg4Mzk2NA==",
          "body": "@dummdidumm Sure, I don't think Svelte should collapse whitespaces inside tags, although it'd be nice if we could have an option for that too, so that the developer could decide, on it because after all, all those whitespaces which are \"most often\" just there for source code formatting ultimately add to the bundle size, totally unnecessarily).\r\nBut in the case of attribute values, again, I can't think of any cases where multiple whitespaces would make any difference at all, and therefore there is no reason to preserve them in that case.",
          "createdAt": "2021-02-21T16:24:24Z",
          "author": { "login": "AradAral", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTE5ODU0MDA=",
    "body": "**Describe the bug**\r\ntitle explains well\r\n\r\n**To Reproduce**\r\n[Example REPL](https://svelte.dev/repl/7e7c6502b83a4aaf8075726506be52f5?version=3.32.3)\r\n\r\n**Expected behavior**\r\nit should show the component\r\n\r\n- Your browser and the version: Firefox 85.0.2\r\n- Your operating system: MacOS Big Sur\r\n- Svelte version 3.32.3\r\n\r\n**Severity**\r\ni am trying to make a custom component library and because of this can't make custom `<option />` to add a few features.\r\n",
    "closedAt": "2021-02-19T16:23:07Z",
    "createdAt": "2021-02-19T12:31:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjEyMTg5OQ==",
          "body": "https://svelte.dev/repl/e0f98e3949b74adba5b47cb3ec5240a8?version=3.32.3\r\n\r\nit works with value attribute\r\n\r\nofc, it's BUG, because by W3C specification, value should be optional, not required.",
          "createdAt": "2021-02-19T14:49:58Z",
          "author": { "login": "Mlocik97", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjIxMTY2Nw==",
          "body": "Leave a commet",
          "createdAt": "2021-02-19T17:12:28Z",
          "author": { "login": "phoothellchit2000", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjIxMTg3Mg==",
          "body": "Leave a comment",
          "createdAt": "2021-02-19T17:12:47Z",
          "author": { "login": "phoothellchit2000", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjIxMjY2Nw==",
          "body": "Leave a comment",
          "createdAt": "2021-02-19T17:14:06Z",
          "author": { "login": "phoothellchit2000", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTEzNzA4OTU=",
    "body": "# Describe the bug\r\n\r\nI have a REPL that works perfectly with no errors in all desktop browsers, but breaks in iOS Safari (and all other browsers I've tested on iOS, because Apple requires all iOS browsers to use webkit as the rendering engine). Another svelte user on the discord confirmed that the REPL also worked fine with no issues on their Android phone.\r\n\r\nHere is a link to the REPL in question: https://svelte.dev/repl/56928dbff1b141a39f635522e7113f3c?version=3.32.3\r\n\r\nI really hope this is just my mistake and not something that svelte is doing wrong, as the fix would be much faster to come. I have asked on discord a few times and nobody that I've talked to yet has been able to help figure it out, hence why I'm coming here...\r\n\r\nAnyhoooo....\r\n\r\nThe REPL is a Svelte Music Player that uses an <audio> element as the playback source and updates the `src` of that audio element from different svelte components...the REPL is a little complex, but not super complex, at least, IMO :-)\r\n\r\n<img width=\"575\" alt=\"Screen Shot 2021-02-18 at 10 33 53 AM\" src=\"https://user-images.githubusercontent.com/7884263/108404784-1f2dcc80-71d5-11eb-96c8-8d1402f738ed.png\">\r\n\r\nAnyway, it works just fine in all desktop browsers I've tested it in, but breaks when being tested on iOS in all browsers...Specifically, when I click the 'play' button on any track, or the 'next' and 'prev' buttons as well, nothing plays, and i get the following errors in the console:\r\n\r\n<img width=\"506\" alt=\"Screen Shot 2021-02-18 at 9 36 30 AM\" src=\"https://user-images.githubusercontent.com/7884263/108403400-82b6fa80-71d3-11eb-93f6-1deceb52ca36.png\">\r\n\r\nAnd that coupling of errors happens every time I click another play button. To be clear, the play button in the controls section does indeed work when the REPL is loaded, but only for the first track that is already loaded into the `<audio>` element...\r\n\r\nTo reproduce, just pull up the REPL on any iOS device and tap any of the play buttons for any of the tracks or the prev and next buttons as well...\r\n\r\n# Logs\r\n\r\nSince it's a REPL, no server logs, but here is what the console gives me:\r\n\r\nThe errors in the console:\r\n\r\n<img width=\"506\" alt=\"Screen Shot 2021-02-18 at 9 36 30 AM\" src=\"https://user-images.githubusercontent.com/7884263/108405112-8d728f00-71d5-11eb-89f3-686a924d882a.png\">\r\n\r\nThe associated code with error 1:\r\n\r\n<img width=\"619\" alt=\"Screen Shot 2021-02-18 at 9 36 47 AM\" src=\"https://user-images.githubusercontent.com/7884263/108405186-a11df580-71d5-11eb-92c5-c6e5841779c5.png\">\r\n\r\nThe associated code with error 2 (specifically the third line of the function):\r\n\r\n![image](https://user-images.githubusercontent.com/7884263/108405255-b6931f80-71d5-11eb-80ed-2777525e2d13.png)\r\n\r\n...which I have boiled down to this function in my code in the `Controls.svelte` file at line 18:\r\n\r\n```js\r\nfunction loadTrack($index) { \r\n  $currentTitle = $trackList[$index].title; \r\n  $currentArtist = $trackList[$index].artist;\r\n  // looks like this is the lone that makes iOS safari very angry\r\n  $audioPlayer.src = $trackList[$index].file; \r\n  $audioPlayer.load();\r\n};\r\n```\r\n\r\n...but it seems completely correct in regards to svelte syntax and works just great in all desktop browsers with absolutely no errors in the console.\r\n\r\n# To Reproduce\r\n\r\nThere is a bunch of stuff in the REPL, but the focus I believe falls on a couple things:\r\n\r\n1. In the `stores.js` file I make:\r\n\r\n```js\r\nexport const audioPlayer = writable();\r\n```\r\n\r\n2. Then, in the `Controls.svelte` file I bind an `<audio>` to that store:\r\n\r\n```html\r\n<audio\r\n  bind:this={$audioPlayer}\r\n  bind:duration={duration}\r\n  bind:currentTime={currentTime}\r\n  bind:paused={paused}\r\n  bind:volume={volume}\r\n  on:canplay=\"{() => $status = 'can play some'}\"\r\n  on:canplaythrough=\"{() => $status = 'can play all'}\"\r\n  on:waiting=\"{() => $status = 'waiting'}\"\r\n  on:timeupdate=\"{() => $status = 'playing'}\"\r\n  on:ended=\"{() => {$isPlaying = false; currentTime = 0}}\"\r\n  {src}\r\n>\r\n  <track kind='captions'/>\r\n</audio>\r\n```\r\n\r\n...then in both the `Controls.svelte` file and also the `PlayButton.svelte` file, which I nest in another couple of components, I use the following function to load a new audio file into the bound `<audio>` element based on the current index value of the `trackList` in the `stores.js` file:\r\n\r\n```js\r\nfunction loadTrack($index) { \r\n  $currentTitle = $trackList[$index].title; \r\n  $currentArtist = $trackList[$index].artist;\r\n  // again, i think this is the line in question that really make iOS safari steam...\r\n  $audioPlayer.src = $trackList[$index].file; \r\n  $audioPlayer.load();\r\n};\r\n```\r\n\r\n...which I think is where the error is coming from...but I have no idea how to fix it, or if it's something that I can fix, or if it's something that svelte itself needs to address...\r\n\r\n# Expected behavior\r\n\r\nI expect the REPL to work without error on iOS devices and for audio to play whenever a play button anywhere in the app/REPL is pressed.\r\n\r\n\r\n# Information about your Svelte project\r\n\r\nAgain, in the REPL...\r\n\r\n- Your browser and the version: (iOS Safari 14.4)\r\n\r\n- Your operating system: (iOS 14.4)\r\n\r\n- Svelte version (In the REPL, so....latest???)\r\n\r\n# Severity\r\n\r\n100% severe...app is completely broken, would have to move away from svelte, start over, etc...super duper awful. It really is disheartening when the most fundamental feature of the app/REPL doesn't work on like, a billion? devices...😔\r\n\r\nAgain, I really hope that I'm just a dummy that did something wrong, fingers crossed 🤞🏻\r\n\r\n# Additional context\r\n\r\n It probably goes without saying that one will need an iOS device to see this break...the way I saw the errors in the console was to attach my iPhone to my MacBook and open up Safari...in the developer tab one can select the device and web page one wants to debug...didn't know that was a thing until now...\r\n \r\n I think that's everything, but I prolly missed something in my explanation...please let me know if anything is unclear or needs further explanation...\r\n\r\nHere is a fun vid of me debugging on-device into the macOS Safari console...it's great fun, indeeeeeeeeed...\r\n\r\nhttps://user-images.githubusercontent.com/7884263/108415419-5fe01280-71e2-11eb-9194-1f7059f0c197.mp4\r\n  \r\n Thank you Svelte Team!!! XD\r\n",
    "closedAt": null,
    "createdAt": "2021-02-18T18:55:17Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTEzMTQyMjU=",
    "body": "**Describe the bug**\r\nThe `flip` animation and `fly` transition break when used together, not sure which one is causing the other to break however.\r\n\r\n**Logs**\r\nConsole is clear\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/46298c2514ef4215b06ddab7c7bc44e0?version=3.32.3\r\n\r\nIn the REPL, repeatedly click on `next` (fast) and this happens\r\n![Screen Shot 2021-02-18 at 10 50 27 PM](https://user-images.githubusercontent.com/46835608/108396014-6307ec80-723c-11eb-8a31-8eb3dcf14632.png)\r\n\r\n**Expected behavior**\r\nWith regards to the above screenshot, it's supposed to look something like this\r\n![Screen Shot 2021-02-18 at 10 50 33 PM](https://user-images.githubusercontent.com/46835608/108396088-774be980-723c-11eb-851f-8898b7e95f8a.png)\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10): **Chrome 88.0.4324.96**\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc): **MacOS 11.2.1**\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!): **3.32.3**\r\n\r\n- Whether your project uses Webpack or Rollup: **Rollup**\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nAnnoying and breaks the page\r\n\r\n**Additional context**\r\nIf required, I could share a more real world reproduction\r\n",
    "closedAt": null,
    "createdAt": "2021-02-18T17:34:19Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTYzMDkyMQ==",
          "body": "I think a simple solution to solve this problem just change the duration of transition and animate. I tried duration to 600ms or less than 600ms and it's work...",
          "createdAt": "2021-02-18T20:59:23Z",
          "author": { "login": "apriliandi246", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTYzOTEzOA==",
          "body": "Yup, that works in this case.\n\nHowever, if you go to https://shreyas44.vercel.app and scroll down to the *My Projects* section and keep clicking the next button, the same thing happens. And in that case the duration is set to 400ms.",
          "createdAt": "2021-02-18T21:14:56Z",
          "author": { "login": "shreyas44", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTY2MzEwNA==",
          "body": "I think fly has to have a significantly shorter duration than flip. When they are the same duration, there is a race condition somewhere and the animation isn't calling the function to remove the `position: absolute` that it uses to figure out where things are. If you inspect one of the stuck items and look in the actual console, you'll see it's temporary absolute position is never removed.",
          "createdAt": "2021-02-18T22:01:17Z",
          "author": { "login": "kindoflew", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjA0OTE0Mw==",
          "body": "@kindoflew that does make sense. \r\n\r\nOne thing I forgot to mention is that, this problem doesn't occur when the transition is only set to `in`, similar to #3202. However, I'm guessing this is because the `animate` doesn't affect the element until it finishes it's *in transition*?\r\n\r\nI tried a workaround where I use a `shouldTransition` state variable, and if it's set to true, render the element with the animate directive else without it. When the next/back button is clicked, this would first set `shouldTransition` to false resulting in rendering the element without the animate directive (only if it's in the edge card that will be removed from the DOM) and then set the `shouldTransition` to true, which results in only the fly transition and not flip animate acting on the card leaving the DOM. First problem with this is that it's very hacky. Second, the svelte compiler raises an error `An element that uses the animate directive must be the immediate child of a keyed each block`, because I use an `if` block inside the `each` block and I'm guessing this error is raised because it could cause errors at runtime?\r\n",
          "createdAt": "2021-02-19T12:37:50Z",
          "author": { "login": "shreyas44", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MjExNzA5OQ==",
          "body": "Probably also related to  #4732. The docs on [animate](https://svelte.dev/docs#animate_fn) do say that about being the immediate child, I'm assuming so Svelte can know specifically which items to move to new positions before animating.  The solution for your portfolio might be to forgo using flip and instead use a carousel component like [svelte-carousel](https://github.com/beyonk-adventures/svelte-carousel) or roll your own.",
          "createdAt": "2021-02-19T14:41:42Z",
          "author": { "login": "kindoflew", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MjM1MTA0Ng==",
          "body": "Seems to happen when using `flip` with _any_ transition: `scale`, `fade`, `fly`, etc.\r\n\r\n[Demo (REPL)](https://svelte.dev/repl/eab4210b9726479ca1f90e9583354e96?version=3.38.2)\r\n\r\n![flipflop](https://user-images.githubusercontent.com/12453/122221726-902d7a00-ce7f-11eb-97d6-554ec59f079f.gif)\r\n\r\nSimilar to #4910, and probably related to #4732",
          "createdAt": "2021-06-16T12:48:35Z",
          "author": { "login": "twobitfool", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTA4NDQwNTA=",
    "body": "**Describe the bug**\r\nI'm seeing unexpected (to me) ordering of event handlers, and while the bug could be in my understanding rather than Svelte, I'd still like to correct it if that's the case. \r\n\r\n**To Reproduce**\r\nI've set up a small repro in [this REPL](https://svelte.dev/repl/e6651bc3057e41e090d843bc67f36f05?version=3.32.3). If you click outside the blue `div`, you'll see a series of messages that ends with \"outside.\" If you click inside it, you'll see \"inside.\" But if you click directly **on** the chevron, it will still show \"outside\" because by the time the click handler is looking at it, it's been removed from the DOM by the conditional layout.\r\n\r\n**Expected behavior**\r\nIn the bigger picture I'm trying to detect clicks outside of the colored `div`, and that can be accomplished in other ways, but I'm struggling to understand what's happening in the event loop here. By `await`-ing a `tick()` in the `buttonClickHandler` function, my understanding is that the body's click handler should get called before control returns to the button's. But if you look at the console, the button swap is happening before the body click. \r\n\r\n(The outcome here is that by the time the body click is looking at it's target, it's already been removed from the DOM, and so we can't meaningfully investigate it's place in the hierarchy.) \r\n\r\n**Severity**\r\nThis is more annoying and puzzling than problematic... there are easy workarounds for what I'm actually trying to accomplish, but I want to make sure my mental models of `await` and the event loop are correct. \r\n",
    "closedAt": null,
    "createdAt": "2021-02-18T07:36:56Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTA3NTg1ODc=",
    "body": "After literally doing this:\r\n\r\n`npm init svelte@next`\r\n`npm i`\r\n-y\r\n-scss\r\n`npm run dev`\r\n\r\nNot sure if you're aware.  A whole group of windows typescript users are left behind... I get this error:\r\n\r\n```\r\nOnly file and data URLs are supported by the default ESM loader. On Windows, absolute paths must be valid file:// URLs. Received protocol 'c:'\r\nError [ERR_UNSUPPORTED_ESM_URL_SCHEME]: Only file and data URLs are supported by the default ESM loader. On Windows, absolute paths must be valid file:// URLs. Received protocol 'c:'\r\n    at Loader.defaultResolve [as _resolve] (internal/modules/esm/resolve.js:782:11)\r\n    at Loader.resolve (internal/modules/esm/loader.js:85:40)\r\n    at Loader.getModuleJob (internal/modules/esm/loader.js:229:28)\r\n    at Loader.import (internal/modules/esm/loader.js:164:28)\r\n    at importModuleDynamically (internal/modules/esm/translators.js:110:35)\r\n    at exports.importModuleDynamicallyCallback (internal/process/esm_loader.js:30:14)\r\n    at load_config (file:///C:/web%20projects/ss/node_modules/@sveltejs/kit/dist/index.js:294:17)\r\n    at get_config (file:///C:/web%20projects/ss/node_modules/@sveltejs/kit/dist/cli.js:11:16)\r\n    at file:///C:/web%20projects/ss/node_modules/@sveltejs/kit/dist/cli.js:53:24\r\n    at Sade.parse (C:\\web projects\\ss\\node_modules\\sade\\lib\\index.js:189:56)\r\n```\r\n",
    "closedAt": "2021-02-18T08:59:15Z",
    "createdAt": "2021-02-18T04:56:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTE5MDk5MA==",
          "body": "Svelte next isn't yet ready for use outside of mere experimentation, and we know about the issue detailed above. For now, we're asking that users feel free to experiment but don't open issues until we're in a position to deal with them.",
          "createdAt": "2021-02-18T08:59:15Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTY0MTY1MQ==",
          "body": "@jdgamble555 I think this is a windows error not just when selecting typescript.  I'm getting this with and without typescript, same for scss.  As @antony mentioned this is still in preview.\r\n\r\nI got this working in windows for now using WSL (Windows Subsystem for Linux)\r\n(if you're not familiar then look here: https://docs.microsoft.com/en-us/windows/wsl/install-win10)\r\nJust run the `npm run dev` from WSL and it works",
          "createdAt": "2021-02-18T21:19:26Z",
          "author": { "login": "Gaweph", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTY1OTc0OA==",
          "body": "Hi Antony.  I understand that it is only an Alpha, but it should not be released on the website if it can't even compile on Windows.  You guys should fix this basic problem, or take it town from the official website documentation.\r\n\r\nThat being said, I am super eager for this to become official and a huge fan of Svelte / Sapper.  I thank you guys for the wonderful framework.\r\n\r\n@Gaweph Yes, but then it is a linux sub environment, not windows.",
          "createdAt": "2021-02-18T21:54:43Z",
          "author": { "login": "jdgamble555", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MTAwMjgyOTU=",
    "body": "I encountered an issue which is very hard to reproduce outside of my application. I tried for quite some time now but I had to give up. I hope that the info I can provide is still helpful (the application itself can't be made public unfortunately).\r\n\r\nI have code like this:\r\n\r\n```html\r\n<script>\r\n  export let error\r\n  export let errDescription\r\n\r\n  import SomeOtherComponent from '.........'\r\n  import ErrorDisplay from '.........'\r\n\r\n  async function load () {\r\n    /* ... */\r\n  }\r\n</script>\r\n\r\n<SomeOtherComponent>\r\n  {#await load()}\r\n    ...\r\n  {:then}\r\n    <div>The error text is {error.text + (errDescription ? ` (${errDescription})` : '')}</div>\r\n  {:catch error}\r\n    <ErrorDisplay {error} />\r\n  {/await}\r\n</SomeOtherComponent>\r\n```\r\n\r\nNote that I have `error` both as exported property as well as a variable name for `{:catch}`. I'd expect the `error` inside the `catch` to be a different `error`, scoped to the `{:catch}` only.\r\n\r\nNormally, the exported property `error` contains an object like `{ text: 'Stuff' }`.\r\n\r\nI am observing a weird behavior now: Initially the component loads correctly, but in case the `{error.text + errDescription}` part is updated (for example because `errDescription` is changed), it crashes with `Cannot read property 'text' of undefined`.\r\n\r\nFurther debugging shows that the following happens:\r\n\r\n1: `ctx[4]` (`error` property) initially contains the correct value (the object with `text` in it) and this piece of code runs successfully, and the component is rendered fine:\r\n\r\n```javascript\r\n    \tlet t5_value = /*error*/ ctx[4].text + (/*errDescription*/ ctx[7]\r\n    \t? ` (${/*errDescription*/ ctx[7]})`\r\n    \t: \"\") + \"\";\r\n```\r\n2: This piece of code runs and messes up `ctx[4]` but without triggering another rendering:\r\n\r\n```javascript\r\n    \t\tp: function update(new_ctx, dirty) {\r\n    \t\t\tctx = new_ctx;\r\n\r\n    \t\t\t{\r\n    \t\t\t\tconst child_ctx = ctx.slice();\r\n    \t\t\t\tchild_ctx[4] = info_1.resolved; // <<< here, info_1 seems to be related to the {#await}\r\n    \t\t\t\tinfo_1.block.p(child_ctx, dirty);\r\n    \t\t\t}\r\n    \t\t},\r\n```\r\n\r\n<details>\r\n  <summary>Stack trace of code which overwrites `ctx[4]`</summary>\r\n\r\nupdate\t@\tbundle.js:34896\r\nupdate_slot\t@\tbundle.js:88\r\nupdate\t@\tbundle.js:7956\r\nupdate\t@\tbundle.js:452\r\nflush\t@\tbundle.js:420\r\nPromise.then (async)\t\t\r\nschedule_update\t@\tbundle.js:395\r\nmake_dirty\t@\tbundle.js:983\r\n(anonymous)\t@\tbundle.js:1018\r\n(anonymous)\t@\tbundle.js:42809\r\nset\t@\tbundle.js:6422\r\nupdate\t@\tbundle.js:6430\r\npush\t@\tbundle.js:7799\r\nopen\t@\tbundle.js:7814\r\nclick_handler_3\t@\tbundle.js:38798\r\nclick_handler_3\t@\tbundle.js:36981\r\n(anonymous)\t@\tbundle.js:382\r\nbubble\t@\tbundle.js:382\r\nclick_handler\t@\tbundle.js:2360\r\n</details>\r\n\r\n3: Whenever something else triggers an update, this piece of code runs and crashes because `ctx[4]` is now `undefined`:\r\n\r\n```javascript\r\n    \t\t\tif ((!current || dirty & /*error, errDescription*/ 144) && t5_value !== (t5_value = /*error*/ ctx[4].text + (/*errDescription*/ ctx[7]\r\n    \t\t\t? ` (${/*errDescription*/ ctx[7]})`\r\n    \t\t\t: \"\") + \"\")) set_data_dev(t5, t5_value);\r\n```\r\n\r\n<details>\r\n  <summary>Stack trace of crash</summary>\r\n\r\nbundle.js:34023 Uncaught (in promise) TypeError: Cannot read property 'text' of undefined\r\n    at Object.update [as p] (bundle.js:34023)\r\n    at Object.update [as p] (bundle.js:34897)\r\n    at update_slot (bundle.js:88)\r\n    at Object.update [as p] (bundle.js:7956)\r\n    at update (bundle.js:452)\r\n    at flush (bundle.js:420)\r\n</details>\r\n\r\nThe issues goes away if I rename the second `error` variable in the `{:catch}` block to something like `error2`.\r\n\r\n**Info about my project:**\r\nI'm on Windows 10 with WSL, and the \"browser\" is Electron 11.1.1 (Chromium 87.0.4280.88)\r\n\r\n```\r\n  System:\r\n    OS: Linux 4.4 Ubuntu 18.04.5 LTS (Bionic Beaver)\r\n    CPU: (4) x64 Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz\r\n    Memory: 2.42 GB / 15.86 GB\r\n    Container: Yes\r\n    Shell: 4.4.20 - /bin/bash\r\n  Binaries:\r\n    Node: 14.15.4 - /usr/local/bin/node\r\n    Yarn: 1.12.1 - /usr/bin/yarn\r\n    npm: 6.14.7 - ~/.npm-global/bin/npm\r\n  npmPackages:\r\n    rollup: ^2.35.1 => 2.35.1\r\n    svelte: ^3.32.3 => 3.32.3\r\n```\r\n\r\n**Severity:** Not a problem, workaround available.\r\n",
    "closedAt": null,
    "createdAt": "2021-02-17T09:53:44Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDk3OTkzMDM=",
    "body": "## Describe the bug\r\nWhen changing a list in a particular way, items with both `flip` animations and `scale` transitions position on top of each other:\r\n![Screenshot_2021-02-16 Svelte REPL](https://user-images.githubusercontent.com/3756309/108147470-e7236e00-709c-11eb-8edf-6ab635f77faa.png)\r\n\r\n## To Reproduce\r\n\r\nhttps://svelte.dev/repl/14baa8146a5e40778644b64d6c00a1e6?version=3.32.3\r\n\r\n## Expected behavior\r\n\r\nThe elements are positioned next to each other, like what happens when the delay on line 7 is increased to 300ms:\r\n![Screenshot_2021-02-16 Svelte REPL(1)](https://user-images.githubusercontent.com/3756309/108147558-120dc200-709d-11eb-90b9-4bc48d333031.png)\r\n\r\n## Information about your Svelte project\r\n\r\n- Firefox 85.0.2, Chrome 88.0.4324.150, WebKitGTK 2.30.5\r\n\r\n- Your operating system: Arch Linux\r\n\r\n- Svelte version: 3.32.1, 3.32.3\r\n\r\n- Whether your project uses Webpack or Rollup: Vite (Rollup), but occurs in REPL too\r\n\r\n## Severity\r\n\r\nNot too high if I manually decrease the animation duration to the point where a human can't click that fast.",
    "closedAt": null,
    "createdAt": "2021-02-17T02:28:39Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDkzMjE2OTc=",
    "body": "see this [repl](https://svelte.dev/repl/900a706f1fda414ea87cd7314d8d9a4e?version=3.32.3)\r\n```\r\n<script>\r\n\tlet obj = {};\r\n\tfunction objToState() {\r\n\t\tconsole.log('objToState')\r\n\t\tstate.bool = obj.bool\r\n\t}\r\n\r\n\tlet state = {};\r\n\tfunction stateToObj() {\r\n\t\tconsole.log('stateToObj')\r\n\t\tobj.bool = state.bool\r\n\t}\r\n\t\r\n\t$: obj && objToState()\r\n\t$: state && stateToObj()\r\n\t// $: obj && objToState()\r\n</script>\r\n\r\n<input type=\"checkbox\" bind:checked=\"{state.bool}\" /><br>\r\n<input type=\"checkbox\" bind:checked=\"{obj.bool}\" /><br>\r\n```\r\n\r\nIf I click the stateToObj checkbox, I see this in the console:\r\n```\r\n\"stateToObj\"\r\n\"objToState\"\r\n```\r\nIt is correct\r\n\r\nBut if I click the stateToObj checkbox, I see only this:\r\n```\r\n\"objToState\"\r\n```\r\nIt is incorrect, I expect to see the same log\r\n\r\nIt turns out that in order to implement two way binding of `obj` with `state`, I need to add another line (which is now commented)\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: Chrome 88\r\n\r\n- Your operating system: Windows 7\r\n\r\n- Svelte version: 3.32.3",
    "closedAt": "2021-02-16T14:12:54Z",
    "createdAt": "2021-02-16T13:40:20Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3OTg2MjEyMw==",
          "body": "This is intended behavior. See my explanation in #5848.",
          "createdAt": "2021-02-16T14:12:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDc5ODM5Njc=",
    "body": "`<a href=\"#{'a'}\">hello</a>`\r\n\r\nThe url is #a, not #.",
    "closedAt": "2021-04-30T15:55:38Z",
    "createdAt": "2021-02-14T15:35:50Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3ODgwMTI2MA==",
          "body": "```html\r\n<script>\r\n\tlet name = 'world';\r\n</script>\r\n\r\n\r\n<a href=\"#{name}\">hello</a>\r\n```\r\n\r\nthis seems to work 👀 ",
          "createdAt": "2021-02-14T16:24:59Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDIyMDczOQ==",
          "body": "This should be fixed in 3.38.0.",
          "createdAt": "2021-04-30T16:44:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDc4ODkzODA=",
    "body": "Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\nNo.\r\n\r\n**Describe the bug**\r\n\r\nRight now, when you put an action on a component that's compiled into a custom element, the action runs immediately, upon *creation*, with the destroy callback never running.\r\n\r\nIt would seem that the more correct behavior would be for the action to run when the web component is connected, with the destroy callback running when disconnected.\r\n\r\nThe fix would likely be related to the code in this PR, which hasn't quite merged yet\r\n\r\nhttps://github.com/sveltejs/svelte/pull/4522 \r\n\r\n**Logs**\r\n\r\nn/a\r\n\r\n**To Reproduce**\r\n\r\nNo repro - I've never been able to get custom elements to run in the REPL.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nSee above. \r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\nChrome\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nMac\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\n3.32.3\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nwebpack\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nMinor \r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": null,
    "createdAt": "2021-02-14T04:59:16Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MDExMjg5NA==",
          "body": "Could you provide a small code example to illustrate the problem?",
          "createdAt": "2021-02-16T20:57:26Z",
          "author": { "login": "hontas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MDEyNzIwNQ==",
          "body": "@hontas sure. This is the one example I happen to have, but this applies to any action. So if you have this function / action\r\n\r\n```js\r\nexport function slotChildAdded(slotEl, { onChild, onAttributesChanged } = {}) {\r\n  let mutationObserver;\r\n  slotEl.addEventListener(\"slotchange\", slotChangeHandler);\r\n\r\n  function slotChangeHandler(evt) {\r\n    const el = slotEl.assignedElements()[0];\r\n\r\n    if (el != null) {\r\n      // mutating children not supported\r\n      slotEl.removeEventListener(\"slotchange\", slotChangeHandler);\r\n      onChild && onChild(el);\r\n\r\n      if (onAttributesChanged) {\r\n        handleElementsAttributes(el, onAttributesChanged);\r\n        mutationObserver = new MutationObserver(handleElementsAttributes.bind(null, el, onAttributesChanged));\r\n        mutationObserver.observe(el, { attributes: true, childList: false, subtree: false });\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    destroy() {\r\n      mutationObserver && mutationObserver.disconnect();\r\n      slotEl.removeEventListener(\"slotchange\", slotChangeHandler);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nwhich is used like this\r\n\r\n```html\r\n<slot name=\"slot1\" use:slotChildAdded={{ onChild: slotChildExists, onAttributesChanged: inputAttributesChanged }}></slot>\r\n```\r\n\r\nthen, ideally, the action should run when the web component is connected, with the destroy function running on disconnect. Instead, it currently runs when *created* with the destroy callback *never* running (sound familiar?)\r\n\r\nadd_actions.ts in `src/compiler/compile/render_dom/wrappers/shared` seems like the relevant module, with more subtle integration with the Block class, but I don't have the expertise in the Svelte codebase to know exactly what the solution should look at. ",
          "createdAt": "2021-02-16T21:25:15Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NjM2NjkxMA==",
          "body": "It seems like a tricky beast since the the action-destroy call is ultimately triggered by `componentInstance.$destroy` that does not run on disconnect which was the initial problem I was trying to solve in #4522 \r\n\r\nSo from how it looks now I wouldn't use (pun intended) the `use`-directive with custom elements.\r\n\r\nBut I think you can make it work by doing something like this instead:\r\n\r\n```html\r\n<script>\r\nimport { onMount } from 'svelte';\r\n\r\nlet slotEl;\r\n\r\nfunction mutatingSlot(slot, { onChild, onAttributeChange }) {\r\n  const el = slot.assignedElements()[0];\r\n  let mutationObserver;\r\n  \r\n  if (el) {\r\n    onChild(el);\r\n\r\n    mutationObserver = new MutationObserver(onAttributeChange);\r\n    mutationObserver.observe(el, { attributes: true, childList: false, subtree: false });\r\n  }\r\n\r\n  return () => {\r\n    mutationObserver && mutationObserver.disconnect();\r\n  };\r\n}\r\n\r\nconst onChild = (el) => {};\r\nconst onAttributeChange = ([MutationRecord]) => {};\r\n\r\nonMount(() => {\r\n  const onDestroy = mutatingSlot(slotEl, { onChild, onAttributeChange });\r\n\r\n  return () => {\r\n    onDestroy()\r\n  };\r\n});\r\n</script>\r\n\r\n<slot bind:this={slotEl} />\r\n```\r\n\r\nGood luck!",
          "createdAt": "2021-03-11T01:55:00Z",
          "author": { "login": "hontas", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDc4MDA0NTU=",
    "body": "\r\n\r\n**Describe the bug**\r\nWhen creating a leaflet map, the leaflet `getSize()` function sometimes returns the wrong size within a Svelte app.\r\n\r\n\r\n\r\n\r\n**To Reproduce**\r\n\r\n1. Clone this repo: https://github.com/gavinr/leaflet-custom-layer-issue\r\n2. npm install\r\n3. npm run build\r\n4. npm start\r\n\r\nin a CHROMIUM-based browser (example: google chrome), open http://localhost:5000/ and refresh/hard-refresh a bunch of times until you see the \"y\" value in the developer console be an unreasonably small (~30 or 40) size.\r\n\r\n\r\n**Expected behavior**\r\n\r\n- Expected: Size in the developer console should always be the same\r\n- Actual: sometimes on new refreshes the y value of the size is not correct (a very small number)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/209355/107857664-a838b280-6e27-11eb-9808-78e34daa7d11.png)\r\n\r\n",
    "closedAt": "2021-02-22T21:59:15Z",
    "createdAt": "2021-02-13T18:17:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3OTUwOTIzNw==",
          "body": "I'm not sure how this is an issue with Svelte. It seems that you're trying to get the size of a layer before it has properly rendered. It's a race condition.",
          "createdAt": "2021-02-16T00:29:46Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3OTU0Mzc0Ng==",
          "body": "@antony thank you for the response. This works fine when not using Svelte - see https://github.com/gavinr/leaflet-custom-layer-issue/blob/master/public/standalone.html (sorry, should have included this in the original issue report), which is what makes me think it's an issue with Svelte.",
          "createdAt": "2021-02-16T02:37:25Z",
          "author": { "login": "gavinr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTQ0MDUwNw==",
          "body": "It seems like the DOM or the styles sometimes have not fully loaded when [this function](https://github.com/gavinr/leaflet-custom-layer-issue/blob/83e03102cce038c820d16f26774b12c24961c6b2/src/Map.svelte#L17-L32) gets called. Note I am using [svelte actions here](https://github.com/gavinr/leaflet-custom-layer-issue/blob/83e03102cce038c820d16f26774b12c24961c6b2/src/Map.svelte#L35) to call the function. When I use an action like this can I assume the DOM and styles are loaded? If not, what's a better way to guarantee that the the DOM and styles are loaded?",
          "createdAt": "2021-02-18T15:50:54Z",
          "author": { "login": "gavinr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzcwMjg3OQ==",
          "body": "You should be able to assume that the DOM and any styles are loaded, yes, but that's not to say that instantiating the `LeafletMap` instance has already synchronously done everything it's going to do to the DOM and that its `getSize()` method will return the desired values right away. If an element's size is affected by whether an image within it has finished downloading, that may also give you unexpected values. You're free to open another issue that shows something specifically wrong happening in Svelte, but for now, it looks like this issue involves you instantiating an external library and then after that calling a method on that external library and having an issue with its return value.",
          "createdAt": "2021-02-22T21:59:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDc3NzI5NDM=",
    "body": "LightHouse shows a warning when it detects a link using the `target=\"_blank\"` attribute that is not using a `rel` “noopener/noreferrer” as it could cause performance and securities issues, cf. https://web.dev/external-anchors-use-rel-noopener\r\n\r\nThe svelte linter could show a warning as similarly to what it does for missing the `alt` attribute on images for instance.\r\n\r\nI would be happy to open a PR for this feature if there is support from the maintainers.",
    "closedAt": null,
    "createdAt": "2021-02-13T15:49:17Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDU5NTQ5MzQ=",
    "body": "Is there a reason why, but the `:host` style selector is removed when compiling this. Works in svelte 3.32.1, but not in 3.32.2.\r\n\r\n```\r\n<style>\r\n    :host {\r\n        display: inline-block;\r\n    }\r\n    .hello {\r\n        color: green\r\n    }\r\n</style>\r\n```\r\n*Result:*\r\nonly the .hello class is available in the compiled web component.",
    "closedAt": "2021-02-11T03:01:50Z",
    "createdAt": "2021-02-10T23:21:06Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzEyNDQ0NQ==",
          "body": "watching the logs it says:\r\n\r\n```\r\n(!) Plugin svelte: Unused CSS selector \":host\"\r\nsrc/App.svelte\r\n108: \r\n109: <style>\r\n110:     :host {\r\n         ^\r\n111:         display: inline-block;\r\n112:     }\r\n```\r\n\r\nwhy is it \"unused\"? i am using it. the `:host` selector allows gettings things right at the components very root (the custom element itself). is there any workaround to get this going again? \r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/:host <- example on styling the shadow host.",
          "createdAt": "2021-02-11T00:07:35Z",
          "author": { "login": "rd-stefan-riehmer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzE3NzM5Mg==",
          "body": "Thanks for the report! This should be fixed in 3.32.3.",
          "createdAt": "2021-02-11T03:07:39Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDU5NTMyOTg=",
    "body": "![image](https://user-images.githubusercontent.com/78883654/107585432-4867bf00-6c0f-11eb-97ce-d616d01efa0a.jpeg)![image](https://user-images.githubusercontent.com/78883654/107585423-443ba180-6c0f-11eb-8069-6fcc3fd6c255.jpeg)This issue tracker is intended to collect bug reports and feature requests.\n\nFor help with installation, information on how features work, or questions about specific features of Svelte, please come and join us in the [Svelte Discord](https://svelte.dev/chat), or ask your question on [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte). Any issues open for help requests will be closed to keep from clogging up the issue tracker.",
    "closedAt": "2021-02-10T23:30:33Z",
    "createdAt": "2021-02-10T23:17:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzEwNjQwMQ==",
          "body": "I don't know what you need, but it doesn't look like something that has anything to do with Svelte.",
          "createdAt": "2021-02-10T23:30:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDU5MzQ2NDc=",
    "body": "![image](https://user-images.githubusercontent.com/78883654/107582505-a3e37e00-6c0a-11eb-9a93-7757c8536a75.jpeg)\n![image](https://user-images.githubusercontent.com/78883654/107582479-9a5a1600-6c0a-11eb-93fe-163f27495bc5.jpeg)This issue tracker is intended to collect bug reports and feature requests.\n\nFor help with installation, information on how features work, or questions about specific features of Svelte, please come and join us in the [Svelte Discord](https://svelte.dev/chat), or ask your question on [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte). Any issues open for help requests will be closed to keep from clogging up the issue tracker.",
    "closedAt": "2021-02-10T22:59:50Z",
    "createdAt": "2021-02-10T22:44:26Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDU0ODE1OTE=",
    "body": "# The problem\r\n\r\n> **Is your feature request related to a problem? Please describe.**\r\n\r\nWhen creating a layout (i.e. in Sapper) it's often useful to define multiple areas of content injection. Svelte solves this issue with named slots, but the current implementation does not allow to multiple slots to be packaged in a single child component. \r\n\r\nFor instance, creating a named slot in Sapper _layout file and then using said slot in a Sapper page leads to the error:\r\n\r\n    Element with a slot='...' attribute must be a child of a component or a descendant of a custom element\r\n\r\n\r\n# Example\r\n\r\nThe minimal repl: https://svelte.dev/repl/f0d8d2d093094565bc36d62837d275da?version=3.32.2\r\nTo reproduce the issue, uncomment the `top` slot in `Content.svelte`.\r\n\r\nExpected behavior: the contents of the \"top\" slot should be rendered in the slot.\r\n\r\nActual behavior: compilation error.\r\n\r\n\r\n# Solution\r\n\r\n> **Describe the solution you'd like**\r\n\r\nAllow any component to use any named slot (could be in top level children only). Pass the content of such slots to the nearest ancestor component that defined appropriate slot.\r\n\r\n\r\n# Workarounds\r\n\r\n> **Describe alternatives you've considered**\r\n\r\nThe alternative I'm aware of is not to use _layout files in Sapper, but to define layout component in a separate file and reuse it in every page. This invalidates all the benefits of the layout system.\r\n\r\n> **How important is this feature to you?**\r\n\r\nNot being able to define multiple regions in a _layout file limits its usability to simple applications. I'd really like to keep using layout files as my projects grow.",
    "closedAt": null,
    "createdAt": "2021-02-10T12:44:47Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjgyMjU2MQ==",
          "body": "Hi!\r\n\r\nIt is really confusing to me using both layout and _layout in your REPL example and in the issue. I don't know if you mean a different thing or not.\r\n\r\nFrom what I understand, if you want to use different layouts directly from your App component (or _Layout component), you'll need to have a map like object to determine which layout should be used with each route. It doesn't feel much better than using your workaround.\r\n\r\nAlso, if you have an undefined number of named slots used by some components but not all, it is probably going to be a pain to maintain and I am not sure it would be well optimized by the SRR.",
          "createdAt": "2021-02-10T16:11:44Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzM3MDk3MQ==",
          "body": "Apologies. `_layout` is the special filename Sapper is using for layout components. In the REPL there is no Sapper, hence I just named the components by what they are (Layout and Content).\r\n\r\nSapper automatically applies `_layout` files to all the app pages placed in the same and descending folders as the `_layout` file. See the docs at [https://sapper.svelte.dev/docs#Layouts](https://sapper.svelte.dev/docs#Layouts), I don't think my explanation skills could match the official documentation 😄 The point is, using different layouts for different parts of the application works well in Sapper.\r\n\r\nThe problem is that within a **single layout component,** I would like to have **multiple slots** to render the content into. For example, my layout defines a menu area and a content area. The page component defines the content, but I'd also like it to put controls specific to this page in the slot in the menu area of the layout. Exactly as the REPL is attempting to.\r\n\r\nI hope this clears the confusion a bit.\r\n\r\nAlso of note: I mention Sapper because it's the framework of choice for Svelte web apps, so I think the implications for the framework are wide an important for the context. However, I did check that the error is generated at the Svelte level, as illustrated by my REPL.",
          "createdAt": "2021-02-11T11:10:04Z",
          "author": { "login": "subhog", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Nzg5ODU1NA==",
          "body": "Sapper is going to be retired in a matter of months (hopefully). Maybe this problem anymore when SvelteKit arrives? \r\n\r\nAnyway: I'm not sure if I understood fully the issue, but would it help to use named slots in a `<MainComponent>`? (instead of using slots in `_layout.svelte` directly). That is, use `<MainComponent>` in `_layout`.",
          "createdAt": "2021-02-12T01:02:01Z",
          "author": { "login": "paulovieira", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3ODYzMjY0MQ==",
          "body": "In our app, we designed the pages using slots only for the main content, allowing us not to use named slots. If I understand well, in your application you use many and many different navs/menus that you'd like to use named slots? Otherwise, I would suggest to do as we did:\r\n\r\n```\r\n// UserTemplate.svelte\r\n<MyUserNav />\r\n<MyUserLeftMenu />\r\n<slot />\r\n```\r\n\r\n```\r\n// AdminTemplate.svelte\r\n<MyAdminNav />\r\n// no left menu (for example)\r\n<slot />\r\n```\r\n\r\nAnd we do not have so many template components!",
          "createdAt": "2021-02-13T15:16:11Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MDg5NTcyNQ==",
          "body": "@Ennoriel I like that approach.",
          "createdAt": "2021-02-17T22:26:39Z",
          "author": { "login": "dikaio", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDUzMDM2NDk=",
    "body": "**Describe the bug**\r\nWhen opening Svelte.dev in Safari, the website looks really destroyed. It seems like all or many assets like css, images, ... are missing. The Sapper site looks normal.\r\n\r\nThis happens (at least for me) reliably since a few weeks on all my machines in Safari. But up until then it always worked fine. However the site looks normal in all other browsers.\r\nI cleared all caches and reloaded the page a hundred times, but it stays like that.\r\n\r\n**Logs**\r\nFor the ~40 assets, there is 3 error logs each, saying:\r\n```\r\nCannot load https://svelte.dev/svelte-logotype.svg\r\nFailed to load resource: FetchEvent.respondWith received an error: Returned response is null.\r\nFetchEvent.respondWith received an error: Returned response is null.\r\n```\r\n\r\nIt is also not possible for me to access the asset urls directly: https://svelte.dev/svelte-logotype.svg\r\n\r\nI am absolutely unsure if this is happening to anybody else as well, or if I am alone with that.",
    "closedAt": "2021-02-16T00:32:17Z",
    "createdAt": "2021-02-10T08:46:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjU0NTg2MA==",
          "body": "Looks fine on my end in Safari on MacOS and iOS",
          "createdAt": "2021-02-10T08:50:58Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzI5Njk4Nw==",
          "body": "Clearing history in Safari solved the problem for me.",
          "createdAt": "2021-02-11T09:09:01Z",
          "author": { "login": "leiflernia", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3OTUxMDE1Nw==",
          "body": "This is either a connection issue or something to do with google cloud where the site is hosted. It may also be an issue with Safari. However I also couldn't reproduce this, so I'm going to close it for now.",
          "createdAt": "2021-02-16T00:32:17Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDQ2OTU3MTM=",
    "body": "**Describe the bug**\r\nIn [this tutorial page](https://svelte.dev/tutorial/svelte-options) it says:\r\n\r\n```js\r\n// Add this to the top of the Todo.svelte file\r\n<svelte:options immutable={true}/>\r\n```\r\n\r\nIn [this example page](https://svelte.dev/examples#immutable-data) that code is in `App.svelte` (parent) file too.\r\n\r\nWhy?\r\n\r\nIs this needed?",
    "closedAt": null,
    "createdAt": "2021-02-09T16:13:02Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjgzOTgzMA==",
          "body": "Hi!\r\n\r\nIt doesn't feel that it is nedded to me. There is a warning that could also be removed. I can submit a PR if confirmed.",
          "createdAt": "2021-02-10T16:34:25Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDQ0MzM4MTc=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nSvelte compiler has `parse(template: string): Ast` but  no `print(code: Ast) => template` printer.\r\n\r\nTypeScript compiler  (and some program languages) has this feature.\r\n\r\nhttps://learning-notes.mistermicheels.com/javascript/typescript/compiler-api/#programmatically-creating-ast-nodes.\r\n\r\n**Describe the solution you'd like**\r\n\r\nSvelte compiler provides `print(ast: Ast, optionalFormatter?: {js?: (code:string)=>string , ...} ): string`. \r\n\r\n```ts\r\nimport { parse, print } from \"svelte/compiler\";\r\nconst template = `<div {id}>foo</div>`\r\nconst parsed = parse(template);\r\nconst restored = print(parsed); // => same template\r\n```\r\n\r\n**How important is this feature to you?**\r\n\r\nI'm creating code collaboration editor for non-programmer and programmer on svelte template.\r\n\r\n![](https://i.gyazo.com/7d07de67b5f4fa368ebb529bb13a3cb8.png)\r\n\r\nLeft side pane is auto generated forms by svelte template AST for non-programmer. By rewriting this, I try to reflect svelte template by ast changes. but svelte compiler does not have printer feature.\r\n\r\nI think providing this feature helps svelte ecosystem.\r\n\r\n**Additional Context**\r\n\r\nhttps://github.com/sveltejs/prettier-plugin-svelte has code printer already. (fortunately for me, it works in browser!)\r\n\r\nBut that is `format(template: string): string`. I need formatter from ast.\r\n\r\nSo I hacked this for my workarround.\r\n\r\n```ts\r\nimport prettier from \"prettier/standalone\";\r\nimport produce from \"immer\";\r\nimport { parse } from \"svelte/compiler\";\r\nimport type { Ast } from \"svelte/types/compiler/interfaces\";\r\n// @ts-ignore\r\nimport * as sveltePlugin from \"prettier-plugin-svelte\";\r\n\r\nfunction printTemplate(ast: Ast) {\r\n  const overridePlugin = produce(sveltePlugin, (d: any) => {\r\n    d.parsers.svelte.parse = () => {\r\n      return { ...ast, __isRoot: true };\r\n    };\r\n  });\r\n  return prettier.format(\" dummy \", {\r\n    parser: \"svelte\",\r\n    plugins: [overridePlugin as any],\r\n  });\r\n}\r\n\r\nconst code = \"<div {id}>text</div>\";\r\nconst parsed = parse(code);\r\n// override ast\r\n// @ts-ignore\r\nparsed.html.children[0].name = \"span\";\r\nconst out = printTemplate(parsed);\r\nconsole.log(out); // <span {id}>text</span>\r\n```\r\n\r\nIt depend on prettier but formatting js and css are optional feature for template block. Formatters for js and css already exist but svelte html template block formatter does not exists now.\r\n\r\nI wrote simple printer (WIP) but I found prettier hack before I finished it.\r\n\r\nhttps://gist.github.com/mizchi/8d51d239bccec98408cffde5ef5b855d",
    "closedAt": null,
    "createdAt": "2021-02-09T10:47:29Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MzM4MzM3NA==",
          "body": "I created fork for my usecase.\r\n\r\nhttps://github.com/mizchi/prettier-plugin-svelte",
          "createdAt": "2021-02-22T13:43:22Z",
          "author": { "login": "mizchi", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDQwNjQzNDk=",
    "body": "In situations where I need to set context multiple times, it's needed to duplicate `setContext`:\r\n\r\n```js\r\nsetContext(\"someAction\", actionFunc);\r\nsetContext(\"findSomething\", findFunc);\r\nsetContext(\"getSomething\", someObject.getMethod);\r\n```\r\n\r\nIMHO it would be handy if it would be possible to pass an object instead of a \"key-value\". Example:\r\n\r\n```js\r\nsetContext({\r\n    \"someAction\": actionFunc,\r\n    \"findSomething\": findFunc\r\n    \"getSomething\": someObject.getMethod\r\n});\r\n```\r\n\r\nThis may help group the code and improve readability.\r\n\r\nThe object passed as an argument can be a variable, but only the original state should be used and later added property keys should not affect anything.\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-02-08T23:51:30Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjQwODQ2OA==",
          "body": "Why won't you do something like this?\n\n```\nsetContext(\"contextObject\", {\n    actionFunc,\n    findFunc,\n    \"getSomething\": someObject.getMethod\n});\n```",
          "createdAt": "2021-02-10T03:14:35Z",
          "author": { "login": "si3nloong", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjkyOTY2Nw==",
          "body": "> Why won't you do something like this?\r\n\r\nIt can even be like this:\r\nhttps://svelte.dev/repl/d6f611c4a6744706a7aa195d77c522af?version=3.32.2\r\n\r\nBut I don't see the point in neither my implementation nor yours:\r\n\r\nIn your version, it's needed to destructure properties and use an object with _(\"random\")_ name for all properties instead of  keys in `getContext` that describes the purpose of value in it (which I think makes readability a bit worse)\r\n```js\r\n  const { actionFunc } = getContext(\"contextObject\");\r\n  // or\r\n  const { actionFunc: someAction } = getContext(\"contextObject\");\r\n```\r\nPlus, if you pass an object as a value, it's needed to additionally destruct the destructured value, which also does not look very nice.\r\n```js\r\n  const { someObject: { someNestedValue } } = getContext(\"contextObject\");\r\n```\r\n\r\nSame with accessing a nested value via dot\r\n\r\nIn my variant there is a bit of runtime added and (helper) `setContext` needs to be imported not from 'svelte', which can be confusing especially if other parts of the project use svelte's `setContext`.\r\n\r\nOverall, it's a good addition, but not enough to use the first or second option IMHO.\r\n",
          "createdAt": "2021-02-10T18:47:34Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Njk1NjE5Ng==",
          "body": "it's a big breaking change too 😅 ",
          "createdAt": "2021-02-10T19:23:35Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Njk2MDgwOQ==",
          "body": "> it's a big breaking change too\r\n\r\nIs it? The way I see it here - it's just needed to run `Object.entries` on the argument if its type is Object (Object.prototype.toString.call(arg) == \"[object Object]\")",
          "createdAt": "2021-02-10T19:31:26Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Njk2MTY0MQ==",
          "body": "This is roughly speaking of course",
          "createdAt": "2021-02-10T19:32:42Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Njk2ODc3Mw==",
          "body": "The docs and tutorial advice to use an object as a key : \r\n\r\n> We can use anything as a key — we could do setContext('mapbox', ...) for example. The downside of using a string is that different component libraries might accidentally use the same one; using an object literal means the keys are guaranteed not to conflict in any circumstance (since an object only has referential equality to itself, i.e. {} !== {} whereas \"x\" === \"x\"), even when you have multiple different contexts operating across many component layers.",
          "createdAt": "2021-02-10T19:45:03Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDM4MjE5NjM=",
    "body": "**Bug**\r\nIn SSR mode, `<a target={true ? undefined : \"...\"} {...$$props}>` renders `<a target=\"undefined\">` instead of `<a>`. This does not appear to happen when `{...$$props}` is not present.\r\n\r\n**Expected behavior**\r\nThe expected behavior is that `undefined` attributes should be omitted. These are PRs that I found are similar in scope:\r\n\r\nhttps://github.com/sveltejs/svelte/pull/1668\r\nhttps://github.com/sveltejs/svelte/pull/4498\r\nhttps://github.com/sveltejs/svelte/pull/1815\r\n\r\n**Repro**\r\nI created a repro to demonstrate my use case: https://github.com/zaydek/svelte-undefined-bug. Simply run `yarn test` or `npm run test` to see the same result as in the screenshot.\r\n\r\nFurthermore, in this repl: https://svelte.dev/repl/aaedb6456d714a9f9ccfab9c84c8b391?version=3.32.1, when SSR mode is enabled, you can see that it generates:\r\n\r\n```js\r\nconst App = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\treturn `<a${spread([\r\n\t\t{\r\n\t\t\ttarget: escape(true ? undefined : \"_blank\")\r\n\t\t},\r\n\t\t$$props\r\n\t])}>Hello, world!\r\n</a>`;\r\n});\r\n```\r\n\r\nI suspect escape is the culprit; it should be omitting the value instead of escaping it as a string literal.\r\n\r\n<img width=\"1440\" alt=\"Screen Shot 2021-02-09 at 3 18 09 AM\" src=\"https://user-images.githubusercontent.com/58870766/107265758-0102f680-6a88-11eb-8402-4c6ead12fb91.png\">\r\n",
    "closedAt": null,
    "createdAt": "2021-02-08T18:37:08Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjI1Mzg5Ng==",
          "body": "This is a very huge bug. I came across the same problem. On server side I get `<img src=\"some.jpg\" srcset=\"undefined\">` instead `<img src=\"some.jpg\">` and it breaks an image because `srcset` takes precedence over `src`. Therefore, users with javascript disabled and Google won`t see images. Are there any insurmountable obstacles to fix this bug?",
          "createdAt": "2021-04-02T00:42:24Z",
          "author": { "login": "zamanruhy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDI3NzE5Nzg=",
    "body": "To reproduce. Open svelte repl or any svelte project, add `audio` or `video` tag:\r\n\r\n```\r\n<audio src=\"https://media.w3.org/2010/07/bunny/04-Death_Becomes_Fur.mp4\" controls />\r\n```\r\n\r\nExpected:\r\n* it just works and compiler is happy\r\n\r\nWhat actually happens:\r\n* `A11y: Media elements must have a <track kind=\"captions\"> (1:0)`\r\n\r\nReasons this warning needs to be removed:\r\n\r\n* Browsers do not even support `<track>` for `<audio>` in any way whatsoever\r\n* Even for videos, `track` tags are not in any kind of widespread use\r\n* There's no accessibility value of empty `<track kind=\"caption\">` which linter wants people to add\r\n* As far as I can tell, what linter wants - `track` without `src` - [is not even valid according to spec!](https://www.w3.org/TR/2011/WD-html5-author-20110809/the-track-element.html) **\"The src attribute gives the address of the text track data. The value must be a valid non-empty URL potentially surrounded by spaces. This attribute must be present.\"**\r\n* (this is completely unlike empty `alt` attribute on `img` which is meaningfully different from no `alt` for historical reasons)\r\n* Vast majority of audio/video content does not have and will never have any kind of captions\r\n* For a lot of use cases, it wouldn't even make sense (same as a lot of imgs can't even have any meaningful nonempty alt)\r\n",
    "closedAt": null,
    "createdAt": "2021-02-06T19:26:28Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTI5NzQyNA==",
          "body": "I agree that it makes sense to remove this check for `<audio>` elements:\r\n- The [corresponding axe-core rule](https://github.com/dequelabs/axe-core/pull/1071) has been deprecated\r\n- The [corresponding Lighthouse audit](https://web.dev/audio-caption/) has been deprecated\r\n- As you mentioned, [browsers ignore tracks within audio elements](https://www.iandevlin.com/blog/2015/12/html5/webvtt-and-audio/)\r\n\r\nHowever, the same is [not true](https://web.dev/video-caption/) for the corresponding rule for `<video>` elements and [browser support](https://caniuse.com/webvtt) is good. I think it still makes sense to encourage captions on videos. The warning can always be ignored in the component using `<!-- svelte-ignore a11y-media-has-caption -->`.\r\n\r\nAs a side note, I don't read the warning as suggesting you add an empty `<track kind=\"caption\">` -- it's implied that you add a `src`. We could make the rule require a `src` as well to make this clear.",
          "createdAt": "2021-02-08T17:09:03Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTI5OTk1NA==",
          "body": "Also note that the [Svelte tutorial](https://svelte.dev/tutorial/sharing-code) currently has a compiler warning for missing audio captions. Either the rule should not check audio elements or the tutorial should be updated to resolve the warning. This is also a case where it wouldn't make sense to have captions even if audio captions were supported since it's music only, no speech.",
          "createdAt": "2021-02-08T17:12:54Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTMxMDg1Nw==",
          "body": "The one for `video` makes a lot more sense than one for `audio`, since it at least works, but I'd recommend removing it as well, as absolutely overwhelming majority of video content available has no subtitles and will never have any.\r\n\r\n[Svelte tutorial having invalid fake `<track kind=\"captions\">` for `video` just to make this rule shut up](https://svelte.dev/tutorial/media-elements) just proves this point.\r\n\r\n`<!-- svelte-ignore a11y-media-has-caption -->` is not much of a solution, as most devs will have no idea it's even a thing, and the warning message doesn't mention that option.",
          "createdAt": "2021-02-08T17:26:29Z",
          "author": { "login": "taw", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODMyNzM2OA==",
          "body": "> As a side note, I don't read the warning as suggesting you add an empty `<track kind=\"caption\">` -- it's implied that you add a `src`.\r\n\r\nOnly to someone familiar enough with the `track` tag to begin with. Just a couple days ago, I created https://github.com/sveltejs/svelte/issues/6034 which quotes a developer who broke his app by including `<track kind=\"caption\">` _exactly_.\r\n\r\nFWIW, I like the solution proposed in this issue better than the proposed solution in mine.",
          "createdAt": "2021-03-01T21:57:05Z",
          "author": { "login": "happycollision", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTc1MDc1NQ==",
          "body": "I agree...I followed this direction and put a `<track kind=\"captions\"/>` in my `<audio>` tag and the app completely broke in iOS 14.4 Safari on the iPhone 12 Pro...filed a bug report with webkit and was able to confirm that removing it completely made the app work again...and I am one of those people who had no idea that I needed a src file, to be honest...it was just something I did to make the warning go away...I get wanting to add this to a video with dialog and visual cues, etc...but don't see the value for <audio> tracks, especially instrumentals...I could, of course, be mistaken, as I don't know too much about a11y in general, and am very much willing to learn...but...yeah...seems not super useful for instrumental audio.",
          "createdAt": "2021-03-05T22:23:59Z",
          "author": { "login": "rchrdnsh", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTgxOTQ5Ng==",
          "body": "I opened a PR to remove the warning for audio elements since it's causing the most issues and browsers don't support it. I made sure to note in the PR that it doesn't completely resolve this issue, since there's still some discussion around removing the warning for video elements as well.",
          "createdAt": "2021-03-06T00:53:15Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDIxMzcxMDQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI would like to change some things in child, depending on how often a named slot have been passed from parent to child.\r\n\r\n**Describe the solution you'd like**\r\n$$slots['slotname'] = count: number of passed slots with this name\r\n\r\n**Describe alternatives you've considered**\r\n*How to fetch the count of passed named slots?*\r\n\r\n**How important is this feature to you?**\r\nI would like it =)\r\n\r\nExample:\r\n```svelte\r\n\r\n// Parent:\r\n<template>\r\n    <Child>\r\n        <div slot=\"a\">a</slot>\r\n        <div slot=\"b\">b1</slot>\r\n        <div slot=\"b\">b2</slot>\r\n        <div slot=\"b\">b3</slot>\r\n    </Child>\r\n</template>\r\n\r\n// Child:\r\n<script>\r\n    const countSlotB = $$slots.b;\r\n</script>\r\n<template>\r\n    <slot name=\"a\" />\r\n    <div class=\"special_{countSlotB}\"> <!-- true, instead of 3 :/ -->\r\n        <slot name=\"b\" />\r\n    </div>\r\n</template>\r\n```\r\n",
    "closedAt": "2021-02-05T20:10:27Z",
    "createdAt": "2021-02-05T12:47:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NDI0NjkxMQ==",
          "body": "Just to clarify, you'd like `countSlotB` to contain 3 instead of `true`, right?\r\n\r\nIf that's the case, just use the `use:` directive. See REPL: https://svelte.dev/repl/d46d20299fd64342baebf34aa2a6a6b9?version=3.32.1",
          "createdAt": "2021-02-05T19:40:38Z",
          "author": { "login": "kwangure", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NDI2MTc0Mg==",
          "body": "Really nice, thank you!\r\nCase closed 👍🏻 ",
          "createdAt": "2021-02-05T20:10:27Z",
          "author": { "login": "s0me0ther", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDE2NTUyNDM=",
    "body": "There's a ton of resources covering how to _create_ custom elements with Svelte, but almost nothing on how to _consume_ them. In fact, I can't even get a working example in the REPL of consuming custom elements.\r\n\r\nIt seems there are some lifecycle issues with custom elements rendering inside svelte components (slots not rendering for nested components, actions firing before the custom element has fully loaded, etc.). The only issues I could find we with regards to custom elements created with Svelte not 3rd party ones, so I'm not sure how much they apply.\r\n\r\nBottom line, I just want help figuring out how to create a REPL which consumes custom elements so I can give an example of the wonky behavior I'm experiencing. This is what I have so far, but it's not working.\r\n\r\nhttps://svelte.dev/repl/ba22f88b580e44b9a794005af6c4cb1f?version=3.32.1",
    "closedAt": "2021-02-04T22:09:12Z",
    "createdAt": "2021-02-04T21:39:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MzYzNTY3MA==",
          "body": "Nvm, I figured it out.",
          "createdAt": "2021-02-04T22:09:12Z",
          "author": { "login": "danny-andrews", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDEwNjMyMjY=",
    "body": "I have the following child component.\r\n\r\n```\r\n    <svelte:options tag=\"c-container\" />\r\n    <div>\r\n        <slot name=\"name\"></slot>\r\n    </div>\r\n```\r\n\r\nThis is the parent component, and it works\r\n\r\n```\r\n    <svelte:options tag=\"c-app\" />\r\n    <c-container>\r\n        <div slot=\"name\">My Text For child.</div>\r\n    </c-container>\r\n```\r\n\r\nThis is not working, so looks like the slot needs to be an immediate child element, otherwise doesn't work. \r\n```\r\n    <svelte:options tag=\"c-app\" />\r\n    <c-container>\r\n       <p>\r\n              <div slot=\"name\">My Text For child.</div>\r\n       </p> \r\n    </c-container>\r\n```\r\n\r\nI would suggest on the parent you can define slot anywhere and not in the immediate child element. \r\nI think this would be a good feature if you want to pass the same text from one parent to the child component. \r\n\r\nThis is actually very important, we're trying to render the localized text from server to svelte component.\r\ne.g. the server HTML  looks like following \r\n```\r\n<c-component>\r\n<table>\r\n      <thead>\r\n            <tr>\r\n                  <td slot=\"name\">{{localized text from server side}}</td>\r\n            </tr>\r\n      </thead>\r\n</table>\r\n</c-component>\r\n```\r\n\r\ne.g. this the svelte    \r\n\r\n```\r\n<svelte:options tag=\"c-component\" />\r\n    <div>\r\n       <p>\r\n              <div slot=\"name\">I want to use replace this text from the HTML</div>\r\n       </p> \r\n    </div>\r\n```",
    "closedAt": null,
    "createdAt": "2021-02-04T08:45:05Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MzE3ODc2NQ==",
          "body": "I feel like this is an issue specific to Web Components, am I right?\r\n\r\nAlso it would be useful if you could fill out the issue template and not just delete it. Can you do that please so that we can better look at the issue?",
          "createdAt": "2021-02-04T09:51:03Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDA4NDIyMzY=",
    "body": "I really like Svelte, but it would be great if projects like `language-tools` and `svelte-preprocess` were more actively maintained.\r\n\r\nTo help with that, maybe Svelte could try to get more funding, e.g through Patreon, GitHub Sponsors and adding a funding page to the website.",
    "closedAt": "2021-02-04T01:27:42Z",
    "createdAt": "2021-02-04T01:20:55Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Mjk1NTE2Ng==",
          "body": "Hi @probablykasper - both of the above projects are very actively maintained. I see commits from around 6 hours ago. I'm not sure what your expectations are\r\n\r\nWe have a sponsorship page here https://opencollective.com/svelte which is doing very well, but Svelte is voluntarily maintained, and none of us take payment for doing so (nor want to, since a full time job often becomes a chore).",
          "createdAt": "2021-02-04T01:27:42Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Mjk2Mjg5OA==",
          "body": "@antony Perhaps it's just the bugs I care about which are being ignored. Hopefully at some point their bugs are fixed so that the features I need are usable enough.\r\n\r\nThat's fine, absolutely respect that.",
          "createdAt": "2021-02-04T01:49:47Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Mjk2NDM5OQ==",
          "body": "We're more than happy for the community to chip in and fix bugs - this is far more useful to us (and you) than donations. It's a time consuming and never-ending task.",
          "createdAt": "2021-02-04T01:53:48Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDA4MzA5OTQ=",
    "body": "**Describe the bug**\r\n\r\nInside an `{#each ...}` block, if I pass an `object` (non-primitive) type as a prop to my component, the component receives update events even though that particular object has not changed.\r\n\r\nThis can trigger unnecessary re-rendering, especially as lists grow longer. (O(n))\r\n\r\n\r\n**To Reproduce**\r\n\r\nSee: <https://svelte.dev/repl/e19ff42b67bf419f9c0fa2c586ea9c4c?version=3.32.1>\r\n\r\n**Logs**\r\n\r\nFrom the above example: \r\n\r\n![image](https://user-images.githubusercontent.com/339075/106828921-f5ef3700-663f-11eb-9624-45b19e249619.png)\r\n\r\n(`Item` passes a `number` value, and works as expected. `Item2` passes an `object`.)\r\n\r\n\r\n\r\n**Expected behavior**\r\n\r\nI'd expect Item & Item2 to work the same above.\r\n\r\n\r\n**Stacktraces**\r\n\r\nNone. (n/a?)\r\n\r\n**Information about your Svelte project:**\r\nn/a\r\n\r\n**Severity**\r\n\r\nMy page becomes slower and slower as more content is loaded. Profiling shows that this is due to having to re-process O(n) renders each time a new item is added (O(n)) so now that I think about it I guess that makes this O(n^2) performance penalty that otherwise wouldn't exist.\r\n\r\nI'm passing around a rather complex object to render -- pulling out all of its primitive values and passing them as props directly would be prohibitively code-bloat-y.\r\n\r\n\r\n\r\n**Additional context**\r\n\r\nOriginally reported this [on discord][1]\r\n\r\n[1]: https://discord.com/channels/457912077277855764/457912077277855766/806682732188401705\r\n",
    "closedAt": "2021-02-04T01:05:53Z",
    "createdAt": "2021-02-04T00:55:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Mjk0NTQwNw==",
          "body": "Well, of course I figure it out minutes after writing a bug report. \r\n\r\nhttps://svelte.dev/tutorial/svelte-options\r\n\r\nSvelte can't know whether my `object` has been mutated since the last render, so it's trying to do the right thing and re-render it.  Have to opt-in to the optimization with `<svelte:options immutable/>`.  Sorry about that!",
          "createdAt": "2021-02-04T01:05:38Z",
          "author": { "login": "NfNitLoop", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Mjk1NTQxNw==",
          "body": "Things are so fast now! ❤️ \r\n\r\nTBH, this case resulted in such poor performance, and was so difficult to track down, I really wish `immutable` were the default behavior.  ",
          "createdAt": "2021-02-04T01:28:26Z",
          "author": { "login": "NfNitLoop", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDA2NTc4MzA=",
    "body": "## Is this about svelte@next? No\r\n\r\n**Describe the bug**\r\nI have a store that I am trying to use to fetch my init data.  In my store I have a fetch function that sets a writable store.  In my `App.svelte` I call the fetch function within `onMount` and then grab the store (which should have data after the `onMount `runs). However, when I try to interact with the store data (ie parse it) I am getting undefined for the data.\r\n\r\n**Logs**\r\nIn the svelte REPL console it returns undefined when console logged\r\n\r\n**To Reproduce**\r\nVisit the example below\r\n\r\n**Example**\r\nhttps://svelte.dev/repl/e42fb4ae59c241b090ebdce5160ecb6a?version=3.32.1\r\n\r\n\r\n**Expected behavior**\r\nI expect to pass the data from the store into my components to be parsed and used in my app.\r\n\r\n",
    "closedAt": "2021-02-03T21:26:21Z",
    "createdAt": "2021-02-03T20:03:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MjgzNTI1NA==",
          "body": "The `onMount` function isn't called until after the child component is instantiated (with a `data` prop of `undefined`, because that's the value of the store at that time). You need to write the child component in such a way that it is able to react to its `data` prop changing.",
          "createdAt": "2021-02-03T21:26:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Mjg5MjQ4Mg==",
          "body": "@Conduitry  Thanks for following up!",
          "createdAt": "2021-02-03T23:15:36Z",
          "author": { "login": "lrpatterson", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDA0MjIyNDk=",
    "body": "**Describe the bug**\r\nFound it on relatively complex page, then simplified to minimal reproducive size.\r\n\r\n```\r\n<script>\r\n  let flagLocal = false;\r\n</script>\r\n\r\n<style>\r\n  .check-label-on {\r\n    color: rgb(172, 42, 26);\r\n  }\r\n  .check-label-off {\r\n    color: rgba(0, 0, 0, 0.2);\r\n  }\r\n</style>\r\n\r\n<div><div><div>\r\n  <div>\r\n    <p class=\"{ !flagLocal ? 'check-label-off' : 'check-label-on' }\">CHECKED</p>\r\n    <input type=\"text\" value=\"{ !flagLocal ? 'clear' : 'checked' }\">\r\n  </div>\r\n  <div>\r\n    <input type=\"checkbox\" bind:checked={ flagLocal }>\r\n  </div>\r\n</div></div></div>\r\n```\r\n\r\nFirst time you open the page, you see 'CHECKED' suppressed, 'clear' in input box, and clear checkbox.\r\nIf I click the checkbox, I see 'CHECKED' becomes red, 'checked' appeares in input box, and checkbox becomes checked.\r\nMy browser is configured to re-open tabs on start. Then, if I close my browser and open it again, I see that checkbox is checked, input box contains 'checked', but word 'CHECKED' is suppressed. Moreover, other browser showed 'clear' in input box in the same situation.\r\n\r\n**To Reproduce**\r\nSet your browser to re-open closed tabs on startup.\r\n\r\nGo to repo, clone it, [build and] open public/index.html\r\nhttps://github.com/tim-lansen/svelte-local-variable-bug\r\n\r\nCheck the checkbox on the page\r\n\r\nClose and launch browser again\r\n\r\n**Expected behavior**\r\nCheckbox should be cleared, 'CHECKED' should be suppressed, and input box should contain word 'clear'.\r\n\r\n**Information about your Svelte project:**\r\n```\r\n  System:\r\n    OS: Windows 10 10.0.19041\r\n    CPU: (48) x64 Genuine Intel(R) CPU 0000 @ 2.20GHz\r\n    Memory: 52.94 GB / 63.88 GB\r\n  Binaries:\r\n    Node: 15.7.0 - c:\\git\\django-svelte\\venv\\Scripts\\node.EXE\r\n    npm: 7.4.3 - c:\\git\\django-svelte\\venv\\Scripts\\npm.CMD\r\n  Browsers:\r\n    Edge: Spartan (44.19041.423.0), Chromium (88.0.705.56)\r\n    Internet Explorer: 11.0.19041.1\r\n  npmPackages:\r\n    svelte: ^3.0.0 => 3.32.1\r\n    webpack: ^4.30.0 => 4.46.0\r\n```\r\n\r\n**Severity**\r\nIt's really annoying because it has unpredictable behavour, i cannot be sure if i even have initialized or not a local variable (it seems that variable is initialized, but dependent elements are not always updated).\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-02-03T15:12:03Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MjYyNzcwMg==",
          "body": "@tim-lansen Svelte doesn't support IE 11 or Legacy Edge. I assume that you are able to reproduce this in a current browser\r\n\r\nI assume that your browser is trying to repopulate input fields which were populated last time your tab was open, and doing a poor job of it (probably due to the fact that they are rendered via javascript. This isn't something we have control over.\r\n\r\nI also recommend you should look into the `class:` directive rather than class string concatenation as you are doing.\r\n\r\nI don't think this is a bug in Svelte.\r\n\r\nIf you think that it is, then a REPL example would be the best way to demonstrate the issue.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-02-03T16:13:37Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDAxOTgzMDI=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIn #5847 I expressed the concern that people might want to use module variables inside reactive statements, knowing that reactivity will not be triggered on changes to them. This means it should be possible to silence the warning.\r\n\r\n**Describe the solution you'd like**\r\n`<!-- svelte-ignore module-script-reactive-declaration -->` at the top of the component or `// svelte-ignore module-script-reactive-declaration` should silence the warning\r\n\r\n**How important is this feature to you?**\r\nNice to have to not have this warning make unnecessary noise\r\n\r\n**Workaround in the meantime**\r\nYou can globally silence this. For `svelte-check`, do `--compiler-warnings \"module-script-reactive-declaration:ignore\"`. [A similar option](https://github.com/sveltejs/language-tools/tree/master/packages/svelte-vscode#sveltepluginsveltecompilerwarnings) is available for the VS Code extension. \r\n",
    "closedAt": null,
    "createdAt": "2021-02-03T10:36:37Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mjg0Mjk3OQ==",
          "body": "IMHO, just don't warn on `const` would be really helpful.",
          "createdAt": "2021-02-21T11:36:30Z",
          "author": { "login": "ribizli", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDU4NTcwNA==",
          "body": "And functions too",
          "createdAt": "2021-02-23T23:21:15Z",
          "author": { "login": "lights0123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTEzNDQzNw==",
          "body": "Agree. I'm exporting a const to use the value in other modules, and that's causing this warning too. I suppose workarounds are to make this a readable store (which seems a lot heavier than just exporting a const), or creating a constants.js file that gets imported in multiple places.",
          "createdAt": "2021-03-05T03:57:38Z",
          "author": { "login": "natemartinsf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjExNjA4NA==",
          "body": "I don't see the point of this warning. A warning should be emitted if the code can be improved or if something is wrong.\r\nHere, there is nothing to do but stop using scripts module.\r\n\r\nThis warning sounds like \"read the doc\". ",
          "createdAt": "2021-04-01T19:15:16Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU4MDAxMDU5NTg=",
    "body": "**Describe the bug**\r\nAfter a transition has already been triggered, changing the delay of a transition does not take effect until after the transition has been triggered at least once.\r\n\r\n**To Reproduce**\r\nREPL: https://svelte.dev/repl/48114260160b40d7bcb2f0d2dc148eb6?version=3.32.1\r\n\r\n1. Click `Menu` several times to toggle the default transition.\r\n**IMPORTANT:** The bug requires triggering the transition at least once before the delay is cached.\r\n2. Click `Set Delay to 1s`, the `delay` variable is now set to `1000`.\r\n3. Click `Menu` to toggle the transition, delay has not taken effect.\r\n4. Click `Menu` to toggle the transition, delay now takes effect.\r\n5. Click `Set Delay to 0`, the `delay` variable is now set to `0`.\r\n6. Click `Menu` to toggle the transition, 1s delay still applies.\r\n7. Click `Menu` to toggle the transition, delay is now updated.\r\n\r\n**Expected behavior**\r\nI expect the delay to apply immediately, or at least applied after I do `await tick()`.\r\n\r\n**Information about your Svelte project:**\r\nSvelte: 3.32.1\r\nTested Browsers:\r\n- Edge: Chromium (88.0.705.50)\r\n- Chrome: 88.0.4324.104\r\n- Firefox Dev: 86.0b5 (64-bit)\r\n\r\n**Severity**\r\nLow\r\n",
    "closedAt": null,
    "createdAt": "2021-02-03T08:40:37Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MjYxNDg2MA==",
          "body": "Possibly related to #5736? In that issue, the CSS transform was cached and not updated until after the next run.\r\n\r\nAs with that issue, using `in` and `out` instead of the `transition` shorthand causes the delay to be updated immediately, though it is annoying to duplicate the parameters.\r\n\r\n```html\r\n<nav in:fly={{\r\n\tx: -100,\r\n\tdelay,\r\n}} out:fly={{\r\n\tx: -100,\r\n\tdelay,\r\n}}>\r\n```",
          "createdAt": "2021-02-03T15:56:15Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTk2NDU2Njc=",
    "body": "<img width=\"1440\" alt=\"Screenshot 2021-02-03 at 1 42 29 AM\" src=\"https://user-images.githubusercontent.com/56549294/106657272-d6192e00-65c1-11eb-89d1-2e6ce2fe0325.png\">\r\nSteps to regenerate the issue:\r\nopen this url \"https://svelte.dev/tutorial/slot-props\"",
    "closedAt": "2021-02-02T20:52:19Z",
    "createdAt": "2021-02-02T20:16:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTk1Mzc2Mg==",
          "body": "Steps to regenerate the issue:\r\n- open this [Link](https://svelte.dev/tutorial/slot-props)\r\n\r\n\r\nhttps://user-images.githubusercontent.com/56549294/106657553-2e503000-65c2-11eb-95a1-b66b49c194fa.mov",
          "createdAt": "2021-02-02T20:21:42Z",
          "author": { "login": "ArshdeepSahni", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTk3NTc5Ng==",
          "body": "You need to follow the directions on the left side of the screen to complete each step of the tutorial. It's intended that they not initially work.",
          "createdAt": "2021-02-02T20:52:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTkxNzQ3MDc=",
    "body": "## Description\r\nWhen I use Material Web Components with Svelte, attributes without value are discarded and thus result in incorrectly styled element. I guess because they are unknown attributes so the default value for them is `undefined` and thus were removed under the rule \"no nullish\". Is there a way to keep these attributes as-is, or I have to wrap them inside Svelte component and export the boolean properties corresponding to these attributes?\r\n\r\n## How to reproduce\r\n```sh\r\nnpx degit sveltejs/template example-project\r\ncd example-project\r\nnpm i\r\nnpm add svelte@latest\r\nnpm add @material/mwc-button\r\n```\r\n\r\nChange the content of `App.svelte` to\r\n```svelte\r\n<script>\r\n  import '@material/mwc-button';\r\n</script>\r\n\r\n<main>\r\n  <mwc-button raised label=\"Hello\"/>\r\n  <mwc-button raised=y label=\"Hello\"/>\r\n</main>\r\n```\r\nthen run with\r\n\r\n```sh\r\nnpm run dev\r\n```\r\n\r\n### Other information\r\n- Svelte version: 3.32.1\r\n- I use Rollup (from the project template)",
    "closedAt": "2021-04-30T15:48:27Z",
    "createdAt": "2021-02-02T11:02:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTc2OTYyMw==",
          "body": "I reproed the issue in a REPL here: https://svelte.dev/repl/8de59adf20e2424d8124cd9f6a2ff700?version=3.32.1. \r\n\r\nI've also noticed this issue in the past with other custom element libraries. When in a Svelte context, you have to set boolean attributes on custom elements to a truthy value (e.g. `<mwc-button raised=true>`) to get them to apply. In a raw HTML context (e.g. the MWC [demo page](https://material-components.github.io/material-components-web-components/demos/button/)), you can simply add the attribute without setting a value (`<mwc-button raised>`).\r\n\r\nThis doesn't happen with native HTML elements -- `<button disabled>` works just fine inside of Svelte.",
          "createdAt": "2021-02-02T16:36:22Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDIyMDE1Mg==",
          "body": "This should be fixed now in 3.38.0.",
          "createdAt": "2021-04-30T16:42:55Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTkxMTQxNDE=",
    "body": "Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\nNo\r\n\r\n**Describe the bug**\r\nWhen using the `{#key }` clause, the local transitions do not work well.\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/f20a688175914fb2a0f5ff45a75360b5?version=3.32.1\r\n\r\n**Expected behavior**\r\nIn the provided REPL, the expected behavior is for the items to enter and exit in a smooth manner, with or without local modifier. It only happens with the keyed clause, and works well with an `{#each }` clause: https://svelte.dev/repl/b0c3bafb93a6463d81e846d30f80f5ba?version=3.32.1\r\n\r\n**Information about your Svelte project:**\r\n\r\nThe REPL uses Svelte 3.32.1. Reproduced on Safari 14.0.2 and Chrome 88 on OSX 11.1\r\n\r\n**Severity**\r\nIt prevents me from using local transitions in an image carousel: https://strollyn.com/explore . I'd like the transition not to run when mounting or changing page.\r\nSome workarounds are possible (using scroll for the carrousel maybe), but the severity is not that large\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-02-02T09:45:21Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTg4MDI5MzY=",
    "body": "**Describe the bug**\r\nWhen a reactive assignment in a child component try to update a value bound with \"bind\" directive, and its parent try to update the same value in a \"conflicting\" reactive assignment. The value in the parent end up to be different from the one in the child component.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/71e978db32d34e25918ed2d196768ea5?version=3.32.1\r\n\r\n**Expected behavior**\r\nMaybe the best result would be to try keep update the child value with the one set by the parent paying attention that this would lead to execute the reactive declaration in the child (Imagine i would set `counter` to `2` from the parent in my example) and that would bring us a in loop.\r\nI mean, in this case probably to get and infinite loop is more correct than getting two different values.\r\nIn order to prevent infinite loop Svelte may keep track of the cause of the execution of a reactive declaration (or any other reactive expression) and throw an error if it detects cyclical updates.\r\n\r\n**Severity**\r\nIt's not a bad issue. I think you are likely to encounter this issue when in a child you use reactive assignments to check a bad input value and try to fix it.\r\n",
    "closedAt": null,
    "createdAt": "2021-02-01T23:53:01Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTg2MDE4NjY=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm hoping this isn't particularly difficult to do, here's a particular problem pattern:\r\n```html\r\n<script>\r\n    import { onMount } from 'svelte';\r\n    let return_value;\r\n    async function click_handler() {\r\n        const response = await fetch('/api', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: {\r\n                command: 'create_schema',\r\n                schema: 'some_table_name',\r\n                options: {\r\n                    id: {\r\n                        type: \"Sequelize.INTEGER\",\r\n                        primaryKey: true,\r\n                        autoIncrement: true\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        const response_json = await response.json();\r\n        console.log(response_json);\r\n        return_value = response_json.value;\r\n    }\r\n</script>\r\n\r\n<div>\r\n    <button on:click={click_handler}>fetch request</button>\r\n    {typeof return_value !== \"undefined\" ? return_value : \"...\"}\r\n</div>\r\n```\r\nAssume a functioning handler for /api which may return anything*. If you attempt to work with this, you'll get a particularly nasty looking error.\r\n```\r\n(node:314248) UnhandledPromiseRejectionWarning: SyntaxError: Unexpected token o in JSON at position 1\r\n    at JSON.parse (<anonymous>)\r\n    at get_json (C:\\Users\\~\\node_modules\\@sveltejs\\app-utils\\http\\index.mjs:105:14)\r\n    at runMicrotasks (<anonymous>)\r\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)\r\n    at C:\\Users\\~\\node_modules\\@sveltejs\\kit\\src\\api\\dev\\index.js:170:18\r\n(node:314248) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 17)\r\n```\r\nThe solution to this error message is make sure to JSON.stringify the body key. Which isn't necessarily obvious from the message. Fetch expects body to be a string, so it's processed by a corresponding JSON.parse call. If you forget to stringify, looking at that error, you're probably at a complete loss as to what's gone wrong.\r\n```html\r\n<script>\r\n    import { onMount } from 'svelte';\r\n    let return_value;\r\n    async function click_handler() {\r\n        const response = await fetch('/api', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                command: 'create_schema',\r\n                schema: 'some_table_name',\r\n                options: {\r\n                    id: {\r\n                        type: \"Sequelize.INTEGER\",\r\n                        primaryKey: true,\r\n                        autoIncrement: true\r\n                    }\r\n                }\r\n            })\r\n        });\r\n        const response_json = await response.json();\r\n        console.log(response_json);\r\n        return_value = response_json.value;\r\n    }\r\n</script>\r\n\r\n<div>\r\n    <button on:click={click_handler}>fetch request</button>\r\n    {typeof return_value !== \"undefined\" ? return_value : \"...\"}\r\n</div>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nIf at all possible in the svelte compiler, pick up on this pattern and issue a message with the solution. I'm not familiar with the compiler's internals yet, but error almost reads to me as though there was some form of issue parsing the fetch call? Which may be a good sign that this might be possible to pick up on statically.\r\n\r\n**Describe alternatives you've considered**\r\nI'm not entirely sure since I'm coming back around to web development, this seems to be a simple enough pattern that I could almost expect a linter or some other tool to recognize this pattern. If there is an existing thing which handles these types of things for javascript I'd love to know about it. Seems a good fit to tackle with a compiler.\r\n\r\n**How important is this feature to you?**\r\nOne of the most frustrating things as a developer is an error message that leads you down a wild goose chase, especially if the error is somewhat disconnected from it's actual cause. In this case I noticed that I had forgotten to stringify without necessarily trying to solve that error, this could've easily been an incredible amount of time spent trying to debug, if possible I'd like to save someone that headache in the future. Often as developers we become a bit acquainted with bizarre error message patterns that point to problems \"elsewhere\".\r\n\r\n**Additional context**\r\nNothing more to add.\r\n",
    "closedAt": "2021-02-02T14:37:07Z",
    "createdAt": "2021-02-01T18:26:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTI1NTc5Mg==",
          "body": "I agree that error messages - of all kinds - can be improved. That being said, this is not Svelte related at all.",
          "createdAt": "2021-02-02T00:25:52Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTY3ODY5MQ==",
          "body": "This seems well outside the realm of responsibility for Svelte to me. It's not the compiler's job to know about how various browser globals should be called. This feels like a TypeScript typechecking concern. Hopefully the types for `fetch` would indicate that `body` can't be an arbitrary object, and if you'd configured your project and your editor correctly, you'd get errors about this that way.",
          "createdAt": "2021-02-02T14:37:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTk2ODU3MA==",
          "body": "Well, I'm an older web dev coming back around to this, so to find a \"compiler\" that isn't type-checking is definitely strange. I think it would be well within how a compiler could work since they're usually the program responsible for type-checking. But I guess it is partially confusing since you have the node vs browser issue, you'd have to aware of both to bother to do this, or maybe at best you could issue a warning. If \"typescript\" can handle this I'd have to wonder if it couldn't be that these functions get treated as typescript. There is a particular reason I stopped bothering with web development ages ago, the ability for anyone at any time to swap out any variable for anything is definitely great, but also a complete and utter mess for development. That's on javascript, I left before typescript really picked up, but it definitely seems as though a compiler, with knowledge about how functions are specified, could do type checking, at least here, it would be to check that what's passed in was not an \"Object\" but a string.",
          "createdAt": "2021-02-02T20:41:45Z",
          "author": { "login": "Andersama", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MzA4ODc2NQ==",
          "body": "Your original post asked for tools to remedy these sort of issues. Typescript is what you're looking for. You can use typescript with Svelte. Depending on which editor you use, chances are high that you can also set up your editor to work with typescript in svelte files to automatically give you, in editor, error messages about these things. Unfortunately at this point there's no \"official\" Svelte site or resource that will give you all the details, you'll have to look around.",
          "createdAt": "2021-02-04T07:14:48Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTkwNTY5OTg=",
    "body": "The following code will print `{y: \"value\", x: \"value\"}` in the browser console if you run it in the REPL or on Sapper client side, but running it on the server side in Sapper will result in `{ y: undefined, x: 'value' }`.\r\n\r\nThe difference between `x` and `y` is only the assignment to the variable happening separately from the definition.\r\n\r\nThis feels like bug because:\r\n * it's not obvious why the store should ever be `undefined` if it's assigned an initial value\r\n * i would not expect splitting variable declaration and assignment into two to make any difference in how the code executes\r\n\r\n...but it's of course possible this is intended behavior :D In that case I'd be curious as to why this happens.\r\n\r\nI reported it in Sapper because I can only produce the issue in Sapper, but it might be a Svelte core issue.\r\n\r\n```\r\n<script>\r\n  import { readable } from \"svelte/store\";\r\n\r\n  let x = readable('value', () => {});\r\n\r\n  let y;\r\n  y = readable('value', () => {});\r\n  \r\n  console.log({y: $y, x: $x})\r\n</script>\r\n```\r\n\r\n**Information about your Sapper Installation:**\r\n\r\n```  \r\n  System:\r\n    OS: macOS 10.15.2\r\n  Binaries:\r\n    Node: 14.4.0 - ~/.nvm/versions/node/v14.4.0/bin/node\r\n    Yarn: 1.22.4 - /usr/local/bin/yarn\r\n    npm: 6.14.5 - ~/.nvm/versions/node/v14.4.0/bin/npm\r\n  Browsers:\r\n    Chrome: 88.0.4324.96\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.34.2 \r\n    sapper: ^0.28.0 => 0.28.10 \r\n    svelte: ^3.17.3 => 3.31.0 \r\n```\r\n\r\n**Severity**\r\nModerate. I have a template looking something like\r\n\r\n```\r\n  let favorites\r\n\r\n  $: {\r\n    favorites = getFavoriteProducts(); /* a store */\r\n  }\r\n```\r\n\r\nwhich won't work due to the above. The following does work but results in duplicate creation of the store\r\n\r\n```\r\n  let favorites = getFavoriteProducts()\r\n\r\n  $: {\r\n    favorites = getFavoriteProducts();\r\n  }\r\n```\r\n\r\n(`$: favorites = getFavoriteProducts();` would work but I can't do that either because I get a different error if I reference it in a separate reactive block)\r\n\r\n",
    "closedAt": "2021-06-22T06:50:04Z",
    "createdAt": "2021-02-01T15:24:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTE0OTQwMg==",
          "body": "I don't believe this is a bug, and it's not unique to Sapper either. This is simply how reactivity works in Svelte.\r\n\r\n`$:` only triggers an update if the parameters of `getFavoriteProducts()` is changed. Since your function does not take any parameters Svelte does not trigger an update, so that is why you are seeing favorites be undefined - you never defined it in the first place.\r\n\r\nI believe what you are looking for in your case isn't to use `$:` but to instead use the `onMount` export from Svelte. This always runs when the component is created:\r\n\r\n```js\r\nimport { onMount } from \"svelte\";\r\n\r\nlet favorites;\r\n\r\nonMount(() => {\r\n  favorites = getFavoriteProducts();\r\n});\r\n```",
          "createdAt": "2021-02-01T20:51:36Z",
          "author": { "login": "c-bandy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTE1Mjg5OA==",
          "body": "Additionally - may I ask why you are creating the store in a reactive statement instead of immediately?\r\n\r\nI think just this should be enough, unless you have some special requirement.\r\n\r\n```js\r\nlet favorites = getFavoriteProducts();\r\n```",
          "createdAt": "2021-02-01T20:57:50Z",
          "author": { "login": "c-bandy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTQzMTQwOA==",
          "body": "@c-bandy Thanks for commenting. The (pseudo) code I left under \"Severity\" only serves to illustrate why there is a need to have the variable declaration separate from the assignment, it's not the actual issue. The actual issue is the first code block. That code does not contain any `$:` blocks. \r\n\r\nAnd, yes, `getFavoriteProducts` takes parameters, I just didn't want to clutter the issue. I'm sure there are workarounds, but the the crux is: the code behaves differently on the server and on the client, which seems unlikely to be intended.",
          "createdAt": "2021-02-02T07:32:12Z",
          "author": { "login": "ehrencrona", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzEyODU1Ng==",
          "body": "I believe this is fixed in v3.31.2 by https://github.com/sveltejs/svelte/pull/5419",
          "createdAt": "2021-02-11T00:19:01Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTgwMTE2NTE=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\nNo\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n:host > div\r\n\r\nstyles are incorrectly flagged by Svelte as being unused, and removed.\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\nREPL: https://svelte.dev/repl/a3e9faaa04fb41b9a8eda898c92d088d?version=3.32.1\r\n\r\nYou may need to manually toggle the `customElement` option - it doesn't seem to stick for me - not sure what I'm doing wrong. \r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nStyle rules should not be removed.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\nChrome\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nMac\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\nMost recent\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nwebpack - see below\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nSevere \r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\n\r\nWhat's weird is, with my own setup, with webpack, `:host > *` is NOT removed, but in the repl, even that is removed. To be clear though, none of these rules should be removed. `:host > (selector that matches top-level element in the component)` is perfectly valid.\r\n\r\nThe best workaround would be any way to just shut off all of Svelte's removal of what it perceives as unused selectors. This is crucial for custom element work since it seems the :global helper is completely ignored. \r\n\r\nI should add that, with this repl, `:host > h1` could easily be replaced with just `h1 { }`, or with an added css class to disambiguate from other h1's in the component. But this workaround becomes impossible when you need to add selectors to the `:host` query, ie\r\n\r\n`:host([some-attr]) > div { }`\r\n",
    "closedAt": "2021-02-08T16:26:47Z",
    "createdAt": "2021-02-01T06:26:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTM5MTczNA==",
          "body": "This should be fixed now in 3.32.2.",
          "createdAt": "2021-02-08T19:36:24Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTQ0NjI4Nw==",
          "body": "@Conduitry woot woot - thanks! And thanks to @tanhauhau! ",
          "createdAt": "2021-02-08T20:44:21Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTc2MzE4NzE=",
    "body": "there are many reasons to load an external js script (like stripe, mapbox, gpt tag, ... scripts), rather than bundle it with one's own code,\r\n\r\nhttps://www.nielsvandermolen.com/external-javascript-sveltejs/\r\n\r\nsomething like this indeed works in Svelte REPL but seems doing nothing in Sapper, I copied this sample code https://svelte.dev/repl/28f4b2e36e4244b8b23cae3d584c4c88?version=3.16.6 to an exactly same page in Sapper, the `on:load={initializeRemarkable}` is not called\r\n\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/remarkable/2.0.0/remarkable.min.js\" on:load={initializeRemarkable}></script>\r\n",
    "closedAt": null,
    "createdAt": "2021-01-31T06:10:11Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDMzNTAzNQ==",
          "body": "By looking at generated code in above REPL example at where it append the external script to `document.head`,  I suspect this is an Svelte issue rather than only Sapper issue;\r\n\r\n```js\r\n    m: async function mount(target, anchor) {\t// changed to async for the wait-a-sec\r\n    \tappend_dev(document.head, script);\r\n\r\n\t// if add wait a sec here (to simulate some delay) before attach the 'load' event listener,\r\n\t//   then the script is almost sure finished loading and the initializeRemarkable listener will NOT get called\r\n\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    \t// ... omitted many lines here\r\n\r\n    \tif (!mounted) {\r\n    \t\tdispose = [\r\n    \t\t\tlisten_dev(script, \"load\", /*initializeRemarkable*/ ctx[2], false, false, false),\r\n    \t\t\tlisten_dev(textarea, \"input\", /*textarea_input_handler*/ ctx[3])\r\n    \t\t];\r\n   \t\tmounted = true;\r\n    \t}\r\n    },\r\n```\r\n\r\ncompare with a normal vanilla js of loading an external js tag on the fly (below), it needs to attach the `onload` listener before append to the DOM;  if not this order, then it's.a racing issue, there might be a delay between and then that link might be loaded very fast before the `onload` listener attached, then the `onload` listener will NOT get called;\r\n\r\n```js\r\nconst script = document.createElement('script');\r\nscript.scr = 'https://cdnjs.cloudflare.com/ajax/libs/remarkable/2.0.0/remarkable.min.js';\r\nscript.onload = function() { ... }\t// or .attachEventListener('load', function() { ... })\r\ndocument.head.appendChild(script);\r\n```\r\n\r\nSo I believe this Svelte generated code for `on:load` needs to change order to before `append_dev(document.head, script);` ?",
          "createdAt": "2021-01-31T06:29:51Z",
          "author": { "login": "t829702", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3Mzc2ODQ2Nw==",
          "body": "@Conduitry this isn't only a question but can also be a bug report?  I believe the attaching 'load' event too late after mounted to the DOM could be root cause of the problem",
          "createdAt": "2021-02-05T03:50:21Z",
          "author": { "login": "t829702", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MzgzNTM1NQ==",
          "body": "Technically speaking, I'd say it's a bug, yes.\r\n\r\nIt may be very unlikely to happen, given that the time it takes to request the source script, is probably a lot longer than the time it takes to reach the point in the mount function where the 'load' handler is attached... but then again, what do I know about the browser's and scripts intricacies. If we insist on not marking this is a bug, we should at least be very, very certain that this racy bug is extremely unlikely to happen - but it's probably a lot easier to just fix the code generation to correctly add the event listener before appending the script to the DOM.",
          "createdAt": "2021-02-05T06:55:59Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3ODcxMjExOA==",
          "body": "I believe #5988 may be a similar race condition of `load` event on external resources?",
          "createdAt": "2021-02-14T02:40:26Z",
          "author": { "login": "t829702", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTExODA1MA==",
          "body": "it's weird seems no one from core maintainer want to have a look? even with PR #5968 available from @Phaqui (Thanks to @Phaqui !)\r\n /cc @antony who responded on #5988 which makes me believe there are multiple race condition problems exist in Svelte",
          "createdAt": "2021-02-18T07:26:27Z",
          "author": { "login": "t829702", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTE5MjUwNg==",
          "body": "@t829702 I'm not sure what your notion of the Svelte SLA is, but far from not wanting to have a look, we have a lot on our plate as well as full time jobs, and we simply haven't got around to looking at this yet. Feel free to do your own investigation and come up with a solution for it if there is an issue, but don't expect us to be able to jump on every single issue immediately.\r\n\r\nSkimming the issue briefly, I'm going to say a delay in script load and execution has nothing to do with Svelte nor is it an issue, it's just the nature of Javascript and the way browsers work. This is the specific reason I created https://github.com/beyonk-adventures/async-script-loader - which is based off something I found in React, as a workaround for the exact same issue there.\r\n\r\nYou can't guarantee the load execution time of scripts without holding up the page load, which is bad - so you simply trigger your execution based on when a script is \"ready\". Have a look.",
          "createdAt": "2021-02-18T09:01:42Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNjM3MzAwNA==",
          "body": "> based on when a script is \"ready\".\r\n\r\n```\r\nscript.onload = function() { ... }\t// or .attachEventListener('load', function() { ... })\r\n```",
          "createdAt": "2021-03-25T05:23:46Z",
          "author": { "login": "t829702", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTcxNzUzNjk=",
    "body": "As discussed in https://github.com/sveltejs/svelte/pull/5926#discussion_r565215770, I'm already working on this and should hopefully have a PR up soon.\r\n\r\nSvelte generates update code when a `class:` expression is dependent on a module variable but this shouldn't happen. The [docs say](https://svelte.dev/docs#script_context_module):\r\n\r\n> Variables defined in module scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update.\r\n\r\n# Test Case\r\nhttps://svelte.dev/repl/ca93007e0e03454fbeda66bd6e2a6b9b?version=3.32.1\r\nIf you click the button, you'll see that `o` is not reactive (because it's a module var). But if you look at the JS output you'll see the component's update code isn't a `noop` like it should be, instead it's:\r\n\r\n```js\r\np(ctx, [dirty]) {\r\n  if (dirty & /*o*/ 0) set_data(t0, o);\r\n  \r\n  if (dirty & /*o*/ 0) {\r\n    toggle_class(div, \"test\", o);\r\n  }\r\n},\r\n```\r\n\r\n# Cause\r\nI'm pretty sure that this is because `is_dynamic` returns `true` for the module var. I'm looking into whether changing that behavior will break anything though.",
    "closedAt": null,
    "createdAt": "2021-01-29T20:33:18Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTcwMTAzNTY=",
    "body": "Low priority, no impact on production.\r\n\r\nIn this example:\r\nhttps://svelte.dev/examples#bar-chart\r\n\r\nIf you change `padding.top` or `padding.bottom` (particularly when they are not equal), the chart will be drawn incorrectly.\r\n\r\nTo reproduce, set `padding.top = 60`, and see the following results:\r\n\r\n![image](https://user-images.githubusercontent.com/285421/106298936-77b02080-624c-11eb-96e5-490dc53e486d.png)\r\n\r\nMy fixes are to remove all references to padding.top / padding.bottom in the SVG rendering code, since these have already been taken into account in the yScale function.  \r\n\r\nSo replace:\r\n\r\n```\r\n  <!-- y axis -->\r\n  <g class=\"axis y-axis\" transform=\"translate(0,{padding.top})\">\r\n\t  {#each yTicks as tick}\r\n\t\t  <g class=\"tick tick-{tick}\" transform=\"translate(0, {yScale(tick) - padding.bottom})\">\r\n```\r\n\r\nWith:\r\n\r\n```\r\n  <!-- y axis -->\r\n  <g class=\"axis y-axis\">\r\n\t   {#each yTicks as tick}\r\n\t\t  <g class=\"tick tick-{tick}\" transform=\"translate(0, {yScale(tick)})\">\r\n```\r\n\r\nand replace:\r\n```\r\nline 113:\t\t\theight=\"{height - padding.bottom - yScale(point.birthrate)}\"\r\n```\r\n\r\nwith:\r\n```\r\nline 113:\t\t\theight=\"{yScale(0) - yScale(point.birthrate)}\"\r\n```\r\n\r\nThis results in the following correct rendering:\r\n![image](https://user-images.githubusercontent.com/285421/106299775-83e8ad80-624d-11eb-9b12-83369a22b933.png)\r\n",
    "closedAt": null,
    "createdAt": "2021-01-29T16:20:12Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDM2MTYzNw==",
          "body": "Just stumbled upon this while reading the docs, @davedawkins – are you going to put together a pull request or could I pick this up?",
          "createdAt": "2021-01-31T10:42:37Z",
          "author": { "login": "basilesimon", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDM4Mjc2Mw==",
          "body": "Sure, I can put together a PR if that would help - it’s good practise, I’m fairly new to git. I should be able to do that later today. Does that work for you?  If you want to pick it up yourself, that’s fine too. I’ll check back in later",
          "createdAt": "2021-01-31T13:28:56Z",
          "author": { "login": "davedawkins", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDM4MzgxMA==",
          "body": "@davedawkins haha, go for it if you've got time 😀\r\nI'll find something else to pick up 😉",
          "createdAt": "2021-01-31T13:37:16Z",
          "author": { "login": "basilesimon", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDQwMjE3NA==",
          "body": "Tis done\r\nhttps://github.com/sveltejs/svelte/pull/5945",
          "createdAt": "2021-01-31T15:45:34Z",
          "author": { "login": "davedawkins", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTUzMzg3NDc=",
    "body": "Don't think this is a \"Large new feature\" so maybe it fits to just post it here.\r\n\r\n_A clear and concise description of what the problem is. For example: I'm always frustrated when [...]_\r\n\r\nWell not frustrated, but when you are using a library like Svelte that makes everything feel like just writing plain Vanilla JS when it comes down to Arrays and you notice Svelte can't handle a simple array.push() it makes you think...\r\nIf Svelte compiles whatever we write to make it work why can't Svelte detect those Array methods and do whatever it needs to do to make it work.\r\n\r\nIn other words, where I would write:\r\n\r\n```js\r\nlet data = [\"Svelte\", \"is\", \"great\"];\r\ndata.push(\"until this happens\");\r\n```\r\n\r\nAnd that doesn't work. And we have to write something like:\r\n\r\n```js\r\nlet data = [\"Svelte\", \"is\", \"great\"];\r\ndata[data.length] = \"until this happens\";\r\n```\r\n\r\nOr something like:\r\n\r\n```js\r\nlet data = [\"Svelte\", \"is\", \"great\"];\r\ndata = [...data, \"until this happens\"];\r\n```\r\n\r\nOr like:\r\n\r\n```js\r\nlet data = [\"Svelte\", \"is\", \"great\"];\r\ndata.push(\"until this happens\");\r\ndata = data;\r\n```\r\n\r\nSo my point would be...\r\n\r\n**Describe the solution you'd like**\r\nBeen Svelte a compiler, why can't it do that for me? What limits Svelte on looking for push methods and do the magic for us, after all that's what the library is for right? To make us write less?\r\n\r\nCan't Svelte \"add\" at compile time things like `data = data;` wherever it sees methods that modify arrays, like push, pop, shift, unshift, splice and so on.\r\n\r\n**Describe alternatives you've considered**\r\nDon't think there is a workaround for this, so no alternatives.\r\n\r\n**How important is this feature to you?**\r\nWell this would be really important. Negating developers the ease of using array methods (Well not really negating but make them write more for simple Vanilla methods to work) is not in line with Svelte (At least in my honest opinion) \r\nThis is when libraries/frameworks make you think... \"Wait a second... what the hell?... Why???\"\r\n\r\n\r\n",
    "closedAt": "2021-01-27T18:36:11Z",
    "createdAt": "2021-01-27T18:23:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODQ4ODQwMw==",
          "body": "Some of the reasons are discussed here: https://github.com/sveltejs/svelte/issues/3211\r\n\r\nWe have had this discussion / issue raised a lot in the past, and I think the short answer is, the amount of cases we'd have to catch in order to find a deeply nested mutation such as a push or new property, means that we'd never have a 100% working solution, which just results in bugs.\r\n\r\nSo we've found that it's better to not go down that path, and have a clear line on what does work, and what doesn't, and leave it at that.",
          "createdAt": "2021-01-27T18:36:11Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTUxMTY1NTA=",
    "body": "**Describe the bug**\r\nWhen doing the following:\r\n```html\r\n<svelte:head>\r\n    {@html css}\r\n</svelte:head>\r\n```\r\nwhere `css` is a variable encased with `<style>`, svelte puts the entirety of the body inside the `<head>` tag.\r\n\r\n**Logs**\r\nNothing of significance is reported in the server and browser logs. \r\n\r\n**To Reproduce**\r\nTo reproduce this bug, go to <https://github.com/mscofield0/svelte-head-bug> and clone it:\r\n`git clone https://github.com/mscofield0/svelte-head-bug.git`\r\n\r\n**Expected behavior**\r\nI expect the style to be injected in the head and that the contents of the `<body` tag remain in the `<body>` tag.\r\n\r\n**Information about your Svelte project:**\r\nHappens on all major browsers (Firefox, Firefox Developer Edition, Chromium), \r\n\r\n**Severity**\r\nIt is a mistake on behalf of the user most likely.\r\n",
    "closedAt": "2021-01-27T13:50:44Z",
    "createdAt": "2021-01-27T13:48:14Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODI5ODE2OQ==",
          "body": "The problem is that the embedded HTML does not close a tag. In the sscce example in the report, the user did not terminate his `<style>` tag in the dynamically generated CSS.",
          "createdAt": "2021-01-27T13:50:44Z",
          "author": { "login": "mscofield0", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTQ4NjQyNjQ=",
    "body": "## I find this bug just in testing in svelte.dev\r\n\r\n**Describe the bug**\r\nThis code does not show \"Hello Hello world!\" after 1.5 seconds in expect:\r\n```\r\n<script>\r\n\tlet name = 'world';\r\n\tsetTimeout(() => {\r\n\t\tname = 'Hello world!'\r\n\t}, 1500)\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n```\r\nMaybe diff function is not work in expect?\r\n\r\nI'm new to svelte, maybe this is just a feature ?",
    "closedAt": null,
    "createdAt": "2021-01-27T07:55:54Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODEyNTc0MA==",
          "body": "Interesting find. I can reproduce this. But as soon as I modify the `h1` text once (for adding `foo`), it starts working. Digging further, it seems that the view is not updated if the text before the update is the same as the text that is updated.\r\n`h1`-content before update: `Hello world!`\r\nUpdate to name: also `Hello world!`\r\n-> no change\r\n",
          "createdAt": "2021-01-27T08:36:24Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODE0NzgzMg==",
          "body": "this is a regression caused by this: https://github.com/sveltejs/svelte/pull/5028\r\n\r\nwhich was introduced in 3.24.0\r\n\r\nthe last version of this is working: https://svelte.dev/repl/05576047e43c40d38b1b8446dca313e1?version=3.23.2",
          "createdAt": "2021-01-27T09:15:59Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODE1MDYzNw==",
          "body": "> this is a regression caused by this: #5028\r\n> \r\n> which was introduced in 3.24.0\r\n> \r\n> the last version of this is working: https://svelte.dev/repl/05576047e43c40d38b1b8446dca313e1?version=3.23.2\r\n\r\nNice!",
          "createdAt": "2021-01-27T09:20:58Z",
          "author": { "login": "i1mT", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODE1MzYyNg==",
          "body": "Reopening so we can track it and close after it's fixed",
          "createdAt": "2021-01-27T09:25:58Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODc3NjgzOQ==",
          "body": "> Reopening so we can track it and close after it's fixed\r\n\r\nOh, I misunderstood; I thought is was fixed,  stupid haha",
          "createdAt": "2021-01-28T03:37:30Z",
          "author": { "login": "i1mT", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzY4OTU5Mg==",
          "body": "This issue: #5028 \r\n\r\nI think update TextNode should not compare `wholeText`, preprocess to `contenteditable` DOM is more reasonable.\r\n",
          "createdAt": "2021-03-01T06:36:42Z",
          "author": { "login": "i1mT", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTM0ODA5OTQ=",
    "body": "TypeScript is a language that is loved by many developers.\r\nI think more and more users are using TypeScript in Svelte.\r\n\r\nHowever, there is no TypeScipt tutorial on Svelte right now.\r\nI use TypeScript to develop, but I often get lost in it!\r\nFor example, how to add Type.\r\n\r\nI think a TypeScript version of the current tutorial would make it less confusing☺️\r\nPlease consider it.\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-01-25T15:30:10Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjkwNzU5MA==",
          "body": "```\r\nnpx degit sveltejs/template svelte-typescript-app\r\ncd svelte-typescript-app\r\nnode scripts/setupTypeScript.js\r\n```\r\n\r\nsnippet from [here](https://svelte.dev/blog/svelte-and-typescript#Try_it_now). This works out of the box and adding `<script lang=\"ts\">` does the job",
          "createdAt": "2021-01-25T15:44:44Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjkyNTYzMg==",
          "body": "@peopledrivemecrazy \r\nI understand building an environment.\r\nI'm having trouble actually creating the application beyond that.\r\n\r\nFor example, when you use `createEventDispatcher()` to write TypeScript code.\r\n",
          "createdAt": "2021-01-25T16:09:52Z",
          "author": { "login": "sakito21", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjkzMjUyMQ==",
          "body": "Please provide more detail on what you find missing from the docs in regards to TypeScript code. We sure need a enhanced TypeScript-docs-section so your input is valuable, but we need more details. Your last comment about \"For example how to use `createEventDispatcher`\" is a good example of such detail.",
          "createdAt": "2021-01-25T16:20:07Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzc5MjIxNQ==",
          "body": "Another good thing is setting up `paths` in `tsconfig.json` and in the corresponding `rollup.config.js`. I think none of us writing `../../some/folder/FinallyTheComponent.svelte` and much prefer `import Button from src/shared/button`\r\n\r\nThe docs should also give indication that TS is still not supported inside the mustache templates section and if you really want to use TypeScript you should extract the function in the `<script></script>` tag.\r\n\r\nTwo things on the top of my head. :)",
          "createdAt": "2021-01-26T20:00:25Z",
          "author": { "login": "callmeberzerker", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2Nzk0NTk0NA==",
          "body": "Maybe also mention the event handler typing. It's also a frequently asked question. And we just need to note that the type is just the same as the callback parameter of `addEventLisener`.",
          "createdAt": "2021-01-27T01:29:46Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDE2OTM3MQ==",
          "body": "> Another good thing is setting up `paths` in `tsconfig.json` and in the corresponding `rollup.config.js`. I think none of us writing `../../some/folder/FinallyTheComponent.svelte` and much prefer `import Button from src/shared/button`\r\n> \r\n> The docs should also give indication that TS is still not supported inside the mustache templates section and if you really want to use TypeScript you should extract the function in the `<script></script>` tag.\r\n> \r\n> Two things on the top of my head. :)\r\n\r\nA slight bit of correction: typechecking still works inside the template tags, but TS syntax (eg: `data?.param`) doesn’t work.\r\n\r\nOn tsconfig: adding a recommended tsconfig would be nice too, adding the jsdom env option helps a lot with `window` calls and stuff.",
          "createdAt": "2021-01-30T07:00:17Z",
          "author": { "login": "rraihansaputra", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDE4MDkzMA==",
          "body": "Noted optional chaining is a js feature, not just ts. As long you have 3.24.0 or later it would work.",
          "createdAt": "2021-01-30T09:02:44Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MTc2NjUyOQ==",
          "body": "I want documentation for things that straddle components such as Stores with State.\r\nIf I can help create the documentation, I would love to do that too.",
          "createdAt": "2021-02-02T16:32:32Z",
          "author": { "login": "sakito21", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTM0MDgxODA=",
    "body": "**Describe the bug**\r\nI have a page that receives XML and tries to show it using the directive `@html`\r\n\r\nIf the directive receives content that looks like HTML but it is not HTML valid, the content is changed.\r\n\r\nFor example, receiving\r\n\r\n        <p>\r\n            External paragraph\r\n              <p>\r\n\r\n                Internal paragraph\r\n              </p>\r\n       \r\n        </p>\r\n\r\nThe directive returns\r\n\r\n        <p>\r\n            External paragraph\r\n        </p>\r\n        <p>\r\n\r\n            Internal paragraph\r\n        </p>\r\n       \r\n(it seems p cannot be nested inside p as valid HTML)\r\n\r\n**Logs**\r\nNo relevant logs\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/3df4140712784829b135f8149ee55b7a?version=3.31.2\r\n\r\nSelf contained example. You need to inspect the html output\r\n\r\n\r\n**Expected behavior**\r\n\r\nI expect for the directive to return exactly what is passed and not change the content received\r\n\r\n**Severity**\r\n\r\n\r\nThis is a test project for me. As such, it is not affecting any people in production. But in our company this kind of \"XML embedded into HTML\" shenanigans are used along the project and it obviously affects how Svelte can be sold to the rest of the team.\r\nIn any case, I'm not sure it is a bug from Svelte. But it took me quite a while to figure it out, so feel free to close the bug, but at least somebody might find this report.\r\n\r\n",
    "closedAt": "2021-01-25T14:41:07Z",
    "createdAt": "2021-01-25T14:02:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2Njg1NzI4Ng==",
          "body": "This hasn't anything to do with Svelte but more with how the browser's innerHTML works.\r\nCheck this out, as you will get the same result:\r\n\r\n![DeepinScreenshot_select-area_20210125162750](https://user-images.githubusercontent.com/5887290/105719216-b5e6d080-5f2a-11eb-8999-9cffb693dafc.png)\r\n\r\nYou can read more about it here: https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html",
          "createdAt": "2021-01-25T14:33:54Z",
          "author": { "login": "cozmy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTI4ODkzOTc=",
    "body": "```svelte\r\n{#each some as undefined}\r\n  ...\r\n{/each}\r\n```",
    "closedAt": "2021-01-24T21:07:29Z",
    "createdAt": "2021-01-24T20:48:53Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjQzMjMzMA==",
          "body": "Yes.",
          "createdAt": "2021-01-24T21:07:29Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTI2OTE5OTk=",
    "body": "**Describe the bug**\r\nWhen I use named slot forwarding and inside of it change variable, it's not being rerendered. A workaround is to add _something_ to default slot and then named slot becomes reactive. I think it's best to try included REPL.\r\n\r\n> the problem is that if there is no default content the slot forwarding is not reactive but still render. adding any type of content in default it becomes reactive so some sort of context error or offset when the default slot is missing\r\n> - **jensa** (user on official Svelte Discord server)\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/ca7cf48c01814b18bde4d39f40e11de6?version=3.31.2\r\n\r\n**Expected behavior**\r\nVariable is reactive without workaround.\r\n\r\n**Information about your Svelte project:**\r\n```\r\n  System:\r\n    OS: Linux 5.8 Pop!_OS 20.10\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz\r\n    Memory: 958.36 MB / 15.33 GB\r\n    Container: Yes\r\n    Shell: 5.8 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 12.18.2 - /usr/bin/node\r\n    Yarn: 1.22.5 - /usr/bin/yarn\r\n    npm: 6.14.8 - /usr/bin/npm\r\n  Browsers:\r\n    Firefox: 84.0.2\r\n  npmPackages:\r\n    rollup: ^2.37.0 => 2.37.0 \r\n    svelte: ^3.31.2 => 3.31.2 \r\n```\r\nProvided command ignores the fact, that I am trying this on Brave browser with Chromium 88 inside.\r\n\r\n**Severity**\r\nThere is a workaround, so I believe it's not that severe.\r\n",
    "closedAt": "2021-03-02T09:48:19Z",
    "createdAt": "2021-01-24T01:01:06Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODc3NTY5OQ==",
          "body": "Tested it's [fixed in 3.35.0](https://svelte.dev/repl/ca7cf48c01814b18bde4d39f40e11de6?version=3.35.0)",
          "createdAt": "2021-03-02T09:48:17Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODg5OTYzOA==",
          "body": "@tanhauhau thanks a lot",
          "createdAt": "2021-03-02T13:13:57Z",
          "author": { "login": "lukeeno", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTIzMzM0MDA=",
    "body": "```svelte\r\n<script>\r\n\tconst o = { v: true }\r\n</script>\r\n\r\n<div class:test={o.v}>\r\n\t{o.v}\r\n</div>\r\n```\r\n```ts\r\np(ctx, [dirty]) {\r\n\tif (dirty & /*o*/ 1) {\r\n\t\ttoggle_class(div, \"test\", /*o*/ ctx[0].v);\r\n\t}\r\n}\r\n```\r\nhttps://svelte.dev/repl/5b14ec60637b43a184460475790105c0?version=3.31.2\r\n\r\nGiven that `<div>{o.v}</div>` does not generate update code, neither should the class directive\r\nExpected noop at `fragment.p`",
    "closedAt": "2021-01-29T16:47:22Z",
    "createdAt": "2021-01-22T22:01:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjMwMzg2Nw==",
          "body": "I've been thinking a lot about this myself!\r\n\r\nBecause of how JavaScript `const` works, I think doing this optimization with all `const`s would be pretty hard. In your example you can change the value of `o.v` because `const` only guarantees that `o` refers to the same object, not that it doesn't change (which is pretty silly, but it's what they chose to do). See https://svelte.dev/repl/b435e75ce57f440b84993eb809eb7575?version=3 for an example. To get around that you would have to do some pretty gnarly code analysis (see if that variable is ever written to, including understanding if it can be passed into a function that writes to it).\r\n\r\nI think a simpler, more direct optimization would be to limit this optimization to `const` primitives (e.g. only `const o = true`) because in those cases `o` can't be changed.",
          "createdAt": "2021-01-24T07:13:29Z",
          "author": { "login": "j-delaney", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDAyNjc1Mw==",
          "body": "As of 3.32.1, the update method is now a no-op https://svelte.dev/repl/5b14ec60637b43a184460475790105c0?version=3.32.1",
          "createdAt": "2021-01-29T20:16:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTIyNjM2Njg=",
    "body": "**Describe the bug**\r\nReferes to https://github.com/sveltejs/community/pull/377\r\nBreaks https://github.com/sveltejs/svelte/blob/master/site/scripts/update_whos_using.js\r\n\r\n- need to copy `scripts/community/whos-using-svelte/WhosUsingSvelte.js`\r\n\r\n\r\n**Severity**\r\nHigh ❗\r\nwill break who is using svelte on next site release\r\n\r\n",
    "closedAt": "2021-01-26T11:37:03Z",
    "createdAt": "2021-01-22T19:51:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NTY0NzI0NQ==",
          "body": "I am on it ☺",
          "createdAt": "2021-01-22T19:51:22Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzQ4NjExOQ==",
          "body": "Looks like this is fixed :partying_face: \r\n",
          "createdAt": "2021-01-26T11:37:02Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTEyMjc4OTI=",
    "body": "```svelte\r\n<div use:textContent={next(value)} />\r\n<div> {next(value)} </div>\r\n```\r\nthis renders `2 1` on init, and `1 2` after update\r\nhttps://svelte.dev/repl/fd08c429bea742caa9ff104cf16eea32?version=3.31.2\r\n\r\nExpected expression evaluation order to follow markup order\r\nExpected expression evaluation order to be the same on init & on update",
    "closedAt": null,
    "createdAt": "2021-01-21T15:32:50Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTEyMTM3ODY=",
    "body": "## Paused binding on audio not working correctly\r\n\r\n**Describe the bug**\r\nThe binding for paused on audio elements gives the wrong results in the following two cases:\r\n- On mounting the audio element, the binding remains undefined until manually paused or unpaused, while the real property on the DOM is true.\r\n- On changing the src attribute if the element is currently playing, the actual element will pause and its paused property on the DOM is set to true, but the binding remains false.\r\n\r\n**To Reproduce**\r\n[Svelte REPL](https://svelte.dev/repl/b1c017b9a38149a0908d15e9bfa73255?version=3.31.2)\r\n\r\n**Expected behavior**\r\nThe bound variable remains bound and synced to the corresponding DOM property.\r\n\r\n**Severity**\r\nSomewhat annoying. I'm working on an audio player and though there are workarounds, it would be great if it worked as expected.\r\n\r\n**Additional context**\r\nI'm a bit new to open source and Svelte, but with a few pointers, I could take a crack at this myself.\r\n",
    "closedAt": null,
    "createdAt": "2021-01-21T15:22:29Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTExNDAyOTE=",
    "body": "```svelte\r\n<script>\r\n\t// export\r\n\tlet value = 0;\r\n\tlet turn = 0;\r\n\tfunction get() {\r\n\t\treturn 1 + (++turn % 2);\r\n\t}\r\n</script>\r\n\r\n<Component>\r\n\t<div>{get(value)}</div>\r\n</Component>\r\n<div>{get(value)}</div>\r\n\r\n```\r\nBased on whether `value` is exported this will render either `1 2` or `2 1`\r\n\r\nhttps://svelte.dev/repl/41f3a5c9e6304074a90d0ca516779b28?version=3.31.2",
    "closedAt": null,
    "createdAt": "2021-01-21T14:19:33Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTAzOTI0NDA=",
    "body": "**Describe the bug**\r\nWhen I try to compile, Svelte outputs\r\n\r\n`Plugin svelte: 'window' is not defined\r\n`\r\n\r\n**Logs**\r\n\r\n```\r\nsrc/main.js → public/build/bundle.js...\r\n(!) Plugin svelte: 'window' is not defined\r\nsrc\\App.svelte\r\n83:   {#if window.CustomStateName == true}\r\n```\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/438c6566e57f4a58a8734b551290b94b?version=3.1.0\r\n\r\n**Expected behavior**\r\nIt should,\r\n\r\nA. Compile without warning. \r\nB. Must work at runtime\r\n\r\nRight now, I don't even see it works at runtime. Please use repl and try to set the `window.CustomStateName = \"hi\" `using console and nothing render on Repl.\r\n\r\n**Stacktraces**\r\n\r\nNone\r\n\r\n**Information about your Svelte project:**\r\n\r\n```\r\n  System:\r\n    OS: Windows 10 10.0.17763\r\n    CPU: (12) x64 Intel(R) Xeon(R) CPU E5-2620 0 @ 2.00GHz\r\n    Memory: 19.36 GB / 31.97 GB\r\n  Binaries:\r\n    Node: 14.15.4 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 6.14.10 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Internet Explorer: 11.0.17763.771\r\n  npmPackages:\r\n    rollup: ^2.37.1 => 2.37.1\r\n    svelte: ^3.0.0 => 3.0.0\r\n```\r\n\r\n**Severity**\r\n\r\nHigh\r\n\r\n**Additional context**\r\n\r\nNone",
    "closedAt": "2021-01-21T04:30:38Z",
    "createdAt": "2021-01-20T22:36:27Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NDAwMTQxOQ==",
          "body": "It does work in the REPL if you run `window.CustomStateName = 'hi'` from the correct context (the one corresponding to the iframe the component runs in) and then make any edit in the component (so that it re-runs). If I do that, I'm able to see \"Hello World\".\r\n\r\nThe only actionable thing here would be to add `window` to the list of known globals so that Svelte doesn't emit a warning for that one.",
          "createdAt": "2021-01-20T22:43:17Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NDEyMjQ4Ng==",
          "body": "@Conduitry \r\n\r\nIf I change something then it render.\r\n\r\nBut this should be reactive not static, isn't it?\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-01-21T00:55:41Z",
          "author": { "login": "gerald-dotcom", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NDE5Njc2NA==",
          "body": "No, there's no way for the compiled component to know when you've changed a global variable.",
          "createdAt": "2021-01-21T02:50:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NDE5NzYyMA==",
          "body": "@Conduitry \r\n\r\nBut if I remember correctly, it did.\r\n\r\nHow does then <script> variable works when they get changed... ",
          "createdAt": "2021-01-21T02:52:50Z",
          "author": { "login": "gerald-dotcom", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NDI0MTkxNw==",
          "body": "@Conduitry \r\n\r\nI guess it would work (It worked I recall) because I have a local variable condition before && \r\n\r\n`localVar && window.foo == true\r\n`\r\n\r\n\r\n",
          "createdAt": "2021-01-21T04:11:57Z",
          "author": { "login": "gerald-dotcom", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3OTAyOTkzNzI=",
    "body": "Humans,\r\n\r\nI don't use Templates. However, I need to raise an important issue here.\r\n\r\nSvelte (and it's helper plugins) breaks backward compatibility. \r\n\r\nI wrote an app and then upgraded to new versions today, it's already broken.\r\n\r\nThen, I heard this is same with whole NPM ecosystem.\r\n\r\nEcosystem in my opinion is rigged..\r\n\r\nI can run a Windows app made in 1999 on Windows 10. \r\n\r\nI love svelte but situations like these make me to hang my self next to Rich home.\r\n\r\n \r\n\r\n\r\n",
    "closedAt": "2021-01-20T20:40:32Z",
    "createdAt": "2021-01-20T20:30:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MzkxODU2OA==",
          "body": "Welcome to development when you don't write your entire stack yourself by hand.\r\n\r\nPlease open helpful bug reports or don't open any at all.",
          "createdAt": "2021-01-20T20:40:32Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODk3NjExMTI=",
    "body": "I have 2 different themes for displaying data coming in a slot from a parent. I split them into 2 components for readability.\r\n\r\nRoughly:\r\nhttps://svelte.dev/repl/1ae8137a71c8439684fa609b20747036?version=3.31.2\r\n\r\n\"For clarity, I created a wrapper function around `arr` that updates it and displays the result in the console\"\r\n\r\nI change themes depending on condition and noticed this behavior:\r\n\r\nEvery time component in `svelte:component` is changed `{#each}` is re-calculated, the same can be seen with any other content passed to the slot(`{#await}`, etc.)\r\n\r\nI would like to ask: Is this expected behavior?\r\n\r\nI don't think I've seen any mention of this behavior and I think the child component should only be responsible for displaying and the content in the slot should only be rerendered when it is changed in parent component(and remain untouched when component in `svelte:component` is changed)",
    "closedAt": "2021-01-26T11:37:29Z",
    "createdAt": "2021-01-20T08:36:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzQ4NjMyNA==",
          "body": "Hi Mark, Please ask usage questions [in the discord](https://svelte.dev/chat)",
          "createdAt": "2021-01-26T11:37:29Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzU1NjAwMw==",
          "body": "> Please ask **usage** questions in the discord\r\n\r\nHi @antony.  In fact, it is more a question of the architecture of svelte, rather than usage of slots.\r\n\r\nI'm not interested in how this can be avoided, optimized, etc., but rather questions such as:\r\n\r\n1. Is the re-rendering of slot-content in `<svelte:component>`, on change of component in `this` - mandatory?\r\n2. Is there any way to get rid of this re-render if it's not mandatory?\r\n3. Will there be any bugs because of this?\r\n\r\nAnd so on\r\n\r\nIf it would be better to talk about this in Discord, please specify which chat room would be best for this",
          "createdAt": "2021-01-26T13:54:53Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODk0NzM1Mzg=",
    "body": "**Describe the bug**\r\nPrefixing a css global to give it scope only scopes the first selector.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/aaed36026d014e34b45aedef9630b55f?version=3.31.2\r\n\r\n**Expected behavior**\r\n```css\r\narticle.svelte-1nz7a1b div.svelte-1nz7a1b h1, article.svelte-1nz7a1b div.svelte-1nz7a1b h2, article.svelte-1nz7a1b div.svelte-1nz7a1b h3 {\r\n    background-color: red;\r\n}\r\n```\r\n**Current behaviour**\r\n```css\r\narticle.svelte-1nz7a1b div.svelte-1nz7a1b h1, h2, h3 {\r\n    background-color: red;\r\n}\r\n```\r\n\r\n**Information about your Svelte project:**\r\nLatest svelte repl.\r\n\r\n**Severity**\r\nNot severe.\r\n",
    "closedAt": "2021-06-22T14:03:57Z",
    "createdAt": "2021-01-19T23:37:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MzIxNzUwMw==",
          "body": "Honestly I'm thinking that `:global(h1, h2, h3)` should probably be a compiler error. It's not really clear to me what it should mean. I don't think `article div :global(h1, h2, h3)` should be a shortcut for `article div :global(h1), article div :global(h2), article div :global(h3)`, which is what this issue seems to be suggesting.",
          "createdAt": "2021-01-19T23:49:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MzIyNzY1NQ==",
          "body": "It would be nice in the aspect of reducing redundant code, however keeping true to the native css way it would probably be best to not introduce some custom logic. But with that said, if `:global(h1, h2, h3)` would still continue to be acceptable I would regard this as unexpected behavior.",
          "createdAt": "2021-01-20T00:02:25Z",
          "author": { "login": "hjalmar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjEwOTUwOA==",
          "body": "In 3.38.3, this is now a compiler error.",
          "createdAt": "2021-06-22T15:52:39Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODg4NDczMjA=",
    "body": "**Describe the bug**\r\n\r\nIt seems that developer cannot control the order of execution of reactive statements prefixed with `$:`\r\n\r\nGiven the source (where it is very important to run init first):\r\n```\r\n  $: init(object)\r\n  $: if (indentsLocked) {\r\n    if (object.ridgeIndentLeft < object.width / 2) object.ridgeIndentRight = object.ridgeIndentLeft\r\n    else object.ridgeIndentRight = object.width - object.ridgeIndentLeft\r\n  }\r\n  $: if (overhangsLocked) object.overhangSide = object.overhangBottom\r\n```\r\n\r\nThe compiler reorders the init to be last:\r\n```\r\n\t$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty[0] & /*indentsLocked, object*/ 3) {\r\n\t\t\t$: if (indentsLocked) {\r\n\t\t\t\tif (object.ridgeIndentLeft < object.width / 2) $$invalidate(0, object.ridgeIndentRight = object.ridgeIndentLeft, object); else $$invalidate(0, object.ridgeIndentRight = object.width - object.ridgeIndentLeft, object);\r\n\t\t\t\tconsole.log(object.ridgeIndentRight);\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty[0] & /*overhangsLocked, object*/ 5) {\r\n\t\t\t$: if (overhangsLocked) $$invalidate(0, object.overhangSide = object.overhangBottom, object);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty[0] & /*object*/ 1) {\r\n\t\t\t$: init(object);\r\n\t\t}\r\n\t};\r\n```\r\n\r\n**Logs**\r\nNot relevant\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/f1ae2c3d30034d519c13cd647989d0b0?version=3.31.2\r\n\r\n**Expected behavior**\r\nDeveloper can control the order of execution, Preferably, the order is the same as defined in source file.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n**Information about your Svelte project:**\r\nSystem:\r\n    OS: Linux 5.4 Ubuntu 20.04.1 LTS (Focal Fossa)\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz\r\n    Memory: 2.97 GB / 15.59 GB\r\n    Container: Yes\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 15.0.1 - /usr/local/bin/node\r\n    npm: 7.0.3 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 87.0.4280.141\r\n    Firefox: 84.0.2\r\n  npmPackages:\r\n    svelte: ^3.31.2 => 3.31.2 \r\n\r\nWe use snowpack (probably not relevant)\r\n\r\n**Severity**\r\nNot easy to find a workaround, because reordering of reactive statements is undocumented.\r\n",
    "closedAt": "2021-01-19T11:13:01Z",
    "createdAt": "2021-01-19T09:16:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjcxODIyNw==",
          "body": "Very good ",
          "createdAt": "2021-01-19T09:30:44Z",
          "author": { "login": "shibusalim", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2Mjc3NDg4OQ==",
          "body": "They're ordered according to the dependencies that the compiler can see in the reactive blocks. `$: init(object)` looks like it would depend on other blocks where `object` is assigned to, so it gets run later. It's not currently documented outside of issue comments, but it's not a bug.",
          "createdAt": "2021-01-19T11:13:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjgwNDE2Nw==",
          "body": "Following up on Conduitry's general explanation, here's how you do it in your case:\r\n\r\n```js\r\n  $: init(object)\r\n  $: if (indentsLocked) {\r\n    changeRidgeIndentRight(object);\r\n  }\r\n  $: if (overhangsLocked) changeOverhangSide(object)\r\n```\r\n-> no assignment to `object` at the `$`-level, instead inside functions, which the Svelte compiler does not track for reordering.",
          "createdAt": "2021-01-19T12:15:08Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjkyMDIxNA==",
          "body": "@Conduitry thanks for clarification, but what is the recommended way to enforce the correct order if compiler does it wrongly?",
          "createdAt": "2021-01-19T15:32:53Z",
          "author": { "login": "cbxp", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODg3ODEyNjk=",
    "body": "**Describe the bug**\r\nIf providing a `svelte:component` with slotted content the context is wrong. the `$$props` variable contains the provided props along with `$$slots` and `$$scope` under the same object.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/984c8690cf784eb6b3433ed11f0f33a5?version=3.31.0\r\n\r\n**Expected behavior**\r\n`$$props` should only contain the provided props.\r\n\r\n**Information about your Svelte project:**\r\nwindows 10\r\nchrome Version 87.0.4280.141 (Official Build) (64-bit)\r\n\r\n**Severity**\r\nApplication breaking.\r\n\r\n**Additional context**\r\nI tried some random version numbers but could not find a spot where it might have been once working properly.\r\n",
    "closedAt": null,
    "createdAt": "2021-01-19T07:31:03Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODg2MzUyNjg=",
    "body": "Event and prop names accept all characters but space, quotes, `>` and `=`\r\n```svelte\r\n<Component on::::\\\\\\\\!!!}}]]{{{function(){return`hello_world`}}{]]])(((\\ \\\\````::\\**\\{{{}}}}}}<<<<<<Component />\r\n```\r\n```ts\r\ncomponent = new Component({\r\n\tprops: {\r\n\t\t\"\\\\\\\\````::\\\\**\\\\{{{}}}}}}<<<<<<Component\": true\r\n\t}\r\n});\r\n\r\ncomponent.$on(\":::\\\\\\\\\\\\\\\\!!!}}]]{{{function(){return`hello_world`}}{]]])(((\\\\\", \r\n/*function_return_hello_world_handler*/ ctx[0]);\r\n```\r\nhttps://svelte.dev/repl/8bff2976db80403db1affa9138c3e8dd?version=3.31.2",
    "closedAt": null,
    "createdAt": "2021-01-19T01:24:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjY1NzQ1Mw==",
          "body": "Agree with that. From a tooling perspective it would be ideal to only allow alphanumeric characters and `$_` and _maybe_ `-` ",
          "createdAt": "2021-01-19T07:31:16Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2Mjc3NjA5NQ==",
          "body": "Is this actually causing a bug, or is it just unsightly?",
          "createdAt": "2021-01-19T11:15:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2Mjc5Nzk0Mw==",
          "body": "From a tooling perspective it causes some problems because JSX/TSX, which code is transformed to for intellisense features, is more restrictive, but I've not yet encountered an actual bug. So from my point of view it would be more of a \"more well defined\" thing.",
          "createdAt": "2021-01-19T12:01:27Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODgzMTk3OTU=",
    "body": "<!--\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\nhttps://github.com/sveltejs/rfcs\n-->\n\n**Is your feature request related to a problem? Please describe.**\nA clear and concise description of what the problem is. For example: I'm always frustrated when [...]\n\n**Describe the solution you'd like**\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**How important is this feature to you?**\nNote: the more honest and specific you are here the more we will take you seriously.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.",
    "closedAt": "2021-01-18T14:48:13Z",
    "createdAt": "2021-01-18T14:35:54Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODgyNjEzNDk=",
    "body": "**How important is this feature to you?**\r\nzero to low priority, mostly cosmetic. browsers ignore extra attributes like `<script lang=\"ts\">`\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\ncurrently, preprocessors can not change tag attributes\r\n\r\nfor example\r\n\r\n```html\r\n<script lang=\"ts\">export let name: string</script>\r\n```\r\n\r\ncan only be transformed to\r\n\r\n```html\r\n<script lang=\"ts\">export let name</script>\r\n```\r\n\r\nbut not to\r\n\r\n```html\r\n<script>export let name</script>\r\n```\r\n\r\nbecause preprocessors can only read attributes, but not change them\r\n\r\n<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Describe the solution you'd like**\r\nallow preprocessors to to modify attributes\r\nby returning the new attributes in `result.attributes`\r\n\r\nfor example, the typescript preprocessor could do\r\n```js\r\nif (attributes.lang != 'ts') return;\r\ndelete attributes.lang;\r\ncode = compile(code);\r\nreturn { code, map, attributes };\r\n```\r\n\r\n**Describe alternatives you've considered**\r\ndo nothing, and let browsers ignore extra attributes\r\n\r\n**related code**\r\nhttps://github.com/sveltejs/svelte/blob/32775a699dd9cbc9884ee04931c3903b832775d5/src/compiler/preprocess/index.ts#L274-L285\r\n",
    "closedAt": null,
    "createdAt": "2021-01-18T13:15:33Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODc4NzEyOTU=",
    "body": "",
    "closedAt": "2021-01-18T02:53:30Z",
    "createdAt": "2021-01-18T02:45:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk0NDYyNw==",
          "body": "[]()\n```",
          "createdAt": "2021-01-18T02:48:19Z",
          "author": { "login": "jassldh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODc4NjYyOTQ=",
    "body": "```svelte\r\n<script>\r\n\texport let foo = 0;\r\n\texport let bar = 0;\r\n\texport let click = () => (foo++, bar++)\r\n</script>\r\n{(foo++, bar)}\r\n{foo}\r\n```\r\n`{foo}` renders `1` forever\r\nExpected compiler error or `foo` to update on click\r\nhttps://svelte.dev/repl/0583f43493c84fd79f9fa57e9d120972?version=3.31.2\r\n\r\n```ts\r\nexport default {\r\n\ttest({ assert, component, target, window }) {\r\n\t\tassert.htmlEqual(\"01\");\r\n\t\tcomponent.click();\r\n\t\tassert.htmlEqual(\"12\");\r\n\t\tcomponent.click();\r\n\t\tassert.htmlEqual(\"23\");\r\n\t}\r\n};\r\n```\r\n\r\nWhat happens is incrementing in the mustache tag updates `ctx` every time it draws bar, but the local variable in the component instance stays stale, \r\non click it increments the local stale `foo`, then compares it to the one in `ctx` but doesn't flag the variable since they're equal\r\n",
    "closedAt": "2021-01-18T02:48:01Z",
    "createdAt": "2021-01-18T02:30:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk0NDU0NA==",
          "body": "Duplicate of #3793.",
          "createdAt": "2021-01-18T02:48:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODc4NjU1MTE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIt is not! but svelte's paradigm has been much of the less code is better sentiment.\r\n\r\n**Describe the solution you'd like**\r\nSo the logic would be the same as before for each blocks but also validate the additional expression included so it validates against `cats.length && (showCats || showAll)` in this case.\r\nThis would also be in line with how the `await` syntax does it with the `then`, where it's shortened down to `{#await promise then result}`. So this style of syntax isn't all to foreign.\r\n```\r\n{#each cats as cat, i (cat.id) if showCats || showAll}\r\n  {cat}\r\n{:else}\r\n  No cats today!\r\n{/each}\r\n```\r\n\r\n**How important is this feature to you?**\r\nNot very important but it would be a nice addition to the each blocks, I feel.",
    "closedAt": "2021-01-18T02:52:53Z",
    "createdAt": "2021-01-18T02:27:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk0NjExMw==",
          "body": "If I'm understanding this correctly, that would be the same as\r\n\r\n```svelte\r\n{#if showCats || showAll}\r\n  {#each cats as cat, i (cat.id)}\r\n    {cat}\r\n  {:else}\r\n    No cats today!\r\n  {/each}\r\n{/if}\r\n```\r\n\r\nwhich is very little additional typing and a more explicit.\r\n\r\nawait/then/catch are always used together. But having a special syntax to combine an `{#if}` block and an `{#each}` block is confusing and unnecessary.",
          "createdAt": "2021-01-18T02:52:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk1NDM4Mg==",
          "body": "```svelte\r\n{#each showCats || showAll ? cats: [] as cat, i (cat.id)}\r\n  {cat}\r\n{:else}\r\n  No cats today!\r\n{/each}\r\n```",
          "createdAt": "2021-01-18T03:22:51Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk1OTU3Mw==",
          "body": "> If I'm understanding this correctly, that would be the same as\r\n> \r\n> ```svelte\r\n> {#if showCats || showAll}\r\n>   {#each cats as cat, i (cat.id)}\r\n>     {cat}\r\n>   {:else}\r\n>     No cats today!\r\n>   {/each}\r\n> {/if}\r\n> ```\r\n> \r\n> which is very little additional typing and a more explicit.\r\n\r\nWhile character length might be one thing but so is also the vertical realestate. This is one block that rids of two lines plus additional characters.\r\n\r\nYou would have to check `cats.length` and move the else logic outside of the each. Because `showCats` and `showAll` can both be false and expect the else block.\r\n```svelte\r\n{#if cats.length && (showCats || showAll)}\r\n  {#each cats as cat, i (cat.id)}\r\n    {cat}\r\n  {/each}\r\n{:else}\r\n  No cats today!\r\n{/if}\r\n```\r\n\r\n> await/then/catch are always used together. But having a special syntax to combine an `{#if}` block and an `{#each}` block is confusing and unnecessary.\r\n\r\nHey, just entertain the thought of a possibility. The `then` case was included as reference to the syntactic way of writing the syntax which is familiar already.\r\n\r\nI would argue for that `if` and `else` block makes just as much sense, unlike `each` and `else`, however I want both. :)",
          "createdAt": "2021-01-18T03:42:05Z",
          "author": { "login": "hjalmar", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODc4NjA2ODY=",
    "body": "```svelte\r\n<script>\r\n    let bar = 0;\r\n</script>\r\n<button on:click={()=>bar++} />\r\n<Component let:bar>\r\n    {bar}\r\n</Component>\r\n```\r\n\r\nHaving a variable named the same way as a component slot variable wrongly flags `$$scope` and updates the component everytime `bar` changes in the outer scope, which is pointless since the Component overwrites bar with its inner scope value\r\n\r\nSee repl with `<Component>`'s reflow count\r\nhttps://svelte.dev/repl/2ec2b3838cf44ed8ac3063cc5f25551c?version=3.31.2",
    "closedAt": null,
    "createdAt": "2021-01-18T02:11:34Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODc4NTg1NDc=",
    "body": "https://svelte.dev/repl/09c7a37fe42540cf8cf384193ac6da92?version=3.31.2\r\n```svelte\r\n<script>\r\n\texport let foo = 0;\r\n\texport let bar = 0;\r\n</script>\r\n<button on:click={() => bar++}>\r\n\tbar: {(++foo, bar)}\r\n</button>\r\nfoo: {foo}\r\n```\r\nResult: `foo` is always 0\r\nExpected either `foo === bar` or compiler error\r\n```ts\r\nexport default {\r\n\ttest({ assert, component, target, window }) {\r\n\t\tassert.equal(component.foo, component.bar);\r\n\t}\r\n};\r\n```\r\nThe following works though\r\n```svelte\r\n<script>\r\nfunction update(){ foo++}\r\n</script>\r\n{(update(), bar)}\r\n```",
    "closedAt": "2021-01-18T02:54:29Z",
    "createdAt": "2021-01-18T02:03:59Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk0NjY0MQ==",
          "body": "Duplicate of #3793.",
          "createdAt": "2021-01-18T02:54:29Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODc3Mjg3MjQ=",
    "body": "> I don't really know if this is supposed to be a bug report or a feature request, but I chose feature request. LMK if changes are required.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIf we have a component that we have provided props for, but don't want to use some of the props like the example shown below, there's no way to ignore the props without either the compiler or the browser screaming at you:\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n<script lang=ts>\r\n    import Test from \"./test.svelte\"\r\n</script>\r\n\r\n<Test prop1={123} prop2={[\"an array\"]} prop3=\"lorem ipsum\" prop4={{a: \"b\"}} />\r\n```\r\n\r\n```svelte\r\n<!-- test.svelte -->\r\n<script lang=ts>\r\n    // I want to use prop1, but not prop2, prop3 or prop4\r\n    export let prop1: number;\r\n\r\n    // Example 1: Using \"export let prop2\" without usage\r\n    export let prop2: any;\r\n    // This will make the compiler say that the variable was defined without usage\r\n\r\n    // Example 2: Using \"export const prop3 = defaultValue\", like the compiler suggests\r\n    export const prop3 = \"hello world\";\r\n    // This makes the browser console scream at you (see screenshot)\r\n\r\n    // Finally, if I choose to not put any export, the browser will still scream at me\r\n</script>\r\n\r\n<h1>{prop1}</h1>\r\n```\r\n\r\nScreenshot showing the browser not liking `export const`\r\n![Screenshot 2021-01-17 at 8 47 39 PM](https://user-images.githubusercontent.com/52203828/104847297-3ee78180-5905-11eb-8fb9-cf3e2d2e90e0.png)\r\n\r\n**Describe the solution you'd like**\r\nI would like `export const` to make the browser not scream at me.\r\n\r\n**Describe alternatives you've considered**\r\nNone. I've just ignored the error\r\n\r\n**How important is this feature to you?**\r\nNot very important, but I would love to see it fixed\r\n\r\n**Additional context**\r\nI'm using this for routes using pagejs, where the prop `params` can be undefined, so please don't suggest \"You should just use all props or not provide unnecessary props\", because I'm doing this using the `<svelte:component>` component. [See this github gist for more info](https://gist.github.com/arnu515/b37fd5eb84c6917f9f3c7d6085498ad4)",
    "closedAt": "2021-02-02T14:42:33Z",
    "createdAt": "2021-01-17T15:23:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTgzMTE5MA==",
          "body": "Just do `export let optionalProp: SomeType = undefined;`. That will silence the error. It also makes it clear for people reading the code that it's optional.",
          "createdAt": "2021-01-17T15:33:43Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTg0NjQ2OQ==",
          "body": "\r\n> Just do `export let optionalProp: SomeType = undefined;`. That will silence the error. It also makes it clear for people reading the code that it's optional.\r\n\r\n![Screenshot 2021-01-17 at 10 46 18 PM](https://user-images.githubusercontent.com/52203828/104850562-d228b300-5915-11eb-84a4-37a42391db8d.png)\r\n\r\nNope",
          "createdAt": "2021-01-17T17:17:05Z",
          "author": { "login": "arnu515", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTg0NjU1Nw==",
          "body": "@dummdidumm @Conduitry Please reopen this issue",
          "createdAt": "2021-01-17T17:17:50Z",
          "author": { "login": "arnu515", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTg1MTQyNw==",
          "body": "Sorry I misread your text. Turning this off is indeed not possible right now if I remember correctly. You can disable certain warnings by doing `svelte-ignore <warning-code>` but I think this doesn't work in this case.\r\n\r\nSo it would be good if this worked:\r\n```js\r\n// svelte-ignore unused-export-let\r\nexport let params;\r\n```",
          "createdAt": "2021-01-17T17:50:39Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjM4NTk2Ng==",
          "body": "> Sorry I misread your text. Turning this off is indeed not possible right now if I remember correctly. You can disable certain warnings by doing `svelte-ignore <warning-code>` but I think this doesn't work in this case.\r\n> \r\n> So it would be good if this worked:\r\n> \r\n> ```js\r\n> // svelte-ignore unused-export-let\r\n> export let params;\r\n> ```\r\n\r\nThanks! I'll be using this for now, but an official fix will be appreciated :)\r\n\r\n---\r\n\r\nEDIT: I'm sorry to say @dummdidumm, but this doesn't work for `export let`\r\n\r\n![Screenshot 2021-01-19 at 12 48 41 PM](https://user-images.githubusercontent.com/52203828/105000708-a9f39e00-5a54-11eb-95bc-13dbbebbc32f.png)\r\n",
          "createdAt": "2021-01-18T17:32:12Z",
          "author": { "login": "arnu515", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjQxNDQxOQ==",
          "body": "What's the point of passing a prop to a component that is not used? Looks like a code smell to me.\r\n\r\n---\r\n\r\nEDIT: I just read your Gist. If you go through the trouble to set up your own PageJS instance and rebuild a Svelte router from scratch. Why not also conditionally pass the query & params props when they're actually filled?",
          "createdAt": "2021-01-18T18:38:58Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjY0NzE0Mg==",
          "body": "> What's the point of passing a prop to a component that is not used? Looks like a code smell to me.\r\n> \r\n> EDIT: I just read your Gist. If you go through the trouble to set up your own PageJS instance and rebuild a Svelte router from scratch. Why not also conditionally pass the query & params props when they're actually filled?\r\n\r\nI don't know how to do that, maybe something like this:\r\n\r\n```svelte\r\n{#if query}\r\n<Component {query} />\r\n{:else}\r\n<Component />\r\n{/if}\r\n```\r\n\r\nBut then what will I do on the component's end? I'm guessing `$$props`. But that's not the point of this issue. The point is to allow unused props without raising warnings.",
          "createdAt": "2021-01-19T07:07:34Z",
          "author": { "login": "arnu515", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjY1OTYyMg==",
          "body": "\r\n> EDIT: I'm sorry to say @dummdidumm, but this doesn't work for `export let`\r\n> \r\n\r\nYes I know, that's why I said `would`. If it worked this would be the solution. But currently not all compiler warnings can be silenced that way. If they can then this would be the proper solution.",
          "createdAt": "2021-01-19T07:36:48Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjY2MDA4NQ==",
          "body": "> > EDIT: I'm sorry to say @dummdidumm, but this doesn't work for `export let`\r\n> \r\n> Yes I know, that's why I said `would`. If it worked this would be the solution. But currently not all compiler warnings can be silenced that way. If they can then this would be the proper solution.\r\n\r\nOh right! Didn't read the would. Do you have a new solution?",
          "createdAt": "2021-01-19T07:38:00Z",
          "author": { "login": "arnu515", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjY2MDc1NQ==",
          "body": "No there is no solution currently that I know of. Well... You could try `export let param;param;`",
          "createdAt": "2021-01-19T07:39:36Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjY3NzYwOA==",
          "body": "> No there is no solution currently that I know of. Well... You could try `export let param;param;`\r\n\r\nYes that will work, but an official fix is suggested :)",
          "createdAt": "2021-01-19T08:16:10Z",
          "author": { "login": "arnu515", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjcwMjMwNA==",
          "body": "I know you requested te option to silence the warnings. So this might not be good enough. I'm trying anyhow.\r\n\r\nBut what about a `props` object that is spread on the component? If the key is not defined, the prop will not be passed. The components that should receive params can specify the used props. If a component does not specify a prop, that means it is not used while it is provided in the query or params, which makes the warning valid.\r\n\r\n```ts\r\nexport let params: Object;\r\nexport let query: Object;\r\n```\r\n\r\nIn the router setup it could look a little like this:\r\n\r\n```svelte\r\n<script>\r\nlet props = {};\r\n\r\nfunction setProps(params: Object, query: Object) {\r\n  const newProps = {};\r\n\r\n  if(Object.keys(params).length > 0) {\r\n    newProps.params = params\r\n  }\r\n\r\n  if(Object.keys(query).length > 0) {\r\n    newProps.query = query\r\n  }\r\n\r\n  props = newProps;\r\n}\r\n</script>\r\n\r\n<svelte:component {...props} />\r\n```",
          "createdAt": "2021-01-19T09:03:11Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjczMDgxOA==",
          "body": "> I know you requested te option to silence the warnings. So this might not be good enough. I'm trying anyhow.\r\n> \r\n> But what about a `props` object that is spread on the component? If the key is not defined, the prop will not be passed. The components that should receive params can specify the used props. If a component does not specify a prop, that means it is not used while it is provided in the query or params, which makes the warning valid.\r\n> \r\n> ```ts\r\n> export let params: Object;\r\n> export let query: Object;\r\n> ```\r\n> \r\n> In the router setup it could look a little like this:\r\n> \r\n> ```svelte\r\n> <script>\r\n> let props = {};\r\n> \r\n> function setProps(params: Object, query: Object) {\r\n>   const newProps = {};\r\n> \r\n>   if(Object.keys(params).length > 0) {\r\n>     newProps.params = params\r\n>   }\r\n> \r\n>   if(Object.keys(query).length > 0) {\r\n>     newProps.query = query\r\n>   }\r\n> \r\n>   props = newProps;\r\n> }\r\n> </script>\r\n> \r\n> <svelte:component {...props} />\r\n> ```\r\n\r\nI'll try using this for now, and I'll also redo the router code. Thanks everybody for the help! I really hope that my request does get fulfilled, i.e. there'll be a way to silence the warnings in the future, but I got what I wanted.\r\n\r\nAny moderators/members can close this issue if they want to :)",
          "createdAt": "2021-01-19T09:52:27Z",
          "author": { "login": "arnu515", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODYwODMwMDQ=",
    "body": "Hi, guys I unsuccessfully tried to remove unused css imported from an external css file. \r\n\r\nI have tried a lot of combinaisons in vain, every time I run the build script I end up with a huge _bundle.css_.\r\n\r\nHere is the list of everything I tried so far:\r\n- Importing the file from App.svelte <script>\r\n- Importing the file from App.svelte <style> (using [postcss-import](https://github.com/postcss/postcss-import))\r\n- Importing the file directly from main.js\r\n- Using [postcss-purgecss](https://github.com/FullHuman/purgecss) along with [rollup-plugin-postcss](https://github.com/egoist/rollup-plugin-postcss) instead of passing by [svelte-preprocess](http://github.com/sveltejs/svelte-preprocess)\r\n\r\n\r\nI am pretty sure there is something I am doing wrong but I honestly cannot figure out what. \r\nIf anyone have a clue on how to resolve this I would love to hear some feedback.\r\n\r\nSimple repo example: https://github.com/mgrisole/svelte-playground\r\n\r\nMaxime\r\n",
    "closedAt": "2021-01-14T17:14:34Z",
    "createdAt": "2021-01-14T15:28:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDMzNjQzNQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-01-14T17:14:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDM1MDY5OA==",
          "body": "So what this is suppose to mean ?\r\n![image](https://user-images.githubusercontent.com/33571141/104627034-87344480-5664-11eb-8b2e-94c77e47e5ff.png)\r\n\r\nI genuinely think questions like this could profit others and to me platforms like StackOverflow or Discord does not seems like good solution to centralize information (especially Discord).\r\n\r\nWhat about opening a discussion section on Github ?",
          "createdAt": "2021-01-14T17:38:10Z",
          "author": { "login": "mgrisole", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODYwMzUzMzI=",
    "body": "**Describe the bug**\r\nWhile debugging memory leak issue in my playing around svelte-kit repo, I ran into this issue (not related to svelte-kit), the store still log current time after prerender request done.\r\n\r\n**To Reproduce**\r\n[Repl](https://svelte.dev/repl/5b9b1dfae2554744bf2b35ab846472b1?version=3.31.2)\r\nOpen that link and switch to Js Output tab and choose `generate`: `ssr`:\r\n\r\nStore declare inside component look good:\r\n```js\r\nlet $now, $$unsubscribe_now;\r\n$$unsubscribe_now = subscribe(now, value => $now = value);\r\n$$unsubscribe_now();\r\n```\r\nBut store get from import statement, subscribed 2 times before unsubscribe\r\n```js\r\nlet $now_from_import, $$unsubscribe_now_from_import;\r\n$$unsubscribe_now_from_import = subscribe(now_from_import, value => $now_from_import = value);\r\nnow_from_import.subscribe($$value => $now_from_import = $$value);\r\n$$unsubscribe_now_from_import();\r\n```\r\n\r\n\r\n",
    "closedAt": "2021-01-29T16:07:33Z",
    "createdAt": "2021-01-14T14:30:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDAyNjE1Nw==",
          "body": "The extra subscription is gone in 3.32.1 - https://svelte.dev/repl/5b9b1dfae2554744bf2b35ab846472b1?version=3.32.1",
          "createdAt": "2021-01-29T20:14:56Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODU4MjY4MzE=",
    "body": "<img width=\"1440\" alt=\"Screenshot 2021-01-14 at 2 49 03 PM\" src=\"https://user-images.githubusercontent.com/234889/104570552-19921380-5678-11eb-9436-6723579118ef.png\">\r\n\r\n\r\n**Describe the bug**\r\n[svelte.dev](https://svelte.dev) site is broken on Safari. From the console, it seems that the asset loading is broken. The console shows following error for many assets.\r\n\r\n**Logs**\r\n```\r\n[Error] FetchEvent.respondWith received an error: Returned response is null.\r\n[Error] Cannot load https://svelte.dev/global.css.\r\n[Error] Failed to load resource: FetchEvent.respondWith received an error: Returned response is null. (global.css, line 0)\r\n```\r\n\r\n**To Reproduce**\r\n\r\n- Go to [svelte.dev](https://svelte.dev) using Safari (I'm on Version 14.0.2 (16610.3.7.1.9))\r\n- See that the site doesn't have images\r\n- Open browser console to view the logs\r\n\r\nWeirdly, I cannot reproduce it in \"Private Mode\" on Safari. Though, I have tried to clear cache and all storages (cookie, local storage, and session storage).\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Safari Version 14.0.2 (16610.3.7.1.9)\r\n- macOS 11.1 (20C69)\r\n\r\n\r\n**Severity**\r\nAll Safari users are impacted. Looks like the tutorials don't work either.",
    "closedAt": "2021-01-14T10:25:54Z",
    "createdAt": "2021-01-14T09:26:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDEwNDcwNg==",
          "body": "I've tested this on our complimentary browserstack account, and it works without issue. I think it's your machine or network. Sorry! You should check if your network configuration does something funny with dev domains.\r\n![Screenshot from 2021-01-14 10-25-13](https://user-images.githubusercontent.com/218949/104578623-dc675a80-5652-11eb-831b-3e18e5c37690.png)\r\n",
          "createdAt": "2021-01-14T10:25:54Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDgyOTY5MQ==",
          "body": "No worries, I am checking now and it's working for me. Could be some intermittent issue somewhere.",
          "createdAt": "2021-01-15T10:41:31Z",
          "author": { "login": "nayaabkhan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDg0OTIwOQ==",
          "body": "somebody else (unless it was you) did mention a similar issue in discord too. I've tried it on every copy of Safari I can find without issue. We'll keep eyes on it.",
          "createdAt": "2021-01-15T10:50:43Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MDY2MTA1Mw==",
          "body": "I'm encountering the same issue since roughly January on Safari 13, now 14.0.3 on various machines, desktop Safari only. Interestingly, this issue does not seem to appear with Safari Technology Preview 121 (Safari 14.2). It's pretty annoying as the REPL stuff and examples don't load either.\r\n\r\nI don't have funny networks settings (I think) and no extensions running. Looks like a duplicate of https://github.com/sveltejs/svelte/issues/5978",
          "createdAt": "2021-03-04T14:33:57Z",
          "author": { "login": "HendrikRunte", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODU1NTk4MDA=",
    "body": "The `this` value of event handlers should be the `InputElement` the handler is attached to. However, it is currently `undefined` for inline inputs.\r\n\r\n```svelte\r\n<script>\r\n\tlet input = null;\r\n\tlet script = \"donno\";\r\n\tlet inline = \"donno\";\r\n\t\r\n\tfunction yup() {\r\n\t\tscript = this === input;\r\n\t}\r\n</script>\r\n\r\n<input bind:this={input} \r\n\t\t\t on:input={() => inline = this /* undefined */ === input}\r\n\t\t\t on:input={yup}/>\r\n\r\n{inline} <!-- false -->\r\n{script} <!-- true -->\r\n```\r\n\r\nREPL: https://svelte.dev/repl/81d6c80cce1d488b8971fe22aa4f68c4?version=3.31.2",
    "closedAt": "2021-01-14T00:56:39Z",
    "createdAt": "2021-01-14T00:39:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTg1MTI4OQ==",
          "body": "As part of the Javascript language, arrow functions do not have their own `this`.\r\n\r\nThis works fine: https://svelte.dev/repl/5daa94f00bfe418387a917a404d42da6?version=3.31.2",
          "createdAt": "2021-01-14T00:48:12Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTg1MzkyNA==",
          "body": "I love JavaScript so much! 😂",
          "createdAt": "2021-01-14T00:56:39Z",
          "author": { "login": "kwangure", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTg1NTAxMQ==",
          "body": "Haha, in older JS code it was a huge hassle without this behavior. You would see stuff like the snippet below all over the place, taking pains to make sure that nested function had a reference to the \"correct\" this. :)\r\n\r\n```js\r\nfunction abc() {\r\n  var that = this;\r\n  function def() {\r\n     that.x =5;\r\n  }\r\n}\r\n```\r\n",
          "createdAt": "2021-01-14T00:59:48Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODU0ODAyNTU=",
    "body": "**Describe the bug**\r\nI have one child component that is dispatching a custom event with some data. A parent component is listening for that event but the handler doesn't seem to be working. This REPL shows what I want to do and is functioning properly,\r\nhttps://svelte.dev/repl/243c8577ea7c44b6982c463a2febbf23?version=3.31.2\r\nWhen I try to do the same on my local environment it doesn't work.\r\n\r\n**To Reproduce**\r\nGo to this repository and clone it,\r\nhttps://github.com/thechosenjuan/svelto\r\n\r\nInstall dependencies and run `npm run dev`\r\n\r\nWhen clicking the Add button, the console doesn't show anything as opposed to the REPL\r\n\r\nNewTask.svelte is the component dispatching the event and App.svelte is the one that listens for it.\r\n\r\n**Expected behavior**\r\nSee the details of the dispatched event on the console.\r\n\r\n**Additional context**\r\nUsing Svelte v3.31.2\r\n",
    "closedAt": "2021-01-13T23:07:55Z",
    "createdAt": "2021-01-13T21:47:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTgxNTQ0Nw==",
          "body": "In the REPL, TaskList emits the `addTask` event - but in your repo, NewTask emits that event, but you're still listening for it on TaskList.",
          "createdAt": "2021-01-13T23:07:55Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODQ2NjYxMTE=",
    "body": "**Describe the bug**\r\nComponents are unable to destroy properly when component contains a slot whose text was changed via node.textContext. Please refer to REPL link below for repro. This bug/error can prevent further interaction with the Svelte app.\r\n\r\n\r\n**Logs**\r\nAfter destroying component, Svelte throws the following error:\r\n\r\n```\r\nError:\r\nmessage: \"Uncaught (in promise): Cannot read property 'removeChild' of null\"\r\n```\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/f9cc573c14a943098f68964dc5496fd7?version=3.31.2\r\n\r\n**Expected behavior**\r\nThis may be an expected behavior of the current version of Svelte, but ideally I would be able to manipulate the DOM within a component and still destroy components in the usual Svelte-y way.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Uncaught (in promise) TypeError: Cannot read property 'removeChild' of null\r\n    at detach (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:81:25)\r\n    at detach_dev (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:344:9)\r\n    at Object.destroy [as d] (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:594:23)\r\n    at Object.destroy [as d] (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:455:39)\r\n    at destroy_component (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:235:40)\r\n    at Object.destroy [as d] (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:567:8)\r\n    at eval (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:203:31)\r\n    at run (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:24:16)\r\n    at Array.forEach (<anonymous>)\r\n    at run_all (eval at handle_message (VM950 about:srcdoc:13), <anonymous>:30:13)\r\n\r\ndetach @ VM953:81\r\ndetach_dev @ VM953:344\r\ndestroy @ VM953:594\r\ndestroy @ VM953:455\r\ndestroy_component @ VM953:235\r\ndestroy @ VM953:567\r\neval @ VM953:203\r\nrun @ VM953:24\r\nrun_all @ VM953:30\r\ncheck_outros @ VM953:184\r\nupdate @ VM953:696\r\nupdate @ VM953:169\r\nflush @ VM953:137\r\nPromise.then (async)\r\nschedule_update @ VM953:119\r\nmake_dirty @ VM953:245\r\neval @ VM953:281\r\nclick_handler @ VM953:745\r\n\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\nThis is my dev env (but this also happen on REPL@3.31.2):\r\n```\r\n  System:\r\n    OS: macOS Mojave 10.14.6\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-8557U CPU @ 1.70GHz\r\n    Memory: 87.06 MB / 16.00 GB\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 14.15.1 - /usr/local/bin/node\r\n    Yarn: 1.22.4 - /usr/local/bin/yarn\r\n    npm: 6.14.8 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 87.0.4280.141\r\n    Edge: 87.0.664.75\r\n    Firefox: 81.0.1\r\n    Safari: 13.0.4\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.35.1 \r\n    svelte: ^3.31.2 => 3.31.2 \r\n```\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nThe bug itself is game-breaking, triggering the bug will stop some, if not all, of the Svelte app. I've refactored to not use slots and to pass in as a variable instead, so at worst the code readability drops a little bit, but there may be more complex/necessary use cases that would be implicated by this bug that I haven't considered.",
    "closedAt": null,
    "createdAt": "2021-01-12T23:22:23Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTk0OTMzNQ==",
          "body": "The text is a node on its own and rewriting `h1.textContent` replaces that node with another\r\n\r\nSvelte cannot workaround the user replacing nodes, it could at best in dev mode warn that the node went missing\r\n\r\nFor your specific use case you can get the node reference by calling `h1.firstChild`",
          "createdAt": "2021-01-18T03:04:29Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODQzNTEwOTI=",
    "body": "**Description**\r\nWhen placing a calc inside of a media query you get a compiler error.\r\n\r\n**To Reproduce**\r\nThis repl contains an example of the bug.\r\nhttps://svelte.dev/repl/d3b8fb7d74d540b69b990f34105b9b22?version=3.31.2\r\n \r\nThis results in compiler error.\r\n`@media screen and (min-width: calc(100px - 10px)) {\r\n\t\th1 {\r\n\t\t\tcolor: green;\r\n\t\t}\r\n\t}`\r\n\r\n**Intended behavior**\r\nThis works with normal css so it should produce valid css instead of throwing an error\r\n\r\nSystem:\r\n    OS: Windows 10 10.0.18363\r\n    CPU: (16) x64 AMD Ryzen 7 2700X Eight-Core Processor\r\n    Memory: 7.15 GB / 15.94 GB\r\n  Binaries:\r\n    Node: 14.8.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.4 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.7 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 87.0.4280.141\r\n    Edge: Spartan (44.18362.449.0)\r\n    Internet Explorer: 11.0.18362.1\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.36.1\r\n    svelte: ^3.31.2 => 3.31.2",
    "closedAt": null,
    "createdAt": "2021-01-12T15:40:16Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1ODc2NzAwNw==",
          "body": "I think this unfortunately will involve updating the version of `css-tree` that we're using. We're pinned to an old alpha from 2017 because later versions aren't very treeshakable. It's been a while since I've checked on that project to see whether they still have the treeshakability problems or even to see whether it's still maintained.",
          "createdAt": "2021-01-12T16:16:51Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1ODc4MDMyMw==",
          "body": "@Conduitry: it is still maintained (last npm update 2 months ago)\r\n\r\n- [src\\compiler\\parse\\read\\style.ts](https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/read/style.ts)\r\n- linked to #370",
          "createdAt": "2021-01-12T16:37:14Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTYwNDI0MA==",
          "body": "I think https://github.com/thysultan/stylis might be a better fit, emotion and styled components in React use it for CSS in JS. A sophisticated parser like CSSTree seems a bit too much for the use inside the Svelte compiler (the AST is even being traversed as if it was JavaScript). ",
          "createdAt": "2021-01-16T17:44:08Z",
          "author": { "login": "ludofischer", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODI4NDgxMTg=",
    "body": "In this example i'm forwarding the default slot, the Inner component always shows that the default slot is valorized while it really is only in the second component.\r\n\r\nhttps://svelte.dev/repl/2468b77a82a044868adbaaf2c58e28b6?version=3.31.2\r\n\r\n**Expected behavior**\r\nIn the first case $$slots.default should return false since the 2nd level parant is not passing anything.\r\n\r\nAn actual workaround is to pass directly the $$slots variable from the Wrapper to the Inner component to get the correct values.\r\n\r\n**Severity**\r\nNice to have\r\n",
    "closedAt": "2021-03-03T01:46:10Z",
    "createdAt": "2021-01-10T16:00:51Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTM2MTIwMQ==",
          "body": "`$$slots` is supposed to be showing slotted content passing into the component.\r\n\r\nTo the `Inner`'s point of view, the slotted content is whatever passes in between `<Inner>` and `</Inner>`, which is\r\n\r\n```\r\n<slot />\r\n```\r\n\r\nRather what is slotted into the `<slot />`.",
          "createdAt": "2021-03-03T01:46:10Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODI2MTgzMzY=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\nGithub Discussions is currently in public beta. Has there been any discussion about moving \"community support\" from Discord to Discussions?\r\n\r\nReasons for using Discussions:\r\n1. We lose a lot of community knowledge through Discord.\r\nOnce a question has been asked and answered, it is buried in a stream of new messages never to be found again. With discussions, you can easily browse previous discussions, and conversations are discoverable through Google. \r\nUpvoting, comments and reactions make it easy to discover interesting info on Discussions.\r\n\r\n2. Not everyone uses Discord.\r\nFor example, I only use discord for Svelte. This means I only visit the channel by accident or if I'm really stuck on a problem. I assume I'm not the only one.\r\n3. Many issues and feature requests etc. are lost\r\nSearch for [issues(and comments) mentioning Discord on Github](https://github.com/sveltejs/svelte/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+Discord). I assume there are a lot more issues than the 34 that were discussed on Discord but no one reported here.\r\nAlso, links to the conversation on Discord are especially rare due to how Discord's stream-of-consciousness conversations work. Using a Discord conversation to move an Issue forward is unnecessarily difficult.\r\n4. People still use Github Issues to ask for help anyway.\r\nConverting an issue into a Discussion is trivial. But it stays as an issue if we use Discord, thus adding noise to actual issues that serve as a roadmap of sorts.\r\n5. Addressing issues on Discord is difficult\r\nPeople are asking questions/sharing info over each other, making it difficult to respond to other's messages. If no one responds to you in a few minutes, it's likely no one ever will. Github Discussions separates every question/conversation/showcase separately making sure everyone's is addressed.\r\n6. People may use different identities on Discord\r\nIt's difficult to @mention someone relevant to a conversation unless they're using the same Github username on Discord, so you don't know if it's really them.\r\n\r\nI have 42.7 more reasons, but I'll spare you the pain.\r\n\r\nCase in point: it's possible this question has been asked on Discord, but I don't know where to find the said discussion.\r\n",
    "closedAt": "2021-01-26T11:40:39Z",
    "createdAt": "2021-01-09T14:28:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzI1MTQzMA==",
          "body": "It's been asked on GitHub as well. #5857",
          "createdAt": "2021-01-09T14:34:41Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzI1NTI2Nw==",
          "body": "Oops! I didn't find that one. It's good to know the frustration is shared.",
          "createdAt": "2021-01-09T14:38:09Z",
          "author": { "login": "kwangure", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTM3MDA4OQ==",
          "body": "I fully appreciate the issue with time and resources to moderate such a thing, but I think this is a serious issue that needs addressing. I would love to move to svelte and was even interested in helping out, but I've been completely put off by the lack of a sensible discussion forum.\r\n\r\nAt the very least you should point people to stackoverflow instead of discord. Using discord for this is a joke - you can't have a sensible technical discussion on a chat system.",
          "createdAt": "2021-01-13T10:53:20Z",
          "author": { "login": "SystemParadox", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTUxNjQ3MQ==",
          "body": "To Point 6: You can link GitHub and Discord account. I think both (Discord, GH-Discussions) are having their special pros and cons. At the end of the day i would prefer using both platforms because i think so you can get the best of both.",
          "createdAt": "2021-01-13T15:18:42Z",
          "author": { "login": "HAUDRAUFHAUN", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTUyMTg2NQ==",
          "body": "Repeating questions are the worst on discord, but I think discord is maybe still cool for \"realtime\" support?\r\nI think it's not really maintenance-heavy to keep discord around, but maybe more for \"playing around\" (or really specific things?), not for serious questions or \"half-issue-half-question\"-questions. I don't know about \"Github Discussions\", but it will probably be really searchable and all that stuff, better than Discord.\r\nAlso maybe telling people to share their problems more (on Stackoverflow &/or Github Discussions) would be a good idea.",
          "createdAt": "2021-01-13T15:26:55Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTY0MDMyNA==",
          "body": "> Repeating questions are the worst on discord, but I think discord is maybe still cool for \"realtime\" support?\r\n\r\nIf I may add, for us at [tldr-pages](https://github.com/tldr-pages) a great solution to this problem has been to use [Gitter](https://gitter.im/tldr-pages/tldr), which solves these issues quite nicely IMO:\r\n- No need to create a new account (login with GitHub account)\r\n- A [permanent archive](https://gitter.im/tldr-pages/tldr/archives) of the chat is publicly available and to some extent searchable (we use this all the time to add chat permalinks to chat conversations into a github issue or PR to provide context)\r\n- Close integration with GitHub: avatars and usernames are the same, channel sidebar shows a stream of repository activity, etc.\r\n\r\nAnd best of all, it's [open source](https://gitlab.com/gitterHQ/webapp)!",
          "createdAt": "2021-01-13T18:37:18Z",
          "author": { "login": "waldyrious", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDEwNjUwOQ==",
          "body": "Svelte used to use Gitter, and we moved away to discord. I don't know the reasons behind it, but there were probably things which we didn't like about it. Gitter has had a dramatic decrease in usage since its inception, which doesn't seem to correlate with it being a good solution.",
          "createdAt": "2021-01-14T10:29:16Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzQ4NzcwMg==",
          "body": "Closing this as I think gh discussions are out of the question.\r\n\r\nIf there were to be a new issue to discuss this problem, I would like to see it pitched as more \"a way to retain persistent questions and answers\" vs \"use product B\".",
          "createdAt": "2021-01-26T11:40:39Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzQ5MjgwNw==",
          "body": "@antony Why is gh discussions out of the question? (Maybe I missed something)\r\n@kwangure maybe you could rename this issue to \"Move most discussions to Github discussions\"?",
          "createdAt": "2021-01-26T11:51:21Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzUwODE1Nw==",
          "body": "> @antony Why is gh discussions out of the question? (Maybe I missed something)\r\n\r\nhttps://github.com/sveltejs/svelte/issues/5857\r\n\r\n> @kwangure maybe you could rename this issue to \"Move most discussions to Github discussions\"?\r\n\r\nThat issue title again reads \"Move most discussions to Product B\".\r\nEssentially, issues such as this should be raised with a view to discuss a problem, not with a predetermined, preselected, unilaterally decided solution. It fosters a better discussion and therefore a better solution.\r\n",
          "createdAt": "2021-01-26T12:22:49Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzU0OTkzMQ==",
          "body": "> Hi @kswope - I can understand your frustration, but we have neither the resource nor time to support or moderate another forum. (#5857)\r\n\r\nIt takes significantly more time to re-answer questions 10 times on discord (which I'm doing too, sometimes).\r\n\r\nThen maybe the title should be adjusted to read more like \"Re-answering is annoying\" and the first comment could be \"I think Github Discussions is good against this problem, here's why:\".\r\n@antony I get your point in keeping it neutral.\r\nAlso sorry if I'm sounding harsh 😅 ",
          "createdAt": "2021-01-26T13:45:05Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzU4Njg3OQ==",
          "body": "A good bunch of the problems I pointed out while opening this issue are issues that do not necessarily come from being on Discord, but from NOT being on Github. I was soliciting for having all things in one place, and all the benefits that come from it. That said, I understand where @antony is coming from.\r\n\r\nI'm stepping back from this one and inviting anyone else to take move the issue forward, with a non-Github-Discussions solution to \"the Discord problem\".",
          "createdAt": "2021-01-26T14:39:05Z",
          "author": { "login": "kwangure", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzYwNjE1NQ==",
          "body": "> It takes significantly more time to re-answer questions 10 times on discord (which I'm doing too, sometimes).\r\n\r\nI write gists if I need to answer something a lot. Gists, presentations, talks, and example apps.\r\nBut more importantly, stackoverflow exists, is already used, and is something we actively answer questions on.\r\n\r\nYou are correct in that the title should be \"Re-answering is annoying\" - that's exactly what I mean by presenting with a problem, not a solution :)",
          "createdAt": "2021-01-26T15:07:24Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODIxNzExMzU=",
    "body": "Currently it is difficult to take advantage of the style encapsulation from the shadow dom when using Svelte.\r\nThe problem is that Svelte always appends styles to `document.head`. When your component is renderen into a shadow dom, the styles will be appended outside the shadow root and therefore will have no effect in your Svelte-Application.\r\n\r\nThere are already ways to use Svelte in a shadow dom - however, they all have their drawbacks:\r\n\r\n- compile the Svelte application to WebComponents with the `customElement: true` compiler option:\\\r\n  There are some important differnces: see [Custom element API](https://svelte.dev/docs#Custom_element_API) from the official Svelte docs.\r\n- emit a css and a js file and write a custom loader that creates a shadow root and injects the css and js files into the shadow dom:\\\r\n  I already tried this approach. It worked great until I started caching the ressources. It sometimes happened that the new js file was loaded with the old css file (yes, I have set both cache headers the same). In the new js file, all class-hashes were different and so no styles could be applied.\r\n\r\nI have developed a tool that renders an overlay on any given Website. In my use case style encapsulation is necessary to deliver a good-looking product. I already have tried a few workarounds to increase the specificity of my css-selectors:\r\n\r\n- append `!important` on every style definition.\r\n- prepend every selector with the ID selector of my root\r\n- use IDs and class-names that no website uses e.g. I prefixed all my classes with 'n:' => 'n:button' or 'n:card'\r\n- write a \"reset\"-CSS on the application-root that reverts every possible user modifications e.g. background on a button\r\n- and some more small hacks\r\n\r\nIt was working for most Websites but still, every few weeks I encountered a new Issue, where the styles of the website was overriding the styles of my overlay. The size of my bundle was uneccessary bigger and it also made it impossible to use the svelte-animations, due to the high specificity of my style selectors.\r\n\r\nI came to I point where I have given up on building workarounds.\r\n\r\nIt would be really helpful for use-cases like this to be able to render a Svelte application inside a shadow dom.",
    "closedAt": null,
    "createdAt": "2021-01-08T14:49:50Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODE0NDk0NjE=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIt isn't.\r\n\r\n**Describe the solution you'd like**\r\nMy proposal is to introduce a shorthand for `<Component prop={false}>`. We could introduce the following syntax as a short form:  `<Component !prop>`. This is only useful when a prop defaults to `true`.\r\n\r\n**Describe alternatives you've considered**\r\nTo continue writing `<Component prop={false}>`.\r\n\r\n**How important is this feature to you?**\r\nNot much really... It would be nice to have though.\r\n\r\n**Additional context**\r\nn/a\r\n\r\nIs this big enough of a change to open an RFC for?\r\n\r\n\r\n\r\n",
    "closedAt": "2021-01-14T10:23:42Z",
    "createdAt": "2021-01-07T16:41:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTgyMjk3MA==",
          "body": "Following considerations:\n- it might make sense to also allow something like `<Comp !!prop />`, for the reverse use case with default to false?\n- it might also make sense to enhance the already existing shorthand like so `<Comp {!prop} />`, to signify we are passing a JS Expression.",
          "createdAt": "2021-01-13T23:27:14Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDAyNzI4OA==",
          "body": "I vote against it. I don't think it provides a big enough advantage for the additional learning overhead - it's another small thing to know, that adds up.",
          "createdAt": "2021-01-14T08:47:50Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDEwMzQ2MA==",
          "body": "I think the main problem here is that it would probably break tooling which works with HTML. Everything we've done in Svelte's HTML should work with existing editors, I think prefixing an attribute with an exclamation mark would be an exception to this.\r\n\r\nBut as @dummdidumm  says, it's not something we'd be looking to implement because it seems like additional documentation, testing, maintenance and complexity without a massive advantage.\r\n\r\nother than that I quite like it :)",
          "createdAt": "2021-01-14T10:23:42Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDQ1ODgyMA==",
          "body": "Then what about the other shorthands like for instance `<div class:myclass>` for `<div class:myclass={myclass}>`? It also involves documentation, testing, maintenance, and adds complexity (referring to the learning curve I guess).\r\n\r\nThe only difference is the __very relative__ concept of \"massive advantage\". I guess it's not something that can be assessed from only the opinion of a few people (I include both sides on that topic, those against and those for it, or rather those who would use it and those who might not).\r\n\r\nAlso, saying it's \"another thing to learn\", what's the limit in features set then? The heaviness it adds into learning it is also very subjective: for instance to me, whether I use it or not, I see that as one single piece of syntax with a clear, direct and simple purpose. Something like one sentence, I take it or leave it.\r\n\r\nMoreover, accepting this feature request shouldn't be turned into implying that it would lead to an infinite set of features adding up. I believe there's a limit in what features could be expected from such a language which Svelte is. Now, that feature request is consistent with the philosophy of other shorthands. I'm not talking about the syntax proposal which was just a suggestion, not something to be used as a reason for rejection. I do understand the fair requirement of remaining compatible with existing HTML tooling.",
          "createdAt": "2021-01-14T20:32:01Z",
          "author": { "login": "ymeine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjAyNzI4NQ==",
          "body": "> I think the main problem here is that it would probably break tooling which works with HTML. Everything we've done in Svelte's HTML should work with existing editors, I think prefixing an attribute with an exclamation mark would be an exception to this.\r\n\r\nReal bummer this gets shut down so quick. Really hate the argument that it would be additional work, and the reason to hinder progression, or even the thought of it. But for what it's worth, this should not break any HTML tooling if it's done according to spec. https://www.w3.org/TR/html52/syntax.html#elements-attributes",
          "createdAt": "2021-01-18T06:54:02Z",
          "author": { "login": "hjalmar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjA3NjY4Mw==",
          "body": "> this should not break any HTML tooling if it's done according to spec\r\n\r\nHTML attributes cannot include the `!` character\r\nhttps://svelte.dev/repl/1d539f15919d4850a8a3d3584f20d5eb?version=3.31.2",
          "createdAt": "2021-01-18T08:27:47Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjEwMTE5OA==",
          "body": "> > this should not break any HTML tooling if it's done according to spec\r\n> \r\n> HTML attributes cannot include the `!` character\r\n> https://svelte.dev/repl/1d539f15919d4850a8a3d3584f20d5eb?version=3.31.2\r\n\r\nIt would break just as much as `on:click|preventDefault` breaks. After compilation, the attribute name would be the prop name without `!` and the value be false, the opposite of default true as just passing a prop name is currently, so nothing would actually break because it's not part of the name. The question is how valid is the html and are one \"allowed\" to write a html tag with an attribute name starting with `!` without a parser freaking out, not if you can manipulate dom nodes with it.",
          "createdAt": "2021-01-18T09:06:51Z",
          "author": { "login": "hjalmar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjUyMjYxMw==",
          "body": "So I thought I'd explore this to hopefully keep the discussion going. I'm not really confident around the source code currently as this was my first time looking at it and the tests which I haven't looked into at all or mocking something up yet, but I thought I'd share my explorations at least.\r\n\r\nbranch:\r\nhttps://github.com/hjalmar/svelte/tree/logical-not-prop\r\n\r\ncommits:\r\nhttps://github.com/hjalmar/svelte/commit/57be18447782ad36213a9a751967533f4e28617e\r\nhttps://github.com/hjalmar/svelte/commit/18c50c97f17578262bedd216c53edd5a619af861",
          "createdAt": "2021-01-19T00:07:10Z",
          "author": { "login": "hjalmar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzQ4NTUyNw==",
          "body": "> Then what about the other shorthands like for instance `<div class:myclass>` for `<div class:myclass={myclass}>`\r\n\r\nthe class shorthand is used across the board to allow an identical prop name to reference a variable of the same name. {myProp} where `let myProp = false` will also work here.\r\n\r\nPrefixing a prop with an exclamation mark for the specific, singular case of a falsy boolean would require:\r\n\r\n* new syntax to learn\r\n* new documentation\r\n* a set of new tests\r\n* new parsing configuration\r\n* new linting configuration\r\n* updates to IDE plugins\r\n* modification of acorn (?)\r\n\r\nCan you understand why this was shut down? It's such a tiny DX enhancement for such a vast amount of time and work which could be better used elsewhere.",
          "createdAt": "2021-01-26T11:35:46Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzU5MjYxNQ==",
          "body": "What I can't understand is the way decisions seem to be made, or at least how the decision process might be hidden. That sounds like one opinion against another, where \"members\"/\"contributors\" win right away?\r\n\r\n- new syntax to learn: how does that weight? Yes it's new, but yet it's extremely short and straightforward syntax. With that reasoning then we don't introduce any new syntax anymore\r\n- new documentation: same question, seems to be like one sentence\r\n- a set of new tests: as for any feature, isn't it?\r\n- new parsing configuration: that is the point to be checked, but it is valid HTML attribute syntax as per the specs\r\n- new linting configuration: I agree\r\n- updates to IDE plugins: as for any new syntax anyways, all depends on how complex it is\r\n- modification of acorn (?): I don't really see how it would be the case since it's at \"HTML\" level\r\n\r\nThe fact you show a big list like this doesn't mean it's a big thing to implement, it's a quite generic list for ANY feature. If I do the same I can reject any feature in any project then. The shorthand syntax I mentioned (that indeed I showed with the specific example of `class`) is a similar thing: it's syntax shorthand, to learn, to document, to test, to highlight, to lint, etc. But it wouldn't necessarily have more usage than this feature proposal.\r\n\r\nFeature proposal which __AGAIN__ suggested `!` as syntax but didn't mean to bind this feature to this suggestion. There's not even been a discussion that could have possibly led to a \"better\" (if that one is not good) solution for the same intended purpose (which is a shorthand for `={false}`).\r\n\r\nAlso btw: it's \"tiny\" only for you and other people who think like you. For me and some others it would be big, as much as the shorthand I took as an example. So, who's right then?\r\n\r\n> Can you understand why this was shut down?\r\n\r\nI do interpret that sentence as a bit obnoxious, as if I had a lack of capability of understanding how leading a project works. Trust me I'm just trying to bring fairness into this keeping in mind it is an open source project, and I felt rejecting that feature was not fair given the somewhat fallacious arguments.",
          "createdAt": "2021-01-26T14:47:01Z",
          "author": { "login": "ymeine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzYwMzU3NQ==",
          "body": "> That sounds like one opinion against another, where \"members\"/\"contributors\" win right away?\r\n\r\nIf multiple maintainers have expressed that the feature isn't desirable, then it isn't desirable. You are correct in that we don't wish to have an endless debate about something once it's been down-voted by a few maintainers. Generally maintainers agree on the roadmap for the language, so the fact that two responded to this issue can usually be taken as a guide that the general consensus of those responsible for the language would be negative on the feature suggestion.\r\n\r\n> With that reasoning then we don't introduce any new syntax anymore\r\n\r\nWe try not to, that is correct. Svelte benefits from having a small, simple, predictable API. Every wibble and wobble we add to it increases the learning curve, and reduces the simplicity of the language.\r\n\r\n> There's not even been a discussion\r\n\r\nBecause this is a feature request for something that is exceptionally trivial, it refers to one type of variable in one scenario. It's not something that seems deserving of increasing the API surface of Svelte in order to implement.\r\n\r\n> I do interpret that sentence as a bit obnoxious\r\n\r\nIt wasn't intended to be obnoxious, it was a genuine question to ask if you understood why I closed the issue - it's because we don't want to implement a boolean shorthand at this time.",
          "createdAt": "2021-01-26T15:03:34Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzYxMjAzMw==",
          "body": "I see five thumbs up on the request, and only after 2 maintainers commented it was closed. I understand not every request should end up accepted, but it remains an open source project and there wasn't ANY debate when you closed it, and yet still not any since the inputs we try to bring are not considered: what do you think about the comments I made on the list you wrote? Is it really a relevant argument to turn down the request? What about discussing about another syntax since it was the only technical argument used to reject the proposal? How about external contributors PRs to overcome everything except the additional learning curve? How is that learning curve limit defined? etc etc\r\n\r\nAnd how would that syntax make it less small, simple and predictable API next to the other pieces of syntax?? How would that feature be the threshold where everything collapses?\r\n\r\n> it's because we don't want to implement a boolean shorthand at this time.\r\n\r\nEven if I feel an open source project of that size shouldn't take decisions that way, that's the very first rationale I can truly receive.\r\n\r\nBtw, `class:myClassName={myClassActive}` is not any different: it's for toggling a class. How is that different from toggling a boolean input property? I have hundreds of boolean inputs if I take all the components I write! And moreover they're most of the time linked to classes btw...",
          "createdAt": "2021-01-26T15:16:18Z",
          "author": { "login": "ymeine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzYyMDg3NQ==",
          "body": "This seems like it's of critical importance to you. In that case, please open a RFC to discuss syntax and list all of the advantages (those which outstrip the disadvantages we feel it will cause) it will bring, which haven't been made clear here.",
          "createdAt": "2021-01-26T15:29:12Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMTg1Mzc5OQ==",
          "body": "I opened this issue and completely left it to dry...\r\nTo me the `!prop`shorthand (or any other shorthand for this problem) is only solving a problem Svelte itself created. HTML5 already has boolean attributes. These attributes can be set like this `<element attr></element>`. In HTML5 a boolean attribute *NEVER* defaults to `True`. I'm not saying Svelte shouldn't allow boolean props to default to `True`. I'm saying it would only make sense to complement HTML5 with a feature analogous to one it already has. To me the \"increasing the API surface\" argument feels weak. A shorthand for `attr={True}`already exists. Provided by HTML5 itself, why not enhance it, and also add an attribute `attr={False}` (`prop={False}`) shorthand? \r\n\r\nFrom the first comment: \r\n\r\n> it might make sense to also allow something like <Comp !!prop />, for the reverse use case with default to false?\r\n\r\nThis would be `<Comp prop />`, no? Or am I missing something?\r\n\r\nThis said, I understand the point that this is such a small feature and manpower could be used somewhere else.\r\n\r\nThe API surface, documentation and learning curve points don't really resonate with me though. \r\n\r\n",
          "createdAt": "2021-04-17T16:59:13Z",
          "author": { "login": "Zizico2", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODExNzk0NzE=",
    "body": "```html\r\n<ul bind:clientWidth>\r\n  <li>1</li>\r\n  <li>2</li>\r\n  <li>3</li>\r\n</ul>\r\n```\r\n![image](https://user-images.githubusercontent.com/73285310/103877071-8acd4600-510f-11eb-8ab3-634f037a5012.png)\r\n\r\n### last-child not working\r\n```\r\nul > li:last-child {\r\n  // not working\r\n}\r\n```\r\n\r\n",
    "closedAt": "2021-01-09T04:51:25Z",
    "createdAt": "2021-01-07T09:47:47Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NjAxMTYxNA==",
          "body": "That's because the li you are trying to target isn't the last child. Now there should only ever be li's or non rendered content inside ul's but if that for whatever reason is out of your control you can target the last li with `li:last-of-type{}`\r\n\r\n*edit: i see that it's because of the bind here that's injecting it, was tunneling on the markup, there must be a better way to get the clientWidth than injecting an iframe. hmm. ",
          "createdAt": "2021-01-07T09:54:58Z",
          "author": { "login": "hjalmar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NjAyMTM3Nw==",
          "body": "Yes, injecting ```iframe``` is not a good solution due to the use of ```bind:clientWidth```, currently I have to use ```last-of-type```",
          "createdAt": "2021-01-07T10:13:06Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NjAyMjA5NQ==",
          "body": "Is that a bug?",
          "createdAt": "2021-01-07T10:14:26Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NjAzMDcyNw==",
          "body": "@dodois please use the issue template to report issues so that we can correctly investigate your issue.",
          "createdAt": "2021-01-07T10:30:47Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzA0OTgwMA==",
          "body": "@dodois there is are two simple workarounds.\r\n\r\n1.  use `bind:this` and get the with whenever you need it.\r\n2. Just wrap your `<ul>` with another element like a `<div>` which has the `bind:` on it. The Iframe is needed to measure the width.\r\n\r\nREPL: https://svelte.dev/repl/b64056d1799a495a90dd221a10e6cdca?version=3.31.2\r\n\r\n",
          "createdAt": "2021-01-08T23:39:28Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzA5NjIyMQ==",
          "body": "@dreitzner Thanks, I will close this issue",
          "createdAt": "2021-01-09T04:51:25Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODExMTczOTA=",
    "body": "**Describe the bug**\r\n\r\nFrom https://github.com/sveltejs/svelte/commit/1d6ac5ea349a8e35a5506a1bdf480a8f59474ca4 , we can inherit default slot values in named slots, but when using default slot inside #each, #await blocks, this will make an error `xxx is not defined` in runtime.\r\nSee repl:\r\nhttps://svelte.dev/repl/f5da3404626a42329a63128c115933ef?version=3.31.2\r\n\r\n**Expected behavior**\r\nWarning or make it work correctly\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2021-01-07T08:05:01Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3ODA0ODY1ODY=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nTake this simple store as an example:\r\n\r\n```ts\r\nimport { readable, Readable } from 'svelte/store';\r\n\r\nconst store: Readable<string> = readable('', (set) => {\r\n    helper(set);\r\n})\r\n\r\nfunction helper(set) {\r\n    set('test');\r\n}\r\n```\r\n\r\nThe problem is that I can't type `helper`'s argument and return types because there are some internal Svelte types that are **not exported**:\r\n\r\n```ts\r\n/** Callback to inform of a value updates. */\r\ntype Subscriber<T> = (value: T) => void;\r\n\r\n/** Unsubscribes from value updates. */\r\ntype Unsubscriber = () => void;\r\n```\r\n\r\nThis applies to many other internal types in `svelte/store`, too, ie. The below is not exported:\r\n\r\n```ts\r\n/** Start and stop notification callbacks. */\r\ntype StartStopNotifier<T> = (set: Subscriber<T>) => Unsubscriber | void;\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nI would like to be able to write:\r\n\r\n```ts\r\nfunction helper(set: Subscriber<string>): Unsubscriber | void {\r\n    set('test');\r\n}\r\n```\r\n\r\nThe same would apply to other features of Svelte, too.\r\nThis means Svelte would have to export (almost) all of its Typescript definitions in `svelte/store`\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI've looked at Type Inference but that's fairly inconvenient for dev. I'd prefer to directly use Svelte's internal type definitions.\r\n\r\n**How important is this feature to you?**\r\n\r\nI'm looking for a way to use Typescript with Svelte efficiently. This would help a lot with using Typescript in Svelte.\r\n\r\n\r\n**Additional context**\r\nNote that I haven't used Svelte a lot. There are maybe better Typescript practices for this Svelte use case that someone can advise?\r\n",
    "closedAt": "2021-03-24T15:02:14Z",
    "createdAt": "2021-01-06T11:32:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzA1NTUwOA==",
          "body": "Type definitions should be available here, but I am afraid not for the store:\r\nhttps://github.com/pyoner/svelte-typescript/tree/master/packages/types\r\n\r\nWhy would you use a helper function outside of the subscriber function?\r\nInside the scope the type would persist and make your live easier....\r\n",
          "createdAt": "2021-01-09T00:05:10Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzA1OTczMA==",
          "body": "> Type definitions should be available here, but I am afraid not for the store:\r\n> https://github.com/pyoner/svelte-typescript/tree/master/packages/types\r\n> \r\n> Why would you use a helper function outside of the subscriber function?\r\n> Inside the scope the type would persist and make your live easier...\r\n\r\nSometimes we need that for code organization.\r\nThere's a REPL from Svelte that does the same:\r\n- https://svelte.dev/repl/dcc69ccad6c341e8b75ee38c3eac1524?version=3.20.1\r\n\r\nUsing Typescript *Declaration Merging* to manually export those store types is the best work around at the moment.\r\nNot sure how the Svelte team would approach to provide better Typescript DX?\r\n\r\nI also feel like we need a **Svelte Typescript Cheatsheet** (like the [React Typescript one](http://react-typescript-cheatsheet.netlify.app/))",
          "createdAt": "2021-01-09T00:21:54Z",
          "author": { "login": "hantatsang", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzA5MzAwMg==",
          "body": "I have the same need.\r\nThere are many types that are not exported, which makes working with TypeScript difficult.",
          "createdAt": "2021-01-09T04:20:59Z",
          "author": { "login": "cereschen", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDg0MzAxNQ==",
          "body": "Some further info:\r\n\r\n- store types are located at node_modules\\svelte\\types\\runtime\\store\\index.d.ts \r\n- the export for some of the types is not set\r\n\r\nI can think of 2 things that could be done:\r\n\r\n1. Create a github action to automatically port the types to https://github.com/pyoner/svelte-typescript/tree/master/packages/types (or create a svelte/types repo)\r\n2. export them by default (for this it might be a good idea to create a namespace for svelte to not clash with other types from external libaries that might be imported)",
          "createdAt": "2021-01-15T10:47:41Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTI5Njg1Mg==",
          "body": "> Some further info:\r\n> \r\n> * store types are located at node_modules\\svelte\\types\\runtime\\store\\index.d.ts\r\n> * the export for some of the types is not set\r\n> \r\n> I can think of 2 things that could be done:\r\n> \r\n> 1. Create a github action to automatically port the types to https://github.com/pyoner/svelte-typescript/tree/master/packages/types (or create a svelte/types repo)\r\n> 2. export them by default (for this it might be a good idea to create a namespace for svelte to not clash with other types from external libaries that might be imported)\r\n\r\nOption 2 is ideal.\r\nOption 1 is a workaround and it also introduces another package into one's project, I want to avoid that.",
          "createdAt": "2021-01-16T02:29:35Z",
          "author": { "login": "hantatsang", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTU1MTI2NA==",
          "body": "Inspected further and there are some store types that are only internally useful and don't need to be exported. Check out the PR link above\r\n\r\n",
          "createdAt": "2021-01-16T11:54:48Z",
          "author": { "login": "hantatsang", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzkyNTA0Mzk=",
    "body": "## version: \"svelte\": \"^3.31.1\",\r\n\r\n**Describe the bug**\r\n\r\nThe offsetHeight of the element wrapping the local image is equal to 0\r\n\r\n```html\r\n<script>\r\n  import { onMount } from \"svelte\";\r\n  export let plugins = [\r\n    { icon: \"./assets/wifi.png\" },\r\n    {\r\n      icon:\r\n        \"https://images.theconversation.com/files/93616/original/image-20150902-6700-t2axrz.jpg?ixlib=rb-1.1.0&q=45&auto=format&w=1000&fit=clip\",\r\n    },\r\n  ];\r\n  let liOrigin = {};\r\n  let lis = [];\r\n  onMount(() => {\r\n    // I'm sure local images exist\r\n    // Local image bug, Web image ok\r\n    liOrigin.height = lis[0].offsetHeight;\r\n    console.log(liOrigin);\r\n    // lis[0]\r\n    // liOrigin.height 0   ///////////////////////////////////  bug\r\n    // lis[1]\r\n    // liOrigin.height 502\r\n  });\r\n</script>\r\n\r\n<ul>\r\n  {#each plugins as item, i}\r\n    <li bind:this={lis[i]}>\r\n      <!-- Local image bug, Web image ok-->\r\n      <img src={item.icon} alt=\"\" />\r\n    </li>\r\n  {/each}\r\n</ul>\r\n\r\n```\r\n\r\n**Logs**\r\n![image](https://user-images.githubusercontent.com/73285310/103670823-1088ae80-4fb5-11eb-8ad2-012362fac06a.png)\r\n\r\n",
    "closedAt": "2021-01-11T07:38:31Z",
    "createdAt": "2021-01-05T16:24:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDc0NTgxMg==",
          "body": "I imagine this is a race condition, and resize detection doesn't work if the image loads too quickly (and a local image would load a lot faster than a remote one).\r\n\r\nDo you have a repo that can be cloned to reproduce this?",
          "createdAt": "2021-01-05T16:30:05Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NTA1NzU5OQ==",
          "body": "~~[repo](https://codesandbox.io/s/xenodochial-sid-w3d8z?file=/App.svelte)~~\r\n~~Unable to reproduce the problem from ``codesandbox``, please download and build~~",
          "createdAt": "2021-01-06T03:40:27Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzA2NDE0Mw==",
          "body": "@dodois if I may say so: please put images into the public folder 😉\r\nworks like a charm",
          "createdAt": "2021-01-09T00:42:38Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzA2NDMyMg==",
          "body": "Issue can be closed. Image will never be loaded correctly as it is not `/public`",
          "createdAt": "2021-01-09T00:43:31Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzExMjk4NQ==",
          "body": "@dreitzner [https://github.com/dodois/5863](https://github.com/dodois/5863) please check this repo",
          "createdAt": "2021-01-09T07:54:58Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzUzMDAwOQ==",
          "body": "@dodois concerning your repo (tested on windows, Chrome):\r\n\r\n- the offsetHeight is 18px when I build and run it (so it is showing something, but it is still a wrong value)\r\n  - I did not run tailwind, that might be why my result may differ\r\n- both images load\r\n- if you check the offsetHeight AFTER the images are loaded (use an [action](https://svelte.dev/docs#use_action) for example), than the height should be correct.\r\n- what you are describing is NOT a svelte bug. if you check the height before the images are loaded with vanilla js (which svelte will compile to anyway) than the result should be the same",
          "createdAt": "2021-01-10T19:27:36Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzUzMDA1MA==",
          "body": "not a bug, issue can be closed",
          "createdAt": "2021-01-10T19:27:54Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzU5MDIwNA==",
          "body": "@dreitzner Why there is a difference between local image and network image to get offsetHeight？",
          "createdAt": "2021-01-11T02:11:49Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzY1MzQ5Mg==",
          "body": "There is none in my machine. They both have a height of 18px. But since you check inside of onMount (images are not loaded yet), the height has nothing to do with images.\nI hope this clears things up.",
          "createdAt": "2021-01-11T06:33:35Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzY2Nzg2Mg==",
          "body": "@dreitzner The only way to do this is to add an onload method to ```<img onload=\"x()\">```, and I can't even do ```window.onload```because there's no corresponding lifecycle",
          "createdAt": "2021-01-11T07:12:09Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzY3NTAxMg==",
          "body": "@dodois can you maybe describe what you are trying to do. That might help me understand what you are looking for.",
          "createdAt": "2021-01-11T07:31:06Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzY3NzU2NA==",
          "body": "@dreitzner First of all thank you, I have implemented the requirements through other solutions, I am a react/angular/vue user and am now trying svelte",
          "createdAt": "2021-01-11T07:37:07Z",
          "author": { "login": "dodois", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzY4ODAxMg==",
          "body": "@dodois \r\nhere is a little extension to your example: https://svelte.dev/repl/412dc5699ebc486fba31c6de11e1979f?version=3.31.2\r\nThis should give you the lifecycle for the image itself :)",
          "createdAt": "2021-01-11T08:02:56Z",
          "author": { "login": "dreitzner", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Nzg4NDIwMTM=",
    "body": "https://svelte.dev/repl/0a1643eaf7f6402a87ef37e961aae530\r\n",
    "closedAt": "2021-01-05T10:39:49Z",
    "createdAt": "2021-01-05T10:20:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDU1MzkwNQ==",
          "body": "The problem is that 'collector' array contains null values when bound elements are no longer present.\r\n\r\nAs targetArr becomes smaller,  collector length is always at it's largest - and filled with null for any non found items.\r\n\r\nIdeally, the 'collector' length would be the same as the number of 'p' tags rendered.\r\n",
          "createdAt": "2021-01-05T10:36:25Z",
          "author": { "login": "softgripper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDU1NTcyMQ==",
          "body": "@Valexr as detailed in the github issue template, this isn't the right place for support. Please use [discord](https://svelte.dev/chat) to get help with usage.",
          "createdAt": "2021-01-05T10:39:49Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDU1NjE1MA==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2021-01-05T10:40:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Nzg2NDI2NDE=",
    "body": "**Describe the bug**\r\nWhen we try to assign name to the slot dynamically, we are not able to do so as it says '<slot> name can not be dynamic'.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/e1f35989fecb4d4ea828db4b6b249a5c?version=3.5.1\r\n\r\n**Expected behavior**\r\nSlot name should be assigned dynamically such as in {#each} blocks.\r\n\r\n**Severity**\r\nWe are making a component library using svelte; if this issue persists we have a feature in which by supplying data to named slots the layout changes. For that feature this is a blocker.\r\n\r\n",
    "closedAt": "2021-01-05T12:06:19Z",
    "createdAt": "2021-01-05T06:56:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDU5NTk0Mw==",
          "body": "This isn't a bug, it's a lack of a feature, as the error message you got indicates. This sounds like something there would be a lot of nuance about how it would work and how it would interact with other features. To that end, if you can give specific and detailed requirements of what you're looking for, please open an RFC in the 'rfcs' repo.",
          "createdAt": "2021-01-05T12:06:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Nzg1MTEzMTE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nYes. Sometimes dev's maybe thought that this is a bug\r\n\r\n**Describe the solution you'd like**\r\nThe compiler should give a compile error\r\n\r\n\r\n**Additional context**\r\n```svelte\r\n<h1 class:={true}>Hello!</h1>\r\n```\r\nhttps://svelte.dev/repl/4afa49d00f544af18d89594881340a54?version=3.31.2",
    "closedAt": "2021-01-29T15:33:40Z",
    "createdAt": "2021-01-05T02:07:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDAyNTcyNw==",
          "body": "As of 3.32.1, this is prevented at parse time - https://svelte.dev/repl/4afa49d00f544af18d89594881340a54?version=3.32.1",
          "createdAt": "2021-01-29T20:14:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Nzg0MTg4Nzc=",
    "body": "Discord is a chatroom, not a place for serious questions and answers, and isn't indexed by web crawlers, so its walled off from the internet and search engines afaik\r\n \r\nVibrant examples of online forums ( and very friendly for new users )\r\n\r\nhttps://forum.vuejs.org/\r\nhttps://forum.babylonjs.com/\r\nhttps://elixirforum.com/\r\nhttps://users.rust-lang.org/\r\n\r\nSome other reasons not to use discord besides it being a bloated instant messenger.\r\nhttps://stallman.org/discord.html\r\n\r\nAnother important reason: somebody else is going to set it up, but you won't have any control over it.",
    "closedAt": "2021-01-04T22:37:09Z",
    "createdAt": "2021-01-04T22:31:27Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI2NTIzMA==",
          "body": "Hi @kswope - I can understand your frustration, but we have neither the resource nor time to support or moderate another forum.\r\n\r\n[StackOverflow](https://stackoverflow.com/questions/tagged/svelte) is where we would recommend asking and perusing questions and answers in a more permanent form.",
          "createdAt": "2021-01-04T22:37:09Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NjQyNDg0NQ==",
          "body": "Maybe [Github discussion](https://docs.github.com/en/free-pro-team@latest/discussions) would be a good way to host Q&A and discussions with little investment from the team. And it could even help reducing the number of issues opened here. See for example the [Next.js discussions](https://github.com/vercel/next.js/discussions)",
          "createdAt": "2021-01-07T22:25:33Z",
          "author": { "login": "mquandalle", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NjQyNTY5MQ==",
          "body": "We've also discussed and considered this, and we don't feel the implementation of github discussions fits what we would want to achieve.",
          "createdAt": "2021-01-07T22:27:34Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzI4NTUzOA==",
          "body": "> We've also discussed and considered this, and we don't feel the implementation of github discussions fits what we would want to achieve.\r\n\r\nMy frustration is that the said discussion about why Github Discussions doesn't fit what you want to achieve should have been asked/answered on Github Discussions. \r\n\r\nI promise I'm not trying to poke the bear, but what is it that you would want to achieve?...And how would Discussions prevent that?\r\n\r\n\r\n> I can understand your frustration, but we have neither the resource nor time to support or moderate another forum.\r\n\r\nIn my thinking, if resource are scarce, then moving support to Github Discussions would be a solution, not a hindrance. This is a discussion that you're moderating on Github anyway. Unfortunately, conversations like this will continue to happen on Github Issues in the absence of Github Discussions, as will the need for moderation & support. \r\n\r\nAlso, everyone on Discord has Github but not the other way round. That means the impact is greater here, and moderation assistance is easier to muster on GitHub.\r\n\r\nPS: Also see https://github.com/sveltejs/svelte/issues/5873 for my \"48.7 Reasons Why\".",
          "createdAt": "2021-01-09T15:02:16Z",
          "author": { "login": "kwangure", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzgzMTkzNjc=",
    "body": "Does Svelte offer two-way reactive object destructuring? Essentially this\r\n\r\n```js\r\n$: ({ valid, dirty, value } = state)\r\n$: state = { valid, dirty, value }\r\n```\r\n\r\nbut avoiding the ES Lint warning \"Cyclical dependency detected: valid → state → valid\". Should/could I use a store for this?",
    "closedAt": "2021-01-04T20:48:34Z",
    "createdAt": "2021-01-04T19:45:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDIxMDEwOA==",
          "body": "You should probably just use `state` everywhere, if you're ever going to need to use that again.\r\n\r\nIf you really want to, you can create multiple stores that update each other behind the scenes. [Here](https://svelte.dev/repl/a4be9207ed7a4df6a3ce14514614d94c)'s an example with two stores that I wrote a while back.",
          "createdAt": "2021-01-04T20:48:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NTExNDg1Nw==",
          "body": "Good example. Thanks for the quick reply!",
          "createdAt": "2021-01-06T06:38:53Z",
          "author": { "login": "janosh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Nzc5NTE0OTE=",
    "body": "This is a proposal to add a `global` boolean attribute to the svelte `<style>` block, when enabled the style content would be injected as if every rule used `:global()`\r\n\r\nIn addition this proposal would make it necessary to allow using two top level style tags as long as one of them is global and the other is not\r\n\r\nThis asserts for the following to produce the same output\r\n```html\r\n<style>\r\n    :global(h1) {\r\n        color: black;\r\n    }\r\n    h2 {\r\n        color: grey;\r\n    }\r\n</style>\r\n```\r\n```html\r\n<style global>\r\n    h1 {\r\n        color: black;\r\n    }\r\n</style>\r\n<style>\r\n    h2 {\r\n        color: grey;\r\n    }\r\n</style>\r\n```",
    "closedAt": "2021-01-04T11:15:27Z",
    "createdAt": "2021-01-04T09:21:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzkxNTk5Ng==",
          "body": "svelte-preprocess already has support for this, although I'm not sure about the two style tags part. In any case, this sounds like more of a job for preprocessors. We don't want to encourage people to have a lot of global styles by creating official syntactical sugar for it. This does not seem worth complicating the AST over to add another style tag. And, if you have the appropriate bundler plugins, I believe you should also already be able to do this with an external CSS file that you import from the script tag.",
          "createdAt": "2021-01-04T11:15:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Nzc2MDA2MTc=",
    "body": "**Describe the bug**\r\nBetter look at repl.\r\n\r\n**To Reproduce**\r\n[repl](https://svelte.dev/repl/bf8fcfa1ab4d4d43ab108f8e228544e7?version=3.31.1)\r\n\r\n**Expected behavior**\r\nSame behavior for objects as for primitives.\r\n\r\n**Information about your Svelte project:**\r\nBrowser: FireFox 84\r\nOS: Windows 10 LTSC 1809\r\nSvelte: 3.31.1\r\nRollup",
    "closedAt": "2021-01-04T22:51:08Z",
    "createdAt": "2021-01-03T09:06:37Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzczOTk3MTU=",
    "body": "Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\nNo\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nA state change that's inside of a reactive handler requires wrapping in tick() for the state change to register. REPL below.\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\nN/A\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n\r\nhttps://svelte.dev/repl/b4ec7663c4d44085a754160863cb611c?version=3.31.1\r\n\r\nBasically, toggle disabled on, then off. You should see an activated message, but won't. To fix, go to the Thing component, and comment out line 31, and uncomment 34 (which has the call to tick())\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nShould work\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\nN/A\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\nChrome 87\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nMac OS\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\nLatest in REPL\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nREPL\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nBlocking to anyone who wouldn't think to use tick()\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2021-01-02T04:59:56Z",
    "createdAt": "2021-01-02T04:02:24Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQzMTg0MA==",
          "body": "I believe this has come up before in an issue, although I can't find it right now.\r\n\r\nReactive blocks are sorted according to which variables are used within the blocks and which are assigned to within the blocks, falling back to the order that the blocks are written in the component. These reactive blocks are then run in order whenever there are updates that need to happen. Any changes that happen synchronously while running these reactive blocks will not trigger another wave of updates after this one finishes, but this is normally not a problem if the compiler is able to sort the reactive blocks correctly. For example, if one block updates `foo` and another uses `foo`, the block that updates `foo` will end up before the other one in the compiled code, even if it were second in the component definition.\r\n\r\nIn your component, the compiler cannot tell that the second reactive block might cause changes the should cause the first block to be re-run, because the updates to `activated` are hidden in the `activate()` function. So it defaults to keeping them in the order you wrote them. `activated` is set to `true` after the first reactive block has already checked its value, and so nothing happens. Your solution of using `tick()` works because that pushes the `activated = true` into the next microtask, which will then trigger another wave of reconciling reactive blocks. Other more elegant solutions would be to write the component in such a way that the compiler can see that the second reactive block changes a variable that the first one looks at (and thus output them in the other order in the compiled component), or else simply switch the order of the two reactive blocks in your component, so that `activated` is already `true` by the time you're checking its value.\r\n\r\nIn short, this is the intended behavior. And there's a long-standing TODO to better document the nuances of the reactivity model somewhere on the site.",
          "createdAt": "2021-01-02T04:59:56Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQzMTk5MA==",
          "body": "@Conduitry thanks for the explanation! ",
          "createdAt": "2021-01-02T05:02:00Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzUwODg2Mw==",
          "body": "@Conduitry seriously that explanation was uniquely valuable. I urge you to just copy paste the relevant portions into the docs. I'm sure it'd be incredibly valuable to others. ",
          "createdAt": "2021-01-02T17:59:10Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzczMTA4NTM=",
    "body": "**Describe the bug**\r\nIntroduced in #3935 support of methods in `use:obj.action` causes runtime exception if method is nested in multiple objects\r\n\r\n```svelte\r\n<button use:ctx.button.behavior>Open</button>\r\n```\r\n\r\n**Logs**\r\n```\r\nctx[0]['button.behavior'] is not a function\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/b9576a0efc17479287e6bba62c1e9e85?version=3.31.0\r\n\r\n**Expected behavior**\r\nNo exceptions, actions are applied to HTML node as usual \r\nOR \r\ncompiler error that prevents usage of nested objects in action definition\r\n\r\n**Stacktraces**\r\nSeems like code causing the error is generated in `/src/compiler/compile/render_dom/wrappers/shared/add_actions.ts:35`\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Firefox 84.0.1 x64\r\n- Windows 10\r\n- Svelte 3.31.0\r\n- Node 15.4.0 \r\n- Snowpack + Rollup \r\n\r\n**Severity**\r\nSomewhat annoying, but not critical. There is a workaround for now, but I think this should be addressed at the compiler level, at least to prevent unexpected runtime crashes.\r\n\r\n```svelte\r\n<script>\r\n\tlet ctx = {\r\n                // or just use flat objects without extra nesting, obviously\r\n\t\t'button.behavior':  (node) => {\r\n\t\t\tconsole.log(node);\r\n\t\t},\r\n\t};\r\n\t\r\n</script>\r\n\r\n<button use:ctx.button.behavior>Open </button>\r\n```\r\nUPD: after some fiddling, using flat objects and avoiding nesting is the best option for now, since different IDEs react differently when workaround above is present. VSCode highlights it as missing property, WebStorm - does not",
    "closedAt": "2021-01-02T01:48:03Z",
    "createdAt": "2021-01-01T16:23:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQxODAyNQ==",
          "body": "This is fixed in 3.31.1 - https://svelte.dev/repl/b9576a0efc17479287e6bba62c1e9e85?version=3.31.1 - `use:ctx.button.behavior` now results in `ctx[0].button.behavior` rather than `ctx[0]['button.behavior']`.",
          "createdAt": "2021-01-02T02:12:31Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzcyNjczNDI=",
    "body": "**Describe the bug**\r\nWhen following the Tutorial, the [Module Context > Sharing Code](https://svelte.dev/tutorial/sharing-code) lesson shows that module variables are shared between components of the same type.\r\n\r\nThere's nothing to say that module variables are *not* reactive - is this expected behaviour?\r\n\r\n**To Reproduce**\r\n\r\nI have a trite REPL example that shows no reactivity when module variables are modified:\r\n\r\nhttps://svelte.dev/repl/369bc4ec3fbb4d81910d08aba96779a1?version=3.31.0\r\n\r\n**Expected behavior**\r\n\r\nVisually there's no clue that the following are fundamentally different.\r\n\r\n### This works as expected\r\n\r\n```html\r\n<script>\r\n  let foo;\r\n  function updateFoo(bar) {\r\n    foo = Math.random();\r\n  }\r\n  $: console.log(foo); // fine\r\n</script>\r\n```\r\n\r\n### This doesn't\r\n\r\n```html\r\n<script context=\"module\">\r\n  let foo;\r\n</script>\r\n<script>\r\n  function updateFoo(bar) {\r\n    foo = Math.random();\r\n  }\r\n  $: console.log(foo); // not fine\r\n</script>\r\n```\r\n\r\n### A slight tangent\r\n\r\nThe second foo should throw a warning.\r\n\r\nPaste this into a vanilla html document and you'd see `Uncaught SyntaxError: Identifier 'foo' has already been declared`\r\n\r\n```html\r\n<script context=\"module\">\r\n  let foo;\r\n</script>\r\n<script>\r\n  let foo;\r\n</script>\r\n```\r\n\r\n**Severity**\r\nMore than anything, it surprised me. In the context of the tutorial, it's an 11th-hour edge-case / gotcha to be mindful of.\r\n\r\n**Idea**\r\nThe compiler could / should complain about reactive statements related to module variables. I'd love to see this in the same vein of:\r\n\r\n* A component can only have one <script context=\"module\"> element\r\n* A component can only have one instance-level <script> element\r\n\r\n",
    "closedAt": "2021-01-29T20:05:04Z",
    "createdAt": "2021-01-01T11:18:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzMwODQxNA==",
          "body": "Following on about compiler warnings, the idea could be generalised as:\r\n\r\n`this reactive statement will never be triggered / is unused`\r\n\r\nthis means you could handle other edge cases too, ie:\r\n\r\n```js\r\nconst foo;\r\n$: console.log(foo);\r\n```\r\n\r\nVia: https://discord.com/channels/457912077277855764/457912077277855766/794528287002329088",
          "createdAt": "2021-01-01T12:05:28Z",
          "author": { "login": "oodavid", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzMwOTQzNg==",
          "body": "It is expected, and is described in the reference in the blue box in https://svelte.dev/docs#script_context_module but perhaps should also be mentioned in the tutorial",
          "createdAt": "2021-01-01T12:14:20Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzMxMDMyMA==",
          "body": "Thanks.\r\n\r\nShould I split out another issue for reactive statement warnings? Seems like I've really made two issues here.",
          "createdAt": "2021-01-01T12:21:44Z",
          "author": { "login": "oodavid", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzcxMDY2MTM=",
    "body": "**Describe the bug**\r\n\r\nWhen inserting two or more children into a named slot, SSR components will only insert the _final_ child into the named slot. Any previous children are silently ignored.\r\n\r\nDOM components support multiple children without issue, this only impacts the SSR build.\r\n\r\n**To Reproduce**\r\n\r\nHere's a small reproduction demo: https://svelte.dev/repl/d045f6b4265a4de4a08545cbba7def4f?version=3.31.0\r\n\r\nNote that, as this is an SSR bug, the \"Result\" will render as expected. Select \"JS output\" and change `generate:` to `\"ssr\"` and the issue is easily visible by inspecting the compiled code.\r\n\r\n**Expected behavior**\r\n\r\nBoth the DOM and the SSR builds insert all specified children into a named slot.\r\n\r\n**Severity**\r\n\r\nThe direct effects are an annoyance; I was able to rework the components to not use named slots.\r\n\r\nThe second order effects were, in my case, a nontrivial percentage of the site being suddenly absent on deploy. I added a second child to a slot which had previously only had one, which unexpectedly _replaced_ some links `sapper export` was relying on. The issue wasn't apparent in development because the DOM was repaired on hydration, I didn't notice it until I deployed to staging.\r\n\r\n**Additional context**\r\n\r\nThis came to my attention because `sapper export` wasn't discovering some links that I expected it to be able to see. Inspecting the generated HTML showed that it was missing a section of the DOM containing the links which was instead being created client-side during hydration. From there, it was straightforward to narrow down the source of the discrepancy.",
    "closedAt": null,
    "createdAt": "2020-12-31T18:28:21Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzU3MTA0OTg=",
    "body": "**Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.**\r\nNo.\r\n\r\n**Describe the bug**\r\nWhen importing an action that has the same name of the `as` in an each block, it breaks the import variable, replaces it, somehow bleeds out or isn't getting scoped properly.\r\n\r\n**Logs**\r\nError message: \r\nCannot read property 'call' of undefined\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/40e6e91f00bb43788baba1f34ee7f95c?version=3.31.0\r\n\r\n**Expected behavior**\r\nEach blocks should be scoped and not interfere with imported variables. \r\n\r\n**Information about your Svelte project:**\r\nRepl from svelte.dev\r\n\r\n- Chrome version 87.0.4280.88 (Official Build) (64-bit)\r\n- Windows 10\r\n- Svelte version 3.31\r\n- Rollup\r\n\r\n**Severity**\r\nNow that I'm aware there is no problem working around it, solutions and workarounds are in the repl comments and easy to fix by simply using non conflicting names. Tho for newer developers this might be one annoying unexpected interaction to track down.\r\n\r\n**Additional context**\r\nI'm not sure where else this might apply other than on actions and each loops or if this is a bug isolated to those interactions.\r\n",
    "closedAt": "2021-01-04T21:51:55Z",
    "createdAt": "2020-12-29T05:44:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjM1NDQ1MA==",
          "body": "In a working case, the compiled JS just references the imported action variable directly. (e.g. `action.call(...)` if we change the `#each` variable's name) \r\n\r\nIn the broken case, it tries to use `ctx[0].call(...)` instead. The `#each` variable is assigned to `ctx[0]` inside the `#each` child context, but of course does not exist in the main component context and would not reference the correct thing anyway. So indeed, some state about name assignments inside the `#each` is being incorrectly referenced here when resolving `use:action`.\r\n\r\nNotably, this appears to be limited to `use:` actions. Everything works fine if I alter the REPL to just define a component-level variable named `action` instead and use it in a template, whether it's static or in a reactive statement. And it does break if the action function is defined locally inside the component instead of imported from another file. \r\n\r\nI'm not really familiar with this part of the compiler, but happy to take a look when I have time (probably next week) if nobody else can get to it first.\r\n",
          "createdAt": "2020-12-30T07:09:22Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI1Mzc3Mg==",
          "body": "This is fixed in 3.31.2 - https://svelte.dev/repl/40e6e91f00bb43788baba1f34ee7f95c?version=3.31.2",
          "createdAt": "2021-01-04T22:10:00Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzU2MTQ5MzM=",
    "body": "Web Components are HTML only and not supported in the SVG namespace.\r\n\r\n- [Do Custom Elements / WebComponents work with SVG?](https://stackoverflow.com/questions/40436059/do-custom-elements-webcomponents-work-with-svg) (StackOverflow)\r\n- [Proposal: Allow custom elements to be in any namespace](https://github.com/WICG/webcomponents/issues/634) (WICG/webcomponents)\r\n\r\nHowever, users such as me might not know this, and it would be helpful if the Svelte compiler told us so.\r\n\r\n\r\n**Describe the bug**\r\nCurrently (Dec 2020), Svelte compiles a source with `<svelte:options namespace=\"svg\" tag=\"svsv-draggable\" />` quietly.\r\n\r\nThe output contains:\r\n\r\n```\r\nSvelteElement = class extends HTMLElement {\r\n```\r\n\r\nThis is enough to convince me that the code tries to make an HTML Web Component, but I haven't fully traced the output.\r\n\r\n**Expected behavior**\r\nGive the user a nice message, saying what we're trying to reach is not currently possible. \r\n\r\n**Information about your Svelte project:**\r\n\r\n- Svelte version: 3.31.0\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nNot severe. Helpful.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": null,
    "createdAt": "2020-12-28T22:42:28Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzUyMTIwNTc=",
    "body": "Hi Everyone, \r\n\r\nI just came to know about svelte and the first thing that came to my mind is that how do you pronounce it? Not sure what the motivation or how this name was chosen. Anyone care to clarify?\r\n\r\nThanks. Just a fun intended question.\r\n\r\n",
    "closedAt": "2020-12-28T09:18:47Z",
    "createdAt": "2020-12-28T05:52:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTU4NzcyMg==",
          "body": "\"SVELT\"",
          "createdAt": "2020-12-28T05:54:28Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTU4ODA3Mw==",
          "body": "@arackaf  Is this like \"S\" and \"Velt\" combined together?",
          "createdAt": "2020-12-28T05:56:01Z",
          "author": { "login": "vikrantnegi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTYyNTc3Nw==",
          "body": "You can check [Cambridge Dictionary](https://dictionary.cambridge.org/us/dictionary/english/svelte) website",
          "createdAt": "2020-12-28T08:12:31Z",
          "author": { "login": "DanilGolenok", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzUxNjYxOTg=",
    "body": "Is there any way to make an initial index for #each's index?\r\n\r\nFor example like this:\r\n\r\n```\r\n{#each arr as element, i = 15}\r\n  {i}\r\n{/each}\r\n```\r\nInstead of\r\n```\r\n{#each arr as element, i}\r\n  {i + 15}\r\n{/each}\r\n```",
    "closedAt": "2020-12-28T04:21:37Z",
    "createdAt": "2020-12-28T03:14:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTU2OTI3NQ==",
          "body": "You can do something like `{#each arr.map((e, i) => [e, i + 15]) as [element, i]}` instead. I don't think a special syntax for this particular situation is especially valuable or helpful.",
          "createdAt": "2020-12-28T04:21:37Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzQ5NTg4NjQ=",
    "body": "Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\nNo\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nItems inside of an #each block have a local out transition. The parent node has a transition defined on it. If said parent node is unmounted, but then re-mounted before its transition finishes, the transitions in the items in the each block no longer work.\r\n\r\nREPL: https://svelte.dev/repl/388e9996f8464f88b9e65a569c34912d?version=3.31.0\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\nN/A\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n\r\nI gotchu boo:  https://svelte.dev/repl/388e9996f8464f88b9e65a569c34912d?version=3.31.0\r\n\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nout transition should work\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\nN/A\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\nN/A\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\nChrome 87\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nMac\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\nWhatever's in the REPL\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nN/A\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nHigh\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2021-01-02T01:41:32Z",
    "createdAt": "2020-12-27T01:28:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQxNzg5Mw==",
          "body": "This is fixed in 3.31.1 - https://svelte.dev/repl/388e9996f8464f88b9e65a569c34912d?version=3.31.1",
          "createdAt": "2021-01-02T02:11:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzQ5MzgzNTM=",
    "body": "Why the scrollbar green border?\r\n\r\n![image](https://user-images.githubusercontent.com/41120635/103159706-d35e3880-47cc-11eb-9ac0-bf3178d6637c.png)\r\n\r\nWindows 10, Chrome 87.\r\n\r\nhttps://svelte.dev/tutorial",
    "closedAt": "2020-12-26T22:07:10Z",
    "createdAt": "2020-12-26T21:51:55Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTQwMDgyNg==",
          "body": "Because of https://github.com/sveltejs/svelte/blob/d4fd91cbb96206404b7f6260d0a8d572dd3a530d/site/src/routes/tutorial/%5Bslug%5D/index.svelte#L201 which dates back to #2132 when the tutorial was first written.",
          "createdAt": "2020-12-26T22:07:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTQwMjMwNw==",
          "body": "So is it wanted? Not a bug?",
          "createdAt": "2020-12-26T22:26:32Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTg0MzAyMg==",
          "body": "that does seem weird to me. it's also funny that it's only in Chrome and not Firefox. I'd be open to a PR to change it",
          "createdAt": "2020-12-28T19:47:42Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzQ3NTkzNjE=",
    "body": "The variable used with `bind:group` on a checkbox is updating after the click event on the checkbox. This is a problem when trying to dispatch the bound variable's value to the parent component.\r\n\r\n**To Reproduce**\r\n[Dispatch Group Binding](https://svelte.dev/repl/f14e8e59c9fb4dc28545cdd417df2a3b?version=3.31.0) in Svelte REPL\r\n1. Click on a checkbox\r\n\r\nNotice that the Bound Ids is in sync with the selected values and the Dispatched Ids is one event behind.\r\n\r\n**Expected behavior**\r\nThe variable used for `bind:group` is updated before the click event of the checkbox fires.\r\n\r\n**Severity**\r\nThis issue can be worked around but solutions are clumsy when the property to be updated in the parent component is within a Svelte store.\r\n",
    "closedAt": "2020-12-26T13:36:18Z",
    "createdAt": "2020-12-25T16:51:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTMzMDM1Ng==",
          "body": "In this case, \"bind:group\" works by listening for \"change\" events, and they happen after \"click\" events. That's not specific to Svelte. Even if they changed \"bind:group\" to instead listen for \"click\" events (which they probably won't) - you would still run into a bit of an awkward effect... The order in which you declare your handlers in the source code, is actually reflected in the way the generated code sets up event listeners, so you would have to declare the \"bind:group\" before the \"on:change\"...\r\n\r\n...That explanation probably doesn't make sense. I made a small clip to demonstrate (it's a lot easier to follow the argument in video form):\r\n\r\nhttps://user-images.githubusercontent.com/204055/103147198-55aa1680-4753-11eb-8b35-33f0113ef66c.mp4",
          "createdAt": "2020-12-26T07:31:02Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTM1NjM0Ng==",
          "body": "@Phaqui your typed response made complete sense to me. Thanks for explaining how this is working when the code is generated. For future reference here's a forked version of the REPL with the solution. The changes, as you indicate, were to use the `on:change` event and switch the order of the handlers in the source code.\r\n\r\n[Dispatch Group Binding Solution](https://svelte.dev/repl/7a5402817483401c8b1c91f90ad24fec?version=3.31.0)\r\n",
          "createdAt": "2020-12-26T13:36:18Z",
          "author": { "login": "Clairev3", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzQ1NTUyMDA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen using a css framework a user would want to apply different classes based on flag (ie: a different background for selected items) This can lead to cumbersome markup as below where we have some form of _repetition_. \r\n\r\n```html\r\n<div class:bg-blue-500={isSelected} class:bg-gray-500={!selected}>...</div>\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nFor ease of use a sort of logical operator for css classes could be introduced, the above code could be rewritten as\r\n\r\n```html\r\n<div class:bg-blue-500|bg-gray-500={selected}>...</div>\r\n```\r\n\r\nThis ought to be easily taught (main concern would be deciding if true evaluates to left or right)\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAdding a default class\r\n\r\n```html\r\n<div class:bg-blue-500={selected} class=\"bg-gray-500\">...</div>\r\n```\r\n\r\nThis however comes with it's own set of problems, since now styles will be applied in the order of their declaration in the stylesheet.\r\n\r\nUsing a `not` approach and customizing\r\n```html\r\n<div class:bg-blue-500={selected}>...</div>\r\n<style>\r\n div:not(.bg-blue-500) {\r\n     @apply bg-gray-500\r\n  }\r\n```\r\n\r\nThis requires the chosen framework to support this however\r\n\r\n**How important is this feature to you?**\r\n\r\nLow importance, this is a quality of life proposal.\r\n",
    "closedAt": "2020-12-24T23:16:04Z",
    "createdAt": "2020-12-24T20:40:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTAxODA1OA==",
          "body": "Good ideia, \r\n\r\nThe current alternative is:\r\n```html\r\n <div class={selected ? 'bg-blue-500' : 'bg-gray-500'}>...</div>\r\n```",
          "createdAt": "2020-12-24T20:49:18Z",
          "author": { "login": "Demysdcl", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTEyODgzNg==",
          "body": "I don't think this is a particularly intuitive syntax, and it's a problem that there's already a workable solution for - the conditional expression listed above, which does have a very definite meaning to anyone who knows javascript.",
          "createdAt": "2020-12-24T23:16:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzQyODc3NTE=",
    "body": "It would be nice if the svelte compiler had an option to spit out potential places where it may not detect that a variable has changed as a warning: (i.e. array.push) **unless**:\r\n\r\n1. It follows a known common workaround\r\n\r\neg.\r\n```js\r\nnumbers.push(numbers.length + 1);\r\nnumbers = numbers;\r\n\r\nor\r\n\r\nnumbers = [...numbers, numbers.length + 1];\r\n```\r\nOR \r\n2. **[PROPOSAL]**  There is a special comment that instructs the compiler to ignore it because the developer knows what they are doing\r\n\r\n```js\r\nnumbers.push(numbers.length + 1); // svelte: ignore   (or something)\r\n```",
    "closedAt": "2020-12-24T23:26:51Z",
    "createdAt": "2020-12-24T09:17:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDgxOTI2Ng==",
          "body": "This may minimise an entire class of bugs that could otherwise be latent in production code",
          "createdAt": "2020-12-24T09:18:45Z",
          "author": { "login": "pjebs", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDkyMDc5NQ==",
          "body": "The title was changed and ignores 1/2 of my proposal.\r\n\r\nCurrently the compiler already gives warnings for not following accessibility guidelines. Why can't it also give warnings for potential reactivity blackholes?",
          "createdAt": "2020-12-24T16:19:22Z",
          "author": { "login": "pjebs", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTEyOTY2MQ==",
          "body": "This sounds like a difficult thing to write reasonable heuristics for - would any call to a method called `push` or `pop` or `shift` or `unshift` (or others?) on any object trigger the warning? would it be satisfied only if the _next_ statement were a self-assignment?\r\n\r\nWe have accessibility warnings because they're likely to be something that developers won't immediately notice and might not be thinking about at all. I'd guess that there aren't an awful lot of latent reactivity bugs out there in production code from this mistake, because some aspects of components are likely to not work at all if something isn't reactive, not have some subtle bug.\r\n\r\nI don't think this kind of warning is something that would be useful to implement - and would be annoying when we (inevitably) are unable to make it work perfectly. That this would require a new bit of syntax to be implement and documented in order to selectively disable these warnings in order to make this feature palatable is I think another reason not to have it.",
          "createdAt": "2020-12-24T23:26:51Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzQwNjA3ODI=",
    "body": "**Describe the bug**\r\nIf you put an array inside a store, then assign an item from that array to a variable and use both in _select_ tag (or very likely in any similar _each_ block) then you will unexpectedly get the store invalidated even though it was not modified during the loop. This causes side-effects which break the functionality (see REPL link below).\r\n\r\n**To Reproduce**\r\nPlease see the issue at https://svelte.dev/repl/b08ad3a4aa334e37837769efd3e64e4a?version=3\r\n\r\nThe first select works fine and allows you to choose any of 2 options.\r\nThe second select does not allow you to choose another option. It is stuck on \"item 2\".\r\n\r\n**Expected behavior**\r\nBoth selects allow to choose any options.\r\n\r\n**Additional context**\r\nSvelte version 3.31.0\r\n",
    "closedAt": null,
    "createdAt": "2020-12-23T21:52:12Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDgzNTM0NA==",
          "body": "Probably the issue was introduced by these changes [#2444](https://github.com/sveltejs/svelte/issues/2444).",
          "createdAt": "2020-12-24T10:14:20Z",
          "author": { "login": "vkurko", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTk4ODExNA==",
          "body": "You are not supposed to bind:value which is reactively declared:\r\n\r\n```svelte\r\n<script>\r\n    $: selectedItem2 = $items2[selectedIdx];\r\n</script>\r\n\r\n<select bind:value={selectedItem2} />\r\n```\r\n\r\nwhich leads to unexpected behavior.\r\n\r\nsee https://github.com/sveltejs/svelte/issues/4933",
          "createdAt": "2020-12-29T08:05:04Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjAwMTIxMQ==",
          "body": "Isn't `selectedItem1` reactively declared too? It works fine in my example.\r\n\r\nI'm not sure which condition from #4933 my case applies to. But it seems to be related.",
          "createdAt": "2020-12-29T08:56:36Z",
          "author": { "login": "vkurko", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1Mjk0MDMzOA==",
          "body": "Yes, you are correct, vkurko. I almost broke my head trying to figure out what is _actually_ going on in your example. Of course, the fix is simple: Just have the variables be normal variables defined by **let** (they are not really reactive). But why exactly the first example seems to work, and the other one doesn't? I have no idea.",
          "createdAt": "2020-12-31T12:09:22Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzM3OTA3NTk=",
    "body": "**Describe the bug**\r\nWhen using Typescript, exported properties from a component's `context=\"module\"` script can be imported in another `.svelte` file, but cannot be imported in a regular `.ts` file.\r\n\r\n```svelte\r\n<!-- Page.svelte -->\r\n<script lang=\"ts\" context=\"module\">\r\n  export const version = '1.0';\r\n</script>\r\n```\r\n\r\n```svelte\r\n<!-- App.svelte -->\r\n<script lang=\"ts\">\r\n  import { version } from './Page.svelte'; // works fine\r\n</script>\r\n```\r\n\r\n```ts\r\n// index.ts\r\nimport { version } from './Page.svelte'; // [tsserver 2614] [E] Module '\"*.svelte\"' has no exported member 'version'. Did you mean to use 'import version from \"*.svelte\"' instead?\r\n```\r\n\r\n**Logs**\r\n```\r\n[tsserver 2614] [E] Module '\"*.svelte\"' has no exported member 'version'. Did you mean to use 'import version from \"*.svelte\"' instead?\r\n```\r\n\r\n**To Reproduce**\r\nIssue does not exist with Javascript Svelte, and cannot be reproduced on https://svelte.dev/repl.\r\n\r\nIssue can be reproduced in this repository.\r\n\r\nhttps://github.com/bryanmylee/svelte-ts-module-export\r\n\r\nIt is still possible to compile the code with Rollup despite the Typescript errors, however this breaks the build step when using Sapper and Webpack with Typescript.\r\n\r\n**Expected behavior**\r\nImport should work even from `.ts` file.\r\n\r\n**Stacktraces**\r\nOn a Sapper project with Webpack and Typescript:\r\n\r\n<details>\r\n<code>\r\n✗ server\r\n/Users/bryan/Projects/Programs/bryanmylee.github.io/src/node_modules/@my/components/PageTransitions/index.ts\r\n./src/node_modules/@my/components/PageTransitions/index.ts\r\n[tsl] ERROR in /Users/bryan/Projects/Programs/bryanmylee.github.io/src/node_modules/@my/components/PageTransitions/index.ts(3,10)\r\n      TS2614: Module '\"*.svelte\"' has no exported member 'version'. Did you mean to use 'import version from \"*.svelte\"' instead?\r\n✗ client\r\n/Users/bryan/Projects/Programs/bryanmylee.github.io/src/node_modules/@my/components/PageTransitions/index.ts\r\n./src/node_modules/@my/components/PageTransitions/index.ts\r\n[tsl] ERROR in /Users/bryan/Projects/Programs/bryanmylee.github.io/src/node_modules/@my/components/PageTransitions/index.ts(3,10)\r\n      TS2614: Module '\"*.svelte\"' has no exported member 'version'. Did you mean to use 'import version from \"*.svelte\"' instead?\r\n</code>\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n```\r\n  System:\r\n    OS: macOS 11.0.1\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz\r\n    Memory: 454.03 MB / 16.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 14.4.0 - ~/.nvm/versions/node/v14.4.0/bin/node\r\n    Yarn: 1.22.10 - /usr/local/bin/yarn\r\n    npm: 6.14.9 - ~/.nvm/versions/node/v14.4.0/bin/npm\r\n  Browsers:\r\n    Chrome: 87.0.4280.88\r\n    Edge: 87.0.664.66\r\n    Firefox: 81.0.1\r\n    Safari: 14.0.1\r\n  npmPackages:\r\n    svelte: ^3.17.3 => 3.31.0\r\n    typescript: ^4.0.3 => 4.1.3\r\n    webpack: ^4.7.0 => 4.44.2\r\n```\r\n\r\n**Severity**\r\nMedium severity.\r\n\r\nI can workaround this by moving `context=\"module\"` exports to a Typescript file instead. However, it does break my design pattern of putting all sub-components of a component in a folder, and re-exporting the main component and its interfaces via a `index.ts` file.\r\n\r\n",
    "closedAt": "2021-06-21T07:28:40Z",
    "createdAt": "2020-12-23T13:50:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDMxMzMyMA==",
          "body": "It's only the typing that's wrong here, you are able to use the imports like you want.\r\n\r\nReason: Svelte files are declared like this in the Svelte type definitions: \r\n```ts\r\ndeclare module '*.svelte' {\r\n    export { SvelteComponentDev as default } from 'svelte/internal';\r\n}\r\n```\r\nThis means \"Dear TypeScript, if you see a file ending with `.svelte` in `.ts` or `.js` files, use that definition\". That definition does not contain other exports, so TypeScript says \"that is wrong\", even if it's right in your case.\r\nTo fix it, you can provide your own declaration inside a `.d.ts` file:\r\n```ts\r\ndeclare module '*.svelte' {\r\n    export { SvelteComponentDev as default } from 'svelte/internal';\r\n    export const version: string;\r\n    // ... other stuff\r\n}\r\n```\r\n\r\n@Conduitry maybe we could relax the module declaration and just do `declare module '*.svelte';`. Everything is typed as `any` then - the disadvantage is that we no longer have a typed default export then. Maybe someone else knows how to get the best of both worlds.",
          "createdAt": "2020-12-23T14:02:07Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDMxNzM3Mg==",
          "body": "That clears it up a lot, thank you.\r\n\r\nI would love to contribute somehow to developing a Typescript version of the documentation, or a journal of best practices with Typescript + Svelte. I’m beginning to feel bad using the issue tracker so much to discover Typescript + Svelte features.",
          "createdAt": "2020-12-23T14:12:10Z",
          "author": { "login": "bryanmylee", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDMxODY2MA==",
          "body": "This actually reminds me of [#442](https://github.com/sveltejs/language-tools/issues/442) on sveltejs/language-tools. Basically figuring out a better way to get support for advanced Component definitions such as generics.",
          "createdAt": "2020-12-23T14:15:17Z",
          "author": { "login": "bryanmylee", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MTU2MzMwMA==",
          "body": "I have spent several hours on this problem. \r\nIt is a pity that there is no clean and simple solution for such a primitive problem. \r\nI don't like the idea with an extra file (.d.ts), because I have to map my logic in it or lose type safety. \r\n\r\nThe following solution works in most of my use cases.\r\nMaybe it also helps you.\r\n\r\n1. Create a file with extension '.svelte' like \r\n'some-file.ts.svelte'\r\n2.  Wrap your js code like\r\n```\r\n<script context=\"module\" lang=\"ts\">\r\n  export const foo:string = \"bar\";\r\n</script>\r\n```\r\n3. Import it in another js file or svelte file like\r\n`  import { foo } from \"./js/some-file.ts.svelte\";`",
          "createdAt": "2021-03-05T17:22:26Z",
          "author": { "login": "thebestgin", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDc5Nzk2MQ==",
          "body": "As stated above, this is a \"TypeScript interop with non-TypeScript-files\" issue. Solving it for VS Code required writing a dedicated TypeScript plugin, which is now available. More info here: https://github.com/sveltejs/language-tools/issues/580#issuecomment-832502069 \r\nClosing in favor of that linked issue as this is not directly related to Svelte, rather the tooling around it.",
          "createdAt": "2021-06-21T07:28:40Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzMzMTUzOTc=",
    "body": "### Attribute is removed after render template\r\n\r\n**This is my component example:**\r\n```\r\n<svelte:options tag=\"modal-actions\" />\r\n\r\n<script>\r\n  export let direction = 'right';\r\n</script>\r\n\r\n<div class=\"modal-actions {direction ? 'direction-'+direction : ''}\">\r\n  <slot></slot>\r\n</div>\r\n\r\n<style>\r\n:host([direction=\"right\"]) ::slotted(*) {\r\n  margin-left: .4rem;\r\n}\r\n:host([direction=\"left\"]) ::slotted(*) {\r\n  margin-right: .4rem;\r\n}\r\n</style>\r\n```\r\n\r\n**In another component I used 2 components the template:**\r\nThe **modal-actions** and **modal-button** components are NOT imported in this component.\r\n```\r\n<svelte:options tag=\"my-modal\" />\r\n\r\n<modal-actions direction=\"left\">\r\n  <modal-button>Button</modal-button>\r\n  <modal-button>Button</modal-button>\r\n</modal-actions>\r\n\r\n<modal-actions direction=\"right\"  test=\"test\">\r\n  <modal-button on:click=\"{() => console.log(123)}\">Button</modal-button>\r\n  <modal-button>Button</modal-button>\r\n</modal-actions>\r\n```\r\n**HTML Page**\r\nIn the html page all component resources ( _**modal-actions.min.js** and **modal-button.min.js**_ ) will linked by:\r\n```\r\n<script src=\"js/modal-actions.min.js\"></script>\r\n<script src=\"js/modal-button.min.js\"></script>\r\n```\r\nNo components have dependencies to the other components.\r\nAfter render the **my-modal** component only one of all of my **modal-actions** elements have the direction attribute yet.\r\n```\r\n<modal-actions direction=\"left\">\r\n  <modal-button>Button</modal-button>\r\n  <modal-button>Button</modal-button>\r\n</modal-actions>\r\n\r\n<modal-actions  test=\"test\">\r\n  <modal-button>Button</modal-button>\r\n  <modal-button>Button</modal-button>\r\n</modal-actions>\r\n```\r\n## As soon as onclick is used, the parent component loses its attributes!!!\r\n\r\nIn another test with more then this direction attribute, this is my result:\r\n```\r\n// before\r\n<cow-modal-actions test=\"test\" direction=\"right\">...</cow-modal-actions>\r\n// after\r\n<cow-modal-actions test=\"test\">...</cow-modal-actions>\r\n```\r\nSame behaviour with renamed property from **direction=\"right\"** to **align=\"right\"** or to **order=\"right\"**.\r\n\r\nIn a next test I could find out that only exported properties will removed from svelte when a child have a event attribute.\r\nIf I add \"test\" in my **modal-actions** component as a component property svelte will remove also the test property now. \r\n```\r\n<script>\r\n\texport let direction;\r\n\texport let test;\r\n</script>\r\n```\r\n\r\nMario",
    "closedAt": null,
    "createdAt": "2020-12-22T23:31:52Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjI1OTY4Nw==",
          "body": "@GELight I'm ok to help you examine this, if you can provide a cloneable Git repo. \r\n\r\nThe one thing I mentioned on Discord is: \r\n\r\n`:host([direction=\"right\"])` rules likely should use classes. But things like this become clear with a repo link as well..",
          "createdAt": "2020-12-29T22:12:05Z",
          "author": { "login": "akauppi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzMyNTE0NQ==",
          "body": "Hi @akauppi \r\nI will try to create example repo for you.\r\nGive me a bit time because this time I am not so often on my computer.\r\n\r\nHappy new year. ... :)\r\nBest regards, \r\n\r\nMario",
          "createdAt": "2021-01-01T14:45:11Z",
          "author": { "login": "GELight", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1Njg3NTYxMA==",
          "body": "I believe I ran into a similar scenario. When I was attempting to use a custom element within a Svelte component, I found that its props were removed from the attributes list upon rendering; furthermore, this results in a console warning.\r\n\r\nI have sample repo explaining in depth: https://github.com/Auroratide/svelte-custom-element-attributes\r\n\r\nEssentially, I have a custom element called `my-component`:\r\n\r\n```\r\n<script>\r\n    export let name\r\n</script>\r\n\r\n<p>Name: {name}</p>\r\n```\r\n\r\nAnd am using it in two different ways within a Svelte component:\r\n\r\n```\r\n<my-component name=\"inline\" unknown=\"stuff\"></my-component>\r\n{@html `<my-component name=\"@html\" unknown=\"stuff\"></my-component>`}\r\n```\r\n\r\nWhat's rendered on the page is:\r\n\r\n```html\r\n<my-component unknown=\"stuff\"></my-component>\r\n<my-component name=\"@html\" unknown=\"stuff\"></my-component>\r\n```\r\n\r\nThe `name` prop is removed, and therefore the console warns: `<my-component> was created without expected prop 'name'`. It seems odd that for a tick the component does not seem to have a value for `name`.",
          "createdAt": "2021-01-08T17:02:27Z",
          "author": { "login": "Auroratide", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODYyOTIzMw==",
          "body": "I've also noticed an issue with Iron-icons from Polymer. When using an iron-icon in a svelte-component, the \"icon\" attribute is removed when \"rendering\". For Example i write:\r\n\r\n```\r\n<div>\r\n  <iron-icon icon=\"folder\" />\r\n</div>\r\n\r\n<style>\r\n  iron-icon[icon=\"folder\"] {\r\n      fill: red;\r\n  }\r\n</style>\r\n```\r\n\r\nthe result in browser would be:\r\n\r\n```<iron-icon class=\"svelte-1cv2dbm\"></iron-icon>```\r\n\r\nBut the icon itself appears properly:\r\n\r\n![image](https://user-images.githubusercontent.com/37908544/114538297-830fc700-9c53-11eb-92ad-62c330eeb683.png)\r\n\r\n\r\nI have to mention that, i do not compile to a webcomponent. Not sure if this behavior is related to the one described above.",
          "createdAt": "2021-04-13T10:27:06Z",
          "author": { "login": "Pkern-Starset", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzMxOTMyMDc=",
    "body": "**Describe the bug**\r\nI try to use transitions in each of my data ({#each}) that I get after my Promise resolves. But when I re-assign it to the variable that holds the Promise, the displayed data actually increases.\r\n\r\nDiscord link => https://discord.com/channels/457912077277855764/653341885674553345/791014063496101898\r\n\r\nhttps://user-images.githubusercontent.com/16399020/102923996-adcee780-44cb-11eb-9c53-36f1e5fa968f.mp4\r\n\r\n\r\n**Logs**\r\nNothing shows in the console\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/99c98342054542ca9c9a82f97c0f200c?version=3.31.0\r\nhttps://github.com/donnisnoni/svelte-127253y6123-bug/blob/bug/src/views/admin/rayon/Index.svelte#L54-L75\r\nhttps://github.com/donnisnoni/svelte-127253y6123-bug/blob/bug/src/store/rayon.js#L22-L34\r\n\r\n**Expected behavior**\r\nThe data is not duplicated/increased\r\n\r\n**Information about my Svelte project:**\r\n```yaml\r\n  System:\r\n    OS: Linux 5.10 Linux Mint 20 (Ulyana)\r\n    CPU: (4) x64 Intel(R) Core(TM) i3-4005U CPU @ 1.70GHz\r\n    Memory: 445.32 MB / 3.76 GB\r\n    Container: Yes\r\n    Shell: 3.1.2 - /usr/bin/fish\r\n  Binaries:\r\n    Node: 14.15.1 - ~/nvm/node/v14.15.1/bin/node\r\n    Yarn: 1.22.10 - ~/nvm/node/v14.15.1/bin/yarn\r\n    npm: 6.14.9 - ~/nvm/node/v14.15.1/bin/npm\r\n  Browsers:\r\n    Chrome: 87.0.4280.88\r\n  npmPackages:\r\n    svelte: ^3.31.0 => 3.31.0 \r\n    vite: ^1.0.0-rc.13 => 1.0.0-rc.13 \r\n```\r\n\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2021-01-04T21:19:25Z",
    "createdAt": "2020-12-22T19:32:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTg3NzgyMQ==",
          "body": "https://svelte.dev/repl/99c98342054542ca9c9a82f97c0f200c?version=3.31.0",
          "createdAt": "2020-12-23T01:57:13Z",
          "author": { "login": "mdynnl", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTUxODYxMQ==",
          "body": "after playing around in the repl\r\ni've known a few things\r\n- `#each` doesn't cause this ( no `#each` in above repl )\r\n- `out` transition does\r\ntry changing `transition:name` to `in:name`(no issue) or `out:name`(this one does)\r\n\r\ncurrent behavior(to my understanding):\r\n1. promise holding variable (`#await promise`) gets a new promise\r\n2. outro starts and wait for the promise to be resolved\r\n3. `then` node gets deleted after outro ends\r\n4. promise resolves\r\n5. a new node with changes comes in\r\n6. intro starts and ends\r\n\r\nwhy and when does duplication happen?\r\n-> when the promise resolves before the outro ends\r\n\r\npromise is usually fetching and doesn't resolve before outro ends\r\nold node gets deleted meaning `currentNode = undefined`\r\nthen new node with promise result comes in, `currentNode = newNode`\r\n\r\nbut when it resolves before outro ends\r\nnew node comes in `currentNode = newNode`\r\nand after that, old node gets deleted `currentNode = undefined`\r\n\r\nso, when the promise holder gets a new promise\r\nthe outro never plays as `currentNode = undefined`\r\nbut after the promise resolves\r\nnew node comes in\r\nold node doesn't get removed\r\n\r\ni hope this makes sense to you and helps track the bug\r\npardon my poor writing and explaining skills",
          "createdAt": "2020-12-27T21:34:04Z",
          "author": { "login": "mdynnl", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI1Mjk0OQ==",
          "body": "This is fixed in 3.31.2 - https://svelte.dev/repl/99c98342054542ca9c9a82f97c0f200c?version=3.31.2",
          "createdAt": "2021-01-04T22:08:13Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzIyNjgwOTE=",
    "body": "It seems Svelte 3.23.0 introduced a regression. When binding a variable that is initially null to a text input, the input is now marked as an invalid (I'm on Firefox 83.0).\r\n\r\nWorking example:\r\nhttps://svelte.dev/repl/f1f2bf4c50cf4a75ba6ea38c3390af5b?version=3.22.3\r\n\r\nNot working:\r\nhttps://svelte.dev/repl/f1f2bf4c50cf4a75ba6ea38c3390af5b?version=3.31.0\r\n",
    "closedAt": null,
    "createdAt": "2020-12-21T15:52:16Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzgwNjQxOA==",
          "body": "It is all the same with Chrome. The only difference is the default invalid styles on Chrome and Firefox. If you add a styling to your REPL like so:\r\n\r\n```\r\ninput:invalid {\r\n\tbox-shadow : 0 0 5px 1px red;  \r\n}\r\n```\r\n\r\nIn Chrome, the result is the same on both the version 3.23.3 and 3.31.0: all inputs are marked as invalid on load.",
          "createdAt": "2021-01-04T07:25:33Z",
          "author": { "login": "Ennoriel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODE5MzI0Mw==",
          "body": "Still happening on Firefox 86 and Svelte 3.34.0.  I've been working around this for a while by resetting the form after mount, as seen in this [REPL](https://svelte.dev/repl/8583e2e32f2c48508e0ffa6799888243?version=3.34.0)\r\n\r\nNote: this doesn't help with forms that are initially populated on some inputs as the reset will clear the data\r\n\r\nSeems to be related to #3569, #4849, etc with commits 081f7cd878a4624cf5c74570ad281193f2434f43 and d8fb0bb62c27d2cbb4097ca25953258813c158a7",
          "createdAt": "2021-03-01T19:04:24Z",
          "author": { "login": "danphil", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzE5OTc0NTY=",
    "body": "**Describe the bug**\r\nCalling `store.set({})` stops the store clients from seeing store updates and stops the DOM from updating\r\n\r\n**To Reproduce**\r\nPlease check this PR for the setup that leads to the issue - https://github.com/Rolandisimo/bs-bingo/pull/1\r\nYou can clone the repository and run it on the `add-reset-button`\r\n\r\nStore is used in:\r\n- `App.svelte`\r\n- `bingo.ts`\r\n\r\nSteps\r\n1. Toggle any word block by clicking on it\r\n2. Keep some blocks higlighted\r\n3. Click reset button\r\n4. Try toggling word blocks\r\n\r\n**Expected behavior**\r\nThe DOM keeps reacting to the store update\r\n\r\n**Actual behavior**\r\n![bingo](https://user-images.githubusercontent.com/9778368/102759474-d98f8780-437c-11eb-89c4-1eeaf89b99a9.gif)\r\n\r\n**Notes**\r\n- The logging in the gif is done with `$: console.log($selectedWordsStore);`\r\n\r\nIf this turns out to be not a bug, then the documentation needs to be updated and much more complex custom store examples need to be added. Currently the only examples are of primitive store values like numbers and strings.\r\n ",
    "closedAt": "2020-12-21T12:06:54Z",
    "createdAt": "2020-12-21T09:09:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODg2OTUzNA==",
          "body": "@Rolandisimo I think you need to pass new object itself as changing the same object will not work.\r\nMaybe use `Object.assign` or any other way to create new object it self instead of updating it's property ",
          "createdAt": "2020-12-21T09:25:03Z",
          "author": { "login": "Sidd27", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODg3NTEzNw==",
          "body": "@Sidd27 not sure I understood your point. I am doing `store.set()` and passing a new object `{}`. Could you elaborate your point, please?",
          "createdAt": "2020-12-21T09:36:38Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODg3OTM0Mw==",
          "body": "@Rolandisimo Ohhh Ok maybe I misunderstood your problem",
          "createdAt": "2020-12-21T09:46:04Z",
          "author": { "login": "Sidd27", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODg4MjI4OQ==",
          "body": "It would be nice if you could isolate and reproduce this as a REPL since this _should_ work and probably is an indication of a problem elsewhere in your code and not a bug.\r\n\r\nAn approximate version of your code can be found here: https://svelte.dev/repl/35a701791c434727a7516483e45a358f?version=3.31.0 where the `reset` works fine. You could use that repl as starting point to add code until it breaks, but from what I can see this doesn't seem to be bug.\r\n\r\nI would recommend joining the [Discord Server](https://discord.com/channels/457912077277855764/457912077277855766) where there are usually other users online willing to help with general questions and support.",
          "createdAt": "2020-12-21T09:52:33Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODkxNjYwMQ==",
          "body": "@stephane-vanraes thanks for the repl. The immediate difference between your REPL and my implementation, is that I'm abstracting doing any changes to the state inside the store instead of doing it in the component. That seems the major difference and probably is what leads to the issue. Maybe I'm not understanding correctly how the store operates. Will try to adapt your REPL to my approach and see if I can reproduce the issue. ",
          "createdAt": "2020-12-21T11:08:02Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODkxODkxNQ==",
          "body": "@stephane-vanraes I'm looking for a solution that abstracts checking the state of a word `store.isWordSelected(key)`. Which means I need to access the store state inside the store. I found a way to make my approach work like this, but feels weird and makes the current state parameter in `update` callback useless.\r\n<img width=\"1072\" alt=\"Screenshot 2020-12-21 at 11 55 50\" src=\"https://user-images.githubusercontent.com/9778368/102771193-2cbe0600-438e-11eb-877a-281c994fe94f.png\">\r\n ",
          "createdAt": "2020-12-21T11:13:00Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODkyOTU3NQ==",
          "body": "@stephane-vanraes I made the REPL with a similar approach to mine and broke it. I think this kind of issue could be solved by having a `get` function exposed from a store. At the moment I don't quite get it what is the correct way of retrieving the current store state from within the store.\r\nhttps://svelte.dev/repl/25d81cf3d88b4058b1544c429a4f1a13?version=3.31.0\r\n\r\nOne thing I don't want is to expose the data structure of the store. If this is not possible with the current implementation of svelte stores (which I hope it is), then this is a big drawback for those making complex store states. \r\n\r\nHappy to be proven wrong. The documentation didn't help me understand how to make such abstractions. I thought of having a writable store and a readable store, but I was confused on how to make this work also.",
          "createdAt": "2020-12-21T11:38:50Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODk0MDc1NQ==",
          "body": "We don't want to have a `.get()` directly on store instances be part of the store contract, because then every custom store would have to implement it, and there would be more ways for `.get()` and `.subscribe()` to become out of sync. `.get()` on stores doesn't provide you with anything that https://svelte.dev/docs#get doesn't.\r\n\r\nYour REPL breaks because calling `set({})` detaches the store value from the `state` variable. Separately calling `state = {}` is also bad because it gets the `state` variable to a _different_ empty object than the store value, and if one is mutated, the other will be unchanged.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-12-21T12:06:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODk0MjU4Mw==",
          "body": "@Conduitry I hear you. I feel like this is an issue of documentation for more complex scenarios than setting a primitive value. I will ask for help in discord or stackoverflow (https://stackoverflow.com/questions/65382334/how-to-correctly-work-with-non-primitive-svelte-stores). Please answer my question then on stackoverflow since this thread is closed.\r\n\r\nHowever, don't you think this is at least an issue of documentation not being clear enough and no info on troubleshooting?",
          "createdAt": "2020-12-21T12:11:39Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODk0OTM3OA==",
          "body": "> GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our Discord chat room\n\nI believe it is in cases where the documentation is unclear.",
          "createdAt": "2020-12-21T12:28:43Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODk3Mzk5Ng==",
          "body": "@Conduitry FYI your explanation feels vague and even a bit condescending to people not so familiar with the ins and outs of svelte. ",
          "createdAt": "2020-12-21T13:30:18Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODk5MzMyMA==",
          "body": "@Rolandisimo we're trying to prevent github issues becoming yet another forum for endless discussion which would be better carried out in a realtime chat. Please understand and respect this.\r\n\r\nIf you think there needs to be clarity in documentation then by all means raise it as an issue and open a PR to help other users, especially if you find the answer given vague - this is again because this is not intended as a help forum, but more of a clear, concise tracker for issues with Svelte.\r\n\r\nFinally please don't direct others to help you, Svelte and it's support, maintenance, contributions, and documentation are provided as a voluntary, free, opt-in service. There should be no expectation of anything, and people will assist members of the community where they see fit.",
          "createdAt": "2020-12-21T14:11:41Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTA0NjA0OA==",
          "body": "@antony I did go through a lengthy discussion on svelte Discord without any resolution. I understand the aim of not creating a forum in github issues, but say what you want, Discord is not a tracker for documenting issue resolution. There will be a new person coming in with the same questions as I did because there is no information on this in Svelte documentation. He will create the same issue, his issue will be closed and he will be redirected to the same discord and stackoverflow with no guarantee of getting to a solution.\r\n\r\n> Finally please don't direct others to help you, \r\n\r\nIf I would come to a car repair shop, tell them I have an issue and would get kicked out and asked to go ask fellow drivers what is the issue, I would never return to that repair shop ever again. As long as this frustration was not documented, this is exactly what happened.\r\n\r\n>  raise it as an issue and open a PR to help other users\r\n\r\nI would gladly do so if I would know the answer to my question or if I would know what is the problem with the documentation. I'm not so well versed in Svelte to know that yet. Since I didn't get an answer neither here, nor on Discord, nor on Stackoverflow, this again feels like people who know more telling less knowledgable devs to deal with their cases themselves.",
          "createdAt": "2020-12-21T15:55:38Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTA0OTYwMw==",
          "body": "I believe this is still an issue and it's the responsibility of the maintainers to help with the resolution of it. So far this is a poor experience with almost no help. You might think I feel entitled, however, it's not the case. You are providing a tool and you/the maintaines/creators (I believe) want other developers to use Svelte. Otherwise, there is no point in working on this project. Thus, not helping with the issue is counterproductive \r\n\r\nThis means that closing an issue just because \"you don't want this to become a forum\" even though this thread had only 7 messages before closing is weird, frankly.",
          "createdAt": "2020-12-21T16:03:09Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTA1NjQ4Mw==",
          "body": "cc @Rich-Harris",
          "createdAt": "2020-12-21T16:17:14Z",
          "author": { "login": "Rolandisimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTA1NzQyOA==",
          "body": ">>  did go through a lengthy discussion on svelte Discord without any resolution. I understand the aim of not creating a forum in github issues, but say what you want, Discord is not a tracker for documenting issue resolution\r\n\r\nStackoverflow, as you mentioned, is an excellent forum for this. Discord is a way of getting help more directly, but comes with no guarantees.\r\n\r\n>> If I would come to a car repair shop, tell them I have an issue and would get kicked out and asked to go ask fellow drivers what is the issue\r\n\r\nGo to the car shop and ask them what they'll do for free. They might kick you out then.\r\n\r\n>> I would gladly do so if I would know the answer to my question or if I would know what is the problem with the documentation\r\n\r\nRaise an issue describing what is not clear about the documentation, and we will strive to clarify and make this clear. Right now it looks like your issue pertains to either: reassigning a variable to something else, which is a javascript/general programming problem and not something we'd document, or pertains to retrieving a store's own value from within the same store, which is a) a bad idea b) answered above. It needs to be made very clear, in a separate, isolated issue, where the documentation needs improvement, not tacked on to this issue, which is an non-valid bug report.\r\n\r\n>> Since I didn't get an answer neither here, nor on Discord, nor on Stackoverflow\r\n\r\nWe provide no guarantees, especially of any sort of response time.\r\n\r\n>> it's the responsibility of the maintainers to help with the resolution of it\r\n\r\nno it isn't.\r\n\r\n>> closing an issue just because \"you don't want this to become a forum\" \r\n\r\nThis issue was closed as resolved. If there is an issue with docs please raise another issue which details the specific issue around documentation\r\n\r\n>> cc Rich-Harris\r\n\r\nThis is incredibly annoying. Please do not do that.\r\n",
          "createdAt": "2020-12-21T16:19:26Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzE2ODkyMDQ=",
    "body": "**Describe the bug**\r\n\r\nArray.length not reactive.\r\n```\r\n<script>\r\n  let arr = [];\r\n\r\n  function handleClick() {\r\n    arr.push(1);\r\n    console.log(arr.length);\r\n  }\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n  Clicked\r\n  {arr.length}\r\n  {arr.length === 1 ? 'time' : 'times'}\r\n</button>\r\n```\r\nWith these codes, the `arr.length` will increments with `console.log`, but not with html template.\r\n\r\n**Logs**\r\nApp2.svelte:6 1\r\nApp2.svelte:6 2\r\nApp2.svelte:6 3\r\nApp2.svelte:6 4\r\nApp2.svelte:6 5\r\n...\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/2d63e41203634881983b6af81db38c67?version=3.31.0\r\n\r\n**Expected behavior**\r\n`arr.length` in html template increments after button clicked.\r\n\r\n**Information about your Svelte project:**\r\n  System:\r\n    OS: Windows 10 10.0.18363\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz\r\n    Memory: 16.15 GB / 31.77 GB\r\n  Binaries:\r\n    Node: 12.18.3 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.5 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 6.14.6 - C:\\Program Files\\nodejs\\npm.CMD\r\n  Browsers:\r\n    Chrome: 87.0.4280.66\r\n    Edge: Spartan (44.18362.449.0)\r\n    Internet Explorer: 11.0.18362.1\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.35.1 \r\n    svelte: ^3.0.0 => 3.31.0 \r\n\r\n**Severity**\r\nMiddle: The simplest workaround I can think of is using a new variable eg: `arr_len` to track the length after every Array manipulation, but very trobulesome.\r\n",
    "closedAt": "2020-12-20T20:56:04Z",
    "createdAt": "2020-12-20T20:10:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODY2OTcyOA==",
          "body": "It's `array.push()` that isn't reactive. See https://svelte.dev/tutorial/updating-arrays-and-objects",
          "createdAt": "2020-12-20T20:56:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzEzNzI0ODU=",
    "body": "## bind:group on input checkbox not working as expected inside nested loop\r\n\r\n**Describe the bug**\r\nCurrently I create dynamic checkbox based on nested array. I want to make role management with just check the action (C,R,U,or D) based on module. This is the minimal example of the data\r\n```js\r\n[\r\n  {\r\n     key: \"p1\",\r\n     checked: [],\r\n     sub: [\r\n      {\r\n         key: \"p1s1\",\r\n\tchecked: []\r\n     }]\r\n  },\r\n {\r\n    key: \"p2\",\r\n    checked: [],\r\n    sub: [\r\n     {\r\n\tkey: \"p1s1\",\r\n\tchecked: []\r\n     }]\r\n }\r\n]\r\n```\r\n\r\np1 will be parent module, and p1s1 is sub module for p1. Then i loop that array to create input checkbox. For parent checkbox the behaviour is ok as expected. But for the nested one is not working as expected. I think the index of bind:group of nested checkbox is collapse with the other. \r\nFor example:\r\np1s1 has checked value [\"C\"], when I check \"R\" on p2s1 (same sub index but different parent), the value of p2s1 checked is [\"C\",\"R\"].\r\n\r\n**To Reproduce**\r\nthis is the REPL link for the demo https://svelte.dev/repl/8d03a86642e449108c2dd22de7aa8cd3?version=3.31.0 \r\n1. check p1s1 C\r\n2. check p2s1 R\r\nyou will see, p2s1 C is checked (if you check p1s1 D first, you will see p2s1 D checked)\r\n\r\n**Expected behavior**\r\nonly p2s1 R is checked\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\nSystem:\r\n    OS: macOS 11.0.1\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-5300U CPU @ 2.30GHz\r\n    Memory: 212.89 MB / 8.00 GB\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 14.4.0 - ~/.nvm/versions/node/v14.4.0/bin/node\r\n    Yarn: 1.22.5 - ~/.yarn/bin/yarn\r\n    npm: 6.14.5 - ~/.nvm/versions/node/v14.4.0/bin/npm\r\n    Watchman: 4.9.0 - /usr/local/bin/watchman\r\n  Browsers:\r\n    Chrome: 87.0.4280.88\r\n    Firefox: 83.0\r\n    Safari: 14.0.1\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.33.1 \r\n    svelte: ^3.31.0 => 3.31.0 \r\n\r\n**Severity**\r\nNot urgent, but is annoying\r\n\r\n**Current Work around**\r\nwhen i change bind:group on nested loop from `s.checked` to `d.sub[i].checked` this issue is gone",
    "closedAt": "2021-01-02T00:35:44Z",
    "createdAt": "2020-12-19T12:30:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQxNzc4Mw==",
          "body": "This is fixed in 3.31.1 - https://svelte.dev/repl/8d03a86642e449108c2dd22de7aa8cd3?version=3.31.1",
          "createdAt": "2021-01-02T02:10:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NTc3MTI4Mg==",
          "body": "Whoa thank you for fix, that's awesome 👍 ",
          "createdAt": "2021-01-06T23:10:35Z",
          "author": { "login": "axmad386", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzEzNTMzNjg=",
    "body": "**Describe the bug**\r\n\r\nParseError: Unterminated template\r\nrunning Svelte compiler version 3.31.0\r\n\r\ncode:\r\n```\r\n<script>\r\n    let name = 'world';\r\n    let str = `<script src=\"/js/modernizr.custom.46884.js\"></script>`;\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<code>\r\n{str}\r\n</code>\r\n\r\n```\r\nTreat the script in the string as an html element\r\n",
    "closedAt": "2020-12-19T12:07:45Z",
    "createdAt": "2020-12-19T10:21:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODQ1NDUyMg==",
          "body": "This is bound to happen when using a `<script>` tag you could escape the ending tag like this `</\\script>`.",
          "createdAt": "2020-12-19T10:28:01Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODQ2NTc3Ng==",
          "body": "This is a duplicate of #3039, #3840, #4406, #4996, #5024, #5237, and probably others.\r\n\r\nThis is not a bug. This is how closing script tags are parsed in regular HTML.",
          "createdAt": "2020-12-19T12:07:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTkzMjk0NA==",
          "body": "I still think this is a bug, because there is no explanation in the development documentation.",
          "createdAt": "2020-12-29T03:24:33Z",
          "author": { "login": "lv-3", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTkzMzUyNw==",
          "body": "I know that escaping can solve this problem, but the development documentation does not say that escaping is required in this case, so this is a bug",
          "createdAt": "2020-12-29T03:28:37Z",
          "author": { "login": "lv-3", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTk1NDIwOQ==",
          "body": "Svelte is a superset of HTML. So I don't think the documentation needs to include everything in the [HTML spec](https://html.spec.whatwg.org/#parsing-html-fragments). ",
          "createdAt": "2020-12-29T05:41:52Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NzQ3Njc5Nw==",
          "body": "<p>\r\nThis is the difference between Svelte and HTML.If the document is not written, people will always raise issues and discourage others' enthusiasm for raising issues.\r\n</p>\r\n\r\n---\r\n\r\nAnyway, no loss to me, I don't pay attention to this problem anymore",
          "createdAt": "2021-01-10T13:31:24Z",
          "author": { "login": "lv-3", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzA3ODQ2Njg=",
    "body": "**Describe the bug**\r\n\r\nIn our application some components are lazy loaded (using dynamic imports) after their tags have already been stamped in the dom and props have been passed. Using this practice with Svelte custom elements we are facing this issue:\r\n\r\n* the initial props passed to the element before lazy loading are not set in the custom element, rather Svelte uses the default values defined in the component\r\n* the props that were set before the component was loaded stop reacting to changes at all after Svelte custom element is loaded\r\n\r\n*Example:*\r\n\r\nThe component:\r\n```\r\n    <script>\r\n        export let name = \"Default Name\";\r\n        let firstName = \"\";\r\n\r\n        $: firstName = name.split(\" \")[0];\r\n    </script>\r\n\r\n    <svelte:options tag=\"my-component\" />\r\n\r\n    <main>\r\n        <h1>Name: {name}!</h1>\r\n        <h2>First name is: {firstName}</h2>\r\n    </main>\r\n```\r\nHow we use it:\r\n```\r\n    const myComponent = document.createElement('my-component');\r\n    myComponent.name = \"Hello World\";\r\n    document.body.appendChild(myComponent);\r\n\r\n    ...\r\n    import('my-component.js'); // at some point later\r\n```\r\n\r\nExpected result:\r\n```\r\n    Name: Hello World!\r\n    First name is: Hello\r\n```\r\n\r\nActual result:\r\n```\r\n    Name: Default Name!\r\n    First name is: Default\r\n```\r\n\r\nFurthermore, if we try to change the prop, myComponent.name to any value, the component will not react at all.\r\n\r\nAfter analysis I found that this happens because Svelte's getter and setter for prop \"name\" do not get called because \"name\" is now a new variable in myComponent created when we assigned the prop to the unhydrated element.\r\n\r\n**To Reproduce**\r\n\r\nThe issue can be reproduced in this repository: https://github.com/abdullahkamran/svelte-lazy-custom-element-demo\r\n(npm i && npm run dev) Just run it and click on the button to lazy load the component.\r\n\r\n**Expected behavior**\r\n\r\n* the initial props passed to the element should be set when the Svelte custom element is loaded after element stamped in dom\r\n* the props should be reactive to changes after lazy loading\r\n\r\n**Severity**\r\n\r\nIn our enterprise application, we plan to use Svelte custom elements and since we are  lazy loading components to improve initial loading time, this issue is of critical importance to us.",
    "closedAt": null,
    "createdAt": "2020-12-18T10:48:12Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjgxMDY2OA==",
          "body": "Setting the Svelte custom element props via setter only works when the custom element is defined, which is after the `./component.svelte` is loaded and executed.\r\n\r\nBefore that, `<my-component>` is a [HTMLUnknownElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement).\r\n\r\nHowever, you can still set the attribute of `<my-component>` via [setAttribute()](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)\r\n\r\n```js\r\nconst myComponent = document.createElement('my-component');\r\nmyComponent.setAttribute('name', 'Hello World');\r\ndocument.body.appendChild(myComponent);\r\n```\r\n\r\nTo know when the custom element is loaded and executed, you can `await` for the lazy import to be finished\r\n\r\n```js\r\nawait import('my-component.js'); // at some point later\r\n\r\nmyComponent.name = 'Hello World again';\r\n```",
          "createdAt": "2020-12-31T01:27:33Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzAzMjMyODc=",
    "body": "**Describe the bug**\r\nThere's a race condition when you replace a component that has a child with an out transition that is currently running, svelte dies. \r\n\r\nIn production, we see the old component stay on the page _in addition to_ the component replacing it, and we don't see any console errors on this (with svelte 3.29.4). \r\n\r\nIn REPL there's an exception and JS dies.\r\n\r\n**Logs**\r\n`Uncaught (in promise): if_block.p is not a function` (only in REPL, version 3.31.0)\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/46686d49624a4f099f738998fbe5301c?version=3.31.0\r\n\r\n**Expected behavior**\r\nOut transition of the child would be killed, the whole component would be replaced.  \r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\ntested in chrome and safari\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\nOS X\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n3.29.4 and 3.31.0\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nWe can work around it (also shown in the REPL) but it's a real gotcha, especially with production code that has nested components.\r\n\r\n",
    "closedAt": "2021-01-04T20:50:23Z",
    "createdAt": "2020-12-17T19:51:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTQ3MzkyMg==",
          "body": "I got the same error and found a fix for it. The problem is the `{:else}` block. If you split the code up into two separate if-blocks everything works as expected.\r\n\r\nThis is your example from above, but with the fix applied:\r\nhttps://svelte.dev/repl/dbba868b5fa64be4b750b9296c6f5cfa?version=3.31.0\r\n\r\nYou can toggle really fast and nothing breaks",
          "createdAt": "2020-12-27T14:28:12Z",
          "author": { "login": "christiankaindl", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTg2Nzc1OQ==",
          "body": "Good sleuthing!\r\n\r\nIn looking at our source code, it turns out that it wasn't an `{:else}` block that was causing problems -- it was an interval.\r\n\r\nHere's an updated REPL that still breaks -- it looks like there's a race condition going on, where the onInterval is updating the `{#if}` block but for some reason the onDestroy isn't getting called when the parent is swapped out, so then it leaves everything in the DOM.\r\n\r\nShould this be a different issue?\r\n\r\nhttps://svelte.dev/repl/3defa9a68e7147ec8a18a4a15d422c36?version=3.29.4",
          "createdAt": "2020-12-28T21:20:12Z",
          "author": { "login": "awmcclain", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTg3NDk5OA==",
          "body": "related #5815",
          "createdAt": "2020-12-28T21:49:48Z",
          "author": { "login": "mdynnl", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI1MjY1Mg==",
          "body": "This is fixed in 3.31.2 - https://svelte.dev/repl/46686d49624a4f099f738998fbe5301c?version=3.31.2",
          "createdAt": "2021-01-04T22:07:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI2MDE4MA==",
          "body": "The other repro case is still broken, unfortunately (the old divs aren't cleared, onDestroy() doesn't get called).\r\nhttps://svelte.dev/repl/3defa9a68e7147ec8a18a4a15d422c36?version=3.31.2",
          "createdAt": "2021-01-04T22:25:01Z",
          "author": { "login": "awmcclain", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzAwNDMwMjQ=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nIt's not easy to debug reactive statement and determine which statement was executed and how much time it took\r\n\r\n**Describe the solution you'd like**\r\nDispatch a dev event before and after the reactive statement execution\r\n\r\n**Describe alternatives you've considered**\r\nThe good old console log + step debugging + svelte devtools\r\n\r\n**How important is this feature to you?**\r\nIt would be very helpful for debugging and profiling large apps (this would be eventually integrated in devtools)\r\n\r\nHere's the code I have in mind to further clarify my request\r\n```\r\ndispatch_dev('SvelteReactiveStart', {statement: \"double = count * 2\"});\r\n$$invalidate(1, double = count * 2);\r\ndispatch_dev('SvelteReactiveEnd', {statement: \"double = count * 2\"});\r\n```\r\nWe can also pass a unique id to measure execution time\r\n",
    "closedAt": "2021-01-19T06:31:45Z",
    "createdAt": "2020-12-17T13:39:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjYzMjEyNQ==",
          "body": "I did it using a preprocessor https://github.com/unlocomqx/svelte-reactive-preprocessor\r\nSo i'll close this issue",
          "createdAt": "2021-01-19T06:31:45Z",
          "author": { "login": "unlocomqx", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NzAwMjEyNTE=",
    "body": "**Describe the bug**\r\nThe following code results in `console.log(...) is not a function`. Switching the order of the destructuring assignment and `console.log` makes it work. Replacing `({bla} = s)` with `const {bla} = s` will work. Removing the destructuring assignment entirely will work.\r\n\r\nThis ought to work, right?\r\n\r\n**To Reproduce**\r\n```\r\n<script>\r\n\timport { writable } from \"svelte/store\";\r\n  \r\n\tlet store = writable({bla: true})\r\n\r\n\tlet bla\r\n\r\n\t$: {\r\n\t\tconst s = $store; \r\n\t\tconsole.log('important information')\r\n\t\t({bla} = s);\r\n\t}\r\n</script>\r\n\r\n{bla}\r\n```\r\nhttps://svelte.dev/repl/c3b9425d0e93496f9acc63f211352d21?version=3.31.0\r\n\r\n**Expected behavior**\r\nI'd expect the message to print in the console and the output to be `true`\r\n\r\n**Information about your Svelte project:**\r\n```\r\n  System:\r\n    OS: macOS 10.15.2\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-8210Y CPU @ 1.60GHz\r\n    Memory: 679.86 MB / 8.00 GB\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 14.4.0 - ~/.nvm/versions/node/v14.4.0/bin/node\r\n    Yarn: 1.22.4 - /usr/local/bin/yarn\r\n    npm: 6.14.5 - ~/.nvm/versions/node/v14.4.0/bin/npm\r\n  Browsers:\r\n    Chrome: 87.0.4280.88\r\n    Firefox: 70.0.1\r\n    Safari: 13.0.4\r\n```\r\n\r\n**Severity**\r\nNot particularly important, though I seem to be having other issues with this kind of code that may or may not be related to this issue.\r\n",
    "closedAt": "2020-12-17T13:22:17Z",
    "createdAt": "2020-12-17T13:20:14Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NzQzNTg0NA==",
          "body": "I take that back. Missing semicolon",
          "createdAt": "2020-12-17T13:22:17Z",
          "author": { "login": "ehrencrona", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njk0MzUwOTg=",
    "body": "**Describe the solution you'd like**\r\nI am reading the bundle.js，I found the mount function in the create_fragment()   like this:\r\n```javascript\r\n   \t\tm: function mount(target, anchor) {\r\n    \t\t\tinsert_dev(target, main, anchor);   //   **this line  should write last**\r\n                        append_dev(main, t0);\r\n    \t\t\tappend_dev(main, t1);\r\n    \t\t\tappend_dev(main, t2);\r\n    \t\t},\r\n```\r\nI think You can make some optimizations here.\r\n\r\n",
    "closedAt": "2021-01-26T15:24:12Z",
    "createdAt": "2020-12-17T02:33:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjQyMzMyNw==",
          "body": "Can't get the problem",
          "createdAt": "2020-12-30T11:18:16Z",
          "author": { "login": "ZerdoX-x", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1Mjk0MjY3Mw==",
          "body": "I think this is something you'll have to just prove to get any traction going. So, patch the compiler to make it work, compare various components with and without the patch, post your findings, and _if_ there are noticeable speedups, _and_ the changes aren't too complex, then maybe the maintainers would consider it...",
          "createdAt": "2020-12-31T12:18:54Z",
          "author": { "login": "Phaqui", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI2NTg3NA==",
          "body": "@shenjunjian as others have alluded to, please fill out the issue template in the requested format so that we can properly understand your issue.",
          "createdAt": "2021-01-04T22:38:52Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjkyMjY3Nzk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIn general, removal of unused CSS is a good thing. From time to time I'd like to opt out of it, for example I'm trying to style `<svg>` tags which are not yet present in the markup (lazy loaded with fetch). Svelte removes the styles for svg selector since no markup yet exists.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIdeally something like `:global` for example `:keep`.\r\n\r\n```\r\n:keep(.icon svg) {\r\n  width: 50%;\r\n  height: 50%;\r\n}\r\n\r\n```\r\nThere's actually already a workaround and that is to use the `:global` selector from svelte-preprocess and if I use it with the styles that I don't want removed it works fine. Obviously, with a side effect of moving the targeted styles to root, which is unwanted.\r\n\r\nI'd just like to have an option to prevent unused styles optimization occasionally.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nThe forementioned `:global` workaround.\r\n\r\n**How important is this feature to you?**\r\n\r\nnot super crucial at the moment but would be nice to have\r\n",
    "closedAt": "2020-12-16T20:14:25Z",
    "createdAt": "2020-12-16T19:51:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjkyMTM3NQ==",
          "body": "Note that `:global` doesn't need to be top level, you can nest it inside another selector `.icon :global(svg) { ... }` this style will now only apply to svgs that are descendents of `.icon`. Doing this keeps the benefit of scoping you would like to have.",
          "createdAt": "2020-12-16T19:58:09Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjkyNjE3Mg==",
          "body": "Oh, missed that, sweet!",
          "createdAt": "2020-12-16T20:01:43Z",
          "author": { "login": "brgrz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Njk0Mjg0MA==",
          "body": "As mentioned, you can make only part of the selectors global. See also the old issue #1594.",
          "createdAt": "2020-12-16T20:14:25Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Njk1MzM2MQ==",
          "body": "@Conduitry This appears to be a common issue people have. I searched but didn't find it in the Issues. Would it be possible to add this either to the tutorial or the API docs to make it more prominent?",
          "createdAt": "2020-12-16T20:21:18Z",
          "author": { "login": "brgrz", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njg5OTM0OTk=",
    "body": "https://svelte.dev/repl/9a1cfd41ab354df880cb806194131f6c?version=3.31.0\r\n\r\nthe clear button works only once and after ignore",
    "closedAt": "2020-12-17T08:24:12Z",
    "createdAt": "2020-12-16T15:20:47Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NzI4OTA0OQ==",
          "body": "With a fresh mind, it became obvious that there was no mistake. value is not updated, because we are trying to put the value into a variable with the value, which of course will not lead to a rerendering. To solve this problem, you need to do a two-way binding by adding on: input = {(evt) => {value = evt.detail}}.",
          "createdAt": "2020-12-17T08:24:12Z",
          "author": { "login": "timeshift92", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njg5NjQ2MDk=",
    "body": "Hi, i have encountered following error, when i try to dynamically place a compononent from another package and try to use the component-context there.\r\n\r\nrepo with examle: [click here](https://github.com/QuickMick/svelte-getcontext-test)\r\n\r\n#### error:\r\n```\r\nUncaught TypeError: Cannot read property 'test' of undefined\r\n    at instance (test.svelte:3)\r\n    at init$1 (index.mjs:1471)\r\n    at new Test (test.svelte:6)\r\n    at create_fragment$1 (app.svelte:43)\r\n    at init (index.mjs:1486)\r\n    at new App (app.svelte:18)\r\n    at index.js:9\r\n    at index.js:9\r\n```\r\n\r\n\r\ni use following versions:\r\n```\r\n    \"rollup-plugin-svelte\": \"^7.0.0\",\r\n    \"svelte\": \"3.31.0\"\r\n```\r\n\r\n#### app.svelte (in the main package, where i run rollup also)\r\n```\r\n<script>\r\n  import Test from \"otherPackage/test.svelte\";\r\n\r\n  setContext(\"test\", {\r\n    test: () => console.log(\"teeesdfsdf context\")\r\n  });\r\n</script>\r\n\r\n<svelte:component this={Test} />\r\n```\r\n\r\n#### otherPackage/test.svelte (some other package, i have linked in my app's package.json)\r\n```\r\n<script>\r\n  import { getContext } from \"svelte\";\r\n  const { test } = getContext(\"test\"); // error is thrown here\r\n\r\n  function click() {\r\n    test();\r\n  }\r\n</script>\r\n\r\n<button on:click={click}> test </button>\r\n\r\n```\r\n\r\ni have no issues, when i do not use the context in the component from the external package.\r\nI thought it could be, because the import does not work correctly, but importing e.g. `onMount` in the external component works fine.\r\n\r\n\r\n",
    "closedAt": "2020-12-18T23:57:38Z",
    "createdAt": "2020-12-16T14:49:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjQ1NjQ1Ng==",
          "body": "Without a complete clonable reproduction, including your bundler config, there's not any way to help you here.\r\n\r\nContext is one of the features that requires that all compiled components use the same copy of `svelte/internal` when bundled. This presumably isn't happening.",
          "createdAt": "2020-12-16T15:16:51Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjUwNTE3Nw==",
          "body": "in `otherPackage`, i have installed the exact same version of svelte, but i have not compiled it there. rollup is just running in the \"app.svelte\" directory. i will create an example repo tomorrow\r\nor is the correct way to do this, bundeling `otherPackage`, before importing it?",
          "createdAt": "2020-12-16T15:45:15Z",
          "author": { "login": "QuickMick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjY3MzU0Nw==",
          "body": "i found the time to create a simple repository now: [get it here ](https://github.com/QuickMick/svelte-getcontext-test) \r\nthis error is always thrown as long as the  button.svelte component tries to use getContext",
          "createdAt": "2020-12-16T17:22:34Z",
          "author": { "login": "QuickMick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjY4MTI5NQ==",
          "body": "Can you try `dedupe: [ 'svelte' ]` in your `resolve({})` rollup config.",
          "createdAt": "2020-12-16T17:27:16Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjY4NzUyMA==",
          "body": "See also the Rollup config in the official template - https://github.com/sveltejs/template/blob/master/rollup.config.js",
          "createdAt": "2020-12-16T17:30:49Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NzU5OTMzNw==",
          "body": "Thanks a lot for your help.\r\n\r\nI have implemented your suggestions in my rollup and changed it to be similar to the one from the template. I also have added the \"dedupe\" as well. This made it work.\r\n\r\nUnfortunately, as soon as i put a style to the [component in \"library\" ](https://github.com/QuickMick/svelte-getcontext-test/blob/b9a820e996b05b2274a2141ab5f6fe4b9d77b285/library/src/button.svelte#L12)i get following error.\r\n\r\n\r\n``` \r\nrollup v2.35.1\r\nbundles index.js → bundle.js...\r\n(!) Unresolved dependencies\r\nhttps://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency\r\nregenerator-runtime/runtime (imported by index.js)\r\ncore-js/stable (imported by index.js)\r\n[!] Error: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n../library/src/button.css (1:0)\r\n1: .btn-class.svelte-1odcmro{width:100px;color:red;outline:0}\r\n   ^\r\nError: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n    at error (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:5265:30)\r\n    at Module.error (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:9842:16)\r\n    at tryParse (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:9723:23)\r\n    at Module.setSource (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:10149:19)\r\n    at ModuleLoader.addModuleSource (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:18319:20)\r\n    at ModuleLoader.fetchModule (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:18375:9)\r\n    at async Promise.all (index 2)\r\n    at ModuleLoader.fetchStaticDependencies (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:18400:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (/home/mick/Desktop/svelte-getcontext-test/app/node_modules/rollup/dist/shared/rollup.js:18377:9)\r\n```\r\nIt seems as if the css plugin does not work in for the dependency.\r\nwhen i move the style to \"app.svelte\", it works without any errors.\r\nIs this an error with svelte/rollup, or my incompetence to configure it correctly?\r\n",
          "createdAt": "2020-12-17T17:55:07Z",
          "author": { "login": "QuickMick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NzcwNzE5MA==",
          "body": "We figured the remaining issue out in the Svelte Discord and I filed https://github.com/thgh/rollup-plugin-css-only/issues/27 as a result.",
          "createdAt": "2020-12-17T21:17:18Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NzcxMjk0NA==",
          "body": "thanks, wanted to post it here right now :D",
          "createdAt": "2020-12-17T21:28:46Z",
          "author": { "login": "QuickMick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODMwNzA1OQ==",
          "body": "`rollup-plugin-css-only` 3.1 is out and should resolve the remaining issue. I think we can close this?",
          "createdAt": "2020-12-18T20:37:31Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODM4MDIzMw==",
          "body": "Thanks for the help figuring this out and seeing it through @dimfeld !",
          "createdAt": "2020-12-18T23:58:14Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njg0NjA3MTg=",
    "body": "Clear information about the initial, broken code in the Tutorial on https://svelte.dev/tutorial/\r\n\r\nYou are currently entering a Tutorial and what do you see ?:\r\n* some code\r\n* some instruction\r\n\r\nIs it obvious to anyone that the code in the tutorial is broken? No!\r\nI had it like that at the beginning, but I also read that others have it (in this svelte review).\r\n\r\n**What to do with this?**\r\n\r\nI think ABOVE the tabs/files bar there should be a Red bar, with info like:\r\n\"PRE-CODE, NOT FUNCTIONING - Take a tutorial to get it working\"\r\n\r\nThis bar can have a cross to hide the belt with a warning, as he knows.\r\n\r\n**Additionally:**\r\nIn addition, the \"Show me / Reset\" button is at the end of the tutorial, sometimes you can not even see it without scrolling.\r\nMaybe it should also be on the warning bar? For example:\r\n\"PRE-CODE, NOT FUNCTIONING - Take a tutorial to get it working or [Show me]\"\r\n\r\n\r\n**Another option:**\r\n\r\n* Pop-up message with the same information - definitely worse solved.\r\n* The bar above the tutorial content - but that's a worse place.",
    "closedAt": "2020-12-31T01:29:41Z",
    "createdAt": "2020-12-16T05:22:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjgxMTEyOA==",
          "body": "i believe the instructions in the beginning of the tutorial is quite clear.\r\n\r\n<img width=\"423\" alt=\"Screenshot 2020-12-31 at 9 30 14 AM\" src=\"https://user-images.githubusercontent.com/2338632/103389593-d77eb300-4b4a-11eb-9a3f-58ebb160ce21.png\">",
          "createdAt": "2020-12-31T01:30:55Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1Mjg2MjI4Nw==",
          "body": "@tanhauhau Oh no... Really?\r\nDo you really have this approach to improvements?\r\n\r\nThis is an obvious improvement, and you just throw it away, hoping to read the manual?\r\nThis is not something I will fight for.\r\n\r\nIt's sad that you have this approach.\r\nThere is a problem and a simple way to solve it? Don't throw it away!\r\n\r\nThis is not only my problem, but also an article on medium.com or another blog that mentioned this problem as not being obvious.\r\n\r\nIt is not obvious or intuitive. The interface should describe itself.\r\n\r\nIf you have this approach, there is no chance of popularizing svelte.\r\n\r\nI wrote here about a way to remove some small initial barriers. It's always a good idea to remove them...",
          "createdAt": "2020-12-31T06:31:01Z",
          "author": { "login": "lukaszpolowczyk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjkyMDAzOQ==",
          "body": "@lukaszpolowczyk The tutorial is designed to be read and followed. If people aren't willing to read and follow the tutorial then they might as well not do it at all, and no amount of clutter, caused by plastering duplicate instructions all over the place is going to fix that. Why impede the experience for people willing to put the 45 minutes of effort into reading and following the tutorial, to assist the impatient who just want to skim and rush through it. It doesn't make any sense.",
          "createdAt": "2020-12-31T10:39:04Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjkyMjU0MQ==",
          "body": "\"If people aren't willing to read and follow the tutorial then they might as well not do it at all\"\r\nI believe this is a wrong approach.\r\nYou are assuming someone's ill will.\r\nIn my opinion, you have to assume that someone might misuse your tool.\r\n![obraz](https://user-images.githubusercontent.com/16800535/103407175-db680080-4b5d-11eb-9a79-e93ea3e98219.png)\r\n![obraz](https://user-images.githubusercontent.com/16800535/103407186-f0dd2a80-4b5d-11eb-9363-77c8ee637255.png)\r\n\r\n\r\nI do not consider this info bar to be something terrible, as it could be simply closed.\r\n\r\nIt wouldn't be a copy of the instructions, just one simple sentence.",
          "createdAt": "2020-12-31T10:49:05Z",
          "author": { "login": "lukaszpolowczyk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njg0Mzg2MjA=",
    "body": "Hope it's obvious - you will need to update #await as JS Promise develops.\r\n\r\nA syntax like this:\r\n```\r\n{#await all promisesArr}\r\n\t<!-- promise is pending -->\r\n\t<p>waiting for the promise to resolve...</p>\r\n{:then valuesArr}\r\n\t<!-- promise was fulfilled -->\r\n\t<p>The value is {valuesArr}</p>\r\n{:catch error}\r\n\t<!-- promise was rejected -->\r\n\t<p>Something went wrong: {error.message}</p>\r\n{/await}\r\n```",
    "closedAt": "2020-12-16T09:24:13Z",
    "createdAt": "2020-12-16T04:27:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTk3ODU0Nw==",
          "body": "There's no need for special syntax for this. You can just do `{#await Promise.all(foo)}`. It's more explicit, and it's less to document.",
          "createdAt": "2020-12-16T09:23:56Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njg0MjA4NTE=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nSvelte greatly simplifies the code.\r\nI miss the simplification of the recognition of a **key** or a **mouse button** - to make it even more transparent.\r\nI'm trying on the line (maybe it's a bad idea, but I don't have a better one):\r\n```\r\n<button on:mouseup={event=>\r\n\tevent.button===0?doSound(wave)\r\n\t:\r\n\tevent.button===1?saveSound(wave)\r\n\t:\r\n\tnull\r\n}>\r\n```\r\nbut this code is just... not very readable, and ugly.\r\n\r\n**Describe the solution you'd like**\r\n```\r\n<!-- Mouse button modifiers (and @const in tag) -->\r\n<button\r\n\ton:mouseup|firstButton={()=>doSound(wave)}\r\n\ton:mouseup|secondButton={()=>saveSound(wave)}\r\n}>\r\n\t\r\n<!-- Or maybe like a function? -->\r\n<button\r\n\ton:mouseup|button(0)={()=>doSound(wave)}\r\n\ton:mouseup|button(1)={()=>saveSound(wave)}\r\n}>\r\n```\r\n\r\n```\r\n<!-- Key code modifiers -->\r\n<svelte:window on:keydown|KeyA|KeyS|KeyD|KeyW={doSometing}/>\r\n\t\r\n<!-- or from an array -->\r\n{@const arr=[\"KeyA\",\"KeyS\",\"KeyD\",\"KeyW\"]}\r\n<svelte:window on:keydown|{arr}={doSometing}/>\r\n\t\r\n<!-- or like a function -->\r\n<svelte:window on:keydown|keyCode(KeyA,KeyS,KeyD,KeyW)={doSometing}/>\r\n\r\n<!-- or -->\r\n{@const arr=[\"KeyA\",\"KeyS\",\"KeyD\",\"KeyW\"]}\r\n<svelte:window on:keydown|keyCode(arr)={doSometing}/>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\n```\r\n<script>\r\nfunction mouseup (event) {\r\n  event.button===0?doSound(wave)\r\n  event.button===1?saveSound(wave)\r\n  :\r\n  null\r\n}\r\n</script>\r\n<button on:mouseup>\r\n```\r\n\r\n\r\n**How important is this feature to you?**\r\nI use this on a daily basis so quite important.\r\n",
    "closedAt": "2020-12-16T03:52:29Z",
    "createdAt": "2020-12-16T03:41:06Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTc0NjYzOQ==",
          "body": "This came up before in #4427 and in other issues, and I still think that all the extra syntax (and extra documentation) that this would require is not worth it, compared to just doing this in javascript.",
          "createdAt": "2020-12-16T03:52:29Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTc0OTU0Mw==",
          "body": "@Conduitry How can you say unequivocally \"worth it\" or \"not worth it\"? Is it such an arbitrary decision?\r\n\r\nI understand the concept of svelte simplicity and support it very much.\r\nBut there aren't many places like the concept of modifiers with parameters - it's something simple and general.\r\n`on:keydown|keyCode(KeyA,KeyS,KeyD,KeyW)`\r\n\r\nI will even say that there are a lot of things in svelte that can only be used occasionally, and sometimes you have to use a less neat version.\r\n For example, you can \r\n`bind:value`\r\nbut there are situations where you cannot do without \r\n`on:change={e=>value=e.target.value}`\r\nBut we don't delete `bind:value`.\r\n\r\nSuch button and key modifiers would fit in perfectly.",
          "createdAt": "2020-12-16T04:03:59Z",
          "author": { "login": "lukaszpolowczyk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjgzNTMzODM=",
    "body": "**Describe the bug**\r\nWhen a DOM element's parent's height is based on window's innerHeight, the bind:clientHeight of the child element sometimes won't reflect the latest value when instantiated. \r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/b03981bb98d5411aa807e6857ab2cebb?version=3.31.0\r\nRefreshing the page yields inconsistent results. Sometimes the values match, sometimes it reflects the child height before the parent's was updated. [Example GIF](https://gfycat.com/failingdistortedbuck).\r\n\r\nReproduced on Chrome 87, Firefox 84\r\n\r\n**Expected behavior**\r\nI expect the child's bind:clientHeight to reflect the latest value of the node.\r\n\r\n**Severity**\r\nAnnoyance: there are some workarounds like adding some conditional rendering with onMount.\r\n",
    "closedAt": null,
    "createdAt": "2020-12-16T01:05:43Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTgxMTUxNg==",
          "body": "It works properly on chromium edge \r\n![image](https://user-images.githubusercontent.com/3922469/102316046-349b3600-3f9b-11eb-8ab8-8e0a84044916.png)\r\n",
          "createdAt": "2020-12-16T07:05:48Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjQzOTM2Mw==",
          "body": "Sometimes the height is correct! I have a feeling this is due more to repl loading inconsistencies. You can default the `innerHeight` variable to 0 to replicate it more reliably.\r\n\r\nA few more notes:\r\n\r\n- we were seeing this in a local project, so this isn't isolated to the repl\r\n- my naive guess is that the iframe (that Svelte uses to watch the element's size) triggers a resize event on mount, but misses when the element resizes immediately after mount. In this case, the missed event is after Svelte grabs the innerHeight from the window and sets it on the parent `article`.",
          "createdAt": "2020-12-16T15:06:22Z",
          "author": { "login": "Wattenberger", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1OTEyMjA4MA==",
          "body": "I am seeing inconsistent results with bind:clientWidth... sometimes its good, others no ",
          "createdAt": "2021-06-10T22:26:36Z",
          "author": { "login": "zwergius", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjgzMTQ2NTk=",
    "body": "**Describe the bug**\r\nIf you pass `filename` and `outputFilename` options to `svelte.compile`, the `sources` property of the resulting sourcemap will contain a relative path from `outputFilename` to `filename` (and likewise for `cssOutputFilename`). This is the only thing `outputFilename` is used for. \r\n\r\n`sources` is used inconsistently in the wild; it's often unclear whether it's supposed to be describing filepaths or URLs. We treat it as a an array of filepaths, but that sometimes yields unwanted results: https://github.com/snowpackjs/snowpack/discussions/1941#discussioncomment-210899.\r\n\r\nIn the case where `to` is absolute, `relative(from, to) === to` should be true. `file://` URLs are absolute, but we don't treat them as such.\r\n\r\n**To Reproduce**\r\n```js\r\nconst { pathToFileURL } = require('url');\r\nconst { compile } = require('svelte/compiler');\r\nconst assert = require('assert');\r\n\r\nconst source = `<h1>Hello world!</h1>`;\r\n\r\nconst filename = pathToFileURL('index.svelte').href;\r\nconst outputFilename = '/components/index.svelte';\r\n\r\nconst result = compile(source, {\r\n  filename,\r\n  outputFilename\r\n});\r\n\r\nassert.deepEqual(\r\n  result.js.map.sources,\r\n  [filename]\r\n);\r\n```\r\n\r\n**Expected behavior**\r\n`outputFilename` should be disregarded, `sources` should equal `[filename]`. Instead we get `../../../file:///path/to/project/index.svelte`.\r\n\r\n**Severity**\r\nNot critical — possible to workaround.",
    "closedAt": null,
    "createdAt": "2020-12-15T23:57:49Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTY5NjI5Nw==",
          "body": "CC'ing our recent source mapping experts  @dmitrage @milahu :smile: ",
          "createdAt": "2020-12-16T01:05:55Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTcxMTQwNg==",
          "body": "could be easy as https://github.com/sveltejs/svelte/compare/master...milahu:patch-2\r\n",
          "createdAt": "2020-12-16T01:52:43Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjQ5ODUxMg==",
          "body": "Is it how preprocess is expected to work then?\r\n- We continue passing `filename` (not `file://` url) to preprocess\r\n- It generates source map with `sources` relative to component source file location (basename for component itself)\r\n- When combining (`apply_preprocessor_sourcemap`), we resolve sources to `file://` form relative to passed url\r\n\r\nExample:\r\npreprocess map sources: `[\"index.svelte\", \"external.css\"]`\r\ncompile input filename: `file:///path/to/project/index.svelte`\r\nresult map sources: `[\"file:///path/to/project/index.svelte\", \"file:///path/to/project/external.css\"]`\r\n",
          "createdAt": "2020-12-16T15:41:35Z",
          "author": { "login": "dmitrage", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njc2NjI2MTc=",
    "body": "**Describe the bug**\r\n`bind:clientWidth` and `bind:clientHeight` do not update when `display:block` is set to the style of an element.\r\n\r\n**To Reproduce**\r\n\r\nCheck out https://svelte.dev/repl/51b4a837e45d47f1af30f05f0531eb34?version=3.31.0\r\n\r\n**Expected behavior**\r\nSince the `div` element in the above example is a block element, `bind:clientHeight` should work even though `display:block` is set explicitly.\r\n\r\n- Your browser and the version: Chrome 87\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version: 3.31.0 (see REPL)\r\n\r\n**Severity**\r\nSevere. This behavior is neither expected nor documented. Moreover, I couldn't find a workaround for this problem.\r\n",
    "closedAt": "2020-12-16T04:41:19Z",
    "createdAt": "2020-12-15T14:41:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTM3NDc1Ng==",
          "body": "The issue here is that replacing the entire `style` attribute clobbers the `position: relative` that is needed for the resize detection. A `style` attribute that sets individual style properties should be fine (as long as you don't try to set `position`), as they'll be merged with the `position` instead of clobbering it. The workaround would be to not use a `style` attribute that attempts to set all of the style attributes.\r\n\r\nI'm torn about how to handle this. I'm not sure how much of a burden it would be to re-set the `position` style after every other style update. There should probably also at least be a documentation update explaining how you shouldn't mess with the `position` value.",
          "createdAt": "2020-12-15T15:41:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTc1OTY0NQ==",
          "body": "Alright! Thanks.",
          "createdAt": "2020-12-16T04:41:19Z",
          "author": { "login": "e-", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Njc0ODA3NDA=",
    "body": "**Describe the bug**\r\nRight now we cannot write something like this:\r\n\r\n```html\r\n<input slot='input' let:value {value} />\r\n```\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/baa7e87c93304b53ac368311494db9cb?version=3.31.0).\r\nIt raises `value is not defined` during compilation  and `Cannot read property 'index' of undefined` in the runtime.\r\n\r\nPossible workaround would be to wrap the element inside `<div>` and add `display: contents` to it if an extra element is something you cannot allow in this case.\r\n\r\n**Expected behavior**\r\nShould work.\r\n\r\n**Severity**\r\nNot severe at all, just a little inconvenience.",
    "closedAt": null,
    "createdAt": "2020-12-15T11:16:24Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzgwNjMyMQ==",
          "body": "Looks like a bug.\r\n\r\nTry replace input with div tag: ```<div slot='input' let:value></div>```. Same error.\r\nSolutions: remove any let values or insert content between div tag.",
          "createdAt": "2021-01-04T07:25:18Z",
          "author": { "login": "asv7c2", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjcxMTI1Mjk=",
    "body": "**Describe the bug**\r\nThis Bug appears in Version 3.29.6 \r\nI assume that this is the breaking change: https://github.com/sveltejs/svelte/pull/5591\r\n\r\nI have this code: \r\n\r\n```html\r\n{#if fetching}\r\n      <li transition:slide|local>\r\n        <svg class=spinner viewBox=\"0 0 50 50\">\r\n          <circle cx=25 cy=25 r=20 fill=none stroke-width=5/>\r\n        </svg>\r\n      </li>\r\n{:else if query && !data.length && !error}\r\n      <div class=no-results>لا نتائج</div>\r\n{/if}\r\n{#if error}\r\n      <div class=no-results>حدثت مشكلة في البحث، حاول لاحقًا</div>\r\n{/if}\r\n```\r\n\r\nAnd removing `<li transition:slide|local>` fixes it.\r\n\r\n\r\n**Logs**\r\nWhen running the code and the if statement is triggered I get this error in chrome: \r\n\r\n![image](https://user-images.githubusercontent.com/9167620/102161534-30362680-3e90-11eb-8cbf-863dd46c69f4.png)\r\n\r\nHere is the error after disabling source maps: \r\n```javascript \r\nif (~current_block_type_index) {\r\n     if_block0 = if_blocks[current_block_type_index];\r\n     if (!if_block0) {\r\n          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);\r\n    \t  if_block0.c();\r\n      } else {\r\n          if_block0.p(ctx, dirty);\r\n     }\r\n    transition_in(if_block0, 1);\r\n    if_block0.m(ul, t5);\r\n} else {\r\n    if_block0 = null;\r\n}\r\n```\r\n\r\non the line ```if_block0.p(ctx, dirty);```  the error is marked \r\n\r\n**Information about your Svelte project:**\r\n\r\n- I was able to reproduce the error on Chrome, Safari and Firefox\r\n\r\n\r\n**Severity**\r\nI just used another version for now\r\n",
    "closedAt": "2021-01-04T20:50:22Z",
    "createdAt": "2020-12-15T02:58:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTAyMzQ2OQ==",
          "body": "Please provide a runnable reproduction, preferably in the REPL, along with the steps to reproduce it.",
          "createdAt": "2020-12-15T03:11:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Nzc5NTEzMA==",
          "body": "#5808 has a reproduction in a REPL for this same error.",
          "createdAt": "2020-12-18T00:41:34Z",
          "author": { "login": "awmcclain", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTQ3NTU1Ng==",
          "body": "The problem seems to be the `{:else if ...}` block. Here's a repl which also experiences this bug:\r\nhttps://svelte.dev/repl/044e92510a0f48b399f03bbdec25ef63?version=3.31.0\r\n\r\nWhen quickly focusing<->unfocusing it breaks with the same error as is the reporters case.\r\n\r\nhttps://user-images.githubusercontent.com/15364860/103173256-000c6180-485a-11eb-9176-265bf9d91f2e.mov\r\n\r\n\r\n---\r\n\r\nHere is a \"fix\" (more a workaround) which instead of `{:else if ...}` uses two separate `{#if}` blocks and it works very well (doesn't break):\r\nhttps://svelte.dev/repl/5ebd4f257f0a43be907153fce270743c?version=3.31.0\r\n\r\nhttps://user-images.githubusercontent.com/15364860/103173269-174b4f00-485a-11eb-8f76-f1224f0d5626.mov\r\n\r\n",
          "createdAt": "2020-12-27T14:43:09Z",
          "author": { "login": "christiankaindl", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI1MjQ0MQ==",
          "body": "This is fixed in 3.31.2 - https://svelte.dev/repl/044e92510a0f48b399f03bbdec25ef63?version=3.31.2",
          "createdAt": "2021-01-04T22:07:00Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjY5ODQ2NDU=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI would like to add my new Svelte course to the list of third-party Svelte courses in the FAQ, if nobody minds?\r\n\r\n**Describe the solution you'd like**\r\nA link in the FAQ to The Joy of Svelte www.joyofsvelte.com\r\n\r\n**Describe alternatives you've considered**\r\nN/A\r\n\r\n**How important is this feature to you?**\r\nI would be honoured, but I won't be offended if it's rejected or inappropriate.\r\n\r\n**Additional context**\r\nN/A\r\n",
    "closedAt": "2020-12-21T17:42:25Z",
    "createdAt": "2020-12-14T22:31:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTA2NjYzMg==",
          "body": "Hey @jesseskinner this looks good! I need to run it by a couple of others to figure out exactly what is / isn't in the scope of courses in the FAQ since I am slightly concerned about the list becoming **huge** if everybody does this.",
          "createdAt": "2020-12-21T16:37:44Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTEwMjczOQ==",
          "body": "Fair enough @antony! Thanks for taking a look!",
          "createdAt": "2020-12-21T17:37:06Z",
          "author": { "login": "jesseskinner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTEwNTExOA==",
          "body": "The course looks very cool! But yeah, I'd agree that it might become too long of a list. What I personally would be more open to is if we find somewhere else to list all courses (maybe the Svelte Society website?) and then add a link to that list. I don't think we want to be arbiters of what courses to list or not list. It's probably best to list all courses someplace that has a ratings system to avoid the list from getting overwhelming, but that'd be outside the scope of what we would build directly on svelte.dev",
          "createdAt": "2020-12-21T17:42:25Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTEwNjAwOQ==",
          "body": "Thanks @benmccann! I agree, this would be more appropriate for a community list somewhere.",
          "createdAt": "2020-12-21T17:44:15Z",
          "author": { "login": "jesseskinner", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjY4Njk3ODY=",
    "body": "When creating a hubspot form everything works nicely on the local environment however, when deployed everything in teh page is displayed correctly but the hubspot form is not being created so I see a black space.\r\n\r\nThis is the code: \r\n\r\nindex.html\r\n\r\n`<script charset=\"utf-8\" type=\"text/javascript\" src=\"//js.hsforms.net/forms/v2.js\"></script>  \r\n<script type=\"text/javascript\" id=\"hs-script-loader\" async defer src=\"//js.hs-scripts.com/5258293.js\"></script>`\r\n\r\n\r\ncomponent.svelte:\r\n\r\n<div>\r\nhbspt.forms.create({\r\n    portalId: \"8113403\",\r\n    formId: \"0c54524c-9e51-4529-9217-eda3970806ed\",\r\n  });\r\n</div>\r\n\r\nAnyone knows if there is something I'm not doing to have this working on pruduction?\r\n",
    "closedAt": "2020-12-14T19:56:12Z",
    "createdAt": "2020-12-14T19:52:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDY3MjI5MA==",
          "body": "BTW I don't know why github is ignoring my code blocks...",
          "createdAt": "2020-12-14T19:53:10Z",
          "author": { "login": "MarioDena", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDY3Mzg0MQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-12-14T19:56:12Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjY3MTUwNzg=",
    "body": "**Describe the bug -and- Context**\r\n\r\nI'm writing a form validation utility, which needs visibility to dynamic changes of input form elements.\r\n\r\nI am using svelte actions to accomplish this _(as I believe it represents the most non-intrusive technique, from an end-user perspective)_.\r\n\r\nMy action is simply registering an `input` event listener on the input element in order to trigger it's logic.\r\n\r\nThis works GREAT for interactive changes _(from the user)_.\r\n\r\n1. However, the `input` event does NOT fire when changes occur from Svelte's two-way binding (via `bind:value`).\r\n2. For that matter, the `input` event does NOT fire when setting the `inputElm.value` directly.\r\n\r\nFrom my research, I am coming to the conclusion the `input` event is not going to fire when programmatically setting the `.value` in JS.  Can it be that the two cases (above) are the same ... i.e. is Svelte's two-way binding accomplished by `.value` assignment semantics?\r\n\r\nIs there a way to accomplish my _(presumably simple)_ requirements through actions?\r\n\r\nYour help is greatly appreciated.\r\n\r\n**To Reproduce**\r\n\r\nThe following [REPL](https://svelte.dev/repl/e970893d7ee14b6f8e436ca518b8930b?version=3.31.0) demonstrates this issue.\r\n\r\n**Expected behavior**\r\n\r\nI was expecting a DOM `input` event to fire when changing the DOM value through Svelte's two-way binding (`bind:value`).\r\n\r\n**Severity**\r\n\r\nIf I can't recognize programatic changes to these input elements, it represents a major issue to my utility.\r\n",
    "closedAt": "2020-12-14T17:00:19Z",
    "createdAt": "2020-12-14T16:54:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDU3NDk1NA==",
          "body": "Yes, Svelte updating an input value via `bind:value` is done by settings its `.value` property, which doesn't trigger a DOM event. That's how browsers work, and it would be more work and more code (not to mention more confusing) to emit synthetic DOM events when doing this.\r\n\r\nIf you pass the input's bound value as part of the action's parameter, the action's `update` method will be called whenever this changes, whether it be by user input or the value programmatically changing.",
          "createdAt": "2020-12-14T17:00:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDYzNzk2Ng==",
          "body": "Thank you so much @Conduitry for you quick reply and the work-around suggestion!\r\n\r\nIt seems unforgivable that the DOM works this way _(obviously not Svelte's' fault)_.  I would be curious to know how many countless hours have been wasted on this single issue.\r\n\r\nPer your suggestion, my utility will conditionally monitor parameter updates to the action.\r\n\r\n- if the boundValue is supplied (as a parameter), that will be the sole source of changes\r\n- otherwise it will continue my original technique of monitoring the elements `input` event\r\n\r\nI have created a [2nd REPL](https://svelte.dev/repl/67470a6f70ba45fe898dd97b6f14efcf?version=3.31.0) that shows how it works.\r\n\r\nWorks perfect _(just a bit more clunky for the user - **not much else we can do**)_.\r\n\r\nThanks again for your help!\r\n",
          "createdAt": "2020-12-14T18:50:23Z",
          "author": { "login": "KevinAst", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjYwMjQ2MDM=",
    "body": "Eslint formet is invalid.\r\nAfter I clone the code and run `npm install`\r\n![image.png](https://i.loli.net/2020/12/14/ljdw56Un1JushoF.png)\r\nSvelte: 3.29.4",
    "closedAt": "2020-12-15T15:25:07Z",
    "createdAt": "2020-12-14T07:16:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDI0MjEwNA==",
          "body": "I can't reproduce this. If VS Code tries looking for the Svelte plugin before it's installed, this might happen. After you've installed dependencies, you should be able to restart VS Code to run ESLint successfully.\r\n\r\nI'm not sure why you're saying \"Svelte: 3.29.4\" - that's from a couple of months ago, and wouldn't be what you get when you clone the code now.",
          "createdAt": "2020-12-14T07:41:30Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjUzMTY4ODM=",
    "body": "Hi there! I was trying to replicate a classic multi-select component where the selections you make go up top. Something like this:\r\n\r\n![daa597aca528bc93503ac34a274c9d59](https://user-images.githubusercontent.com/36263538/102010794-9d3aa680-3d40-11eb-98ae-58643b09a546.gif)\r\n\r\nHowever, as soon as I try to add a flip animation or even make the `#each` block keyed, it results in the following:\r\n\r\n![df2f5cb25821ed47b414cbb9d7c38a8b](https://user-images.githubusercontent.com/36263538/102010852-facef300-3d40-11eb-869a-b2eb07ff981e.gif)\r\n\r\n[Here is REPL](https://svelte.dev/repl/a0fffe1957684d63ac856cbeb7203ada?version=3.31.0) of the above. If you remove the `animate` and the key, you will see it works fine. It doesn't seem to be a problem with the animation itself since only having the key breaks it.\r\n\r\nSince I'm new to Svelte, I'm unsure if this is the intended behavior, a bug, or even a feature request. That's why I put this on _Questions and help_.\r\n\r\nThanks! I've been loving Svelte so far ❤️ ",
    "closedAt": "2021-01-02T01:28:12Z",
    "createdAt": "2020-12-13T11:48:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQxNzU5NA==",
          "body": "This is fixed in 3.31.1 - https://svelte.dev/repl/a0fffe1957684d63ac856cbeb7203ada?version=3.31.1",
          "createdAt": "2021-01-02T02:08:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjQyODA3MTM=",
    "body": "Hello guys, I'm new on Svelte and JS and I am struggling with this situation: I want to add a object in array, but when I add it, all items from this array are updated equally.\r\n\r\n1. This is the way I'm trying: https://svelte.dev/repl/72fbfbd2a9f2437d985044d4725b25a3?version=3.31.0\r\n2. This is kind the result I want to: https://svelte.dev/repl/029e5e1db50a449caf9d71ee5c435987?version=3.31.0\r\n\r\nHow could I archive the same result as (2) but using the (1) approach?\r\n\r\nThanks\r\n",
    "closedAt": "2020-12-13T10:45:12Z",
    "createdAt": "2020-12-12T19:50:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mzk4MzcwNA==",
          "body": "I'm not sure if it has anything to do with Svelte, would it do the trick?\r\n```javascript\r\n...\r\nconst addPrize = () => {\r\n\t_prizeList = [..._prizeList, {...prize}];\r\n\tprize.name = prize.points = '';\r\n}\r\n...\r\n```",
          "createdAt": "2020-12-13T10:17:41Z",
          "author": { "login": "pckkkkkk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mzk4NjgzMQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-12-13T10:45:12Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjQxODMyMjE=",
    "body": "[Slightly tongue-in-cheek](https://twitter.com/AdamRackis/status/1337821236622204930), but I've actually hit this myself occasionally while porting React components to Svelte:\r\n\r\n<img width=\"592\" alt=\"Screen Shot 2020-12-12 at 1 42 47 PM\" src=\"https://user-images.githubusercontent.com/1162160/101992267-f4c50d80-3c7f-11eb-8991-2b696e4d7504.png\">",
    "closedAt": "2021-01-02T00:49:04Z",
    "createdAt": "2020-12-12T18:43:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MzgwMDM3Mg==",
          "body": "Opportunities for zing should never be passed up.",
          "createdAt": "2020-12-12T18:58:44Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MzgwMTQ2Nw==",
          "body": "![image](https://user-images.githubusercontent.com/16696352/101992704-2a1f2a80-3c83-11eb-83a9-ca55b8c6b8d1.png)\r\n",
          "createdAt": "2020-12-12T19:06:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MzgwNzk2MA==",
          "body": "That is a property not an attribute.\r\n\r\nEdit: This was in response to a now deleted comment.",
          "createdAt": "2020-12-12T19:59:27Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTIxNjQ2NA==",
          "body": "I think this also applies to `for` instead of `htmlFor` and `on:input` instead of `onChange`",
          "createdAt": "2020-12-21T21:51:56Z",
          "author": { "login": "finnbear", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQxNzU1MA==",
          "body": "`className` and `htmlFor` will now both result in compiler warnings in 3.31.1.",
          "createdAt": "2021-01-02T02:08:16Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjQxMzQ1MjM=",
    "body": "**Description** \r\nMousewheel does not increment or decrement the number when running the svelte app standalone.   But it works fine in the REPL\r\n\r\n**To Reproduce**\r\nThis code works fine in the REPL with the mousewheel to increment/decrement the number in the input\r\nHowever, the mousewheel does not work when run locally after downloading the app to my computer and running locally.\r\nI have checked on Chrome, Safari, and Firefox\r\n```\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<input type=\"number\"  value=0/>\r\n```\r\n**Workaround**\r\nI have found if I bind something to the mousewheel event, it works fine e.g.\r\n```\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<input type=\"number\"  on:mousewheel={()=>{;}} value=0/>\r\n```\r\n\r\nStrangely, I only need to do this for one of the input tags and so, the mousewheel works in all three input tags in the code below\r\n```\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<h1>Hello {name}!</h1>\r\n<input type=\"number\" value=0/>\r\n<input type=\"number\" value=0/>\r\n<input type=\"number\"  on:mousewheel={()=>{;}} value=0/>\r\n```",
    "closedAt": null,
    "createdAt": "2020-12-12T18:07:57Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mzc5NzMyMQ==",
          "body": "I can reproduce this on Chrome but not on Firefox. On Chrome, when running from a downloaded copy of that component (whether in dev or prod mode), I can't use the mousewheel to change the number input, but I can in the REPL. Very peculiar.",
          "createdAt": "2020-12-12T18:34:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDAyMTQ0OQ==",
          "body": "I just checked in FF (v. 83.0) again.  I must have made a mistake in my testing.   Nothing works in Firefox on my Mac.  I changed on \"on:mousewheel\" to \"on:wheel\" as well.   This seems to be an improvement in that the events are now picked up in FF.  \r\n\r\nI am using OS X version: 10.15.7.   \r\n ",
          "createdAt": "2020-12-13T15:12:02Z",
          "author": { "login": "saewoonam", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjQwMDE3NDc=",
    "body": "\r\nNot really a problem present, but a quality of life thing\r\n\r\nI think it would be great if we could pass a transition to components, having this feature not limited to DOM elements only.\r\nI don't know if it's possible but, it would be nice to have.\r\n\r\n",
    "closedAt": "2020-12-12T17:26:51Z",
    "createdAt": "2020-12-12T16:09:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mzc4NzU0Ng==",
          "body": "It's not possible, because there's not guaranteed to be a single root DOM element in a component. If you want to animate something, create a wrapping element around the component.",
          "createdAt": "2020-12-12T17:26:51Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjM1MDI4OTY=",
    "body": "Hello, I'll go straight to the problem: the constant \"lampsDefault\" is overwritten, but this happens only in the console, and if you look outside the console, its value does not change.\r\n\r\nYou can find the tested code [here](https://svelte.dev/repl/57bc13e2a57145ba9dff89b9faa3fe4d?version=3.31.0). If you click on the \"Toggle lamp state\" button, the value of the variable \"lamps\" will change to \"true\", and the value of the constant \"lampsDefault\" will remain \"false\", this is correct and logical in my opinion. BUT if we look at the console, then the value of the constant is overwritten with \"true\", while on line 13 I put a reactive declaration and it does not change (I expected this, it should be so).\r\n\r\nI am already fighting for the second day and can't understand the reasons why in the console I see how my constant was overwritten, what am I doing wrong?\r\n\r\nPlease explain to me how it works...",
    "closedAt": "2020-12-12T11:08:12Z",
    "createdAt": "2020-12-12T09:31:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MzczMzY1OQ==",
          "body": "@devilka4321 I think the described behavior is expected.\r\nWith `let lamps = lampsDefault` you are creating a shallow copy (**not deep copy**) of the `lampsDefault` array, so when you modify `lamps[0]` you are actually modifying the `lampsDefault[0]` object.\r\n\r\nWhy svelte doesn't show the `{JSON.stringify(lampsDefault[0].status)}` update?\r\nIt hasn't detected an assignment to trigger rerendering (if you haven't checked already - https://svelte.dev/tutorial/updating-arrays-and-objects).",
          "createdAt": "2020-12-12T10:08:26Z",
          "author": { "login": "ganigeorgiev", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mzc0MDA4OA==",
          "body": "Yep, @ganigeorgiev is exactly right about what's going on here.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-12-12T11:08:12Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mzc0MDM1OA==",
          "body": "So, I tried this:\r\n\r\n`lamp = JSON.parse (JSON.stringify (lampDefault))`\r\n\r\nAnd it works, I needed to create a deep copy, you are absolutely right, thank you.\r\n\r\nSorry for my stupidity, I thought it was a bug",
          "createdAt": "2020-12-12T11:10:47Z",
          "author": { "login": "devilka4321", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjIzMjE2MzQ=",
    "body": "Svelte 3.31.0\r\n\r\n**Describe the bug**\r\nWe have InnerComponent:\r\n```\r\n  <slot name=\"a\">A fallback</slot>\r\n  <slot name=\"b\">B fallback</slot>\r\n  <slot>Default fallback</slot>\r\n```\r\n\r\nAlso we have MyComponent:\r\n```\r\n<InnerComponent>\r\n  <slot name=\"a\" slot=\"a\"/>\r\n  <slot name=\"b\" slot=\"b\"/>\r\n</InnerComponent>\r\n```\r\n\r\nThen we use it like this:\r\n```\r\n<MyComponent>\r\n  <div slot=\"a\">Some content</div>\r\n</MyComponent>\r\n```\r\nAnd in the InnerComponent we see that the fallback content of slots **b** and **default** doesn't render.\r\nAlso in the InnerComponent's script:\r\n```\r\nconsole.log($$slots);\r\n```\r\n// { a: true, **b: true, default: true** }\r\n\r\n**To Reproduce**\r\n[Repl](https://svelte.dev/repl/bf67f2f20355432da8f5fd48df4ee272?version=3.31.0)\r\n\r\n**Severity**\r\nAnnoying. Blocks proper use of slot forwarding for me.",
    "closedAt": "2021-03-03T01:48:57Z",
    "createdAt": "2020-12-11T12:59:45Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTM2MjIwOQ==",
          "body": "This is [fixed in 3.35.0](https://svelte.dev/repl/bf67f2f20355432da8f5fd48df4ee272?version=3.35.0)\r\n\r\n",
          "createdAt": "2021-03-03T01:48:57Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTQ4NTg4MQ==",
          "body": "Much thanks! :)",
          "createdAt": "2021-03-03T06:57:14Z",
          "author": { "login": "kkarpeev", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5OTYwMTY0Ng==",
          "body": "but slot=\"b\" fallback still empty...",
          "createdAt": "2021-03-15T17:24:26Z",
          "author": { "login": "Valexr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MjEzNTEyOQ==",
          "body": "@tanhauhau  \r\nNot work, plz reopen it \r\n#5604 \r\n\r\nhttps://svelte.dev/repl/ea168e49b84f46e0ba72391c1f7fb6b2?version=3.38.0",
          "createdAt": "2021-05-17T08:36:13Z",
          "author": { "login": "ash0080", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjE5NTIwOTM=",
    "body": "I'm struggling to find some documentation and API reference for Svelte's Typescript support.\r\n\r\nRight now, I'm using a 3rd party Svelte library that does not yet have type definitions. This library – SvelteFire – contains multiple components that expose slot props. One of these slot props is an array of items, but Typescript views it as `any` type. When I iterate over the slot prop with an `#each` block, the resulting item type is `unknown`, which causes many issues.\r\n\r\nI need help figuring out how to provide a type definition for the component's slot prop.\r\n\r\nHere's a piece of the code for reference.\r\n\r\n```svelte\r\n<Collection let:data={comments}>\r\n    {#each comments as comment}\r\n        {comment.text} <!-- error: property 'text' does not exist on type 'unknown' -->\r\n    {/each}\r\n</Collection>\r\n```",
    "closedAt": "2020-12-13T13:44:21Z",
    "createdAt": "2020-12-11T06:28:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mzg3MDc0Ng==",
          "body": "Assuming you use Svelte 3.31+ \r\n\r\nCreate a `.d.ts` file with \r\n```ts\r\ndeclare module \"name-of-library\" {\r\n  import { SvelteComponentTyped } from \"svelte\"\r\n  export class Collection extends SvelteComponentTyped<{ prop definitions here}> {}\r\n}\r\n```\r\n\r\nWe need to document this.",
          "createdAt": "2020-12-12T21:05:31Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDAxMDE1OQ==",
          "body": "Closing in favor of #5780 ",
          "createdAt": "2020-12-13T13:44:21Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDE5NDg0OQ==",
          "body": "> Closing in favor of #5780\r\n\r\nCan you let me know which was the other issue, looks like a broken link",
          "createdAt": "2021-01-30T11:03:35Z",
          "author": { "login": "jerriclynsjohn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDE5NjE0OA==",
          "body": "I don't know anymore I'm afraid. Closest are #5928 and #5362 . If you want to know about the `SvelteComponentTyped` usage, have a look at its documentation (hovering over it in the IDE).",
          "createdAt": "2021-01-30T11:14:31Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTkwMDQxMw==",
          "body": "> Assuming you use Svelte 3.31+\r\n> \r\n> Create a `.d.ts` file with\r\n> \r\n> ```ts\r\n> declare module \"name-of-library\" {\r\n>   import { SvelteComponentTyped } from \"svelte\"\r\n>   export class Collection extends SvelteComponentTyped<{ prop definitions here}> {}\r\n> }\r\n> ```\r\n> \r\n> We need to document this.\r\n\r\nIs there any update on this issue? I have exactly the same situation as described above.\r\n\r\nI tried this solution simpy by using type \"any\" but it doesn't seem to work, like so:\r\n`declare module \"module-name\" {\r\n    export class Collection extends SvelteComponentTyped<any> {}\r\n}`\r\n\r\nThanks.",
          "createdAt": "2021-03-18T12:52:58Z",
          "author": { "login": "fbele", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTkxMTE3MQ==",
          "body": "OP's example would be typed as\r\n\r\n```ts\r\ndeclare module \"name-of-library\" {\r\n  import { SvelteComponentTyped } from \"svelte\"\r\n  export class Collection extends SvelteComponentTyped<{ prop definitions here}, {event definitions here}, {default: {data: Data[]}}> {}\r\n  export interface Data {\r\n    ...\r\n  }\r\n}\r\n```",
          "createdAt": "2021-03-18T13:05:54Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTkxNDgxMQ==",
          "body": "carbon-components-svelte has some great example https://github.com/IBM/carbon-components-svelte/tree/master/types",
          "createdAt": "2021-03-18T13:11:32Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjE0NTk4NDE=",
    "body": "[REPL link](https://svelte.dev/repl/f7ab5dc0439c4b029ff089ab28343684?version=3.31.0)",
    "closedAt": "2020-12-10T19:03:52Z",
    "createdAt": "2020-12-10T17:48:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjcyOTgxMA==",
          "body": "Duplicate of https://github.com/sveltejs/svelte-repl/issues/140",
          "createdAt": "2020-12-10T19:03:52Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjE0NTc2Nzk=",
    "body": "I know this might not follow the stated guidelines but I felt it was too important and I felt it would reach the right folks.\r\n\r\n**Thank You.**\r\n\r\nI know there are so many people who work on Svelte. I felt this was a great way to go on record at the source and not just thank one person but thank the entire community of folks who want to see Svelte kick all sorts of ass. I know the passion that's put into this, the time late at night coding away, and answering all the questions in between.\r\n\r\n**Thank You.**\r\n\r\nI love how accessible everyone is. I love the folks who generally want to help one another. I love the fact @Rich-Harris isn't afraid to just be honest, transparent, and just say where things are headed and yet still make time to also answer my dumb ass questions.\r\n\r\n**So to the entire core team and everyone who put their time in.  Thank You.**\r\n\r\nThis might sound cheeky but Svelte did bring my love for UI development back. I've worked in plenty of frameworks but they've all felt like I was working for them, vs them helping me.\r\n\r\nI think it's important to know that I enjoy working in Svelte, and I know many others do as well.  Unlike some I do get to make the choice as to what frameworks we work in, and we chose Svelte and I don't regret it one bit at all.  \r\n\r\nIn the middle of a pandemic I was able to make a dream come true. We started laying down code to make a new kind of learning system for the development community that we simply call THAT at http://that.us/. Starting a new product/service in the middle of a global pandemic is, well, something for the history books but, Svelte and the community around it has made it possible. I attribute a lot of our ability to go from scratch to what we have now in just a few short months to Svelte and the design decisions that have been put into making a framework. 🙌\r\n\r\nIt's because of all this, I just wanted to say Thank Ya'll. We often don't say it enough. I look forward to SvelteKit and working in Svelte everyday.\r\n\r\n**Thank You!**",
    "closedAt": "2020-12-31T04:36:33Z",
    "createdAt": "2020-12-10T17:45:51Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mjc2NzQyOQ==",
          "body": "Thank you not just for Svelte, but for the ideas–they make the whole landscape richer.\r\n\r\n",
          "createdAt": "2020-12-10T20:08:39Z",
          "author": { "login": "mheiber", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1Mjg0MDQxNQ==",
          "body": "🥰",
          "createdAt": "2020-12-31T04:36:33Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjEwNzI5MjA=",
    "body": "**Describe the bug**\r\nCan you use [here](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/utils.ts#L9) `let` instead`const`? It solves the problem.\r\n\r\n**Logs**\r\n![image](https://user-images.githubusercontent.com/34684380/101753682-f78afb80-3ae3-11eb-8222-5bf9a6463daf.png)\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: IE11\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version 3.17.3\r\n\r\n- Project uses Rollup\r\n",
    "closedAt": "2020-12-10T11:13:08Z",
    "createdAt": "2020-12-10T09:37:53Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjQ1NDc2MQ==",
          "body": "There are a bunch of things that won't work on IE11, it's definitely not just this one const. You'll need to transpile and bring your own polyfills for several things.",
          "createdAt": "2020-12-10T11:12:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjAzNDM0MTU=",
    "body": "**Describe the bug**\r\n\r\nIf I have a component like this\r\n```svelte\r\n  // dynamic.svelte\r\n  {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\t\r\n```\r\nand try to render it like this\r\n```svelte\r\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1080\">\r\n     <Dynamic />\r\n  </svg>\r\n```\r\n\r\nThe circle isn't rendered.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/1a2ea34b898040e7bd52928331f6437b?version=3.31.0\r\n\r\n**Expected behavior**\r\nThe circle should be rendered\r\n\r\n\r\n**Severity**\r\nMinor annoyance, there are 2 workarounds (see Additional context)\r\n\r\n**Additional context**\r\n\r\nIf I wrap the html directive in a `<g>` tag like this:\r\n```svelte\r\n<g>\r\n  {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\t\r\n</g>  \r\n```\r\n\r\nor use it without a component\r\n```svelte\r\n   <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1080\">\r\n     {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\t\r\n  </svg>\r\n```\r\n\r\nit works fine",
    "closedAt": null,
    "createdAt": "2020-12-09T13:45:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTc5OTQwMQ==",
          "body": "Very interesting!",
          "createdAt": "2020-12-09T14:18:07Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDQ5NzcyMw==",
          "body": "I'd say that SVG XML !== HTML maybe?\r\n`@html` probably doesn't know how to parse the `<circle/>` tag since it's not a valid HTML tag.\r\n\r\nEdit: Hmm .. your working examples actually debunk that theory - feel free to ignore the comment above!",
          "createdAt": "2020-12-14T15:00:13Z",
          "author": { "login": "chimp1nski", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzI5MjMyNg==",
          "body": "The difference here is that the standalone component uses an HtmlTag class to add the `<circle>` HTML, while the others just set innerHTML on the container. The latter appears to be an optimization when there is only an `@html` and nothing else inside an element.\r\n\r\nSo that means that this also reproduces the bug, since it uses an HtmlTag to add the `@html` contents:\r\n```svelte\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1920 1080\">\r\n  <circle cx=\"200\" cy=\"500\" r=\"200\"></circle>\r\n  {@html `<circle cx=\"500\" cy=\"500\" r=\"200\"></circle>`}\r\n</svg>\r\n```\r\n\r\nIn the above case the circle at cx=200 appears while the circle at cx=500 does not. Oddly, the browser devtools actually do show the `<circle ...>` markup as expected. But when examining the elements, I see this on the working one:\r\n![image](https://user-images.githubusercontent.com/1369558/103436381-e30bc180-4bbe-11eb-8889-85a88ecad03d.png)\r\n\r\nMeanwhile, that section is missing completely on the broken element, as if the attributes are not actually being set somehow. Likewise, examining an attribute on the two elements returns `undefined` in the broken case but an attribute, as expected, in the working case:\r\n\r\n![image](https://user-images.githubusercontent.com/1369558/103436410-1b130480-4bbf-11eb-9ba3-12d83dbb357d.png)\r\n\r\nMy best guess is that HtmlTag is using `document.createElement` to create the element that stores the rendered text, but it may need to use `document.createElementNS` with the appropriate namespace when inside an SVG. Not 100% sure on that though.\r\n\r\nI'm also not sure how easy this will be to detect since it seems like it would require walking all the way up the component tree at runtime to see if the element is inside an SVG, and also accounting for `foreignObject` and so on. Not great, but maybe someone knows a better way?\r\n\r\n## Workaround\r\n\r\nAll this means that the proper workaround is to always wrap an `@html` directive inside an SVG with a `<g>` (or any other SVG element) and put nothing else inside that `<g>`.",
          "createdAt": "2021-01-01T09:27:30Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNjY2NzI3NQ==",
          "body": "A side-effect of the bug is that svg case-sensitive attributes are all lowercased when inserted into the DOM.\r\n\r\n**Results in incorrect behavior**\r\n`{@html '<pattern patternUnits=\"userSpaceOnUse\">...</pattern>'}` => `patternunits=\"userSpaceOnUse\"`\r\n\r\n**Results in desired behavior**\r\n`<g>{@html '<pattern patternUnits=\"userSpaceOnUse\">...</pattern>'}</g>` => `patternUnits=\"userSpaceOnUse\"`",
          "createdAt": "2021-03-25T12:40:27Z",
          "author": { "login": "timvanoostrom", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NjAxNzQ2MTM=",
    "body": "I've done a bilingual website, but Svelte does not change `<html lang=\"en\">` which is an important value of a successful website, especially for screen readers. Is it possible to change html lang value like metatags?\r\n\r\nIs it possible to implement a language change or what option would you recommend for this problem? I have tried to change that with JavaScript, but the options I tried have not responded to the change of url or have not changed the value.\r\n\r\nIf url contains \"/fi\" then change lang to fi else return en. I think it is possible to do with an external script, but not yet succeeded.\r\n\r\nMy personal website is just a test for bilingual projects. If I manage to accomplish this in the best possible way, there will be at least two major multilingual projects with Svelte.\r\n\r\n- [Website](https://timoanttila.com)\r\n- [My project](https://github.com/timoanttila/timoanttila/tree/master/src)\r\n- [package.json](https://github.com/timoanttila/timoanttila/blob/master/package.json)",
    "closedAt": "2020-12-09T10:08:11Z",
    "createdAt": "2020-12-09T09:48:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTY2NDE0OA==",
          "body": "Questions like these are best asked on StackOverflow. For example [this answer](https://stackoverflow.com/questions/35187645/how-to-set-html-lang-attribute-dynamically) shows how to do that with plain javascript, which you can just use with Svelte.",
          "createdAt": "2020-12-09T09:57:00Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTY2Njc2OQ==",
          "body": "I wanted Svelte to automatically change that tag if possible. Svelte is able to edit metatags, so why not html?",
          "createdAt": "2020-12-09T10:01:47Z",
          "author": { "login": "timoanttila", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTY3MDM4NA==",
          "body": "@timoanttila We reserve github issues for bugs or feature requests for Svelte. Please ask this usage question in [discord](https://svelte.dev/chat) or stackoverflow as suggested, since github issues aren't a great forum for such discussions. Svelte can change any tag on the page which is rendered by it, so I would suspect that the reason you aren't able to change it is due to a usage problem, and is not a missing feature in Svelte.",
          "createdAt": "2020-12-09T10:08:11Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTk5NTY1NDE=",
    "body": "Could someone that is a svelte expert rewrite the wordings or provide a better example in the [Logic / Keyed section of the svelte tutorial](https://svelte.dev/tutorial/keyed-each-blocks)? This tutorial is aimed a beginners with very little JS experience, until this exercise, the tutorial lives up to  this claim, but this specific chapter is too ambiguous and confusing.\r\n\r\nThere is even an [answer](https://stackoverflow.com/questions/62499335/further-explanation-of-sveltes-keyed-each-block) in Stack overflow that is too verbose, but it provides some clarity. \r\n\r\nThe most confusing sentence in this chapter of the tutorial is \"notice that it's removing <Thing> components from the end\", The slice operation does indeed remove the first element in the array and not the last element of the array.\r\n\r\nCould someone please come up with a more beginner friendly tutorial for this part?",
    "closedAt": null,
    "createdAt": "2020-12-09T03:21:04Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTkzODk4OA==",
          "body": "@benmccann and @antony Thanks for reviewing my PR, I would love to collaborate with you and edit the wordings / examples so that the tutorial is more accessible to newbies.\r\n\r\nFor instance, in this paragraph:\r\n\r\n> By default, when you modify the value of an each block, it will add and remove items at the end of the block, and update any values that have changed. That might not be what you want.\r\n\r\nI don't think Svelte adds / removes items to the end of the block, it is only a visual perception, am I right?\r\n",
          "createdAt": "2020-12-09T17:44:23Z",
          "author": { "login": "123aswin123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTk5MjI2Mw==",
          "body": "Would adding the IDs explicitly to the blocks like [this](https://svelte.dev/repl/7abcac21733d42b7b737cb64d65209a1?version=3.31.0) make the behaviour more clear?",
          "createdAt": "2020-12-09T19:20:12Z",
          "author": { "login": "123aswin123", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTk3OTMwNDc=",
    "body": "This is a proposal to enhance the readability and flexibility of actions by adding support for modifiers\r\nThis suggests for the ability to pass custom modifiers using the `use:<var>|<modifier>|...={params?}` syntax whereby modifiers are passed as a third argument in the form of an object following the same pattern as `$$slots`\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    function action(node: HTMLElement, params: any, modifiers: { [key: string]: boolean }){\r\n        if (modifiers.foo) {\r\n            //  do something special\r\n        }\r\n    }\r\n</script>\r\n\r\n<!-- modifiers: { foo: true; bar: true } -->\r\n<div use:action|foo|bar />\r\n\r\n<!-- modifiers: { leet: true } -->\r\n<div use:action|leet />\r\n```",
    "closedAt": null,
    "createdAt": "2020-12-08T21:24:47Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTk3MjU2ODQ=",
    "body": "I use a page or component-specific `svelte:head` with `<style>` inside. Sending the original project to Netlify and Netlify builds it (`npm run build`). For some unknown reason there are all the `<style>` tags twice. Tags are only once when running the development version (`npm run dev`, MacOS, node 14.13.1, npm 6.14.8). `Svelte:head` should be run only once per page / component.\r\n\r\nhttps://imgur.com/a/kzTo9j2\r\n\r\nI have three of them because of the font size for accessible, main styles and component's styles.\r\n\r\n- [Website](https://timoanttila.com)\r\n- [My project](https://github.com/timoanttila/timoanttila/tree/master/src)\r\n- [package.json](https://github.com/timoanttila/timoanttila/blob/master/package.json)",
    "closedAt": "2020-12-09T10:20:25Z",
    "createdAt": "2020-12-08T19:41:55Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTExNTcyOQ==",
          "body": "It seems that when I run `npm run build` on my own machine, those tags only get into the files once. Something happens between Github and Netlify or Netlify builds somehow strangely. There was no asset optimization on.",
          "createdAt": "2020-12-08T22:11:04Z",
          "author": { "login": "timoanttila", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTY3Njk4MQ==",
          "body": "This is a duplicate of https://github.com/sveltejs/svelte/issues/5668 and https://github.com/sveltejs/svelte/issues/4533 - we don't track which elements are inserted into the head tag, they are just inserted each time the component is hydrated.\r\n\r\nHowever, I'm not sure why you're writing style tags inside `<svelte:head>`. Styles for a component or page should be written in a `style` tag within the component or page. You're doing something which circumvent's Svelte's entire styling mechanism.",
          "createdAt": "2020-12-09T10:20:25Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjEyODU5Mg==",
          "body": "I have all kinds of special styling for certain pages or components, and using Svelte's `<style>` put those all in the one file. And because I use only builded sites all the styles are already in the page. No need for an extra style file. ",
          "createdAt": "2020-12-09T23:27:50Z",
          "author": { "login": "timoanttila", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjEzODM4Nw==",
          "body": "I'm not 100% sure I'm clear on what you're saying here, but as a guide to using a global stylesheet, I would recommend the following:\r\n\r\nIf you need global styles, put them in a regular css file in your public directory. Link this file from the `html` file which serves your application, or `@import` it, or use a css preprocessor like `svelte-preprocess` to include it globally.\r\n\r\nIf you can afford to use component or page local styles, which is the ideal, then simply use the `<style>` tag inside those `.svelte` files.\r\n\r\nWe don't recommend, support, nor make any guarantees about inline or imported css files within the `<svelte:head>` tag. Tags included in svelte:head are not tracked, or indexed, or anything special at all (with exception of the title tag). For this reason, if you load the component or route twice, the file will get included twice - this also explains why it isn't in your SSR'd code.",
          "createdAt": "2020-12-09T23:54:02Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTk2OTM3ODc=",
    "body": "**Describe the bug**\r\nEven though Svelte's take on attributes is that it doesn't add them when their value is `null`, Sapper seems to disrespect this on initial server-side rendering for components that include `$$restProps`. This leads to nasty warnings in the browser console like:\r\n\r\n```\r\n[DOM] Found 2 elements with non-unique id #null\r\n```\r\n\r\n**To Reproduce**\r\n* clone the Sapper template\r\n* create the `test.svelte` component (contents follow)\r\n* add this component to the `index.svelte` route\r\n* check the source of the page to find `id=\"null\"`\r\n\r\n`test.svelte`:\r\n```svelte\r\n<script>\r\n  export let id = null;\r\n</script>\r\n\r\n<div {id} {...$$restProps} />\r\n```\r\n\r\n**Expected behavior**\r\nThe `id` attribute of that component shouldn't be added in the initial server-side rendered version of the HTML.\r\n\r\n**Information about your Sapper Installation:**\r\n\r\n- The output of `npx envinfo --system --npmPackages svelte,sapper,rollup,webpack --binaries --browsers`\r\n```  \r\nSystem:\r\n    OS: Linux 5.9 Manjaro Linux\r\n    CPU: (8) x64 Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz\r\n    Memory: 2.66 GB / 7.62 GB\r\n    Container: Yes\r\n    Shell: 3.1.2 - /usr/bin/fish\r\n  Binaries:\r\n    Node: 14.12.0 - /usr/bin/node\r\n    Yarn: 1.22.10 - /usr/bin/yarn\r\n    npm: 6.14.8 - /usr/bin/npm\r\n  Browsers:\r\n    Firefox: 83.0\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.34.2 \r\n    sapper: ^0.28.0 => 0.28.10 \r\n    svelte: ^3.17.3 => 3.31.0\r\n```\r\n\r\n- Your browser\r\nChrome 87.0.4280.88\r\n\r\n- Your hosting environment (i.e. Local, GCP/AWS/Azure, Vercel/Begin, etc...)\r\nLocal\r\n\r\n- If it is an exported (`npm run export`) or dynamic application\r\nDynamic\r\n\r\n**Severity**\r\nLow severity, but an annoying warning in the browser that might confuse library users.\r\n",
    "closedAt": "2021-06-22T13:50:43Z",
    "createdAt": "2020-12-08T18:07:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDg0OTQ2Ng==",
          "body": "Transferring this to the Svelte repo, as this is a Svelte bug.\r\n\r\nThe SSR version of a component with `<div {id} {...foo}/>` contains:\r\n\r\n```js\r\nconst App = create_ssr_component(($$result, $$props, $$bindings, slots) => {\r\n\treturn `<div${spread([{ id: escape(id) }, foo])}></div>`;\r\n});\r\n```\r\n\r\n`escape(null)` is evaluating to the string `\"null\"`. The first solution I think of is to make `escape(null)` be `null`, which `spread()` knows how to handle - but I don't know what other effects that might have.",
          "createdAt": "2020-12-08T18:55:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjEwODczNQ==",
          "body": "This should be fixed in 3.38.3.",
          "createdAt": "2021-06-22T15:51:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTkwNjI2MzM=",
    "body": "**Describe the bug**\r\n\r\nIn this REPL [link bug](https://svelte.dev/repl/76fa2a9e52fd4408999f0bb0cef128ac?version=3.31.0) the **label** elements do not display correctly.\r\n\r\nThe **content** component of the label will automatically resize itself as the width of its parent container shifts. This behavior makes it impossible to put two or more label elements on the same line. \r\n\r\n\r\n\r\n**Severity**\r\n\r\nWithout the label element it is impossible to conform to w3c accessibility standards. \r\n\r\nDuring early development I can mimic the appearance of  using a label radio button combination by\r\n\r\n`\r\n1st Hack <input type=\"radio\" name=\"mode\" id=\"firstHack\" checked/>\r\n2nd Hack <input type=\"radio\" name=\"mode\" id=\"secondHack\"/>\r\n`\r\n\r\n but I will be unable to go into testing/deployment until label is fixed.\r\n",
    "closedAt": "2020-12-09T10:13:53Z",
    "createdAt": "2020-12-08T04:57:14Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDM4NDI3MQ==",
          "body": "It seems like the global styling of the svelte.dev site. You can just override it in the style tag if you don't want it. ",
          "createdAt": "2020-12-08T05:24:14Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDQxNzAwOQ==",
          "body": "Thank you for the suggestion. I'll need to look into it.\r\n\r\nI hope they will make a correction and officially deploy it. I understand that Svelte supports the  a11y accessibility group. ",
          "createdAt": "2020-12-08T06:46:16Z",
          "author": { "login": "dtrimsd", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDQyNTc4Mg==",
          "body": "A small change and it now works. I haven't touched CSS before and your pointers guided me well.\r\n\r\nThank you again. \r\n\r\nI'll leave this open until  someone can formally look at it. ",
          "createdAt": "2020-12-08T07:03:08Z",
          "author": { "login": "dtrimsd", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTY3MzQ1Mw==",
          "body": "@dtrimsd Unless I'm missing the point entirely, I'm not sure there is an issue here, you use css to style elements:\r\n\r\n```\r\n<style>\r\n\tlabel {\r\n\t\tdisplay: inline;\r\n\t}\r\n</style>\r\n```\r\n\r\nwill allow the labels to co-exist on the same line.\r\n\r\nPlease let me know if I've missed something.",
          "createdAt": "2020-12-09T10:13:53Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTg5Njc1Mzc=",
    "body": "Not sure if this is a bug or a feature.. if you pass `!important` into a `style=\"\"` via a css variable, e.g. `style=\"--my-css-var: 10px !important;\"` then the variable is not rendered into the markup.\r\n\r\n**Reproduction**\r\n\r\nhttps://svelte.dev/repl/a18450e453c9424a9be42a4e09b9a300?version=3.6.7\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nI expected the input to be sanitized, but also expected that there be an exception for the specific string `!important` as it is valid CSS.\r\n\r\n**Severity**\r\nMinor.\r\n\r\n",
    "closedAt": "2020-12-08T01:17:27Z",
    "createdAt": "2020-12-08T00:54:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDI5MjYyMg==",
          "body": "This is unrelated to CSS vars, but is instead related to Svelte's `style` optimizations. Something like\r\n\r\n```svelte\r\n<div style=\"color: {'red !important'}\">foo</div>\r\n```\r\n\r\nwon't render as red, because the compiler tries to optimize and treat the whole expression as the value of the `color`, and compiles to essentially `div.style.setProperty('color', 'red !important');`, which won't work. It'd need to do `div.style.setProperty('color', 'red', 'important');`. I don't think there's a reasonable way to handle this without doing a runtime check for whether the string ended in `!important` and handling that separately, and I don't know whether that's something that's worth subjecting everyone to.",
          "createdAt": "2020-12-08T01:15:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTg3MzI1NDM=",
    "body": "It would be helpful for new developers like me if Svelte had a Style Guide like Vue has. Because, it makes debugging easier and makes code readable for everyone.",
    "closedAt": "2020-12-07T18:18:16Z",
    "createdAt": "2020-12-07T18:14:04Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDA5MTY0OA==",
          "body": "We have an [eslint plugin](https://github.com/sveltejs/eslint-plugin-svelte3) and [prettier plugin](https://github.com/sveltejs/prettier-plugin-svelte). I think the recommendation would be to use those and have it automatically managed rather than being something you have to think about",
          "createdAt": "2020-12-07T18:18:16Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDEwMjE1Mg==",
          "body": "Eslint/prettier cannot find everything related to style, like \"group `export let` at the top\" so there is a place for style guides and it might make sense to have such a guide at some point. However there's the question what to put into it and probably there will be endless bike shedding on code style.",
          "createdAt": "2020-12-07T18:37:34Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDEwMzIyMA==",
          "body": "I think you could probably write a plugin to handle ordering right? There is definitely a `sort imports` plugin, so I guess that could be expanded to sort other things too (not via the same plugin).",
          "createdAt": "2020-12-07T18:39:31Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTg1MzMzNzY=",
    "body": "In this REPL:\r\nhttps://svelte.dev/repl/0cf61fcb843c47b7a9ba4bd6d6a891f7?version=3.31.0\r\n\r\nthis code:\r\n```svelte\r\nlet someData = {\r\n  Home: \"HomeData\",\r\n  // ...\r\n};\r\n$: currentData = someData[\"NotHome\"] || \"DefaultData\";\r\n\r\nlet myText = \"Bugged ;(\"\r\nfunction fetch() {\r\n  if(currentData != \"DefaultData\") console.log(myText)\r\n};\r\nfetch();\r\n```\r\n\r\ncompiles into this code, where `currentData` declared after `fetch()`:\r\n\r\n```svelte\r\nlet someData = { Home: \"HomeData\" }; // ...\r\nfunction fetch() {\r\n  if (currentData != \"DefaultData\") console.log(myText);\r\n}\r\nfetch();\r\nlet currentData;\r\n$: currentData = someData[\"NotHome\"] || \"DefaultData\";\r\n```\r\n\r\nAnd leads to an error `Cannot access 'currentData' before initialization'",
    "closedAt": "2021-01-02T00:59:35Z",
    "createdAt": "2020-12-07T14:02:26Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0Mjc2MTQyNQ==",
          "body": "Here's another example:\r\n\r\n```\r\n\timport store from \"./store\";\r\n\tlet name = 'world';\r\n\t\r\n\t$: theValue = $store;\r\n\t\r\n\tlet numbersSeen = {\r\n\t\t[theValue]: true\r\n\t}\r\n```\r\n\r\nREPL: https://svelte.dev/repl/1753fac08700444985259933d4b58518?version=3.31.0 \r\n\r\nThat code's obviously foolish and silly - the goal is to do something with that initial, original value of \"theValue\" which, in this circumstance, leads to a ReferenceError ",
          "createdAt": "2020-12-10T19:58:38Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQxNzQzOQ==",
          "body": "This is fixed in 3.31.1 - https://svelte.dev/repl/0cf61fcb843c47b7a9ba4bd6d6a891f7?version=3.31.1",
          "createdAt": "2021-01-02T02:07:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTgxMjYzODU=",
    "body": "\r\n\r\n**Describe the bug**\r\n\r\nIn [https://svelte.dev/tutorial/](https://svelte.dev/tutorial/), the reset button looks weird, It is a UI bug, does anyone know why this button is behaving this way? When I try to inspect element and look at the code, the button fixes itself.\r\n\r\n![Screen Shot 2020-12-06 at 10 27 23 PM](https://user-images.githubusercontent.com/4549937/101306674-801f4880-3813-11eb-9885-5e560a8abb1b.png)\r\n\r\n\r\nI tried the same thing on Firefox and I faced no issues.\r\n\r\n\r\n\r\n**To Reproduce**\r\n\r\n1. Go to [https://svelte.dev/tutorial/adding-data](https://svelte.dev/tutorial/adding-data) on a Mac with Safari 14.0.1 .\r\n2. Click on the red 'show me' button located at the bottom left side of the page.\r\n3. Click on the code editor.\r\n4. The reset button is broken.\r\n\r\n**Expected behavior**\r\nA clear reset button is supposed to appear.\r\n\r\n**Information about your Svelte project:**\r\nSafari 14.0.1 on Mac 11.0.1.\r\n\r\n**Severity**\r\nTrivial.\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-12-07T03:39:14Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTc3MTIzOQ==",
          "body": "Could be something to do with webkit without testing on that specific version of Safari would need : \r\n\r\n`-webkit-appearance: none;`",
          "createdAt": "2020-12-07T08:48:22Z",
          "author": { "login": "CharlieSay", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTc2MTI3NTY=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI tried to use Tailwind with Sapper. Even with the most basic setup the initial build time will go from **~2s** to **~26s**. I then tried to build the base Tailwind css outside of the Sapper build pipeline, this will take **~3s**. The problem is that I'm not able to work on Tailwind theming etc. since I always have to wait 30s or with the other approach reload everything \"by hand\" instead of having sapper dev doing it for me properly.\r\nI also tried copy pasting the generated Tailwind CSS into a Svelte components `<style global>…` - still same build time increase. Therefore It shouldn't be caused by preprocessing etc. I think this is due to the fact that every css will be considered \"handwritten\" and all Svelte css processing kicks in, even though it's actually a frameworks css that most likely doesn't need or even shouldn't be further processed. \r\nAt least in the context of Sapper It would be easier to just import the css globally and have a proper dev build running \"out of the box\" instead of handling it outside of Sapper and try to get it in sync with the sapper build pipeline.\r\n\r\n**Describe the solution you'd like**\r\nSomething like `<style plain>` could work. `plain` just indicates that the css shouldn't/don't need to be processed by Svelte.\r\n\r\n**Describe alternatives you've considered**\r\nI will now try to write a rollup plugin to build Tailwind and then \"inject\" the result into an already processed css file in the Sapper build pipeline.\r\n\r\n**How important is this feature to you?**\r\nWith my current \"full setup\" Sapper it takes **~1m** to rebuild Tailwind. This is pretty unusable, especially if you are aware that \"normally\" this should only take a few seconds.\r\n\r\n**Additional context**\r\nhttps://github.com/sveltejs/svelte-preprocess/issues/275\r\n[Hello World REPL with unmodified Tailwind base CSS](https://svelte.dev/repl/caaf6efb264a4b4b81ff3495b0c5274a?version=3.31.0) (With preprocess `global` already applied - otherwise it wouldn't compile as It'll try to apply the component scope to every Tailwind definition - see: [REPL](https://svelte.dev/repl/f6db7605acab46c99d0075a846eb0096?version=3.31))",
    "closedAt": "2020-12-08T16:56:04Z",
    "createdAt": "2020-12-05T07:59:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTMyMDgwNg==",
          "body": "I know @babichjacob has come up with some solutions for this. Maybe check out https://github.com/babichjacob/sapper-postcss-template and https://github.com/babichjacob/svelte-add-tailwindcss",
          "createdAt": "2020-12-05T16:57:53Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTMyMTgyOQ==",
          "body": "If you don't want Svelte to touch your CSS then (as long as you are using the appropriate bundler plugins) you should be able to have `import './external_styles.css';` somewhere, which should remove the need for `<style global>` as well.\r\n\r\nI personally haven't had difficulty with huge build times when using a single Svelte component whose job is to bring in all the Tailwind styles with a `<style global>` (with the normal Tailwind directives), but I haven't tried Tailwind v2 yet.",
          "createdAt": "2020-12-05T17:06:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTMyNTgyOA==",
          "body": "@benmccann I know that solution. In terms of Sapper I couldn‘t reload the updated built global.css as it‘s cached by the service worker. You could exclude it there but then the global.css still isn‘t hashed e.g. Tbh that feels way to hacky for prod.\r\n\r\n@Conduitry Yea also tried that. Then you can just use the rollup postcss plugin (which doesn‘t work with postcss8 atm 😬). But from there it‘s still hacky to get the extracted css into the sapper template and build pipeline\r\n\r\nCurrently I‘m using a custom rollup plugin that applies a postcss process on the corresponding svelte component css that‘s still In the rollup build pipeline. That way Tailwind gets build and applied after the svelte compiling. I‘m now back at **2-4s** even with Tailwind updated instead of **>1m**. But that will only work for the client with `emitCss` enabled, I think\r\n\r\nI still would prefer to be able to bypass svelte css processing at compile time. It‘s super hard to use something like Tailwind with sapper without that option. I wanted to create and update the project specific theme, but atm it feels very clunky and hacky to get an „expected“ dev workflow, because svelte „must“ process every css, no matter what.",
          "createdAt": "2020-12-05T17:40:38Z",
          "author": { "login": "dionysiusmarquis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTQzMDQ2Ng==",
          "body": "> the global.css still isn‘t hashed\r\n\r\nThat sounds it might be one of the main problems. I would support fixing that",
          "createdAt": "2020-12-05T23:31:56Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTQ3Nzc4Mw==",
          "body": "🤔 If sapper would also react to css coming from the build pipeline and additionally injecting them, could be another solution. \r\nNot sure if updating/hashing the global.css inside the static folder and changing template.html is the best option here. But that would work as well, I guess",
          "createdAt": "2020-12-06T09:32:02Z",
          "author": { "login": "dionysiusmarquis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDEyMDIxNA==",
          "body": "Is https://github.com/sveltejs/sapper/issues/1660 is related to this?",
          "createdAt": "2020-12-07T19:09:24Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDY1MDEzMw==",
          "body": "I realised that sapper already \"injects\" css files. So I just needed to change my `import '…my-style.pcss'` to `import '…my-style.css'`. After that I could easily add a simple project specific postcss plugin to the rollup build config. This would work, but  unfortunately the sapper chunk hashes ignore these changes (as described in my sapper issue).",
          "createdAt": "2020-12-08T14:24:43Z",
          "author": { "login": "dionysiusmarquis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDc1ODY2MA==",
          "body": "My current project specific plugin (still needs to be tested more), which processes all imported `.css` files through `postcss` and will also ensure \"proper\" sapper chunk hashes. With Tailwind/Postcss already set up in your project, you only need to add this plugin to your rollup config:\r\n\r\n```html\r\n// MyComponent.svelte\r\n<script>\r\n  import 'src/styles/tailwind.css' // Sapper only injects `.css` files, so no `.pcss` here ._. \r\n…\r\n```\r\n\r\n```js\r\nimport { createHash } from 'crypto'\r\nimport { existsSync } from 'fs'\r\nimport { readFile } from 'fs/promises'\r\nimport path from 'path'\r\nimport postcss from 'postcss'\r\n\r\nimport loadConfig from 'postcss-load-config'\r\n\r\nconst configFiles = ['postcss.config.js', 'tailwind.config.js']\r\n\r\nexport default function postcssImport () {\r\n  let config\r\n  const cssCache = {}\r\n  return {\r\n    name: 'postcss-import',\r\n    augmentChunkHash (chunk) {\r\n      // apply hashes to chunks (this isn't done properly by sapper atm)\r\n      let hash\r\n      for (const moduleId in chunk.modules) {\r\n        const css = cssCache[moduleId]\r\n        if (css) {\r\n          if (!hash) {\r\n            hash = createHash('sha256')\r\n          }\r\n          hash.update(css.hash)\r\n        }\r\n      }\r\n      if (hash) {\r\n        return hash.digest('hex')\r\n      }\r\n    },\r\n    async buildStart () {\r\n      if (!config) {\r\n        config = await loadConfig()\r\n      }\r\n      configFiles.forEach(file => this.addWatchFile(file))\r\n    },\r\n    async load (id) {\r\n      const idPath = path.parse(id)\r\n      if (idPath.ext === '.css') {\r\n        // ignore svelte css files created with `emitCss` enabled\r\n        const isSvelteCss = existsSync(`${idPath.dir}/${idPath.name}.svelte`)\r\n        if (isSvelteCss) return\r\n        try {\r\n          const content = await readFile(id, 'utf8')\r\n          const { css, map } = await postcss(config.plugins).process(content, {\r\n            from: id\r\n          })\r\n          // already create hashes based on the css result for fast `augmentChunkHash` hash creation\r\n          const hash = createHash('sha256').update(css).digest('hex')\r\n          cssCache[id] = { content, hash }\r\n          return { code: css, map }\r\n        } catch (error) {\r\n          console.error(error)\r\n        }\r\n      }\r\n    },\r\n    watchChange (id) {\r\n      // on config file change\r\n      if (configFiles.some(file => id.includes(file))) {\r\n        config = null\r\n      }\r\n    }\r\n  }\r\n}\r\n```",
          "createdAt": "2020-12-08T16:54:27Z",
          "author": { "login": "dionysiusmarquis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MDc1OTcyNw==",
          "body": "That's awesome. Thanks so much for sharing!\r\n\r\nI'm going to go ahead and close this since it sounds like it's possible to address without any changes in Svelte. I'd love to help you get the fix into Sapper though",
          "createdAt": "2020-12-08T16:56:04Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NTM4MDA4Nw==",
          "body": "using [windicss](https://github.com/windicss/windicss) is a game changer in my experience. `rollup -w` rebuilds in milliseconds",
          "createdAt": "2021-03-10T13:01:03Z",
          "author": { "login": "syffs", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0Mzg0MTM2OA==",
          "body": "> \r\n> \r\n> using [windicss](https://github.com/windicss/windicss) is a game changer in my experience. `rollup -w` rebuilds in milliseconds\r\n\r\nHi, have you used it together with SvelteKit or anything else...? Thanks.",
          "createdAt": "2021-05-19T07:50:17Z",
          "author": { "login": "petrkoutnycz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NDA2NzM0Mw==",
          "body": "Use https://github.com/svelte-add/tailwindcss which performs well",
          "createdAt": "2021-05-19T12:41:54Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTY2Njc2NzU=",
    "body": "**Describe the bug**\r\nCalling getContext inside function in component will cause error\r\n\r\n**Logs**\r\n```Uncaught Error: Function called outside component initialization```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/1c5d9f0307af4e56a3fc9b5317ab89d0?version=3.31.0\r\n\r\n**Expected behavior**\r\nSame behavior as calling it outside function.\r\nThis thing isn't obvious and I needed some time to guess what's wrong with my code and which function is called outside of my component (?)\r\n\r\n**Severity**\r\nThis isn't really important to me, I can easily move out defining this variables before my functions but I wanted a clear explanation why I can't call getContext inside function. Also a log like `getContext can't be called inside function` would be much more understandable\r\n",
    "closedAt": "2020-12-04T00:27:55Z",
    "createdAt": "2020-12-03T23:18:50Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODQ3MDM3OA==",
          "body": "You are allowed to call it during a function, as long as it is called synchronously during component initialization (which an event handler is not). This is explained in the documentation. We don't want to make this error message too wordy or fancy because it is included in every app that uses any of the lifecycle hooks or the context API.",
          "createdAt": "2020-12-04T00:27:55Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODQ3OTg4NQ==",
          "body": "Thank you!",
          "createdAt": "2020-12-04T00:56:15Z",
          "author": { "login": "ZerdoX-x", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTYxMjU5NjI=",
    "body": " I am trying to add feature to Svelte. I cloned Svelte and followed the instructions in site/. I am trying to use local copy of Svelte. When I opened http://localhost:3000/repl/hello-world?version=local initially I saw that it was working fine. I just restarted the repl and it stopped working. Now I only see \"loading Svelte compiler...\" and in the browser console I can see \"Uncaught (in promise) ReferenceError: svelte is not defined\" in bundler.js 11th line. Am I missing something ?",
    "closedAt": "2021-01-04T22:49:04Z",
    "createdAt": "2020-12-03T11:48:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI2OTYyOQ==",
          "body": "Getting the REPL to work locally can be a bit tricky, I can't say for sure the problem you're having, but I would take a look at this PR: https://github.com/sveltejs/svelte-repl/pull/118\r\n\r\nWe can't provide any guarantees that a local copy of the site will run the REPL reliably, if at all.",
          "createdAt": "2021-01-04T22:49:04Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDI3NTU5OA==",
          "body": "The compiler needs to be built with the `PUBLISH` env var set, as explained in https://github.com/sveltejs/svelte/tree/master/site#running-using-the-local-copy-of-svelte - If that's not what the problem is, I couldn't tell you what's going on.",
          "createdAt": "2021-01-04T23:05:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTUzMDgxMzA=",
    "body": "I am doing **nothing** to trigger this error. The app works fine one second, and doesn't the next.  \r\n\r\nWhy is this happening? It is not due to the missing `@rollup/plugin-json` plugin because it worked previously without it.\r\n\r\n# Error\r\n\r\n```\r\nhttps://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency\r\npath (imported by  path?commonjs-external)\r\nhttp (imported by  http?commonjs-external)\r\nnet (imported by  net?commonjs-external)\r\nurl (imported by  url?commonjs-external)\r\n[!] Error: Unexpected token (Note that you need @rollup/plugin-json to import JSON files)\r\nnode_modules/mime-db/db.json (2:40)\r\n1: {\r\n2:   \"application/1d-interleaved-parityfec\": {\r\n                                           ^\r\n3:     \"source\": \"iana\"\r\n4:   },\r\nError: Unexpected token (Note that you need @rollup/plugin-json to import JSON files)\r\n    at error (/mnt/c/ivan/dev/lab/atlas-biotek/node_modules/rollup/dist/shared/rollup.js:5265:30)\r\n    at Module.error (/mnt/c/ivan/dev/lab/atlas-biotek/node_modules/rollup/dist/shared/rollup.js:9835:16)\r\n    at tryParse (/mnt/c/ivan/dev/lab/atlas-biotek/node_modules/rollup/dist/shared/rollup.js:9716:23)\r\n    at Module.setSource (/mnt/c/ivan/dev/lab/atlas-biotek/node_modules/rollup/dist/shared/rollup.js:10142:19)\r\n    at ModuleLoader.addModuleSource (/mnt/c/ivan/dev/lab/atlas-biotek/node_modules/rollup/dist/shared/rollup.js:18312:20)\r\n```\r\n\r\n# Adding the plugin\r\n\r\n```\r\nnpm i @rollup/plugin-json --save-dev\r\n```\r\n\r\n**rollup.js.config**\r\n```js\r\nimport json from \"@rollup/plugin-json\";\r\n\r\nexport default {\r\n    plugins: [\r\n        commonjs(),\r\n        json(),      // <---- put after commonjs\r\n    ]\r\n}\r\n```\r\n# Client error\r\n\r\n```\r\nUncaught ReferenceError: require$$0$1 is not defined\r\n    at main.js:5\r\n(anonymous) @ main.js:5\r\n```\r\n![UNCAUGHT](https://user-images.githubusercontent.com/16456606/100885436-eeca7200-34b2-11eb-9dd4-8b4686d81e15.jpg)\r\n",
    "closedAt": "2020-12-02T14:34:05Z",
    "createdAt": "2020-12-02T14:11:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzI2NzQ3NQ==",
          "body": "> I am doing **nothing** to trigger this error.\r\n\r\nThis is doubtful.\r\n\r\nEither magic happened, or something changed that resulted in you trying to import a JSON file as a module.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-12-02T14:34:05Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzI3MDU5Mw==",
          "body": "Ok, then explain why adding the plugin doesn't fix it, and results in a different error???\r\n\r\nPlease open the question back, because it's still a problem.",
          "createdAt": "2020-12-02T14:39:10Z",
          "author": { "login": "8483", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzI3MTQ2NA==",
          "body": "@8483 hi please head to our [discord](https://svelte.dev/chat) this really is not something we can reproduce and have a meaningful discussion in this repo issues.",
          "createdAt": "2020-12-02T14:40:33Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzI3MjI2OQ==",
          "body": "I will, but how is this not a real issue?",
          "createdAt": "2020-12-02T14:41:56Z",
          "author": { "login": "8483", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzI3MzAxNQ==",
          "body": "The issue is a section to talk about issues on svelte itself and not other plugins. Please avoid commenting further here, Thanks.",
          "createdAt": "2020-12-02T14:43:12Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzI3Njk4NA==",
          "body": "This is bullshit. How is this not a svelte itself issue when rollup comes by default?  \r\n\r\n@Rich-Harris ",
          "createdAt": "2020-12-02T14:49:22Z",
          "author": { "login": "8483", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzI4MTY0MQ==",
          "body": "Knock it off.",
          "createdAt": "2020-12-02T14:56:29Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTQ4MTUyMjU=",
    "body": "**Describe the bug**\r\nIf you translate an element with a fly transition applied to it, the transition can \"jump\" and not be smooth. This mainly seems to occur if you change the translation amount after transitioning the element in and out once.\r\n\r\nHere's a GIF of the issue in action. You'll notice that it is smooth at first, but the second transition (after translating the element) starts by abruptly jumping to the right.\r\n\r\n![fly](https://user-images.githubusercontent.com/4992896/100810174-b52f3380-33ec-11eb-9401-6d4e817a9100.gif)\r\n\r\n**To Reproduce**\r\n1. Trigger a fly transition in and out on an element.\r\n2. Translate the element\r\n3. Trigger the transition again. You'll notice a \"jump\" at the start of the transition\r\n\r\nSee my [REPL](https://svelte.dev/repl/1c57f2ada7f54dee96b690d9924022c5?version=3.30.1) for an interactive demo showing the issue.\r\n\r\n**Expected behavior**\r\nThe transition is smooth and does not jump.\r\n\r\n**Information about your Svelte project:**\r\n- Browser: Firefox 83 / Chrome 87\r\n- Operating system: Windows 10\r\n- Svelte version: 3.30.1\r\n\r\n**Severity**\r\nThis is an annoying, but not blocking, issue. It made a recent demo I made a little more janky.",
    "closedAt": null,
    "createdAt": "2020-12-01T23:54:28Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQzNDY0NA==",
          "body": "the `fly` transition will apply `transform` to the same element, setting the `translate` from `0px` to `-100px`, thus, the jump from the initially `-50px` to `0px`.\r\n\r\nI wonder what will be your expectation after setting translate to `-50px`?\r\n\r\n1) the fly will translate the element from `-50px` to `-150px`?\r\n\r\nor\r\n\r\n2) the fly will translate the element from `-50px` to `-100px`, thus travelling a shorter distance in the same duration?\r\n",
          "createdAt": "2021-01-02T05:35:58Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDA2NjM2Nw==",
          "body": "Good question -- I would expect the element to translate from -50px to -150px. I should be able to translate the element all around the screen. When the time comes to transition the element out, it should be translated out from its current position with the parameters specified so the transition is smooth.\r\n\r\nInterestingly, this only seems to be an issue when the `transition` directive is used. If you update my linked REPL to use `in:fly={{x: -100, opacity: 1}} out:fly={{x: -100, opacity: 1}}` instead of `transition:fly={{x: -100, opacity: 1}}`, the problem does not occur.",
          "createdAt": "2021-01-04T16:12:34Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTQ3MTM0NzA=",
    "body": "Why would a simple addition of an `export` totally change the IfBlock.expression in a manner that causes code-red print() to fail with error \"Could not find owner for node\"?\r\n\r\nSeems like a bug introduced by this line:\r\n\r\nhttps://github.com/sveltejs/svelte/blob/240f5410f38a8ee0ca55e56aeb6cb1aac7ae0025/src/compiler/compile/render_dom/Renderer.ts#L294\r\n\r\nhttps://github.com/sveltejs/svelte/blob/240f5410f38a8ee0ca55e56aeb6cb1aac7ae0025/src/compiler/compile/nodes/shared/Expression.ts#L221-L224\r\n\r\n### Not working\r\n```js\r\n<script>\r\n  export let employment_type = 1;\r\n<script>\r\n\r\n{#if employment_type > 10}\r\n  <h2>Unknown Employment Contract: {employment_type}</h2>\r\n{/if}\r\n```\r\n\r\nProduces:\r\n```json\r\n{\r\n  \"type\": \"BinaryExpression\",\r\n  \"start\": 750,\r\n  \"end\": 770,\r\n  \"loc\": {\r\n    \"start\": { \"line\": 38, \"column\": 5 },\r\n    \"end\": { \"line\": 38, \"column\": 25 }\r\n  },\r\n  \"left\": {\r\n    \"type\": \"MemberExpression\",\r\n    \"start\": 21,\r\n    \"end\": 61,\r\n    \"object\": {\r\n      \"type\": \"Identifier\",\r\n      \"start\": 21,\r\n      \"end\": 43,\r\n      \"name\": \"#ctx\",\r\n      \"loc\": {\r\n        \"start\": { \"line\": 38, \"column\": 5 },\r\n        \"end\": { \"line\": 38, \"column\": 20 }\r\n      }\r\n    },\r\n    \"property\": { \"type\": \"Literal\", \"value\": 0 },\r\n    \"computed\": true,\r\n    \"leadingComments\": [\r\n      {\r\n        \"type\": \"Block\",\r\n        \"value\": \"employment_type\",\r\n        \"start\": 0,\r\n        \"end\": 20,\r\n        \"has_trailing_newline\": false\r\n      }\r\n    ]\r\n  },\r\n  \"operator\": \">\",\r\n  \"right\": {\r\n    \"type\": \"Literal\",\r\n    \"start\": 768,\r\n    \"end\": 770,\r\n    \"loc\": {\r\n      \"start\": { \"line\": 38, \"column\": 23 },\r\n      \"end\": { \"line\": 38, \"column\": 25 }\r\n    },\r\n    \"value\": 10,\r\n    \"raw\": \"10\"\r\n  }\r\n}\r\n```\r\n\r\n### Working\r\n```js\r\n<script>\r\n  let employment_type = 1;\r\n<script>\r\n\r\n{#if employment_type > 10}\r\n  <h2>Unknown Employment Contract: {employment_type}</h2>\r\n{/if}\r\n```\r\n\r\nProduces:\r\n```json\r\n{\r\n  \"type\": \"BinaryExpression\",\r\n  \"start\": 743,\r\n  \"end\": 763,\r\n  \"loc\": {\r\n    \"start\": { \"line\": 38, \"column\": 5 },\r\n    \"end\": { \"line\": 38, \"column\": 25 }\r\n  },\r\n  \"left\": {\r\n    \"type\": \"Identifier\",\r\n    \"start\": 743,\r\n    \"end\": 758,\r\n    \"loc\": {\r\n      \"start\": { \"line\": 38, \"column\": 5 },\r\n      \"end\": { \"line\": 38, \"column\": 20 }\r\n    },\r\n    \"name\": \"employment_type\"\r\n  },\r\n  \"operator\": \">\",\r\n  \"right\": {\r\n    \"type\": \"Literal\",\r\n    \"start\": 761,\r\n    \"end\": 763,\r\n    \"loc\": {\r\n      \"start\": { \"line\": 38, \"column\": 23 },\r\n      \"end\": { \"line\": 38, \"column\": 25 }\r\n    },\r\n    \"value\": 10,\r\n    \"raw\": \"10\"\r\n  }\r\n}\r\n```",
    "closedAt": "2021-01-19T11:22:00Z",
    "createdAt": "2020-12-01T20:45:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNjgxNDcxOQ==",
          "body": "I assume the second `<script>` is supposed to be a `</script>`. If I make that change, I can't reproduce this with the latest version of the compiler. It seems to compile fine. As your example is written, I get `<script> must have a closing tag` which is to be expected.",
          "createdAt": "2020-12-01T20:56:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTQ1NDUxNTc=",
    "body": "**Describe the bug**\r\n`#each` block doesn't change when a new state is triggered by a transitioning component.\r\nThe weird glitch is happening when the `#each` block is placed inside an `#if` in combination with a transitioning component and Promise loaded items.\r\n\r\n**To Reproduce**\r\nPlease check the following repl - https://svelte.dev/repl/638d0a980c1b47fc8b1e7c270c8e5bc2?version=3.30.1\r\nClick on \"Show menu\" and then \"Clear items\". The items array is reasigned (eg. `items = []`), but the `#each` block doesn't reflect the change.\r\n\r\n**Expected behavior**\r\nThe `#each` block to properly reflect the iterated array state and to be not affected by the transitions of unrelated components.\r\n\r\n**Workarounds**\r\nThere are a couple of workarounds I found that strangely \"fixes\" the repl:\r\nv1. Remove the transition from `Menu.svelte`\r\nv2. Move the `<Menu>` component outside the `#if` block\r\nv3. In `Menu.svelte` change the order of the calls in `function changeOption(newOption)`, aka.:\r\n```js\r\nfunction changeOption(newOption) {\r\n    hide(); // triggers the transition\r\n    option = newOption;\r\n}\r\n```\r\n\r\n**Information about your Svelte project:**\r\n- Fedora 33\r\n- Chrome 87.0.4280.66 (Official Build) (64-bit)\r\n- Svelte ^3.30.1\r\n- Rollup ^2.34.0",
    "closedAt": null,
    "createdAt": "2020-12-01T16:32:23Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTEzMTAyMA==",
          "body": "It seems the point is that 'isLoading' and 'items' changed at the same time (because the Promise is resolved immediately). \r\n\r\nYour example worked correctly after this change: \r\n```\r\nsetTimeout(() => items = [], 0);\r\n```\r\nnow 'items' is updated at the next iteration of the EventLoop.\r\n\r\nBut the simple case works as expected without this trick:\r\nhttps://svelte.dev/repl/ab0d599bbe084b67b632724e4834876f?version=3.31.0\r\n\r\n^^^ UPDATE ^^^\r\n\r\nI continued to play with your example and made this change:\r\n\r\n```\r\nif (state == 1) isLoading = false;\r\n```\r\nhttps://svelte.dev/repl/b4dc5c7eeca04281a8df050402c1a856?version=3.30.1\r\n\r\nThe wrong screen was drawn for a moment:\r\n\r\n![image](https://user-images.githubusercontent.com/47115080/101235309-c328d100-36d8-11eb-806e-d27b5a1e8a12.png)\r\n\r\nThis is clearly not what should have happened. After a second, the screen refreshed as it should.\r\n",
          "createdAt": "2020-12-05T05:46:46Z",
          "author": { "login": "kiri2lov", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTE0MDY3MA==",
          "body": "@kiri2lov I'm confused. Your example doesn't seem to reflect the same problem. In real application the issue happens even when the promise is not resolved immediately. In addition this doesn't explain why the position of the menu component matter or why removing the transitions \"fixes\" the issue.",
          "createdAt": "2020-12-05T07:46:39Z",
          "author": { "login": "ganigeorgiev", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTMwNDcwMDA=",
    "body": "**Describe the bug**\r\nCrossfade does not dispatch `outrostart`.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/444056d6706e4d16a604742a48e0d17c?version=3.30.0\r\n\r\n**Expected behavior**\r\n`introstart` should be dispatched when element is about to appear\r\n`introend` should be dispatched when element is fully visible\r\n`outrostart` should be dispatched when element is about to disappear\r\n`outroend` should be dispatched when element is fully hidden\r\n\r\n**Information about your Svelte project:**\r\n- Svelte version 3.30.0",
    "closedAt": null,
    "createdAt": "2020-11-29T23:45:50Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTI3MjY5NTI=",
    "body": "**Describe the bug**\r\nThere is an unexpected reactive statement call (aka. `$: `) on variable assignment in other conditional reactive statement. This is happening only when there is an assignment inside reactive statement that is expected to be triggered if an exported **object** prop changes (which is also checked in another reactive statement).\r\n\r\n**To Reproduce**\r\nPlease check the following repl - https://svelte.dev/repl/58570a9e05a240f591a76b4eeab09598?version=3.30.0\r\nIt consists of 4 different scenarios inside 4 separate components. Only **TEST 1** fails (check the console output).\r\n\r\n**Expected behavior**\r\nI expect the first reactive statement to not be triggered by unrelated assignments in another reactive statement.\r\nOr at least, please provide an explanation why is behaving like that.\r\n\r\n**Information about your Svelte project:**\r\n- Fedora 33\r\n- Chrome 87.0.4280.66 (Official Build) (64-bit)\r\n- Svelte ^3.30.0\r\n- Rollup ^2.33.3\r\n\r\n**Severity**\r\nThe bug is not easily detected and it took me a while before I was able to isolate it. I've already refactored several of my components by using the approach similar to **TEST 4** from the repl.",
    "closedAt": null,
    "createdAt": "2020-11-28T17:19:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTA2NDI1MQ==",
          "body": "Hi, thanks for the report! \r\n\r\nActually, it's really tricky in there. I'm not sure that it works correctly, but I can explain why it's happening in all those cases. Definitely, I agree with you what it's a little bit confusing in general, and maybe would be nice to improve it somehow.\r\n\r\nAt the moment, the reason for this behavior in 3 things:\r\n\r\n1. `model` is a prop\r\n2. `model` is an object\r\n3. `model` invalidating in `onchange` handler like this:\r\n\r\n```javascript\r\nconst change_handler = e => {\r\n  if (e.target.checked) {\r\n    selected.push(1);\r\n  } else {\r\n    selected.splice(0, 1);\r\n  }\r\n\r\n  ($$invalidate(0, selected), $$invalidate(1, model));\r\n};\r\n```\r\nI'm not sure about the third thing. Is this a bug or a feature? But it is. The quick fix for Test 1 just turn the `immutable` option in `true`:\r\n\r\n```html\r\n<svelte:options immutable={true} />\r\n```  \r\nBtw, I always advise any guys who ask that it's better to use `immutable=true` in your projects. Svelte optimize only a DOM updates for complex types which can't be safely checked by `!==`. But `reactive statements` are not optimized an can be triggered superfluous times. To fix that, you can enable an option above and always change the reference to the object after assignments.\r\n\r\n**Test 1 - Step by step guide:**\r\n\r\nBecause `model` is a prop it could be changed at any time so we should handle this case. Because `model` is an object when it invalidating it always marking as `dirty` if `immutable=false`. Because `model` is invalidating in `onchange` handler (we don't know why) all `reactive statements` depending on it will be triggered.\r\n\r\n**Test 2 - Step by step guide:**\r\n\r\nBecause `model` is NOT a prop here and there's not any other place in the component where it could be changed, compiler won't generate a code for this. Actually, in this example `reactive statements` won't be generated as reactive because there's no cases they should be triggered again. So, both `reactive statements` will be performed only once.\r\n\r\n**Test 3 - Step by step guide:**\r\n\r\nThis example looks the same as Test 1, but with the key difference - `model` is NOT an object, but a primitive value. So, in spite of the fact that it still invalidating in `onchange` handler for some reason, it won't trigger a `reactive statement` because the value not actually changed and the inequality check fails.\r\n\r\n**Test 4 - Step by step guide:**\r\n\r\nUsing this approach, you just hide `selected` from dependencies of `reactive statement` and, for some reason, `model` stops invalidating in `onchange` handler:\r\n\r\n```javascript\r\nconst change_handler = e => {\r\n  if (e.target.checked) {\r\n    selected.push(1);\r\n  } else {\r\n    selected.splice(0, 1);\r\n  }\r\n\r\n  $$invalidate(0, selected);\r\n};\r\n```\r\n\r\n**>>> So, the only question for all these cases - should the `model` be invalidated in `onchange` handler or not. <<<**\r\n\r\nCan anyone help us with this question please: @Rich-Harris @Conduitry @tanhauhau \r\n\r\n**UPDATE:**\r\n\r\nI believe it related to [2694](https://github.com/sveltejs/svelte/pull/2694)\r\n\r\n**UPDATE 2:**\r\n\r\nSeems, Svelte _sees_ these two statements together and decide that `model` depending on `selected` assignment.\r\n\r\n```javascript\r\n$: if (model) { <-- this \r\n  selected = []; <-- and this in the same expression\r\n}\r\n```\r\n\r\nAfter that, when Svelte finds any `selected` assignments it will invalidates the `model` as well. ",
          "createdAt": "2020-12-04T22:49:55Z",
          "author": { "login": "PaulMaly", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTI3MDQ1NDk=",
    "body": "Hello everyone ! \r\n\r\n**Context**\r\n- Map component creates new entries in an object store (new map point)\r\n- List component consumes/reads this store to list object values.\r\nList component offers the possibility to rename properties with contentEditable.\r\n- MapSource component is reactive on the store, to update the map source/layer etc...\r\n\r\n**Bug**\r\nEditing the property of an object store via contentEditable HTML element, doesn't trigger reactivity on MapSource.\r\n\r\n\r\n**Code that doesn't work**\r\nStore : \r\n```js\r\nimport {writable} from 'svelte/store';\r\n\r\nfunction createStore() {\r\n    const {subscribe, update} = writable({});\r\n\r\n    return {\r\n        subscribe,\r\n        add: (marker) => update(obj => {\r\n            ...\r\n            obj[key] = value;\r\n            return obj;\r\n        }),\r\n        remove: (fillId) => update(obj => {\r\n            delete obj[fillId];\r\n            return obj;\r\n        })\r\n    };\r\n}\r\n\r\nexport const circles = createStore();\r\n```\r\n\r\nComponent List\r\n```js\r\n<div bind:this={list}>\r\n    {#each Object.values($circles) as circle}\r\n        <p contenteditable=\"true\"\r\n           tabindex=\"1\"\r\n           class=\"input\"\r\n           on:focus={focus}\r\n           on:keypress={pressed}\r\n           bind:textContent={circle.properties['name']}>\r\n            {circle.properties['name']}\r\n        </p>\r\n    {/each}\r\n</div>\r\n```\r\n\r\n**{circle.properties['name']}** is correctly modified in the store BUT other components don't see it !\r\n\r\n\r\n**Workaround**\r\nTo make it work, I need to listen on blur event (when you validate the editable content)\r\nThen call a new method on the store to update the property\r\n\r\nStore : \r\n```js\r\nimport {writable} from 'svelte/store';\r\n\r\nfunction createStore() {\r\n    const {subscribe, update} = writable({});\r\n\r\n    return {\r\n        . . . \r\n        updateCircleName: (fillId, newname) => update(obj => {\r\n            obj[fillId].properties['name'] = newname;\r\n            return obj;\r\n        })\r\n    };\r\n}\r\n\r\nexport const circles = createStore();\r\n```\r\n\r\nComponent List\r\n```js\r\nconst updateNameProperty = (e) => {\r\n        circles.updateCircleName(e.target.dataset['fillid'], e.target.innerText)\r\n}\r\n```\r\n```js\r\n{#each Object.values($circles) as circle}\r\n        <p data-fillid=\"{circle.properties['fillId']}\"\r\n           contenteditable=\"true\"\r\n           tabindex=\"1\"\r\n           class=\"input mb-2\"\r\n           on:focus={focus}\r\n           on:blur={updateNameProperty}\r\n           on:keypress={pressed}\r\n           bind:textContent={circle.properties['name']}>\r\n            {circle.properties['name']}\r\n        </p>\r\n{/each}\r\n```\r\n\r\n**Info**\r\n- Browser Chrome 86\r\n- Operating system: OS X 10\r\n- Svelte version \r\n    \"svelte\": \"^3.0.0\",\r\n    \"svelte-media\": \"0.0.3\",\r\n    \"svelte-preprocess\": \"^4.5.2\"\r\n\r\n- Rollup\r\n    \"rollup\": \"^2.3.4\",\r\n    \"rollup-plugin-svelte\": \"^6.0.0\",\r\n\r\n\r\n\r\n**Just in case, because I'm maybe doing it wrong somewhere...**\r\nApp.svelte :\r\n```html\r\n<List></List> <!-- editable components HERE -->\r\n<Map>\r\n    {#if Object.keys($circles).length > 0}\r\n        <MapSource id=\"circle\" data={Object.values($circles)}>  <!-- reactivity HERE -->\r\n            <MapLayer fill={circlesFill} outline={circlesOutline}></MapLayer>\r\n        </MapSource>\r\n    {/if}\r\n</Map>\r\n```\r\n\r\nMapSource.svelte :\r\n```js\r\n<script>\r\n    import {getContext, onDestroy, onMount, setContext} from \"svelte\";\r\n    . . .\r\n    export let data;\r\n    export let id;\r\n    . . .\r\n\r\n    $: {\r\n        if (!!data && ((data.constructor === Array && data.length > 0) || (data.constructor === Object))) {\r\n             . . . manage properties here\r\n        }\r\n    }\r\n```",
    "closedAt": "2020-11-29T20:10:11Z",
    "createdAt": "2020-11-28T16:03:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTM5MjY3Ng==",
          "body": "@fpassaniti I'd consider this behavior expected, since you are updating a property of an object element of an array/object and you need to explicitly \"notify\" the store (or any other reactive prop) by using the store `set`, `update`, reassignment, etc. (aka. similar to https://svelte.dev/tutorial/updating-arrays-and-objects)",
          "createdAt": "2020-11-29T13:17:02Z",
          "author": { "login": "ganigeorgiev", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTQ0Njg3OQ==",
          "body": "damn... I red this part of the doc too fast... My bad.\r\n\r\nThanks for your answer/help",
          "createdAt": "2020-11-29T20:10:11Z",
          "author": { "login": "fpassaniti", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTE5MzAxNDI=",
    "body": "**Describe the bug**\r\n`hasContext` is not exported from `src/runtime/index.ts`.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nAttempt to `import { hasContext } from 'svelte';`.\r\n\r\n[REPL](https://svelte.dev/repl/6774f5ab24d146e19cb5fca6ac940389?version=3.30.0)\r\n\r\n**Expected behavior**\r\nI should be able to import the newly added `hasContext` lifecycle function.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\nN/A\r\n\r\n**Severity**\r\nMild annoyance.\r\n\r\n**Additional context**\r\nThis feature is brand new, so the export was likely just overlooked.\r\n",
    "closedAt": "2020-11-27T13:06:37Z",
    "createdAt": "2020-11-27T01:59:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNjA2NzEzMQ==",
          "body": "Oops! This should be good to go in 3.30.1.",
          "createdAt": "2020-11-30T21:27:39Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTE4MzEyMDg=",
    "body": "**Describe the bug**\r\n\r\nI don't know if this is the best place to post this, but I created a new Svelte project with\r\n\r\n`npx degit sveltejs/template my-proj` and then installed `yarn add socket.io-client`. Then, just by importing `socket.io-client` into my app, I get this error:\r\n\r\n```\r\npolling-xhr.js:18 Uncaught ReferenceError: Cannot access 'XMLHttpRequest' before initialization\r\n```\r\n\r\nIf I remove the `import io from 'socket.io-client'` line, it runs perfectly.\r\n\r\nI tried with a vanilla JS project bundled with webpack and I was able to use the library.\r\n\r\nAlso tried it with a new create-react-app, so I'm thinking it is how rollup is bundling that specific library?\r\n\r\nPlease, if this is not the correct place to post this let me know and I'll post it again in a different forum.\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\nIn the browser console just by having `socket.io-client` imported\r\n```\r\npolling-xhr.js:18 Uncaught ReferenceError: Cannot access 'XMLHttpRequest' before initialization\r\n```\r\n\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\n\r\n```\r\nnpx degit sveltejs/template proj\r\ncd proj\r\nyarn install\r\nyarn add socket.io-client\r\n# \timport io from 'socket.io-client' inside App.svelte\r\nyarn dev\r\n```\r\n\r\nBundling looks good, but the app breaks at runtime\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\n  System:\r\n    OS: macOS 10.15.6\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\r\n    Memory: 61.45 MB / 16.00 GB\r\n    Shell: 5.7.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 12.18.3 - ~/.nvm/versions/node/v12.18.3/bin/node\r\n    Yarn: 1.22.4 - ~/.nvm/versions/node/v12.18.3/bin/yarn\r\n    npm: 6.14.6 - ~/.nvm/versions/node/v12.18.3/bin/npm\r\n    Watchman: 4.9.0 - /usr/local/bin/watchman\r\n  Browsers:\r\n    Brave Browser: 84.1.12.114\r\n    Chrome: 86.0.4240.198\r\n    Chrome Canary: 89.0.4337.0\r\n    Firefox Developer Edition: 84.0\r\n    Safari: 14.0\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.33.3\r\n    svelte: ^3.0.0 => 3.30.0\r\n\r\n\r\n\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2020-11-27T04:39:36Z",
    "createdAt": "2020-11-26T21:20:05Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTE4MTE4Mjc=",
    "body": "https://github.com/sveltejs/svelte/blob/93313982991320c7bf2d65a037565b275addbea8/src/compiler/compile/render_dom/wrappers/Element/index.ts#L380\r\nHere you use `http://www.w3.org/2000/xmlns` as a template string. As a consequnce in the bundle file `http://www.w3.org/2000/xmlns` appears instead of a reference to `xmlns` variable. So it is using 4k of data just for that.\r\nI actually it is the same with name we should use const variable not to put it over and over.\r\n\r\nI am not sure if it would break anything to use a const variable thus the issue first",
    "closedAt": null,
    "createdAt": "2020-11-26T20:19:38Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTEwNDgyMTE=",
    "body": "**Describe the bug**\r\n[The new preprocessor sourcemapping feature](https://github.com/sveltejs/svelte/pull/5584/files#diff-8742d6c5cbad8aec49f195bc6d25b152ac0cd8180cb876c019f3b74736f9d62aR15) seems to sometimes cause errors (CC @halfnelson @milahu)\r\n\r\n**Logs**\r\n\r\n```\r\n> sapper-postcss-template@2020.11.18 build /Users/babichjacob/Repositories/sapper-postcss-template\r\n> cross-env NODE_ENV=production sapper build --legacy\r\n\r\n> Building...\r\n\r\n[!] (plugin svelte) TypeError: Cannot read property 'length' of undefined\r\n/Users/babichjacob/Repositories/sapper-postcss-template/src/routes/index.svelte\r\nTypeError: Cannot read property 'length' of undefined\r\n    at sourcemap_add_offset (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/svelte/compiler.js:22087:23)\r\n    at get_replacement (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/svelte/compiler.js:28575:10)\r\n    at /Users/babichjacob/Repositories/sapper-postcss-template/node_modules/svelte/compiler.js:28635:21\r\n    at async Promise.all (index 0)\r\n    at async replace_async (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/svelte/compiler.js:28551:52)\r\n    at async preprocess_tag_content (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/svelte/compiler.js:28618:22)\r\n    at async preprocess (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/svelte/compiler.js:28644:10)\r\n    at async Object.transform (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/rollup-plugin-svelte/index.js:100:23)\r\n    at async ModuleLoader.addModuleSource (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/rollup/dist/shared/rollup.js:18289:30)\r\n    at async ModuleLoader.fetchModule (/Users/babichjacob/Repositories/sapper-postcss-template/node_modules/rollup/dist/shared/rollup.js:18345:9\r\n```\r\n\r\n**To Reproduce**\r\n`git clone git@github.com:babichjacob/sapper-postcss-template.git`\r\n\r\nUpgrade to svelte 3.30 and rollup-plugin-svelte 7 following the upgrade guide (example of that here: https://github.com/sveltejs/sapper-template/pull/289)\r\n\r\nsourcemap = false -> no error\r\nsourcemap = \"inline\" -> that error\r\nsourcemap = true -> that error\r\n\r\n\r\n**Severity**\r\nSeveral people have reported this issue on Discord. It seems to happen relatively frequently",
    "closedAt": "2020-11-30T21:08:09Z",
    "createdAt": "2020-11-25T18:50:25Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzg5NTcxMg==",
          "body": "My analysis so far:\r\nThe PostCSS processor in `svelte-preprocess` is returning a `SourceMapGenerator` instead of whatever the svelte compiler is expecting it to return. This `SourceMapGenerator` is coming directly from the `postcss` package. I'm not sure where exactly the `SourceMapGenerator` is supposed to turn into an actual source map, but that seems to be the missing step AFAICT.\r\n\r\nUpdate:\r\nLooks like just changing the postcss transformer isn't sufficient. \r\n\r\n\r\nThis is certainly not the exact right fix, but adding this in the Svelte `compiler.js` at line 28636, just before the call to `get_replacement` allows everything to build without errors:\r\n```\r\nif (processed.map?._mappings) {\r\n    processed.map = processed.map.toString();\r\n}\r\n```\r\n\r\n\r\n\r\n",
          "createdAt": "2020-11-25T19:02:17Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzk1Nzk1Nw==",
          "body": "omg thank you",
          "createdAt": "2020-11-25T21:39:35Z",
          "author": { "login": "jacobthesheep", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzk2OTY2Ng==",
          "body": "> My analysis so far:\r\n> The PostCSS processor in `svelte-preprocess` is returning a `SourceMapGenerator` instead of whatever the svelte compiler is expecting it to return. This `SourceMapGenerator` is coming directly from the `postcss` package. I'm not sure where exactly the `SourceMapGenerator` is supposed to turn into an actual source map, but that seems to be the missing step AFAICT.\r\n> \r\n> Update:\r\n> Looks like just changing the postcss transformer isn't sufficient.\r\n> \r\n> This is certainly not the exact right fix, but adding this in the Svelte `compiler.js` at line 28636, just before the call to `get_replacement` allows everything to build without errors:\r\n> \r\n> ```\r\n> if (processed.map?._mappings) {\r\n>     processed.map = processed.map.toString();\r\n> }\r\n> ```\r\n\r\nit's giving me `UnhandledPromiseRejectionWarning: /Users/jt/dev/code-challenges-sapper/node_modules/svelte/compiler.js:28636\r\n                                if (processed.map?._mappings) { \r\nSyntaxError: Unexpected token '.'`",
          "createdAt": "2020-11-25T22:15:37Z",
          "author": { "login": "jacobthesheep", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzk3MDIyNw==",
          "body": "Then your Node version is too old to support that syntax. You're probably better off just using Svelte 3.29 for now.",
          "createdAt": "2020-11-25T22:17:27Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzk4NzM1Mw==",
          "body": "Phew, glad I'm not alone. Also seems to be originating from `svelte-preprocess`.",
          "createdAt": "2020-11-25T23:18:58Z",
          "author": { "login": "nickreese", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDAxNTc1MQ==",
          "body": "> Then your Node version is too old to support that syntax. You're probably better off just using Svelte 3.29 for now.\r\n\r\nI'm using Svelte 3.17.3 ......",
          "createdAt": "2020-11-26T01:05:55Z",
          "author": { "login": "jacobthesheep", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDAyMjM3NA==",
          "body": "If you're seeing this bug, you're using Svelte 3.30. \r\n\r\nhttps://bytearcher.com/articles/semver-explained-why-theres-a-caret-in-my-package-json/",
          "createdAt": "2020-11-26T01:32:48Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDA4NTA1Ng==",
          "body": "It was explained: https://bytearcher.com/articles/semver-explained-why-theres-a-caret-in-my-package-json/\r\n\r\nThat `package.json` specifies `^3.17.3` which means get the latest 3.x release, which is 3.30. The actual version used is specified in the `package-lock.json`. Try `grep -r -A2 svelte package-lock.json`\r\n\r\nThe method this bug refers to did not exist until 3.30, which means you're either using 3.30 or encountering a different issue.",
          "createdAt": "2020-11-26T05:34:49Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDA5NzQzMw==",
          "body": "> It was explained: https://bytearcher.com/articles/semver-explained-why-theres-a-caret-in-my-package-json/\n> \n> \n> \n> That `package.json` specifies `^3.17.3` which means get the latest 3.x release, which is 3.30. The actual version used is specified in the `package-lock.json`. Try `grep -r -A2 svelte package-lock.json`\n> \n> \n> \n> The method this bug refers to did not exist until 3.30, which means you're either using 3.30 or encountering a different issue.\n\nDamn I didn't known it did that, thank you and sorry for being arrogant :/ \nIt worked with the ’~‘, thank you",
          "createdAt": "2020-11-26T06:15:12Z",
          "author": { "login": "jacobthesheep", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDE4OTUyNQ==",
          "body": "thanks for the bug ; )\r\n\r\n> The PostCSS processor in svelte-preprocess is returning a SourceMapGenerator instead of whatever the svelte compiler is expecting it to return. This SourceMapGenerator is coming directly from the postcss package.\r\n\r\npostcss is using this one\r\nhttps://github.com/mozilla/source-map/blob/master/lib/source-map-generator.js\r\n\r\nproblem is, this one cannot produce \"decoded\" mappings\r\nas the library remapping can consume\r\n\r\n> This is certainly not the exact right fix, but adding this in the Svelte compiler.js at line 28636, just before the call to get_replacement allows everything to build without errors:\r\n>\r\n>```\r\n>if (processed.map?._mappings) {\r\n>    processed.map = processed.map.toString();\r\n>}\r\n>```\r\n\r\n\r\nyes, that will fix the problem, at the cost of a slightly slower compile\r\n(unnessesary encode + decode steps)\r\na little less bad is\r\n\r\n```js\r\nprocessed.map = processed.map.toJSON();\r\n```\r\n\r\nthe fastest solution is to fork the `SourceMapGenerator._serializeMappings()` method\r\nand make it produce \"decoded\" mappings\r\n(and ideally push that feature to upstream ....)\r\n\r\n<details>\r\n\r\n```js\r\n// not tested but \"im feeling lucky\"\r\n\r\nimport { compareByGeneratedPositionsInflated } from 'source-map/lib/util';\r\n\r\nif (processed.map.constructor.name == 'SourceMapGenerator') {\r\n\r\n  /**\r\n   * patch function _serializeMappings()\r\n   * to return mappings in \"decoded\" format\r\n   */\r\n  processed.map._serializeMappings = function () {\r\n    let previousGeneratedLine = 1;\r\n    let result = [[]];\r\n    let resultLine;\r\n    let resultSegment;\r\n    let mapping;\r\n\r\n    // optimized\r\n    const sourceIdx = this._sources.toArray().reduce((acc, val, idx) => (acc[val] = idx, acc), {});\r\n    const nameIdx = this._names.toArray().reduce((acc, val, idx) => (acc[val] = idx, acc), {});\r\n\r\n    const mappings = this._mappings.toArray();\r\n    resultLine = result[0];\r\n\r\n    for (let i = 0, len = mappings.length; i < len; i++) {\r\n      mapping = mappings[i];\r\n\r\n      if (mapping.generatedLine > previousGeneratedLine) {\r\n        while (mapping.generatedLine > previousGeneratedLine) {\r\n          result.push([]);\r\n          previousGeneratedLine++;\r\n        }\r\n        resultLine = result[mapping.generatedLine - 1]; // line is one-based\r\n      } else if (i > 0) {\r\n        if (\r\n          !compareByGeneratedPositionsInflated(mapping, mappings[i - 1])\r\n        ) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      resultLine.push([mapping.generatedColumn]);\r\n      resultSegment = resultLine[resultLine.length - 1];\r\n\r\n      if (mapping.source != null) {\r\n        resultSegment.push(...[\r\n          //this._sources.indexOf(mapping.source),\r\n          sourceIdx[mapping.source], // optimized\r\n          mapping.originalLine - 1, // line is one-based\r\n          mapping.originalColumn\r\n        ]);\r\n        if (mapping.name != null) {\r\n          resultSegment.push(\r\n            //this._names.indexOf(mapping.name)\r\n            nameIdx[mapping.name] // optimized\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // call the patched function to get a \"decoded\" sourcemap\r\n  processed.map = processed.map.toJSON();\r\n}\r\n```\r\n\r\nnow who said monkey-patching is bad? ; )\r\n\r\n</details>\r\n\r\nedit: optimized indexOf to cache-object\r\nedit: bugfix for line numbers\r\nedit: add .toArray()\r\n",
          "createdAt": "2020-11-26T09:41:36Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDIzNDUwMQ==",
          "body": "I'm guessing the correct fix here is probably to detect malformed source maps from preprocessors and log an appropriate error for the user.",
          "createdAt": "2020-11-26T11:08:02Z",
          "author": { "login": "halfnelson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDY2Mzk4MA==",
          "body": "agree with @halfnelson, where svelte should handle malformed sourcemaps better with an appropriate error, \r\n\r\nand an actual fix the sourcemap would have to come from the upstream, postcss svelte preprocessor",
          "createdAt": "2020-11-27T06:12:43Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDY4NzgxMQ==",
          "body": "While this is true, I think we should also be pragmatic and handle this specific case because I don't think upstream will just change this , others may even rely on this specific behavior. ",
          "createdAt": "2020-11-27T07:24:48Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDcxODY0Nw==",
          "body": "\"malformed\" .. these are not malformed, but in a different \"decoded\" format, which is still better than getting encoded mappings (these must be decoded for remapping, which is sloooow, why [there should be a warning when svelte receives encoded mappings](https://github.com/milahu/svelte/blob/4870783c0111e15ee054d0023ca427a6c38738a0/src/compiler/utils/string_with_sourcemap.ts#L213-L235))\r\n\r\nwe already accept one \"decoded\" format (the \"dense array\" format that remapping supports), why not support another one? its not like there are millions of formats that we all must support .. i thought svelte people care about performance? (or when did the trolls take over?)",
          "createdAt": "2020-11-27T08:46:50Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDg3MDc2Mw==",
          "body": "Is there no standard decoded format?\r\n\r\nAre you saying that changing `SourceMapGenerator._serializeMappings()` upstream would produce the same decoded format we already accept or a new one?",
          "createdAt": "2020-11-27T14:50:20Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDkxNTg4Nw==",
          "body": "If it's from [source-map](https://github.com/mozilla/source-map) I doubt you'll get it merged upstream, it wasn't updated in over a year, the project is kind of \"finished\" it seems.",
          "createdAt": "2020-11-27T16:42:43Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDkyNTM2Ng==",
          "body": "> Is there no standard decoded format?\r\n\r\nno. [the spec](https://sourcemaps.info/spec.html) only defines the encoded format\r\n\r\nthe \"dense array\" format, as produced by magic-string (etc)\r\nand consumed by remapping (etc) is the result of\r\ndecoding the VLQ values directly into arrays\r\nfor example AAAA becomes [0, 0, 0, 0]\r\nonly relative indices are converted to absolute indices.\r\nthis format is also used by sourcemap-codec (decode, encode)\r\n\r\nSourceMapGenerator has a different format\r\nwhich is simply one long array of mapping objects\r\nline-numbers are one-based, etc\r\n\r\nthese formats are both [not ideal for remapping](https://github.com/Rich-Harris/sourcemap-codec/issues/82)\r\nbut still better than the encoded format\r\n\r\n> changing `SourceMapGenerator._serializeMappings()` upstream\r\n\r\nno, that function is needed to produce the encoded format\r\na new method could be added to produce the dense-array-format\r\n\r\nbut then, that format is not specified, and only a de-facto-standard\r\ncos some tools use it, with slight variation\r\nfor example, the `version` property is missing sometimes\r\nso ..\r\ni would say, its the consumer's job to have an import function\r\n\r\nmonkey-patching the `_serializeMappings` (see my 2nd last post)\r\nis just one quick-n-dirty way to do this\r\n\r\nif monkey-patching is too dirty, we could fork the toJSON method\r\n\r\n<details>\r\n\r\n```js\r\nfunction SourceMapGenerator_serializeMappings() {\r\n  // see my 2nd last post\r\n}\r\n\r\nfunction SourceMapGenerator_toJSON() {\r\n  const map = {\r\n    version: this._version,\r\n    sources: this._sources.toArray(),\r\n    names: this._names.toArray(),\r\n\r\n    // this is the only diff\r\n    //mappings: this._serializeMappings()\r\n    mappings: SourceMapGenerator_serializeMappings.apply(this)\r\n\r\n  };\r\n  if (this._file != null) {\r\n    map.file = this._file;\r\n  }\r\n\r\n  // these are probably not needed\r\n  if (this._sourceRoot != null) {\r\n    map.sourceRoot = this._sourceRoot;\r\n  }\r\n  if (this._sourcesContents) {\r\n    map.sourcesContent = this._generateSourcesContent(\r\n      map.sources,\r\n      map.sourceRoot\r\n    );\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n\r\nif (processed.map.constructor.name == 'SourceMapGenerator') {\r\n  processed.map = SourceMapGenerator_toJSON.apply(processed.map)\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\n",
          "createdAt": "2020-11-27T17:10:42Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTA1MjE3MQ==",
          "body": "Could we use your `_serializeMappings` within Svelte as a new method  which takes a `SourceMapGenerator` instead of monkey patching?",
          "createdAt": "2020-11-28T07:46:10Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTIwODcyMw==",
          "body": "yes, of course\r\n\r\ni would keep the `toJSON.apply(map)` syntax\r\nto keep [toJSON](https://github.com/mozilla/source-map/blob/7a263408de1b60e60b6220ca3e36d9b3e4aa047d/lib/source-map-generator.js#L404) and [_serializeMappings](https://github.com/mozilla/source-map/blob/7a263408de1b60e60b6220ca3e36d9b3e4aa047d/lib/source-map-generator.js#L318) similar to their original functions\r\n\r\nthe test could be changed to\r\n```js\r\nif (\r\n  processed.map._mappings &&\r\n  processed.map.constructor.name == 'SourceMapGenerator'\r\n) {\r\n  // import decoded mappings from mozilla/source-map\r\n```\r\n",
          "createdAt": "2020-11-28T09:54:40Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTM3NzUzOA==",
          "body": "Same issue here",
          "createdAt": "2020-11-29T11:21:06Z",
          "author": { "login": "flayks", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTQ3ODY4NQ==",
          "body": "Solved with `npm i -D svelte@3.29.7`",
          "createdAt": "2020-11-29T23:58:16Z",
          "author": { "login": "ParkYoungWoong", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNjA2NjgyMw==",
          "body": "This should be fixed in 3.30.1 - we now support source maps created by `SourceMapGenerator` from Mozilla's `source-map` library. Thanks @milahu!",
          "createdAt": "2020-11-30T21:27:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTA3NzI1Mzg=",
    "body": "**Describe the bug**\r\nI am not sure if this should work or if it's a feature request in the end.\r\n\r\nIt is easily possible to bind to a normal Object `{}` with \"keys\", but it seems not to be possible if i have a Map object. I have tried to simplify the repl as much as possible.\r\n\r\nWorks:\r\n```svelte\r\n\tconst id = 1;\r\n\t\r\n\tconst obj = {};\r\n\tobj[id] = {x: 0, y: 0};\r\n...\r\n<input type=\"range\" min=\"0\" max=\"100\" bind:value={obj[id].x} />\r\n````\r\n\r\nDoes not work:\r\n```svelte\r\n\tconst map = new Map();\r\n\tmap.set(id, {x: 50, y: 50});\r\n...\r\n<input type=\"range\" min=\"0\" max=\"100\" bind:value={map.get(id).x} />\r\n````\r\n\r\nFull repl see link.\r\n\r\n**To Reproduce**\r\nRepl:\r\nhttps://svelte.dev/repl/947950a2c1754c20a86c39f34924485a?version=3.30.0\r\n\r\n**Expected behavior**\r\nCan bind to object stored in Map\r\n\r\n**Severity**\r\nLow\r\n\r\n**Context**\r\nIn my real Application the Map object is a Store with lots of objects in it which I access by key. I wanted to do a performance comparison between Objects and Maps for my specific case.\r\n",
    "closedAt": null,
    "createdAt": "2020-11-25T12:21:54Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzc1NzYzMg==",
          "body": "Same thing with group binds and `Set` https://svelte.dev/repl/805638d52bc74bd38aac2655dd3a6455?version=3.30.0",
          "createdAt": "2020-11-25T14:58:19Z",
          "author": { "login": "sphinxc0re", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzc3ODY2OA==",
          "body": "@sphinxc0re The group binds and Set makes kind of sense that they don't work because you are not working against an array with normal array methods. I think this cannot work. \r\n\r\nMy case is different because i want to directly change the value of a specific property.",
          "createdAt": "2020-11-25T15:32:57Z",
          "author": { "login": "firewave-remo", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTA0NzQzNzM=",
    "body": "**Describe the bug**\r\nWhen a variable is bound to a slotted component, changing that variable within the slotted component causes any reactive statements inside the slotted component to trigger twice.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/df6fe28c60e84c26a141debf305ed114?version=3.30.0\r\n\r\n**Expected behavior**\r\nPressing the \"Update x\" button should cause only one `console.log` call, which is what happens when the `<Wrapper>` is removed.\r\n\r\n**Severity**\r\nLow — can work around this by using a [store](https://svelte.dev/tutorial/writable-stores) instead of binding.\r\n",
    "closedAt": null,
    "createdAt": "2020-11-25T05:39:23Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzU2MjcyNQ==",
          "body": "This is known complex types binding behavior.\r\nNothing to do with slotting.\r\nChange to primitive like number and it will work once.\r\n\r\n**Workarounds**\r\n\r\nBinding arrays: use immutable in child component like this.\r\nhttps://svelte.dev/repl/e4bd72b1ad5c4a4da4a76a32241ba180\r\n\r\nBinding objects fields:\r\n\r\n```javascript\r\n$: doSomething(obj.foo);\r\n\r\nlet prevFoo;\r\n$: if (obj.foo !== prevFoo ) {\r\n  prevFoo = obj.foo;\r\n  doSomething(obj.foo);\r\n}\r\n```\r\n\r\nor:\r\n\r\n```javascript\r\n$: foo = obj.foo;\r\n$: doSomething(foo);\r\n```",
          "createdAt": "2020-11-25T08:54:45Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzc1NzI4Ng==",
          "body": "> This is known complex types binding behavior.\r\n> Nothing to do with slotting.\r\n> Change to primitive like number and it will work once.\r\n\r\nI don't think this is true in this case. In the original repl, not using the slot by removing `<Wrapper>` changes the behavior from two `console.log` calls per \"Update x\" button press to one. Changing `x` to a primitive actually causes no `console.log` calls. (I suspect Svelte checks if the value has changed if it is a primitive, since the assignment in the original repl is just `x = x`.)",
          "createdAt": "2020-11-25T14:57:47Z",
          "author": { "login": "zqianem", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzM2NTYwOQ==",
          "body": "This Stack Overflow Question [Why Svelte component updated variable, where in reality it didn't changed?\r\n](https://stackoverflow.com/questions/67995263/why-svelte-component-updated-variable-where-in-reality-it-didnt-changed) could be related.",
          "createdAt": "2021-06-17T16:02:39Z",
          "author": { "login": "al6x", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NTAxODgxMTA=",
    "body": "**Describe the bug**\r\nA never-ending reactive statement will occur if you add `bind:this={inputs[i]}` to the radio input in my attached REPL.\r\n\t\t\r\nThings that fix the problem:\r\n- using non-keyed `each` instead of keyed\r\n- setting `_options` inside of `buildOptions` functions instead of setting it in the reactive statement\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/d66885914acb4a02be11e43f145464e0?version=3.30.0\r\n\r\n**Expected behavior**\r\nadding `bind:this={inputs[i]}` without changing anything else in the REPL should not result in never-ending reactive statement.\r\n\r\n**Your browser and the version**: Chrome 87.0.4280.66 (Official Build) (64-bit)\r\n\r\n**Your operating system**: Win10\r\n\r\n**Severity**\r\nHas work-arounds",
    "closedAt": null,
    "createdAt": "2020-11-25T00:28:41Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzM2Nzk2OA==",
          "body": "I had left in one of my fixes...updated REPL now. Sorry bout that",
          "createdAt": "2020-11-25T00:33:58Z",
          "author": { "login": "JohnnyFun", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDk2NDA3Nzg=",
    "body": "When using localStorage or sessionStorage in repl, it gives a sandbox error.\r\n\r\nFailed to read the 'localStorage' property from 'Window': The document is sandboxed and lacks the 'allow-same-origin' flag.\r\nFailed to read the 'sessionStorage' property from 'Window': The document is sandboxed and lacks the 'allow-same-origin' flag.\r\n\r\nTo Reproduce:\r\nreference localStorage or sessionStorage in any way.\r\nhttps://svelte.dev/repl/336bb0471ac84619aacbdfd143c61c7b?version=3\r\n\r\nExpected behavior:\r\nError: localStorage/sesionStorage dont work.\r\n\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\nSystem info:\r\n86.0.4240.198 (Official Build) (64-bit) (cohort: Stable)\r\nWindows 10\r\nsvelte 3\r\n\r\nWebpack or Rollup: na\r\n\r\nSeverity:\r\nannoying\r\n",
    "closedAt": "2020-11-24T12:09:22Z",
    "createdAt": "2020-11-24T11:53:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjkyODQ4MQ==",
          "body": "This is a security measure of the browser and there (for good reason) isn't a way to circumvent it.",
          "createdAt": "2020-11-24T12:09:22Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDkzMzkzNTQ=",
    "body": "**Describe the bug**\r\nI can't create a new typescript project with the default template\r\n\r\n**Logs**\r\n```\r\n➜  svelte-ts git:(master) ✗ yarn dev\r\nyarn run v1.22.10\r\nwarning package.json: No license field\r\n$ rollup -c -w\r\nrollup v2.33.3\r\nbundles src/main.ts → public/build/bundle.js...\r\n[!] (plugin svelte) Error: Unrecognized option 'preprocess'\r\nsrc/App.svelte\r\nError: Unrecognized option 'preprocess'\r\n    at /home/ray/test/svelte-ts/node_modules/svelte/src/compiler/compile/index.ts:40:10\r\n    at Array.forEach (<anonymous>)\r\n    at validate_options (/home/ray/test/svelte-ts/node_modules/svelte/src/compiler/compile/index.ts:34:23)\r\n    at compile (/home/ray/test/svelte-ts/node_modules/svelte/src/compiler/compile/index.ts:75:2)\r\n    at Object.transform (/home/ray/test/svelte-ts/node_modules/rollup-plugin-svelte/index.js:105:21)\r\n    at /home/ray/test/svelte-ts/node_modules/rollup/dist/shared/rollup.js:18734:25\r\n```\r\n\r\n**To Reproduce**\r\n```sh\r\nnpx degit sveltejs/template svelte-ts\r\ncd svelte-ts\r\nyarn\r\nyarn dev\r\n```\r\n\r\n**Expected behavior**\r\na new empty svelte project with typescript\r\n\r\n**Information about your Svelte project:**\r\n  System:\r\n    OS: Linux 5.4 Ubuntu 20.04.1 LTS (Focal Fossa)\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz\r\n    Memory: 5.24 GB / 15.39 GB\r\n    Container: Yes\r\n    Shell: 5.8 - /usr/bin/zsh\r\n  Binaries:\r\n    Node: 14.15.0 - ~/.nvm/versions/node/v14.15.0/bin/node\r\n    Yarn: 1.22.10 - ~/.nvm/versions/node/v14.15.0/bin/yarn\r\n    npm: 6.14.8 - ~/.nvm/versions/node/v14.15.0/bin/npm\r\n  Browsers:\r\n    Chrome: 87.0.4280.66\r\n    Firefox: 83.0\r\n  npmPackages:\r\n    rollup: ^2.3.4 => 2.33.3 \r\n    svelte: ^3.0.0 => 3.29.7 \r\n\r\n**Severity**\r\nIt's nothing serious but a bit sad not being able to test it :(\r\n",
    "closedAt": "2020-11-24T04:52:31Z",
    "createdAt": "2020-11-24T04:50:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjY1MTkwMw==",
          "body": "Duplicate of https://github.com/sveltejs/template/issues/190",
          "createdAt": "2020-11-24T04:52:31Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDkxNjcwNDQ=",
    "body": "**Describe the bug**\r\nGet an error when I use a BigInt value like 123n in a Svelte component.\r\n\r\n**Logs**\r\nTypeError: BigInt value can't be serialized in JSON\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a2abc0f5d97046b495499dd6fde025fe?version=3.29.7\r\n\r\n**Expected behavior**\r\nWe can use BigInts values in Svelte.\r\n\r\n**Notes**\r\nTop relevant search item on Google:\r\nhttps://github.com/GoogleChromeLabs/jsbi/issues/30",
    "closedAt": null,
    "createdAt": "2020-11-23T22:16:19Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjQ3ODIyOA==",
          "body": "I've created https://github.com/Rich-Harris/code-red/issues/54 for a related code-red bug I just bumped into while investigating this, which will need to be fixed to implement this properly, but there's more going on here than just that.",
          "createdAt": "2020-11-23T23:07:47Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTU3NjQyMA==",
          "body": "This is really a blocker for me. I simply can't use svelte if it doesn't support BigInts.\r\n\r\nActually, it seems to work if you use `BigInt(number)`, however it doesn't support the notation `123n`\r\n\r\nSo workaround is to use `BigInt(123)` instead of `123n`",
          "createdAt": "2020-12-06T22:34:28Z",
          "author": { "login": "zimmah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTc0NTY0Mg==",
          "body": "Yeah I noticed that workaround too. I should have documented it, sorry.\r\n\r\nAnyhows the fix is pending merge it seems: https://github.com/Rich-Harris/code-red/pull/55",
          "createdAt": "2020-12-07T08:02:56Z",
          "author": { "login": "samal-rasmussen", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzEzNDc0OQ==",
          "body": "Do you have this issue?\r\n`console.log(BigInt(Number.MAX_SAFE_INTEGER) + 2n);`\r\nwill raise an error like:\r\n`Cannot mix BigInt and other types, use explicit conversions`\r\n\r\nBut this is totally legal in browsers.",
          "createdAt": "2021-04-26T20:44:06Z",
          "author": { "login": "krave1986", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzM3NDc1MQ==",
          "body": "As of version 3.36.0+ it now casts `1234n` into `1234`, silently changing the type from `bigint` to `number`, which of course means it's not really a BigInt.\r\n\r\n- Svelte 3.36+ will silently treat`9007199254740993n` as a number, resulting in `9007199254740992`\r\n- Svelte 3.35 and below will behave as in the original issue",
          "createdAt": "2021-04-27T07:17:27Z",
          "author": { "login": "GrygrFlzr", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDg2MTExOTQ=",
    "body": "**Describe the bug**\r\n\r\nI have an Eleventy site that uses Svelte as it's template engine. I have an option flag to disable the client side JS bundle, which lead to me noticing that the UI is broken in some cases when only using the SSR'd version.\r\n\r\nDOM elements are not rendered in correct places. It's hard to reproduce with the REPL since the bug is only apparent in the SSR version, so I took some screenshots of the generated html:\r\n\r\n**SSR:**\r\n\r\n![Screenshot 2020-11-23 at 10 53 31](https://user-images.githubusercontent.com/17210302/99943675-562d4700-2d7a-11eb-8055-544d51fd6f5b.png)\r\n_(watch out for the duplicated `<a>` element)_\r\n\r\n**Client:**\r\n\r\n![Screenshot 2020-11-23 at 10 54 46](https://user-images.githubusercontent.com/17210302/99943693-5cbbbe80-2d7a-11eb-90fe-2b6113734382.png)\r\n\r\nThe client version is correctly rendered, but the SSR version is not. It somehow duplicates the `<a>` element and misplaces other element.\r\n\r\nThe code for this specific component is here:\r\n\r\n```svelte\r\n<script>\r\n  import Datestamp from './Datestamp.svelte';\r\n  import Pill from './Pill.svelte';\r\n\r\n  export let publishedAt;\r\n  export let slug;\r\n  export let title;\r\n  export let tags = [];\r\n</script>\r\n\r\n<div>\r\n  <a href=\"/blogi/{slug.current}\" class=\"block md:flex hover:bg-secondary-100 p-3\">\r\n    <div class=\"text-tertiary-400\">\r\n      <Datestamp {publishedAt}/>\r\n    </div>\r\n    <div class=\"content ml-4 flex flex-col\">\r\n      <h3 class=\"text-2xl lg:text-3xl font-extrabold text-secondary-800\">{title}</h3>\r\n      <div class=\"mt-auto\">\r\n        <div class=\"mt-4\">\r\n          {#each tags as tag}\r\n            <Pill href=\"/tagit/{tag}\">{tag}</Pill>\r\n          {/each}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </a>\r\n</div>\r\n\r\n```\r\n\r\n\r\n\r\n\r\n**To Reproduce**\r\n\r\nI made a REPL of another component in our site that suffered from the same problem: https://svelte.dev/repl/1c9a6d3326674f85b0b5246e209bf350?version=3.29.7\r\n\r\nHowever, since it's only happening in SSR, you can't really see the issue in the REPL. \r\n\r\n**Expected behavior**\r\nI expected the SSR version to match the client version in DOM structure.\r\n\r\n**Information about your Svelte project:**\r\nTo make your life easier, just run `npx envinfo --system --npmPackages svelte,rollup,webpack --binaries --browsers` and paste the output here.\r\n\r\n- Your browser and the version: latest Chrome\r\n\r\n- Your operating system: Mac Os Mojave\r\n\r\n- Svelte version: 3.29.7\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nSevere, out site is supposed to be a static site with only small amounts of JS sprinkled on top, so with this bug, I cannot use Svelte reliably.\r\n",
    "closedAt": "2020-11-25T09:02:49Z",
    "createdAt": "2020-11-23T09:02:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzUzODY0NQ==",
          "body": "Seems like the problem was caused by nested `<a>` -elements. When nesting anchor tags, by mistake obviously, SSR bundle creates a different structure of DOM elements than the client bundle.\r\n\r\nTo close or not to close?",
          "createdAt": "2020-11-25T08:07:42Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzU2NjkwOA==",
          "body": "There's already an old issue for this sort of thing - #1686 - so closing this one.",
          "createdAt": "2020-11-25T09:02:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDgzOTI2MTY=",
    "body": "**Describe the bug**\r\nImporting a module with the same name as a HTML element causes Svelte to issue a warning about the element being treated as HTML unless it begins with a capital.\r\n\r\n**Logs**\r\nExample:\r\n```sh\r\n<section> will be treated as an HTML element unless it begins with a capital letter\r\n```\r\n\r\n**To Reproduce**\r\nImport any module with the name of an HTML element, then use that HTML element in Svelte markup.\r\n\r\nEg:\r\n\r\n```svelte\r\n<script>\r\n  import { section } from '../styles/mixins.ts';\r\n</script>\r\n\r\n<section class={section}>\r\n ...\r\n</section>\r\n```\r\n\r\n**Expected behavior**\r\nSvelte should not issue warnings about HTML element usage if the module imported was not a Svelte component.\r\n\r\n\r\n**Information about your Svelte project:**\r\n System:\r\n    OS: macOS 11.0.1\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\r\n    Memory: 549.42 MB / 16.00 GB\r\n    Shell: 5.7.1 - /usr/local/bin/zsh\r\n  Binaries:\r\n    Node: 12.6.0 - /usr/local/bin/node\r\n    Yarn: 1.22.4 - ~/.yarn/bin/yarn\r\n    npm: 6.9.0 - /usr/local/bin/npm\r\n  Browsers:\r\n    Chrome: 86.0.4240.198\r\n    Firefox: 74.0\r\n    Safari: 14.0.1\r\n  npmPackages:\r\n    svelte: ^3.17.3 => 3.29.0 \r\n\r\n\r\nUsing Webpack\r\n\r\n**Severity**\r\nMerely annoying. Just adds extra console noise, no impact on usage at all.\r\n",
    "closedAt": null,
    "createdAt": "2020-11-23T00:41:34Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTg4MzkxMw==",
          "body": "This came up before in #5570. I don't know what would be a better option for a reasonable heuristic for this warning.",
          "createdAt": "2020-11-23T01:18:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjUxNDAyOQ==",
          "body": "Is the warning even that necessary? If it's getting triggered by simple use-cases like this I think it's more of a hinderance than a help in DX. At least providing a way to opt-out of it would be good. Because anyone coming from a JSX-like syntax will be familiar with needing uppercased components, and Svelte can (does?) document the need for uppercase components during the starter tutorial.\r\n\r\nI know I was surprised to see the warning at all.\r\n\r\nEDIT — I see you can disable the warning on a per-line basis with comments, but that seems clunky for something that IMO is flaky and unnecessary. Would be great if we could opt out at a global level, or just remove it entirely. Does the Svelte team have data on how common a problem it is to warn against?",
          "createdAt": "2020-11-24T00:58:48Z",
          "author": { "login": "madeleineostoja", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODUyNTc2Ng==",
          "body": "![Screenshot 2020-12-19 at 9 12 52 pm](https://user-images.githubusercontent.com/2401925/102699742-00e03a80-423f-11eb-9b85-a3c744470266.png)\r\nim being flagged for images, not too sure why",
          "createdAt": "2020-12-19T21:13:35Z",
          "author": { "login": "matt3224", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODU2NzI5OA==",
          "body": "`<a><img><div>`  are the ending tags on proper order?",
          "createdAt": "2020-12-20T05:48:00Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODYzMTM4Mw==",
          "body": "they are yes",
          "createdAt": "2020-12-20T16:45:37Z",
          "author": { "login": "matt3224", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQ2Mzk2MA==",
          "body": "Ok so i'm a dope, there was a helper function called `img` 😅 which makes a heck of a lot more sense considering the warnings! (this message is mostly for my future self)",
          "createdAt": "2021-01-02T11:44:33Z",
          "author": { "login": "matt3224", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NzExMzMwNQ==",
          "body": "Same bug. If the import commented out the warning dissapears.\r\n\r\n<img width=\"733\" alt=\"Screen Shot 2021-06-08 at 11 34 30 pm\" src=\"https://user-images.githubusercontent.com/94196/121253768-2e36a880-c8b2-11eb-9da2-74a97912a921.png\">\r\n",
          "createdAt": "2021-06-08T20:35:31Z",
          "author": { "login": "al6x", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDgzNzk3MTk=",
    "body": "#### Scenario:\r\nright now, I have full-page loading app and adding svelte component was a breeze:\r\n\r\n```js\r\nimport TestComponent from './admin/svelte/test.svelte';\r\n\r\nnew TestComponent({\r\n    target: document.querySelector('.app-test'),\r\n});\r\n```\r\n\r\nI couldn't be happier! But when ``<div class=\"app-test\"></div>`` is created dynamically and injected into page; nothing happens.\r\n\r\nIt is pretty much what I expected anyways. \r\n\r\nI use [selector-observer ](https://github.com/josh/selector-observer) that triggers whenever some selector is added/removed from page. So my JS became:\r\n\r\n```js\r\nimport {observe} from 'selector-observer'\r\nimport TestComponent from './admin/svelte/test.svelte';\r\n\r\nobserve('.app-test', {\r\n    add(el) {\r\n        new TestComponent({\r\n            target: el,\r\n        });\r\n    }\r\n});\r\n```\r\n\r\nand again; *perfection*, all worked! This would allow me to keep full-page loading (has some advantages in my scenario) and yet, I can add components dynamically. This worked with multiple ``div`` elements, each was new instance.\r\n\r\n\r\nBecause it worked so easy, I have to ask;\r\n\r\n#### is what I am doing wrong/stupid/dangerous?\r\n\r\n---\r\n\r\nSorry to ask but I did try to find answer but none of them was as simple as above.\r\n",
    "closedAt": "2020-11-22T23:56:52Z",
    "createdAt": "2020-11-22T23:44:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTg2OTEzOA==",
          "body": "Looks fine to me. As long as you're using the [API](https://svelte.dev/docs#Creating_a_component) correctly, you should be good to go. One thing I would say, which may or may not affect your use case, is that you'll likely have a memory leak if you ever remove these containers from the page but don't call `$destroy()` on their components.",
          "createdAt": "2020-11-22T23:56:52Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTg2OTY5NA==",
          "body": "> but don't call $destroy() on their components.\r\n\r\nI was thinking about that and ``selector-observer`` has the remove event where I can put this call.\r\n\r\nThanks, svelte will solve tons of issues when barba.js or turbolinks.js is added.",
          "createdAt": "2020-11-23T00:01:08Z",
          "author": { "login": "zmitic", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODAyODA5NQ==",
          "body": "If anyone stumbles upon this, here is the final code for real component:\r\n\r\n```html\r\n<svelte-watch-live\r\n    data-obstructions-url=\"http://example.com/url1\"    <!-- URL is dynamically generated by backend -->\r\n    data-feed-url=\"http://example.com/url2\">           <!-- URL is dynamically generated by backend -->\r\n</svelte-watch-live>\r\n```\r\n\r\n\r\n```js\r\nimport {observe} from 'selector-observer'\r\n\r\nlet wk = new WeakMap();\r\n\r\nobserve('svelte-watch-live', {\r\n    add(el) {\r\n        import('./watch_live_event.svelte').then(({default: WatchLive}) => {\r\n            let component = new WatchLive({\r\n                target: el,\r\n                props: {\r\n                    feedUrl: el.getAttribute('data-feed-url'),\r\n                    obstructionsUrl: el.getAttribute('data-obstructions-url'),\r\n                },\r\n            });\r\n            wk.set(el, component);\r\n        })\r\n    },\r\n    remove(el) {\r\n        let component = wk.get(el);\r\n        component.$destroy();\r\n        wk.delete(el);\r\n    }\r\n});\r\n```\r\n\r\n---\r\n\r\nWhat happens here is that ``selector-observer`` will detect ``<svelte-watch-live>`` in HTML, create component, inject some props to it and connect element and component via WeakMap.\r\n\r\nWhen element gets removed (some JS, or libs like barba, swup, turbolinks...), component is found from weakmap and manually destroyed. Tested it, works w/o problems. \r\n",
          "createdAt": "2020-12-03T14:27:56Z",
          "author": { "login": "zmitic", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDgzNzY4NTU=",
    "body": "## Bug Description\r\n[**Generated identifiers**](https://github.com/sveltejs/svelte/issues/419) are not consistent throughout code.\r\n\r\n**Example:**  \r\n(*from generated `App.svelte.js` via `svelte-loader`*)\r\n```\r\nconst core_1 = require(\"@apollo/client/core\"); // defined as `core_1`\r\nconst client = new core_2.ApolloClient({});    // ReferenceError: `core_2` is not defined\r\n```\r\n\r\n## Severity\r\n\r\nHigh, blocks usage of Svelte entirely.\r\n\r\n## Logs / Reference\r\n- [**App.svelte.js**](https://github.com/enteleform-issues/Svelte--5709/blob/main/debug/App.svelte.js#L32-L48)\r\n- [**ChromeDevTools.log**](https://github.com/enteleform-issues/Svelte--5709/blob/main/debug/ChromeDevTools.log)\r\n\r\n## To Reproduce\r\n\r\n* [**github.com/enteleform-issues/Svelte--5709**](https://github.com/enteleform-issues/Svelte--5709)\r\n\r\n## System / Project Info\r\n\r\n```\r\n  System:\r\n    OS:     Windows 10 10.0.19041\r\n    CPU:    (8) x64 Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz\r\n    Memory: 35.37 GB / 63.96 GB\r\n  Binaries:\r\n    Node: 15.2.1 - D:\\Dev\\NodeJS\\15\\node.EXE\r\n    npm:  7.0.8  - D:\\Dev\\NodeJS\\15\\npm.CMD\r\n    Yarn: 1.22.4 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n  Browsers:\r\n    Chrome: 86.0.4240.198\r\n  npmPackages:\r\n    svelte:  ^3.29.7 => 3.29.7\r\n    webpack: ^5.6.0  => 5.6.0\r\n```\r\n",
    "closedAt": "2020-11-22T23:37:27Z",
    "createdAt": "2020-11-22T23:29:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTg2NjYyNA==",
          "body": "This isn't related to #419. Svelte isn't generating those names, webpack is. The output from the Svelte compiler for that component is something like:\r\n\r\n```js\r\n/* App.svelte generated by Svelte v3.29.7 */\r\nimport {\r\n\tSvelteComponent,\r\n\tdetach,\r\n\telement,\r\n\tinit,\r\n\tinsert,\r\n\tnoop,\r\n\tsafe_not_equal\r\n} from \"svelte/internal\";\r\n\r\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client/core\";\r\nimport { setClient } from \"svelte-apollo\";\r\n\r\nfunction create_fragment(ctx) {\r\n\tlet template;\r\n\r\n\treturn {\r\n\t\tc() {\r\n\t\t\ttemplate = element(\"template\");\r\n\t\t\ttemplate.innerHTML = `<main><h1>Todos</h1></main>`;\r\n\t\t},\r\n\t\tm(target, anchor) {\r\n\t\t\tinsert(target, template, anchor);\r\n\t\t},\r\n\t\tp: noop,\r\n\t\ti: noop,\r\n\t\to: noop,\r\n\t\td(detaching) {\r\n\t\t\tif (detaching) detach(template);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction instance($$self) {\r\n\tconst client = new ApolloClient({\r\n\t\t\turi: \"https://graphql.fauna.com/graphql\",\r\n\t\t\tcache: new InMemoryCache(),\r\n\t\t\theaders: {\r\n\t\t\t\tauthorization: \"Basic <__AUTHORIZATION_KEY__>=\"\r\n\t\t\t}\r\n\t\t});\r\n\r\n\tsetClient(client);\r\n\treturn [];\r\n}\r\n\r\nclass App extends SvelteComponent {\r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, {});\r\n\t}\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nand anything beyond that is how webpack decides to handle the `import` statements.\r\n\r\nYou're welcome to ask in chat or on StackOverflow about your webpack configuration, but this isn't an issue in Svelte.",
          "createdAt": "2020-11-22T23:37:27Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDgzNDk4Mjg=",
    "body": "I like to have a declaration of passed props to component on top of `script` tag, but I think that `export let propName` should work the same way as a `$:` label - so it doesn't matter where it is declared(ATM, compiler shows an error \"Cannot access 'propName' before initialization\")\r\n\r\nhttps://svelte.dev/repl/5f99a803098c4a26a3502c9dad8e44b3?version=3.29.7\r\n\r\nOf course, if you force developers to write all `export let propName`  above their code, it may preserve readability, which in some cases may get worse due to mixing custom logic and props declaration, but still I think it would be good to prioritize the execution of Svelte's prop declaration before other code",
    "closedAt": "2020-11-27T09:28:01Z",
    "createdAt": "2020-11-22T21:05:26Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDczNzUxNg==",
          "body": "This is how JavaScript works.\r\n\r\nYou can't access `prop1` in the example, before you declare it later on `export let prop1;`\r\n\r\nfor more details on this behavior, you can read up on \"Temporal Dead Zone\"\r\n- https://exploringjs.com/es6/ch_variables.html#sec_temporal-dead-zone\r\n- https://2ality.com/2015/10/why-tdz.html\r\n- https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth",
          "createdAt": "2020-11-27T09:28:01Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDk5NTAyMA==",
          "body": "> This is how JavaScript works.\r\n> for more details on this behavior, you can read up on \"Temporal Dead Zone\"\r\n\r\nI know what the temporal dead zone is, and also in normal js I use `export` to make value exportable **from** the module.\r\nSvelte(and only Svelte, as I know), however, changes this behavior. \r\n\r\nMy words are confirmed by the fact that there is no word about temporal dead zone for `export`'s values in any of your articles. Because only Svelte overloads export to declare props.\r\n\r\nFor me `export let/const` is as svelte's syntax as `$:` label and variables inside the `$:` are always declared before other code use it, so I see no reason NOT to do the same for `export`",
          "createdAt": "2020-11-27T21:37:26Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTkxMTExOA==",
          "body": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Tumbleweed_rolling.jpg/1280px-Tumbleweed_rolling.jpg",
          "createdAt": "2020-12-07T13:15:02Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDgxODMwOTA=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\ntransferring the store through the slot and subscribing to it immediately\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**How important is this feature to you?**\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n```\r\n<Wrapper queryString={products} let:response>\r\n    {#each $response.data.products as product}\r\n    <input\r\n      type=\"text\"\r\n     \r\n      bind:value={product.product_locales[0].name} />\r\n     \r\n  {/each}\r\n</Wrapper>\r\n```\r\n",
    "closedAt": null,
    "createdAt": "2020-11-22T06:46:36Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTcxNDI4MQ==",
          "body": "You want to take data from the store and pass down to slots?",
          "createdAt": "2020-11-22T08:17:52Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTcyODgyOQ==",
          "body": "Yes",
          "createdAt": "2020-11-22T10:47:59Z",
          "author": { "login": "timeshift92", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTc0MzI3MA==",
          "body": "This should already be possible with normal stores, can you explain a bit more?",
          "createdAt": "2020-11-22T12:50:43Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTc1NzUzOA==",
          "body": "yes i create example \r\nhttps://svelte.dev/repl/e3573bcfece54b18ba4d00377094fe7e?version=3.29.7",
          "createdAt": "2020-11-22T14:35:07Z",
          "author": { "login": "timeshift92", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTgxMTAxOQ==",
          "body": "I do not know what to comment on this, but I would do it like this and I am\nnot sure about what advantages you get by having wrapper components have\naccess to store variables.\n\nExample:\nhttps://svelte.dev/repl/5c765d127b8b4891a0456469622ddd7b?version=3.29.7\n\nOn Sun, Nov 22, 2020 at 8:05 PM timeshift92 <notifications@github.com>\nwrote:\n\n> yes i create example\n> https://svelte.dev/repl/e3573bcfece54b18ba4d00377094fe7e?version=3.29.7\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5707#issuecomment-731757538>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AA55UJLHP7XFOLVTSVIC6XDSREOSTANCNFSM4T6JFSRQ>\n> .\n>\n",
          "createdAt": "2020-11-22T18:44:09Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTg5MjI2Mg==",
          "body": "I wanted to wrap requests to add a spinner there and other chips for the request",
          "createdAt": "2020-11-23T02:05:53Z",
          "author": { "login": "timeshift92", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzU2ODM0MA==",
          "body": "I strongly need this too. A top-level shared store is not a solution because the store is created inside a Wrapper instance in my case (and must remain incapsulated in the Wrapper).\r\n\r\nMy component gets a custom template fragment with input controls as a slot and values of these controls must be bound to a store data of component instance (e.g. svelte-forms-lib expects that all input field values will be bound to a 'form' store instance). Same example as in the first post.",
          "createdAt": "2020-11-25T09:04:36Z",
          "author": { "login": "kkarpeev", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODU4ODg2OQ==",
          "body": "> ```\r\n> <Wrapper queryString={products} let:response>\r\n>   {#each $response.data.products as product}\r\n>     <input\r\n>       type=\"text\"\r\n>       bind:value={product.product_locales[0].name} />\r\n>   {/each}\r\n> </Wrapper>\r\n> ```\r\n\r\n~~If you use `<slot response={$store} />` in the `Wrapper` component, then `response` is the stores state.\r\nSo you should be able to use this state as a normal object.~~\r\n\r\nEdit: nevermind, `Cannot bind to a variable declared with the let: directive`",
          "createdAt": "2020-12-04T06:13:11Z",
          "author": { "login": "PatrickG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTU3NzYzMw==",
          "body": "> > ```\r\n> > <Wrapper queryString={products} let:response>\r\n> >   {#each $response.data.products as product}\r\n> >     <input\r\n> >       type=\"text\"\r\n> >       bind:value={product.product_locales[0].name} />\r\n> >   {/each}\r\n> > </Wrapper>\r\n> > ```\r\n> \r\n> ~If you use `<slot response={$store} />` in the `Wrapper` component, then `response` is the stores state. So you should be able to use this state as a normal object.~\r\n> \r\n> Edit: nevermind, `Cannot bind to a variable declared with the let: directive`\r\n\r\nWhy not see please this repl\r\nhttps://svelte.dev/repl/3fce1cbfbeae438e8eddc3cf4a0f4add?version=3.31.0",
          "createdAt": "2020-12-09T07:01:43Z",
          "author": { "login": "timeshift92", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDgwNTc1NjQ=",
    "body": "I'm writing a native web component using Svelte which is a wrapper around an edit field:\r\n```javascript\r\n<script>\r\nexport let value = \"Default Value\";\r\n</script>\r\n<main>\r\n<input type=\"text\" bind:value={value} />\r\n</main>\r\n```\r\n\r\nI can set the value, which properly updates the textbox.\r\n\r\nI then type stuff into the textbox, which updates `value`, which I can verify by using `document.getElementById(\"my-component\").value`.\r\n\r\nHowever, when I get the value of my component using `document.getElementById(\"my-component\").getAttribute(\"value\")`, it returns the last value that I set using `setAttribute(\"value\", \"Some other value\")`.\r\n\r\n\r\nIt doesn't return the actual `value` property on the component that got updated when I typed stuff into the textbox.\r\n\r\nHow can I keep the attribute and property in sync, or is there not a way to do this?\r\n\r\nThis is when I compile my component as a native web component.",
    "closedAt": null,
    "createdAt": "2020-11-21T17:00:38Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzUzOTUyMg==",
          "body": "I see this more generally: any change to a prop of a web component (e.g., adding `value = 'foo';` at the bottom of your script) does not propagate to the component, either as a property or an attribute.\r\n\r\nDid you make any progress on this, @munawarb?",
          "createdAt": "2021-06-17T20:22:41Z",
          "author": { "login": "richnew10", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2Mzk1MTQ4Mw==",
          "body": "Hi @richnew10, No, I haven't looked further into this. We ended up just using the property names instead of attributes since it's consistent and we don't get the out-of-sync problem.",
          "createdAt": "2021-06-18T10:55:30Z",
          "author": { "login": "munawarb", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDEwNzg1Ng==",
          "body": "Svelte won't reflect property changes to the corresponding attribute automatically. You have to do that yourself, which is a little tricky since there isn't a defined way to get the current custom element instance (see #3091). You can work around it using the `get_current_component` internal API, but this could change behavior without warning because it's not intended for external use.\r\n\r\nHere's an example of updating the element's name attribute when the property changes. Clicking the button will set the `<my-el>` name property to true as well as the attribute.\r\n```html\r\n<script>\r\n\texport let name;\r\n\r\n\timport { get_current_component } from 'svelte/internal';\r\n\r\n\t$: get_current_component().setAttribute('name', name);\r\n</script>\r\n\r\n<svelte:options tag=\"my-el\"></svelte:options>\r\n\r\n<p>Hello {name}</p>\r\n<button on:click={() => name = 'test'}>Update name</button>\r\n```\r\n\r\nThis would be a nice feature to have built in for those authoring custom elements in Svelte. Other frameworks like [Lit](https://lit.dev/docs/components/properties/#reflected-attributes) make it easy.\r\n\r\n> I see this more generally: any change to a prop of a web component (e.g., adding value = 'foo'; at the bottom of your script) does not propagate to the component, either as a property or an attribute.\r\n\r\n@richnew10 I do see the property being updated on the custom element in my example, i.e. `document.querySelector('my-el').name` returns `test` after clicking the button. Are you seeing something different?",
          "createdAt": "2021-06-18T15:11:02Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDE4NDQyOQ==",
          "body": "> Are you seeing something different?\r\n\r\nI was, but I think it was an order of execution thing: Svelte seems to bind props _after_ the contents of a component's `<script>` tag runs, and so my testing approach was flawed. I can reproduce the expected behavior that you described, thanks.",
          "createdAt": "2021-06-18T17:35:53Z",
          "author": { "login": "richnew10", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDgwMzQyMTQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThe path for the API Docs is currently [/docs](https://svelte.dev/docs) which can be surprising given the other pages:\r\n\r\n- Tutorial = tutorial\r\n- API = **docs**\r\n- Examples = examples\r\n- REPL = repl\r\n- Blog = blog\r\n- FAQ = faq\r\n\r\n**Describe the solution you'd like**\r\nI'd propose renaming the path to \"/api\" and adding a redirect (301 permanent) from the current \"svelte.dev/docs\".\r\n\r\n**Describe alternatives you've considered**\r\nThe least source of friction would be to do the reverse, by keeping it as \"/docs\" and adding a new redirect from \"svelte.dev/api\". I'd suggest doing that as a minimum. People can of course also just go to \"svelte.dev\" and then click the nav link, or simply Ask Jeeves for \"svelte api\" and click the first result.\r\n\r\n**How important is this feature to you?**\r\nSeeing a 404 evidently doesn't tear the ground asunder; it's just a mild inconvenience when you visit \"svelte.dev/api\" but I believe this is a logical change.\r\n\r\n**Additional context**\r\nI'll do the PR if thoughts agree.",
    "closedAt": null,
    "createdAt": "2020-11-21T14:52:40Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTM0MjcxOQ==",
          "body": "Thanks for pointing this out. I think we'd rather do the reverse and rename the text to be \"Docs\" or \"Documentation\"",
          "createdAt": "2020-11-29T04:43:48Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNjIxNDUwMw==",
          "body": "Agreed. That is content-facing so I was wary of suggesting too visible a change, but I think that is the best approach mentioned too. I'll put the PR in soon!",
          "createdAt": "2020-12-01T04:45:50Z",
          "author": { "login": "ronvoluted", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDY5MDAzMjE=",
    "body": "**Describe the bug**\r\nIn my `App.svelte` I use a `svelte:component` to always render the current `$screen` and only the `footer` with the `Menu` component in some cases.\r\n\r\n```svelte\r\n<script>\r\n    import { screen } from '../store.js' // current screen: Login, Profile, etc\r\n    import Login from './Login.svelte'\r\n    import Menu from '../components/Menu.svelte'\r\n\r\n    // Screens with Menu\r\n    const screens_menu = ['Payments']\r\n\r\n    // Default screen\r\n    $screen = Login\r\n</script>\r\n\r\n<main>\r\n    <svelte:component this={$screen} />\r\n    {#if screens_menu.includes($screen.name)}\r\n        <footer><Menu /></footer>\r\n    {/if}\r\n</main>\r\n```\r\nIt works locally and on [Svelte REPL](https://svelte.dev/repl/4f9a95802d6c43b39b4bdf4ff4a6b1f4?version=3.29.4) but not when I deploy to the [server (Gitlab Pages)](https://gengns.gitlab.io/svelte-gitlab-pages/)\r\n\r\nAs you can see the `Menu` componet is shown on Svelte REPL but not on Gitlab.\r\n\r\n`$screen.name` has changed because of the internal refactoring. Therefore the condition is never met and the `Menu` never shown.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\n[I created a small repo that illustrates the problem](https://gitlab.com/gengns/svelte-gitlab-pages)\r\n\r\n**Expected behavior**\r\n[Menu is shown after clicking on Login](https://svelte.dev/repl/4f9a95802d6c43b39b4bdf4ff4a6b1f4?version=3.29.4)\r\n\r\nSvelte should keep the component names after deployment like when working locally or on Svelte REPL.\r\n\r\n**Severity**\r\nIf we `import` all the screens where we want to show the `Menu` using an array of components like this:`const screens_menu = [Payments, Profile, ...]`\r\ninstead of: `const screens_menu = ['Payments', 'Profile', ...]`\r\nit works but now we are overloading, importing the whole component, all components just to check their names.\r\n\r\nShould we avoid using Svelte component names and add our specific keys for the same approach?",
    "closedAt": "2020-11-19T22:28:26Z",
    "createdAt": "2020-11-19T20:28:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMDY3Njk2NA==",
          "body": "You could just use the component instead of the name. I see you've thought about this, but I think tree-shaking might kick in here and it won't be a problem - but I don't know for sure. [https://svelte.dev/repl/4532bc948c72497494aa2e0fbba246fb?version=3.29.4](REPL). \r\n\r\nGithub issues isn't the right place for support questions, next time, please try [https://svelte.dev/chat](chat)\r\n\r\n",
          "createdAt": "2020-11-19T22:28:26Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMDY4NjYzMQ==",
          "body": "Relying on a function's `name` in any app - Svelte or not - is a bad idea anyway, because that will get clobbered by minification. If you look at the output for the `Payments` component, you'll see that it does indeed use `Payments` as the constructor name internally. But this could be affected by bundling (although not in this case, because there's nothing else called `Payments`), and then is also affected by minification.",
          "createdAt": "2020-11-19T22:52:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMDcyMDA3Ng==",
          "body": "Thank you so much for your support ^^ I asked it first on Stackoverflow, sorry for thinking it was a bug and taking your precious time. I'll use array of components and of course rely on function's name is not a good idea. <3 u guys and Svelte!",
          "createdAt": "2020-11-20T00:22:18Z",
          "author": { "login": "gengns", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDYzNTEwODY=",
    "body": "https://svelte.dev/repl/c0d48186514f455fa3a1b38d62c2938b?version=3.29.7\r\n\r\nWhen I store refs of DOM elements in a list (`bind:this={itemNodes[i]}`), and an element gets removed, the element will be replaced by `null` in the list. This behavior causes me some issues.\r\n\r\nTo get rid of those `null` values, I have to `await tick()`, and then filter out the `null` values:\r\n\r\n```\r\nawait tick();\r\nitemNodes = itemNodes.filter(node => node);\r\n```\r\n\r\nSee REPL.\r\n\r\nExpected behavior:\r\n\r\nA list containing refs of DOM elements should get a ref removed if that element is no longer rendered; it should not be replaced by a `null` value and keep the same size.",
    "closedAt": null,
    "createdAt": "2020-11-19T08:15:31Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMDMxODg4OQ==",
          "body": "For me the sounds like \"works as designed\". Also, others might rely on this behavior: \r\n\r\n```svelte\r\n<script>\r\nlet refs = [];\r\n</script>\r\n\r\n{#if someCondition}\r\n   <div bind:this={refs[0]}></div>\r\n{/if}\r\n\r\n{#if someOtherCondition}\r\n   <div bind:this={refs[1]}></div>\r\n{/if}\r\n```\r\nI wouldn't want to change the array's length here if one element is `null`. ",
          "createdAt": "2020-11-19T11:43:39Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMDMxOTQzNw==",
          "body": "Likely you could use something similar to what I provided in response to this (https://github.com/sveltejs/svelte/issues/4869) issue.",
          "createdAt": "2020-11-19T11:44:47Z",
          "author": { "login": "intelcentre", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDYyNTgyNTA=",
    "body": "**Describe the solution you'd like**\r\nIn Svelte 3, the syntax for await blocks is modeled after the one for promises: `await … then … catch`.\r\n\r\nIn the specification for `Promise`, however, there's also one more callback: [finally](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally). This is executed after the `then` or `catch` callbacks, regardless of whether the Promise was fulfilled or rejected. Note that per specs, `finally` callbacks do not receive any argument.\r\n\r\n**How important is this feature to you?**\r\nNot incredibly important, but it would allow reducing code duplication. For example, look at this:\r\n\r\n```svelte\r\n{#await p}\r\n  Waiting…\r\n{:then _}\r\n  Fulfilled!!\r\n{:catch _}\r\n  Rejected!!!\r\n{:finally}\r\n  Now let's show a form here\r\n{/await}\r\n```\r\n\r\nWithout `{:finally}`, we'd have to add the last sentence to both the `{:then}` and `{:catch}` blocks",
    "closedAt": "2020-12-09T01:25:01Z",
    "createdAt": "2020-11-19T05:21:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTYyMDMwOQ==",
          "body": "I'm -1 on this. This feels like adding a feature for the sake of parity with the Promise API, and not for the sake of what's generally useful. The situations where you'll want to have content that appears once a promise settles directly following content that appears when it resolves/rejects seem fairly specific. And you could achieve the same result with another `{#await p.catch(() => {})}`.",
          "createdAt": "2020-11-21T18:49:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTYzNTkxNQ==",
          "body": "Those are fair points. Thanks for considering this suggestion anyways!",
          "createdAt": "2020-11-21T21:00:20Z",
          "author": { "login": "ItalyPaleAle", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTY0NDY5NQ==",
          "body": "Nice idea @ItalyPaleAle. I think that parity with the Promise API is what gives #await 100% of its value. The functionality that it offers can be achieved via other methods, so its value is derived completely from the reduction in code and complexity that results from such a close to match the API. It makes sense that #await would match the execution flow of promises as closely as possible.",
          "createdAt": "2020-11-21T22:16:02Z",
          "author": { "login": "rsdavis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTE4NjIzNw==",
          "body": "I agree that I am missing {:finally}\r\n\r\nit's a bit strange that you'd have to go with workarounds when I thought svelte was all about elegance and simplicity. ",
          "createdAt": "2020-12-08T23:02:46Z",
          "author": { "login": "zimmah", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MTM5MjQyMA==",
          "body": "This has gotten three thumbs down from maintainers, and I am going to close it.\r\n\r\nI will also note that adding a feature that lets you write less code in a certain situation is not an example elegance or simplicity if it's a rather uncommon situation.",
          "createdAt": "2020-12-09T01:25:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDYxOTg0OTA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen you have a component like this...\r\n\r\n```svelte\r\n<script>\r\n  import SvgChart from './SvgChart.svelte';\r\n  let w;\r\n</script>\r\n\r\n<div bind:clientWidth={w}>\r\n  <SvgChart width={w} height={300}/>\r\n</div>\r\n```\r\n\r\n...and try to server-render it, `w` will be undefined, and anything that depends on it will appear broken. Even if you initialise `w`, it is unlikely to accurately reflect the eventual DOM, so there will be a flash upon hydration.\r\n\r\n**Describe the solution you'd like**\r\nIn general I suspect we want to discourage this sort of thing from happening. If we encounter such a binding at SSR time, we could emit a warning to that effect.\r\n\r\n**Describe alternatives you've considered**\r\nThe wrinkle is that you might have a situation like this:\r\n\r\n```svelte\r\n<div bind:clientWidth={w}>\r\n  {#if process.browser}\r\n    <SvgChart width={w} height={300}/>\r\n  {/if}\r\n</div>\r\n```\r\n\r\nIn that case, the warning would be undesirable. I'm not sure how to address that, so the alternative would be to do nothing.\r\n\r\n**How important is this feature to you?**\r\nI have coworkers who are very skilled at building charts with d3, but are less familiar with the declarative style, and in particular aren't used to considering how to build charts in such a way that they can be fully server-rendered. An emitted warning would make it possible to catch these situations automatically and offer relevant guidance. I have to imagine my situation isn't _totally_ unique.",
    "closedAt": null,
    "createdAt": "2020-11-19T02:45:43Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDU3NzQ0Njc=",
    "body": "## Is this about svelte@next? This project is currently in a pre-release stage and breaking changes may occur at any time. Please do not post any kind of bug reports or questions on GitHub about it.\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nRunning `npm i`, or `npm run build`  on a local fork of the Svelte repo produces many TypeScript errors. Repo is sync'd with master, with node_modules completely deleted before trying to build. \r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\nSee follow-on comment for full errors.\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\nSvelte fork is up to date with master. Clear node modules. Run `npm i`\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n\r\nN/A\r\n\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n\r\nN/A\r\n\r\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\nN/A\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nShould work.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\nErrors are below, in next comment.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\nNode 12.13.1\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\nMac OS Catalina\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\n3.29.7\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nN/A\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nBlocking\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2020-11-23T17:44:54Z",
    "createdAt": "2020-11-18T15:46:44Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTc2NzU5OQ==",
          "body": "Here's a dump of what I get after running `npm i`\r\n\r\n```sh\r\n> (!) Circular dependencies\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/AwaitBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/EachBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/Element/index.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\n...and 16 more\r\ncreated compiler.js, compiler.mjs in 1.5s\r\n\r\n> svelte@3.29.7 tsd /Users/adam.rackis/Documents/git/svelte\r\n> tsc -p src/compiler --emitDeclarationOnly && tsc -p src/runtime --emitDeclarationOnly\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:32:3 - error TS2305: Module '\"../../../../../Users/adam.rackis/node_modules/tapable/tapable\"' has no exported member 'Tapable'.\r\n\r\n32   Tapable,\r\n     ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:999:23 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n999             resolver: SyncWaterfallHook;\r\n                          ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1000:22 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1000             factory: SyncWaterfallHook;\r\n                          ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1001:28 - error TS2314: Generic type 'AsyncSeriesWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1001             beforeResolve: AsyncSeriesWaterfallHook;\r\n                                ~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1002:27 - error TS2314: Generic type 'AsyncSeriesWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1002             afterResolve: AsyncSeriesWaterfallHook;\r\n                               ~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1003:27 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1003             createModule: SyncBailHook;\r\n                               ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1004:21 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1004             module: SyncWaterfallHook;\r\n                         ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1005:27 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1005             createParser: HookMap;\r\n                               ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1007:30 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1007             createGenerator: HookMap;\r\n                                  ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1008:24 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1008             generator: HookMap;\r\n                            ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1017:33 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1017                 evaluateTypeof: HookMap;\r\n                                     ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1018:27 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1018                 evaluate: HookMap;\r\n                               ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1019:37 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1019                 evaluateIdentifier: HookMap;\r\n                                         ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1020:44 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1020                 evaluateDefinedIdentifier: HookMap;\r\n                                                ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1021:47 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1021                 evaluateCallExpressionMember: HookMap;\r\n                                                   ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1022:28 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1022                 statement: SyncBailHook;\r\n                                ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1023:30 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1023                 statementIf: SyncBailHook;\r\n                                  ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1024:24 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1024                 label: HookMap;\r\n                            ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1025:25 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1025                 import: SyncBailHook;\r\n                             ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1026:34 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1026                 importSpecifier: SyncBailHook;\r\n                                      ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1027:25 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1027                 export: SyncBailHook;\r\n                             ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1028:31 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1028                 exportImport: SyncBailHook;\r\n                                   ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1029:36 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1029                 exportDeclaration: SyncBailHook;\r\n                                        ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1030:35 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1030                 exportExpression: SyncBailHook;\r\n                                       ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1031:34 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1031                 exportSpecifier: SyncBailHook;\r\n                                      ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1032:40 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1032                 exportImportSpecifier: SyncBailHook;\r\n                                            ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1033:33 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1033                 varDeclaration: SyncBailHook;\r\n                                     ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1034:36 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1034                 varDeclarationLet: HookMap;\r\n                                        ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1035:38 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1035                 varDeclarationConst: HookMap;\r\n                                          ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1036:36 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1036                 varDeclarationVar: HookMap;\r\n                                        ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1037:28 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1037                 canRename: HookMap;\r\n                                ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1038:25 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1038                 rename: HookMap;\r\n                             ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1039:27 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1039                 assigned: HookMap;\r\n                               ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1040:25 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1040                 typeof: HookMap;\r\n                             ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1041:29 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1041                 importCall: SyncBailHook;\r\n                                 ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1042:23 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1042                 call: HookMap;\r\n                           ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1043:32 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1043                 callAnyMember: HookMap;\r\n                                    ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1044:22 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1044                 new: HookMap;\r\n                          ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1045:29 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1045                 expression: HookMap;\r\n                                 ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1046:38 - error TS2314: Generic type 'HookMap<H>' requires 1 type argument(s).\r\n\r\n1046                 expressionAnyMember: HookMap;\r\n                                          ~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1047:48 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1047                 expressionConditionalOperator: SyncBailHook;\r\n                                                    ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1048:44 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1048                 expressionLogicalOperator: SyncBailHook;\r\n                                                ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1049:26 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1049                 program: SyncBailHook;\r\n                              ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1058:28 - error TS2314: Generic type 'AsyncSeriesWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1058             beforeResolve: AsyncSeriesWaterfallHook;\r\n                                ~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1059:27 - error TS2314: Generic type 'AsyncSeriesWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1059             afterResolve: AsyncSeriesWaterfallHook;\r\n                               ~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1060:33 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1060             contextModuleFiles: SyncWaterfallHook;\r\n                                     ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1061:27 - error TS2314: Generic type 'AsyncSeriesWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1061             alternatives: AsyncSeriesWaterfallHook;\r\n                               ~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1081:21 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1081             unseal: SyncHook;\r\n                         ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1082:19 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1082             seal: SyncHook;\r\n                       ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1084:40 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1084             optimizeDependenciesBasic: SyncBailHook<Module[]>;\r\n                                            ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1085:35 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1085             optimizeDependencies: SyncBailHook<Module[]>;\r\n                                       ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1086:43 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1086             optimizeDependenciesAdvanced: SyncBailHook<Module[]>;\r\n                                               ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1089:23 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1089             optimize: SyncHook;\r\n                           ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1091:35 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1091             optimizeModulesBasic: SyncBailHook<Module[]>;\r\n                                       ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1092:30 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1092             optimizeModules: SyncBailHook<Module[]>;\r\n                                  ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1093:38 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1093             optimizeModulesAdvanced: SyncBailHook<Module[]>;\r\n                                          ~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1101:27 - error TS2314: Generic type 'AsyncSeriesHook<T>' requires 1 type argument(s).\r\n\r\n1101             optimizeTree: AsyncSeriesHook<Chunk[], Module[]>;\r\n                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1108:27 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1108             shouldRecord: SyncBailHook;\r\n                               ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1127:25 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1127             beforeHash: SyncHook;\r\n                             ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1128:24 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1128             afterHash: SyncHook;\r\n                            ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1134:33 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1134             beforeModuleAssets: SyncHook;\r\n                                     ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1135:40 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1135             shouldGenerateChunkAssets: SyncBailHook;\r\n                                            ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1136:32 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1136             beforeChunkAssets: SyncHook;\r\n                                    ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1141:31 - error TS2314: Generic type 'AsyncSeriesHook<T>' requires 1 type argument(s).\r\n\r\n1141             additionalAssets: AsyncSeriesHook;\r\n                                   ~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1147:33 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1147             needAdditionalSeal: SyncBailHook;\r\n                                     ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1148:24 - error TS2314: Generic type 'AsyncSeriesHook<T>' requires 1 type argument(s).\r\n\r\n1148             afterSeal: AsyncSeriesHook;\r\n                            ~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1156:33 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1156             needAdditionalPass: SyncBailHook;\r\n                                     ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1157:28 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1157             childCompiler: SyncHook;\r\n                                ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1161:43 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1161             optimizeExtractedChunksBasic: SyncBailHook<Chunk[]>;\r\n                                               ~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1162:38 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1162             optimizeExtractedChunks: SyncBailHook<Chunk[]>;\r\n                                          ~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1163:46 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1163             optimizeExtractedChunksAdvanced: SyncBailHook<Chunk[]>;\r\n                                                  ~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1176:27 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1176             jsonpScript?: SyncWaterfallHook<string, Chunk, string>;\r\n                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1177:22 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1177             require: SyncWaterfallHook<string, Chunk, string>;\r\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1178:32 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1178             requireExtensions: SyncWaterfallHook<string, Chunk, string>;\r\n                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1179:28 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1179             requireEnsure: SyncWaterfallHook<string, Chunk, string>;\r\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1180:24 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1180             localVars: SyncWaterfallHook<string, Chunk, string>;\r\n                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1181:27 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1181             afterStartup: SyncWaterfallHook<string, Chunk, string>;\r\n                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1195:22 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1195             content: SyncWaterfallHook;\r\n                          ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1196:21 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1196             module: SyncWaterfallHook;\r\n                         ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1197:21 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1197             render: SyncWaterfallHook;\r\n                         ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1198:22 - error TS2314: Generic type 'SyncWaterfallHook<T>' requires 1 type argument(s).\r\n\r\n1198             package: SyncWaterfallHook;\r\n                          ~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1199:19 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1199             hash: SyncHook;\r\n                       ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1286:25 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1286             shouldEmit: SyncBailHook<Compilation>;\r\n                             ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1288:29 - error TS2314: Generic type 'AsyncSeriesHook<T>' requires 1 type argument(s).\r\n\r\n1288             additionalPass: AsyncSeriesHook;\r\n                                 ~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1304:25 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1304             watchClose: SyncHook;\r\n                             ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1305:26 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1305             environment: SyncHook;\r\n                              ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1306:31 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1306             afterEnvironment: SyncHook;\r\n                                   ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1309:26 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1309             entryOption: SyncBailHook;\r\n                              ~~~~~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1329:25 - error TS2707: Generic type 'SyncHook<T, R>' requires between 1 and 2 type arguments.\r\n\r\n1329             watchClose: SyncHook;\r\n                             ~~~~~~~~\r\n\r\n../../../node_modules/@types/webpack/index.d.ts:1396:24 - error TS2314: Generic type 'SyncBailHook<T, R>' requires 2 type argument(s).\r\n\r\n1396         _pluginCompat: SyncBailHook<compilation.Compilation>;\r\n                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```",
          "createdAt": "2020-11-18T15:47:07Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTc4ODkwNg==",
          "body": "I can't reproduce this, using the same version of Node.",
          "createdAt": "2020-11-18T16:19:30Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTgwMDM4Ng==",
          "body": "@Conduitry how about npm - I'm on 6.13.4",
          "createdAt": "2020-11-18T16:37:36Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTg3NTk1NA==",
          "body": "I didn't fancy changing my npm version, but I regressed my node version and I can't reproduce either.\r\n\r\n```sh\r\n ant@apse  /home/ant/Projects/svelte   master ✘ ✭  node -v                                                                                 18:36:02 \r\nv12.13.1\r\n\r\n ant@apse  /home/ant/Projects/svelte   master ✘ ✭  npm -v                                                                                  18:36:11 \r\n6.12.1\r\n\r\n ant@apse  /home/ant/Projects/svelte   master ✘ ✭  npm i                                                                                   18:36:14 \r\n\r\n> svelte@3.29.7 prepare /home/ant/Projects/svelte\r\n> npm run build\r\n\r\n\r\n> svelte@3.29.7 build /home/ant/Projects/svelte\r\n> rollup -c && npm run tsd\r\n\r\n\r\nsrc/runtime/index.ts → index.mjs, index.js...\r\ncreated index.mjs, index.js in 26ms\r\n\r\nsrc/runtime/animate/index.ts → animate/index.mjs, animate/index.js...\r\ncreated animate/index.mjs, animate/index.js in 21ms\r\n\r\nsrc/runtime/easing/index.ts → easing/index.mjs, easing/index.js...\r\ncreated easing/index.mjs, easing/index.js in 47ms\r\n\r\nsrc/runtime/internal/index.ts → internal/index.mjs, internal/index.js...\r\ncreated internal/index.mjs, internal/index.js in 402ms\r\n\r\nsrc/runtime/motion/index.ts → motion/index.mjs, motion/index.js...\r\ncreated motion/index.mjs, motion/index.js in 79ms\r\n\r\nsrc/runtime/store/index.ts → store/index.mjs, store/index.js...\r\ncreated store/index.mjs, store/index.js in 35ms\r\n\r\nsrc/runtime/transition/index.ts → transition/index.mjs, transition/index.js...\r\ncreated transition/index.mjs, transition/index.js in 22ms\r\n\r\nsrc/compiler/index.ts → compiler.js, compiler.mjs...\r\n(!) Circular dependencies\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/AwaitBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/EachBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/Element/index.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\n...and 16 more\r\ncreated compiler.js, compiler.mjs in 2s\r\n\r\n> svelte@3.29.7 tsd /home/ant/Projects/svelte\r\n> tsc -p src/compiler --emitDeclarationOnly && tsc -p src/runtime --emitDeclarationOnly\r\n\r\nnpm WARN @sveltejs/eslint-config@5.6.0 requires a peer of eslint-plugin-node@>= 11 but none is installed. You must install peer dependencies yourself.\r\nnpm WARN eslint-plugin-import@2.20.2 requires a peer of eslint@2.x - 6.x but none is installed. You must install peer dependencies yourself.\r\nnpm WARN eslint-plugin-svelte3@2.7.3 requires a peer of svelte@^3.2.0 but none is installed. You must install peer dependencies yourself.\r\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.3 (node_modules/fsevents):\r\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\r\n\r\naudited 544 packages in 14.411s\r\nfound 2 low severity vulnerabilities\r\n  run `npm audit fix` to fix them, or `npm audit` for details\r\n\r\n ant@apse  /home/ant/Projects/svelte   master ✘ ✭                                                                                                                                                                                                                          18:36:32 \r\n```\r\n\r\n",
          "createdAt": "2020-11-18T18:37:33Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTg3NjU5NQ==",
          "body": "Also run `npx envinfo --system --npmPackages svelte,sapper,rollup,webpack --binaries --browsers `\r\n\r\n```sh\r\n ant@apse  /home/ant/Projects/svelte   master ✘ ✭  npx envinfo --system --npmPackages svelte,sapper,rollup,webpack --binaries --browsers                                                                                                                                   18:38:06 \r\nnpx: installed 1 in 0.984s\r\n\r\n  System:\r\n    OS: Linux 5.4 Ubuntu 20.04.1 LTS (Focal Fossa)\r\n    CPU: (4) x64 Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz\r\n    Memory: 483.86 MB / 7.68 GB\r\n    Container: Yes\r\n    Shell: 5.8 - /bin/zsh\r\n  Binaries:\r\n    Node: 12.13.1 - ~/.nvm/versions/node/v12.13.1/bin/node\r\n    npm: 6.12.1 - ~/.nvm/versions/node/v12.13.1/bin/npm\r\n  Browsers:\r\n    Chrome: 86.0.4240.183\r\n    Firefox: 82.0.3\r\n  npmPackages:\r\n    rollup: ^1.27.14 => 1.27.14 \r\n```",
          "createdAt": "2020-11-18T18:38:38Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTkxMTI0OA==",
          "body": "@antony thanks a ton for the reply. I added TypeScript for good measure, and this is what I'm seeing \r\n\r\n```\r\ngit:svelte (master=)\r\n ---->npx envinfo --system --npmPackages svelte,sapper,rollup,webpack,typescript --binaries --browsers\r\nnpx: installed 1 in 1.007s\r\n\r\n  System:\r\n    OS: macOS 10.15.7\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\r\n    Memory: 59.07 MB / 16.00 GB\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 12.13.1 - ~/p4/depot/LoL/__MAIN__/DevRoot/Tools/Ext/Node/12.13.1/mac/bin/node\r\n    Yarn: 1.14.0 - ~/p4/depot/LoL/__MAIN__/DevRoot/Tools/Ext/Yarn/yarn\r\n    npm: 6.13.4 - /usr/local/bin/npm\r\n    Watchman: 4.9.0 - /usr/local/bin/watchman\r\n  Browsers:\r\n    Chrome: 86.0.4240.198\r\n    Chrome Canary: 89.0.4329.0\r\n    Edge: 86.0.622.69\r\n    Firefox: 83.0\r\n    Safari: 14.0.1\r\n  npmPackages:\r\n    rollup: ^1.27.14 => 1.27.14\r\n    typescript: ^3.5.3 => 3.5.3\r\n```",
          "createdAt": "2020-11-18T19:43:01Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTQ2OTkxNQ==",
          "body": "looks like typescript is dragging in webpack types `../../../node_modules/@types/webpack/index.d.ts` which is dragging in a user version of tapable `../../../../../Users/adam.rackis/node_modules/tapable/tapable` \r\nMy master checkout of svelte doesn't have `@types/webpack` so they might be global or in a parent folder on your machine.\r\nWe might need to tweak the `tsconfig.json` to stop it leaving the svelte folder when looking for types during build",
          "createdAt": "2020-11-21T00:10:29Z",
          "author": { "login": "halfnelson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTQ3MjY2OA==",
          "body": "@halfnelson thank you SO much for looking into this!!!!! ",
          "createdAt": "2020-11-21T00:23:24Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTQ3NjYyMg==",
          "body": "No problems. I think the solution will involve specifying `typeRoots` since by default it checks all parent folders too. https://www.typescriptlang.org/tsconfig#typeRoots\r\nMaybe a simple `typeRoots: ['./node_modules/@types']` would be enough",
          "createdAt": "2020-11-21T00:43:29Z",
          "author": { "login": "halfnelson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTU5MDAxOA==",
          "body": "@halfnelson thanks again! https://github.com/sveltejs/svelte/pull/5704 ",
          "createdAt": "2020-11-21T14:54:48Z",
          "author": { "login": "arackaf", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjMxOTEyNg==",
          "body": "#5704 has been merged.",
          "createdAt": "2020-11-23T17:44:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDU2MDc1Mzk=",
    "body": "**Describe the bug**\r\nWhen binding a complex value such as an object to a component `<Component bind:value />`, additional reactive updates are fired for the bound value even when no data is changed.\r\n\r\nMay be related to https://github.com/sveltejs/svelte/issues/4430 ?\r\n\r\n**To Reproduce**\r\nSimply bind a complex value to a component property.\r\n\r\nExample:\r\nhttps://svelte.dev/repl/5e14759de70d4d39b6f3833f91db4542?version=3.29.7\r\n\r\n**Expected behavior**\r\nReactive updates should be consistent between simple and complex types\r\n\r\n**Severity**\r\nI find it irritating, but not a blocker.\r\nThis issue is most likely to cause redundant calculations without formally breaking anything. \r\nThis issue will likely snowball if components are nested, though I have not confirmed this.\r\nThe additional updates are likely to confuse people causing unnecessary work.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": null,
    "createdAt": "2020-11-18T12:13:32Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTY2MzYwMQ==",
          "body": "likely duplicate #4447",
          "createdAt": "2020-11-18T13:04:41Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTUwNDc5NQ==",
          "body": "similar problem reported here #5555, but this is much cleaner example.",
          "createdAt": "2020-11-21T04:07:38Z",
          "author": { "login": "xpuu", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDU1NTU0NTY=",
    "body": "## Some NPM packages fail to install globally.\r\n\r\n**Describe the bug**\r\nI'm running on the Ubuntu OS and i don't seem to understand what is wrong with NPM. \r\nFor instance, package like Nodemon can't install globally, but installs without error when installed in the projects directory.\r\n\r\nI've tried several methods to solve, but all to no avail. \r\n\r\n**Logs**\r\nnpm ERR! Unexpected end of JSON input while parsing near '...ty\":\"sha512-hyK6vl65I'\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /root/.npm/_logs/2020-11-18T10_48_47_525Z-debug.log\r\n",
    "closedAt": "2020-11-18T12:31:18Z",
    "createdAt": "2020-11-18T10:56:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTY0NzM3Mg==",
          "body": "This isn't related to Svelte. But you can try asking on our Discord server to see whether anyone has any ideas.",
          "createdAt": "2020-11-18T12:31:14Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDQ5MDMwMDA=",
    "body": "**Describe the bug**\r\nCompilation of a Sapper/Svelte app using Rollup & Typescript in a `subst`'d (virtual system drive, like `D:\\`) context fails.\r\n\r\n**Logs**\r\n```log\r\nUnexpected token (Note that you need plugins to import files that are not JavaScript)\r\n1: function test(name: string) {\r\n                     ^\r\n2:     console.log('Hello,', name);\r\n3: }\r\n```\r\n\r\n**To Reproduce**\r\n[Minimal reproduction link](https://github.com/ConnorJamesLow/svelte-typescript-subst-issue).  \r\n\r\n - [subst](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst) a directory and clone this repository into it. \r\n - From the subst'd drive letter, build and run the project, e.g.:  \r\n\r\n```bash\r\nD:\\> npm i\r\nD:\\> npm run dev\r\n# or\r\nD:\\> npm run build\r\nD:\\> npm start\r\n```\r\n - Build should fail\r\n\r\n**Expected behavior**\r\nBuild should act the same as if I ran `npm run dev` from a `C:\\` directory (i.e. should succeed).\r\n\r\n**Stacktraces**\r\n<details>\r\n  <summary>Stack trace</summary> \r\n\r\n```bash\r\n✗ server\r\nUnexpected token (Note that you need plugins to import files that are not JavaScript)\r\n1: function test(name: string) {\r\n                     ^\r\n2:     console.log('Hello,', name);\r\n3: }\r\n✗ client\r\nUnexpected token (Note that you need plugins to import files that are not JavaScript)\r\n1: function test(name: string) {\r\n                     ^\r\n2:     console.log('Hello,', name);\r\n3: }\r\n``` \r\n\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: **n/a**\r\n\r\n- Your operating system: **Windows 10**\r\n\r\n- Svelte version: **3.29.7**\r\n\r\n- Whether your project uses Webpack or **Rollup**\r\n\r\n**Severity**\r\nMostly annoying; I've lost a few hours trying to figure out why an app suddenly wouldn't build the next day, playing with things and getting the same result each time. The work-arround (navigating to the app from the C: drive) is simple, thankfully, but this Sapper project I'm working on, out of all the typescript projects I have, is the only place I'm experiencing this issue.\r\n\r\n\r\n**Additional context**\r\nTo be clear, works as expected when I run my project (or the linked example) from the default C drive.\r\n",
    "closedAt": null,
    "createdAt": "2020-11-17T16:45:03Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTA1NjQ1NQ==",
          "body": "Also worth mentioning that I'm only experiencing this issue from imported TypeScript files, not inline `<script lang=\"ts\">`. For example, this compiles without issue:\r\n```ts\r\n<script lang=\"typescript\">\r\n  export let title: string = \"hello there\";\r\n</script>\r\n```",
          "createdAt": "2020-11-17T16:48:59Z",
          "author": { "login": "ConnorJamesLow", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTQ5NDM1MQ==",
          "body": "I can confirm that the same happens for me on Windows 10 where project is on a mounted network drive instead of C.\r\n\r\nIssue does not occur when running the project (with unaltered source code) under Linux.",
          "createdAt": "2020-11-21T02:36:26Z",
          "author": { "login": "ProjectInfinity", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDQ1NjUwMTE=",
    "body": "**Describe the bug**\r\nWhen destructuring slot props with named slots, svelte errors with `undefined is not iterable`.\r\n\r\nEg:\r\n```html\r\n<List {items} let:item={{ name }}>\r\n  <div>{name}</div>\r\n\r\n  <div slot=\"custom-slot\">Custom slot</div>\r\n</List>\r\n```\r\n\r\n**Logs**\r\n```\r\nmessage: \"Uncaught (in promise): undefined is not iterable (cannot read property Symbol(Symbol.iterator))\"\r\nstack: TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\r\nat Array.List.props.$$slots.header.item (eval at handle_message (about:srcdoc:13:8), <anonymous>:1036:11)\r\nat get_slot_context (eval at handle_message (about:srcdoc:13:8), <anonymous>:65:56)\r\nat create_slot (eval at handle_message (about:srcdoc:13:8), <anonymous>:59:30)\r\nat create_fragment (eval at handle_message (about:srcdoc:13:8), <anonymous>:766:26)\r\nat init (eval at handle_message (about:srcdoc:13:8), <anonymous>:549:41)\r\nat new List (eval at handle_message (about:srcdoc:13:8), <anonymous>:936:7)\r\nat create_if_block (eval at handle_message (about:srcdoc:13:8), <anonymous>:1020:13)\r\n```\r\n\r\n**To Reproduce**\r\nPlaygroun: https://svelte.dev/repl/9f24b8378c234f06ae837fdfdb1373fa?version=3.29.7\r\n\r\n**Expected behavior**\r\nThere should be no error when destructuring the named slot with `let:item={[item]}`\r\n\r\n**Stacktraces**\r\n\r\n<details>\r\n  <summary>Uncaught (in promise): undefined is not iterable (cannot read property Symbol(Symbol.iterator))</summary>\r\n\r\nTypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\r\nat Array.List.props.$$slots.header.item (eval at handle_message (about:srcdoc:13:8), <anonymous>:1036:11)\r\nat get_slot_context (eval at handle_message (about:srcdoc:13:8), <anonymous>:65:56)\r\nat create_slot (eval at handle_message (about:srcdoc:13:8), <anonymous>:59:30)\r\nat create_fragment (eval at handle_message (about:srcdoc:13:8), <anonymous>:766:26)\r\nat init (eval at handle_message (about:srcdoc:13:8), <anonymous>:549:41)\r\nat new List (eval at handle_message (about:srcdoc:13:8), <anonymous>:936:7)\r\nat create_if_block (eval at handle_message (about:srcdoc:13:8), <anonymous>:1020:13)\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome  86.0.4240.198 (Official Build) (x86_64)\r\n\r\n- Your operating system: OS X 10\r\n\r\n- Svelte version: 3.29.7\r\n\r\n- Bundler: Rollup\r\n\r\n**Severity**\r\nTemporary fix available if you don't do any object/array destructuring but it would be nice to have this fixed so I can clean my code and have my variables named properly.\r\n\r\n**Additional context**\r\nN/A\r\n",
    "closedAt": null,
    "createdAt": "2020-11-17T09:29:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyODgzNjk5MA==",
          "body": "The issue is that the compiler includes the default slot's props for all slots\r\n```ts\r\n$$slots: {\r\n\tdefault: [\r\n\t\tcreate_default_slot,\r\n\t\t({ item: [item] }) => ({ 1: item}),\r\n\t\t({ item: [item] }) => item ? 2 : 0\r\n\t],\r\n\tfooter: [\r\n\t\tcreate_footer_slot,\r\n\t\t({ item: [item] }) => ({ 1: item }),\r\n\t\t({ item: [item}) => item ? 2 : 0\r\n\t],\r\n\theader: [\r\n\t\tcreate_header_slot,\r\n\t\t({ item: [item] }) => ({ 1: item }),\r\n\t\t({ item: [item] }) => item ? 2 : 0\r\n\t]\r\n},\r\n```\r\nAnother issue is that some users might be using that bug as a feature",
          "createdAt": "2020-11-17T10:27:37Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4OTM2NTEwMQ==",
          "body": "Related https://github.com/sveltejs/svelte/issues/5865",
          "createdAt": "2021-03-03T01:56:40Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjg3Mzk3NQ==",
          "body": "I found this issue independently and came to report it, but found this one which I believe is an exact match for mine.  Here is my REPL if it helps.\r\n\r\nhttps://svelte.dev/repl/996a8582552f44dfb276470d58075e93?version=3.37.0",
          "createdAt": "2021-04-03T14:37:09Z",
          "author": { "login": "wickning1", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjg3NDU0NQ==",
          "body": "I found an ugly workaround (from my REPL): `<slot name=\"header\" value={undefined} />`. `value` gets overridden so that it no longer tries to execute the expression from the default slot.",
          "createdAt": "2021-04-03T14:41:42Z",
          "author": { "login": "wickning1", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDMyOTQ0NjA=",
    "body": "I need to display html when variable (in this repl - `num`) is truthy\r\n\r\nAnd I also need to animate `first` tag after each change of another variable(`slide`)\r\n\r\nIf I have html structure like this:\r\n```svelte\r\n{#key animateOnChangeVariable}\r\n  {#if variableIsTrythy}\r\n    <div class=\"first\">First tag</div>\r\n  {/if}\r\n{/key}\r\n<div class=\"second\">Second tag</div>\r\n```\r\nAnd if `num` is changed, `first` tag is inserted after `second` (html order is changed)\r\n\r\nREPL\r\nhttps://svelte.dev/repl/3ba09b8c428c4ee58c77ff477b5fa632?version=3.29.7\r\n\r\n\r\n\r\nIf `{#if}` and `{#key}` swapped, everything works correctly\r\n\r\n\r\nAlso, if you have several buttons at the same time, which change num by clicking - an error is thrown (uncomment second button, uncomment function and get error `div1 is not defined`).",
    "closedAt": "2020-11-23T16:41:57Z",
    "createdAt": "2020-11-15T16:41:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNzU5OTIzMQ==",
          "body": "I hope I described bug clearly",
          "createdAt": "2020-11-15T16:42:16Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzI4MDE3Ng==",
          "body": "This is fixed in 3.30.0 - https://svelte.dev/repl/3ba09b8c428c4ee58c77ff477b5fa632?version=3.30.0",
          "createdAt": "2020-11-24T22:55:12Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDI2MDMwMTE=",
    "body": "**Describe the bug**\r\nWhen running the axe accessibility checker on [the docs](https://svelte.dev/docs), it identifies multiple accessibility issues:\r\n\r\n- [ ] [ARIA hidden element must not contain focusable elements](https://dequeuniversity.com/rules/axe/4.0/aria-hidden-focus?application=AxeChrome) (91 count). This seems to mostly be on the permalinks next to each heading. Is there a reason we don't want the permalinks accessible to screen readers? I generally think of the W3C specs as having well-thought-through accessibility and [they do not hide permalinks](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) from assistive tech.\r\n```html\r\n<a href=\"#aria-hidden\" aria-label=\"Permalink for aria-hidden (state)\" title=\"Permalink for aria-hidden (state)\" property=\"url\">\r\n  <span property=\"title\" content=\"aria-hidden (state)\">§</span>\r\n</a>\r\n```\r\n\r\n- [ ] [ARIA attributes must conform to valid values](https://dequeuniversity.com/rules/axe/4.0/aria-valid-attr-value?application=AxeChrome) (5 count). This is on a few permalinks that have `aria-hidden=\"\"` instead of `aria-hidden=\"true\"`.\r\n- [ ] [Links must have discernible text](https://dequeuniversity.com/rules/axe/4.0/link-name?application=AxeChrome) (5 count). Also on permalinks. \r\n- [ ] [Ensure that scrollable region has keyboard access](https://dequeuniversity.com/rules/axe/4.0/scrollable-region-focusable?application=AxeChrome) (74 count). This violation is on the code blocks.\r\n- [ ] [Heading levels should only increase by one](https://dequeuniversity.com/rules/axe/4.0/heading-order?application=AxeChrome) (1 count). There are some `h5` elements on the page after an `h3`. These should likely be `h4` instead.\r\n- [ ] [Aside must not be contained in another landmark](https://dequeuniversity.com/rules/axe/4.0/landmark-complementary-is-top-level?application=AxeChrome) (1 count). The table of contents is in an `aside` element, which should not be placed within `main`. We might not need `aside` at all -- this element could just be a labeled `ul`.\r\n- [x] [Page must contain a level-one heading](https://dequeuniversity.com/rules/axe/4.0/page-has-heading-one?application=AxeChrome) (1 count). There is no `h1` element.\r\n- [ ] [Elements must have sufficient color contrast](https://dequeuniversity.com/rules/axe/4.0/color-contrast?application=AxeChrome) (2018 count). The color contrast ratios on certain text are below 4.5. The biggest offender seems to be the syntax highlighting.\r\n\r\n**To Reproduce**\r\n1. Install the [axe Chrome extension](https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US) (also available for other browsers)\r\n1. Go to https://svelte.dev/docs\r\n2. Go to the Axe tab in dev tools and run the analysis\r\n\r\n**Expected behavior**\r\nThere should be 0 Axe violations.\r\n\r\n**Severity**\r\nThese issues make navigating the docs when using a screen reader more difficult. [The Svelte tutorial](https://svelte.dev/tutorial/dynamic-attributes) calls out how it helps you write accessible markup -- we should set a good example by holding the docs to a high accessibility standard.\r\n\r\n**Additional context**\r\nI know this is quite a few issues in one 😅. We could split this into multiple issues if desired. However, some are closely related (e.g. everything to do with the permalinks) and some are small fixes.\r\n",
    "closedAt": null,
    "createdAt": "2020-11-13T16:52:04Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNjg3MzQxMA==",
          "body": "I'd love to work on a PR for this, if that's okay.",
          "createdAt": "2020-11-13T16:52:17Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNjg4Mjk4NA==",
          "body": "@geoffrich Feel free - the better accessible the docs are, the... better",
          "createdAt": "2020-11-13T17:11:25Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyODI5ODU0NQ==",
          "body": "With the syntax highlighting PR merged, the color contrast violation count is down to 228 from 2018.",
          "createdAt": "2020-11-16T20:13:40Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjUwMjc5NA==",
          "body": "Most of the remaining color contrast violations are on links. I opened a corresponding issue in site-kit since that's where the styles are coming from. Not sure who would be involved in choosing or updating a core theme color like that.",
          "createdAt": "2020-11-24T00:21:52Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDIyMzAzNjg=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nEvery time I use a package that doesn't have `.d.ts` declaration file, svelte-check shows hints and suggest me try to install its `@types` package\r\n\r\n**Describe the solution you'd like**\r\nI read in the [documentation](https://github.com/sveltejs/language-tools/tree/master/packages/svelte-check#args) that I can disable Svelte compiler warning codes, but I can't find an official list of these\r\n\r\n**Describe alternatives you've considered**\r\nAnother option that I'm considering is [change the threshold ](https://github.com/sveltejs/language-tools/issues/646#issuecomment-719272625), but I may lose another useful hints\r\n\r\n**Additional context**\r\nI'm using snowpack with the basic svelte template\r\n\r\n<!-- Want to help us out? Read this to get started:\r\nhttps://github.com/sveltejs/language-tools#development\r\n-->",
    "closedAt": null,
    "createdAt": "2020-11-13T02:44:14Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNjU3NzQzNA==",
          "body": "The specific error you refer to is a Typescript warning/hint, not a svelte warning, so that cannot be disabled.\r\nA complete list indeed would be nice, right now it's scattered throughout Svelte core. Transferring for that reason. ",
          "createdAt": "2020-11-13T07:38:43Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDE5MzYxMDA=",
    "body": "**Describe the bug**\r\nTemplate expressions stop taking effect when outro starts.\r\n\r\n**To Reproduce**\r\n* REPL-Demo: https://svelte.dev/repl/f6e4381f67a6406f9370f1799b45fa64?version=3.29.7\r\n\r\n**Expected behavior**\r\nI expect the `<div class=\"{state}\"/>` to reflect the `outrostart`-class from state.\r\n\r\n**Information about your Svelte project:**\r\n- Browser/versions: Chrome 86 (64-Bit), Firefox 82.0.2 (64-Bit)\r\n- OS: Windwos 10 x64\r\n- Svelte version: 3.29.7\r\n\r\n**Workaround**\r\nI currently set the class within script\r\nREPL: https://svelte.dev/repl/80b8af37fe56429dada36c01020da262?version=3.29.7",
    "closedAt": null,
    "createdAt": "2020-11-12T21:20:57Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNjk5NzUwNw==",
          "body": "duplicate #4683",
          "createdAt": "2020-11-13T19:47:27Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDE3NjY3NTI=",
    "body": "**Describe the bug**\r\nIt took me a while to determine this was the root issue, but I was expecting bindings to be forwarded/redirect to the base component when spreading the remaining props.\r\n\r\n```svelte\r\n// App.js\r\n<SomeComponent bind:value />\r\n\r\n// SomeComponent.js\r\n<BaseComponent {...$$restProps} />\r\n\r\n// BaseComponent.js\r\n<input bind:value />\r\n```\r\n\r\n**To Reproduce**\r\nI've setup a [REPL](https://svelte.dev/repl/ae0b52559ecb460596e30ce45e99b80e?version=3.29.7) that should demonstrate the issue / feature\r\n\r\n**Expected behavior**\r\nThe `binded` value in App.js is bound to the BaseComponent `value`\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 86\r\n\r\n- Your operating system: OS X 10\r\n\r\n- Svelte version: `3.29.7`\r\n\r\n**Severity**\r\nThe issue can be worked around by declaring a local variable within the middle \"SomComponent\" and binding to it (see `Redirect` component in REPL).  Since this is a common pattern I'm using, it requires a lot of duplication and not sure if there is any side effects to this \"re-binding\", but can work around at the moment.\r\n\r\n**Additional context**\r\nThis looks related to https://github.com/sveltejs/svelte/issues/5106, but smaller scope (specially about bind forwarding).\r\n",
    "closedAt": "2021-01-04T22:46:33Z",
    "createdAt": "2020-11-12T16:59:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNzI3MjIzNw==",
          "body": "Duplicate of #2226, #5137",
          "createdAt": "2020-11-14T22:11:13Z",
          "author": { "login": "zyxd", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDExMTUwMzI=",
    "body": "**Describe the bug**\r\nI'm trying to use the Drawer component from Shoelace (https://shoelace.style/components/drawer)\r\n\r\nThis is the modified code which I fitted to work with Svelte\r\n\r\n```\r\n<script>\r\n    import { onMount } from 'svelte';\r\n\r\n    onMount(() => {\r\n        const drawer = document.querySelector('.drawer-overview');\r\n        const openButton = drawer.nextElementSibling;\r\n        const closeButtonByType = drawer.querySelector('sl-button[type=\"primary\"]');   // DOESN'T WORK, RETURNS NULL\r\n        const closeButtonByClass = drawer.querySelector('.btn-close');   // works fine\r\n\r\n        openButton.addEventListener('click', () => drawer.show());\r\n        closeButtonByType.addEventListener('click', () => drawer.hide());   // null reference exception, see below\r\n        closeButtonByClass.addEventListener('click', () => drawer.hide());\r\n    });\r\n</script>\r\n\r\n<sl-drawer label=\"Drawer\" class=\"drawer-overview\">\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n    <sl-button slot=\"footer\" class=\"btn btn-close\" type=\"primary\">Close</sl-button>\r\n</sl-drawer>\r\n\r\n<sl-button>Open Drawer</sl-button>\r\n```\r\n\r\nThe querySelector returns null on the marked line while when using select by a class (like on the next line) it works fine.\r\nObviously attaching the event to null instance fails and results in \r\n\r\n**Uncaught TypeError: Cannot read property 'addEventListener' of null**\r\n\r\n**To Reproduce**\r\n\r\nhttps://github.com/brgrz/svelte-queryselector-issue\r\n\r\n**Expected behavior**\r\n\r\nReturn the wanted DOM element using the type selector.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\nlatest\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\nWindows 10, latest\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\nSvelte latest\r\n\r\n- Whether your project uses Webpack or Rollup\r\nRollup\r\n\r\n**Severity**\r\nIt is annoying, should work. Maybe I'm doing something wrong, quite possibly\r\n",
    "closedAt": null,
    "createdAt": "2020-11-11T22:29:58Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNjM0MzI5Nw==",
          "body": "I can confirm that it does not work as expected. But, it might have something to do with Shoelace using the shadowDOM, which I won't pretend to understand.\r\n\r\nAs a side note, it's odd to use document in this way inside of Svelte. It would be better to use\r\n\r\n```<sl-button bind:this={ref}></sl-button>```\r\n\r\nor even just \r\n\r\n```<sl-button on:click={() => drawer.hide()}>Close</button>```\r\n\r\nand then `document.querySelector` is not necessary. I tried these methods and both worked for me.",
          "createdAt": "2020-11-12T21:08:27Z",
          "author": { "login": "rsdavis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNzA1MDQyNg==",
          "body": "This is definitely a problem with Shoelace, not svelte.\r\n\r\nIf you pass props other than used by [Button component](https://github.com/shoelace-style/shoelace/blob/next/src/components/button/button.tsx), you can use that as a selector.\r\n\r\nFor example:\r\nIf you use following component\r\n`<sl-button disabled slot=\"footer\" data-x=\"foo\" class=\"btn btn-close\" type=\"primary\">Close</sl-button> `\r\n\r\nNow in onMount\r\n\r\n```\r\ndrawer.querySelector('sl-button[type=\"primary\"]') // returns null\r\ndrawer.querySelector('sl-button[disabled]') // returns null\r\ndrawer.querySelector('sl-button.btn.btn-close') // returns the button element\r\ndrawer.querySelector('sl-button[data-x=\"foo\"]') // returns the button element\r\n```\r\n\r\nAnd I can confirm that SlButton component's constructor is called before calling onMount.\r\nHere is my complete experiment https://github.com/asaharan/svelte-queryselector-issue\r\nIn this experiment, while using MyButton\r\n\r\n```\r\ndrawer.querySelector('sl-button[type=\"primary\"]') // returns the button element\r\ndrawer.querySelector('sl-button[disabled]') // returns the button element\r\ndrawer.querySelector('sl-button.btn.btn-close') // returns the button element\r\ndrawer.querySelector('sl-button[data-x=\"foo\"]') // returns the button element\r\n```\r\n\r\nSo, I can conclude this is a problem with Shoelace and probably because of [@stenciljs/core](https://www.npmjs.com/package/@stencil/core)\r\n\r\nI would say, raise this issue on Shoelace's or [@stencil/core](https://www.npmjs.com/package/@stencil/core) repo.",
          "createdAt": "2020-12-02T07:33:31Z",
          "author": { "login": "asaharan", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDA1NDE3Nzc=",
    "body": "**Describe the bug**\r\nWhen declaring a prop, `export myProp`, and adding a default value to it, `export myProp = 5`.\r\nIf a component passes a value and later on changes the value to be `undefined`, \r\n`myProp` becomes undefined instead of becoming the default value, 5 in this case.\r\n\r\nAttached a simple repl to display the issue in detail.\r\nhttps://svelte.dev/repl/861015c678f04ade8b8a5eb8c96c36b9?version=3.29.7\r\n\r\n**Expected behavior**\r\nI believe this should be considered as  a bug, since Im declaring that the prop has a default value.\r\nOtherwise the default value is just considered as default value for the first time you mount.. and that is almost useless.\r\n\r\nI ended up doing stuff like this to achieve my goal:\r\n```\r\nexport let k = 5;\r\n$: k = k ?? 5;\r\n```\r\nThis kind of beats the point of default values.\r\n\r\nWhat do you think?\r\n\r\nLooking forward to hearing from you,\r\nThank you for this amazing language\r\n",
    "closedAt": "2020-11-11T14:24:55Z",
    "createdAt": "2020-11-11T07:32:50Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTMzNjA4NA==",
          "body": "This has come up before in #4442 and there were practical implementation reasons to leave it how it was - and the decision was to document it rather than change it. https://svelte.dev/docs#1_export_creates_a_component_prop now explicitly mentions that this is an initial value rather than a default one, and that changing it to undefined does not revert it to its initial value.\r\n\r\nAs I'm writing this though, I see now that in https://svelte.dev/tutorial/default-values we're still using the word 'default', so that should be changed as well, and I'm labeling this as a documentation issue.",
          "createdAt": "2020-11-11T10:17:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTMzNzkyMw==",
          "body": "From my point of view it would be highly confusing if this would be a fallback, not initial value. So I also prefer how it's currently implemented.",
          "createdAt": "2020-11-11T10:21:19Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTM4OTg1Ng==",
          "body": "-- Edited this comment, check the bottom paragraph --\r\n\r\n@Conduitry I understand what you are saying, and still, there is a fundamental issue with this behavior.\r\n\r\nI will show you my point with typescript. In the example `myProp` is considered as a `number`, not `number | undefined`.\r\nbecause it has the initial value we claim it to be considered as.\r\n\r\nSvelte compiler tells me that I can render `Comp` without supplying a value to `myProp`, so Im getting the feeling that either it has a default value, or it is ok to just not be defined.\r\n\r\nAs you can see in the example, after 5 seconds, it will display `NaN` on the screen and it wouldn't be the fault of the App developer..\r\n In my opinion, it's a bug..\r\n\r\nDon't you agree?\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n//Comp.svelte\r\nexport let myProp: number = 5;\r\n</script>\r\n\r\n<div>{myProp / 3}</div>\r\n```\r\n\r\n\r\n```svelte\r\n<script>\r\n// App.svelte\r\nlet bool = true;\r\n\r\nsetTimeout(() => {bool = false}, 5000);\r\n</script>\r\n\r\n{#if bool}\r\n<Comp myProp={1} />\r\n{:else}\r\n<Comp />\r\n{/if}\r\n```\r\n\r\n@Conduitry I checked it again. I was wrong, the case I presented above would actually work as I expect. So In this case, I guess I fully understand and this is truly not a bug. I do think there should be a way then to have a default value behavior. Its very basic..\r\nIsn't it? ",
          "createdAt": "2020-11-11T12:14:11Z",
          "author": { "login": "omerman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTM5NTk3OA==",
          "body": "You can achieve a default value like this\r\n\r\n```svelte\r\n<script>\r\n   export let myProp;\r\n   $: myProp = myProp ?? 5;\r\n</script>\r\n```",
          "createdAt": "2020-11-11T12:28:26Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTM5NzY5Mg==",
          "body": "@dummdidumm Yes thats what Im doing today. I just wanted something more.\r\nBut what I want now that I understand that its not a bug.. is a compiler solution for this. I'll think about it some more, Maybe I'll open a different feature request.\r\n\r\nThank you @dummdidumm @Conduitry ",
          "createdAt": "2020-11-11T12:32:35Z",
          "author": { "login": "omerman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTQ1MjAzNw==",
          "body": "@Conduitry @dummdidumm  Closing, but I still want to state that I think Svelte should have a way to declare a default value, and not just an initial value. It doesn't have to be a breaking change, it can be introduced as a new syntax, Im sure a lot of people would use it. I know I would.",
          "createdAt": "2020-11-11T14:24:55Z",
          "author": { "login": "omerman", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDAwMzQwNDM=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nPassing dynamic values for attributes such as `data-*` and `aria-*` makes my component's template not so easy to read (example below)\r\n`<a aria-current={ariaCurrent}></a>`\r\n\r\n**Describe the solution you'd like**\r\n`<a {aria-current}></a>` aria-current turns into ariaCurrent for script\r\n`<a {ariaCurrent}></a>` ariaCurrent turns into aria-current for template \r\n\r\nFirst solution seems better I guess, where kebab case becomes camel case for variable that compiler looks for\r\nBut currently this option looks like invalid syntax for svelte, here comes my feature request\r\n\r\n**How important is this feature to you?**\r\nIt's not so important feature but I guess this will make code I write on svelte a bit cleaner\r\n",
    "closedAt": "2020-11-10T16:04:36Z",
    "createdAt": "2020-11-10T15:59:24Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDc5OTAzOQ==",
          "body": "You can't pass a prop called `{aria-current}` because it is the equivalent of\r\n\r\n```\r\nconst aria = x\r\nconst current = y\r\nreturn aria - current\r\n```\r\n\r\nlikewise, `{ariaCurrent}` being translated to `aria-current` in a template would also be a breaking change which would be very unusual and non-obvious behaviour.\r\n\r\nIf you want cleaner code, consider using `aria_current` instead.",
          "createdAt": "2020-11-10T16:04:36Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDgwMTM1NQ==",
          "body": "Agree with you. Thanks!",
          "createdAt": "2020-11-10T16:08:15Z",
          "author": { "login": "ZerdoX-x", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDgwNDg2Mg==",
          "body": "@antony But I didn't catch that part\r\n> If you want cleaner code, consider using aria_current instead.\r\n\r\nHow can this be helpful? I can't write like this `{aria_current}` and still need to write `aria-current={aria_current}`",
          "createdAt": "2020-11-10T16:13:43Z",
          "author": { "login": "ZerdoX-x", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3NDAwMDcxMDY=",
    "body": "**Describe the bug**\r\nRequiring `svelte/register` fails as it is not defined in the package exports\r\n\r\n**Logs**\r\n```\r\nnode:internal/modules/cjs/loader:462\r\n      throw e;\r\n      ^\r\n\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './register' is not defined by \"exports\" in /Users/fraser/Code/svelte-router/node_modules/svelte/package.json\r\n    at new NodeError (node:internal/errors:258:15)\r\n    at throwExportsNotFound (node:internal/modules/esm/resolve:290:9)\r\n    at packageExportsResolve (node:internal/modules/esm/resolve:513:3)\r\n    at resolveExports (node:internal/modules/cjs/loader:456:36)\r\n    at Function.Module._findPath (node:internal/modules/cjs/loader:496:31)\r\n    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:887:27)\r\n    at Function.Module._load (node:internal/modules/cjs/loader:745:27)\r\n    at Module.require (node:internal/modules/cjs/loader:972:19)\r\n    at require (node:internal/modules/cjs/helpers:88:18)\r\n    at Object.<anonymous> (/Users/fraser/Code/svelte-router/dist/tests.js:3:1) {\r\n  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'\r\n}\r\nerror Command failed with exit code 1.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\n**To Reproduce**\r\n```javascript\r\nrequire('svelte/register');\r\n```\r\n\r\n**Expected behavior**\r\nRegister to be loaded\r\n\r\nSvelte version `3.29.6`\r\n",
    "closedAt": "2020-11-10T15:55:40Z",
    "createdAt": "2020-11-10T15:26:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDc5MzM3Nw==",
          "body": "Fixed in 3.29.7 - thank you for your PR!",
          "createdAt": "2020-11-10T15:55:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mzk3NTc3Njg=",
    "body": "Using component to compose head contents from an object as Head.svelte:\r\n\r\n```\r\n<svelte:head>\r\n  {#if title}\r\n    <title>{title}</title>\r\n  {/if}\r\n  {#if meta}\r\n    {#each Object.entries(meta) as [ name, content ]}\r\n      <meta {name} {content} />\r\n    {/each}\r\n  {/if}\r\n</svelte:head>\r\n```\r\n\r\nBy including this component on any page as:\r\n\r\n```\r\n<Head {props} />\r\n```\r\n\r\nThe initial page loaded by the user has duplicated meta tags. \r\nInteresting thing is, by navigating to other pages where such component is present, the second batch of duplicated tags are updated as expected. Title tag is not duplicated, but all meta tags has duplicate of initial page's load and persists forever.\r\n\r\nI am using sapper, but I think it is the Svelte related issue.\r\n\r\nVersions I use:\r\n -  \"sapper\": \"^0.28.10\",\r\n - \"svelte\": \"^3.29.4\".\r\n\r\nSame thing as [#4533](https://github.com/sveltejs/svelte/issues/4533), but <title> tag works fine.\r\n",
    "closedAt": null,
    "createdAt": "2020-11-10T09:52:29Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mzk1NDc1NzI=",
    "body": "Currently I have to use `any` when defining my event handler or my IDE complains.\r\n```svelte\r\n<script lang=\"ts\">\r\nexport let value = '';\r\n\r\nconst handleValueChange: any = (e: CustomEvent<HTMLInputElement>) => {\r\n    value = e.detail.value;\r\n  };\r\n</script>\r\n\r\n<input\r\n  on:change={handleValueChange}\r\n  type=\"text\"\r\n/>\r\n```\r\n\r\nIDE message:\r\n```\r\nType '(e: CustomEvent<HTMLInputElement>) => void' is not assignable to type 'EventHandler<Event, HTMLInputElement>'.\r\n  Types of parameters 'e' and 'event' are incompatible.\r\n    Type 'Event & { currentTarget: EventTarget & HTMLInputElement; }' is missing the following properties from type 'CustomEvent<HTMLInputElement>': detail, initCustomEventts(2322)\r\n```",
    "closedAt": "2020-11-10T06:22:25Z",
    "createdAt": "2020-11-10T03:51:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDQ4NTMyNA==",
          "body": "The type error is correct. `on:change` is a native Dom event, not a custom event, so the type is is different.",
          "createdAt": "2020-11-10T06:22:25Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDY2MjM4OQ==",
          "body": "It's possible to create a `CustomEvent` and dispatch it to a DOM element.\n\nSee here:\nhttps://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events",
          "createdAt": "2020-11-10T12:11:06Z",
          "author": { "login": "ConnorDY", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDY2NjYxOQ==",
          "body": "Although that is true, I do not see evidence that this is the case in your situation. Also, we need to make a trade-off of type-safety vs the \"anything goes\"-nature of the DOM. The 90% use case is that `on:change` is triggered due to its native DOM event, so we typed for this situation. For the 10% case where this is not true, you need to fall back to `any` like you did in your case.",
          "createdAt": "2020-11-10T12:19:07Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDY3MDc3Mw==",
          "body": "I did not post the full code because I didn't think it was necessary. I was attempting to implement USWDS's Date Picker component with Svelte. They use `CustomEvent`s for several of their components. Is it not possible to expand the type?",
          "createdAt": "2020-11-10T12:27:42Z",
          "author": { "login": "ConnorDY", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDY3NTI0NA==",
          "body": "[You can add a file with your own typings](https://github.com/sveltejs/language-tools/blob/master/docs/preprocessors/typescript.md#im-using-an-attributeevent-on-a-dom-element-and-it-throws-a-type-error).",
          "createdAt": "2020-11-10T12:37:11Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDY3NjA1OQ==",
          "body": "Perfect. Thanks!",
          "createdAt": "2020-11-10T12:38:54Z",
          "author": { "login": "ConnorDY", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mzk1MjQ5Njc=",
    "body": "**Describe the bug**\r\nI'm coming from React, where I may do something like the following in an `index.ts` file:\r\n```typescript\r\nimport SomeComponent from './SomeComponent.jsx`;\r\n\r\nexport {\r\n  SomeComponent,\r\n  SomeOtherComponent,\r\n};\r\n```\r\n\r\nI tried following this pattern in Svelte with:\r\n```typescript\r\nimport DatePicker from './DatePicker.svelte';\r\n\r\nexport { DatePicker };\r\n```\r\n\r\nThen in `App.svelte`, I tried:\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { DatePicker } from './components';\r\n</script>\r\n```\r\n\r\nIt resulted in the error below.\r\n\r\n**Logs**\r\n```\r\nCould not load /home/connor/Projects/svelte-test/src/components/index.ts (imported by src/App.svelte): Debug Failure. False expression: Expected fileName to be present in command line\r\n```\r\n\r\n**To Reproduce**\r\nI included steps to reproduce above.\r\n\r\n**Expected behavior**\r\nI'd expect to be able to import multiple components exported from a directory with an `index.ts` or `index.js` or any other file that imports and then exports multiple components.\r\n\r\n**Information about your Svelte project:**\r\n- Your operating system: Arch Linux\r\n\r\n- Svelte version: `^3.0.0`\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nThis isn't too bad as I can work around this by using multiple import statements with the full path. Fixing this would be a nice to have.\r\n",
    "closedAt": "2020-11-10T02:59:57Z",
    "createdAt": "2020-11-10T02:53:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDQxNzE2MA==",
          "body": "I just realized if I rename `index.ts` to `index.js` it works as expected. This is a Typescript specific issue.",
          "createdAt": "2020-11-10T02:56:44Z",
          "author": { "login": "ConnorDY", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDQxODA1MQ==",
          "body": "I'm not sure what happened, but I renamed it back to `index.ts` and now it's working.",
          "createdAt": "2020-11-10T02:59:57Z",
          "author": { "login": "ConnorDY", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzkyNDM5MTM=",
    "body": "There is a problem in the current version of sveltejs/template. When I run:\r\n\r\n```bash\r\nnpx degit sveltejs/template temp\r\ncd temp\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\nI get the following error:\r\n\r\nPackage subpath './compiler.js' is not defined by \"exports\" in {path to temp/node_modules/svelte/package.json}.\r\n\r\nThis seems to have been introduced in version 3.29.5 of svelte. It works fine in 3.29.4.",
    "closedAt": "2020-11-09T18:06:49Z",
    "createdAt": "2020-11-09T18:02:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE4MDQ2MA==",
          "body": "Try upgrading `rollup-plugin-svelte` to 6.1.1. This should have been fixed by https://github.com/sveltejs/rollup-plugin-svelte/pull/151",
          "createdAt": "2020-11-09T18:06:49Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE4MDgzMg==",
          "body": "And also upgrade to Svelte 3.29.6\r\n",
          "createdAt": "2020-11-09T18:07:35Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE4NTk5Mg==",
          "body": "@benmccann That worked. But why did it not work when I created a new project using degit? The package.json from that uses caret versions, so I thought it would use the same versions you suggested. Interestingly it is working now. Not sure if something changed in the sveltejs/template repo today.",
          "createdAt": "2020-11-09T18:16:50Z",
          "author": { "login": "mvolkmann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE4Njg2MA==",
          "body": "Yes, we made changes today. I'm guessing you created your project before those changes.",
          "createdAt": "2020-11-09T18:18:17Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTQ1NTcyMg==",
          "body": "but there shouldnt be breaking changes in the same major version anyways right ?  \r\ni had an existing project and sometimes i delete the package lock and reinstall my node modules. this time i ran into the issue above even though i got caret versions. what is the matter of this breaking change ? ",
          "createdAt": "2020-11-11T14:31:46Z",
          "author": { "login": "breuerfelix", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzkyMjc5NTM=",
    "body": "Hey,\r\nIs it at all possible to do something like this:\r\n\r\n```\r\n// CompB\r\n<script>\r\nimport CompA from '...'\r\n</script>\r\n\r\n<CompA child={<SomeCompC />} />\r\n```\r\n\r\n```\r\n// CompA\r\n<script>\r\nexport let child: SvelteElement;\r\n </script>\r\n\r\n<SvelteElement />\r\n```\r\n\r\nLooking forward for your response,\r\nThank you for your amazing contributions!\r\nYou rock!\r\n\r\n",
    "closedAt": "2020-11-09T17:43:11Z",
    "createdAt": "2020-11-09T17:39:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE2NzIyNQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).\r\n\r\nBut the short answer is that no you can't do that directly, though there are other similar things you can do, depending on what your goal is.",
          "createdAt": "2020-11-09T17:43:11Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE2Nzg0Mg==",
          "body": "Thank you for the quick reply",
          "createdAt": "2020-11-09T17:44:16Z",
          "author": { "login": "omerman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE2ODA1Mg==",
          "body": "https://svelte.dev/docs#slot might be what you need",
          "createdAt": "2020-11-09T17:44:40Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE3MTc2MQ==",
          "body": "@dummdidumm Thanks, I'm familiar with slots, but I was wondering if there is another alternative as well.. :)",
          "createdAt": "2020-11-09T17:51:16Z",
          "author": { "login": "omerman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTQzOTM4MQ==",
          "body": "> @dummdidumm I was wondering if there is another alternative as well.. :)\r\n\r\n```html\r\n<script>\r\nimport SomeCompC from './SomeCompC.svelte';\r\nimport CompA from './CompA.svelte'\r\n</script>\r\n\r\n<CompA child={SomeCompC}/> <!-- no tag around SomeCompC -->\r\n\r\n// In CompA.svelte\r\n<script>\r\nexport let child;\r\n</script>\r\n\r\n<svelte:component this={child}/> <!-- a special component, allowing you to pass in an arbitrary component as \"this\"-->\r\n```\r\n",
          "createdAt": "2020-12-06T01:12:06Z",
          "author": { "login": "finnbear", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzkxOTQwNDk=",
    "body": "Running `npm publish` with npm@7 produces the proper `PUBLISH=true` build of the compiler, runs tests against it, and then apparently re-creates a non-`PUBLISH=true` build right before packaging things up to publish them. I tried fixing this in e2fa0e0fdb3ade785a13719c919494ae77df7b39 but that broke Windows builds and I reverted it.\r\n\r\nI tried looking at npm@7's changelog to see what changed that would have caused this, but didn't find anything. I don't see any references to the `prepare` script being re-run. For now, I'm just going to publish with npm@6, but we should sort this out sometime soon.",
    "closedAt": null,
    "createdAt": "2020-11-09T16:52:13Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzA5NDkzOA==",
          "body": "Now that `npm@latest` is v7, I took another look at this, and it appears to still be happening. I'm really tempted to just remove the `prepare` script, but I'm worried about that breaking stuff for people who are installing from Git branches or forks and rely on install-time building of the compiler.",
          "createdAt": "2021-02-10T23:03:20Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzA5OTI1MQ==",
          "body": "I did just try that, and removing the `prepare` script seemed to make this work with npm v7. I still don't get why this change is happening though. I don't see any relevant differences between https://docs.npmjs.com/cli/v6/using-npm/scripts and https://docs.npmjs.com/cli/v7/using-npm/scripts.",
          "createdAt": "2021-02-10T23:12:32Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzEyMDE5NA==",
          "body": "npm seems to be trying really hard to hide when and how the `build` script is getting run the second time. I put lots of `&& echo &&`s and `&& env &&`s into various scripts, but I never saw any logs triggered by the second build. (I guess if they succeeded, npm swallowed stdout?) I eventually caught it by doing `sudo chown root compiler.js` while the tests were running - and now I finally have some error logs that I haven't been able to understand yet.",
          "createdAt": "2021-02-10T23:55:27Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzEzNDIyMg==",
          "body": "Okay, it's not just an environment variable difference between v6 and v7. With the same `chown` trick, `npm publlish` finishes fine in v6, meaning the build script is never even called again.",
          "createdAt": "2021-02-11T00:33:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzEzODc3MA==",
          "body": "The difference is the order that `prepare` and `prepublishOnly` are called. I've opened https://github.com/npm/cli/issues/2668 to find out whether this is a bug.",
          "createdAt": "2021-02-11T00:46:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NzE5NzQyOQ==",
          "body": "We shouldn't just remove the `prepare` script, I'm realizing, since we depend on that to produce the initial build required for linting the project. This would (among other things) break CI.",
          "createdAt": "2021-02-11T04:35:16Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MDg1MzQ3MA==",
          "body": "Updating the lifecycle docs to reflect reality is a TODO on npm's end - https://github.com/npm/statusboard/issues/267\r\n\r\nAccording to the WIP PR https://github.com/npm/cli/pull/2690 it sounds like it is expected that `prepare` run after `prepublishOnly`, which means that we'll need some more permanent way of handling this. I don't know whether #5983 is that solution. But it should at least prevent bad builds from being published, so I'm going to merge it now, but keep this issue open.",
          "createdAt": "2021-02-17T21:06:56Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzkxODkyNzk=",
    "body": "See\r\nhttps://github.com/markfirmware/snowpack-svelte-hmr/blob/master/README.md\r\n\r\nPerhaps someone here can be of assistance?\r\n\r\ncc fyi @UARTman @FredKSchott",
    "closedAt": "2020-11-09T17:00:26Z",
    "createdAt": "2020-11-09T16:46:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE0MjI0NQ==",
          "body": "It's a TypeScript/Definitely Typed issue, tracking it here (with a short-term fix): https://github.com/snowpackjs/snowpack/discussions/1533",
          "createdAt": "2020-11-09T16:59:27Z",
          "author": { "login": "FredKSchott", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzkxODEyMDc=",
    "body": "Congrats on releasing the new export map! Quick issue spotted: Node.js doesn't default to include the package.json file as part of your package, meaning tooling/consumers can't `require('svelte/package.json'). The Rollup plugin currently does this, as do many others.\r\n\r\nSnowpack's Svelte template is broken as a result.\r\n\r\nThe fix is to add this to your export map:\r\n\r\n```diff\r\n\"exports\": {\r\n+    \"./package.json\": \"./package.json\"\r\n}\r\n```\r\n\r\n",
    "closedAt": "2020-11-09T16:52:52Z",
    "createdAt": "2020-11-09T16:37:14Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEyODQ1Ng==",
          "body": "Since this went out as a patch release, I'd recommend a quick follow up patch to add.",
          "createdAt": "2020-11-09T16:37:54Z",
          "author": { "login": "FredKSchott", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEzNzU4Mg==",
          "body": "```\r\n** RUNNING ROLLUP: prod: true **\r\nBundling: dynamic\r\n[!] Error: Package subpath './package.json' is not defined by \"exports\" in <path>/site/node_modules/svelte/package.json\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './package.json' is not defined by \"exports\" in <path>/site/node_modules/svelte/package.json",
          "createdAt": "2020-11-09T16:53:02Z",
          "author": { "login": "bradak1", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEzOTYzMA==",
          "body": "@MylesBorins is there a thread where this \"package.json not automatically included in export map\" behavior is already being discussed? I've seen this issue bite so many packages trying to upgrade to an export map, and it's only going to keep happening. \r\n\r\nIf it hasn't been proposed yet, I'd like to start a thread.",
          "createdAt": "2020-11-09T16:55:15Z",
          "author": { "login": "FredKSchott", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE0MTAwNQ==",
          "body": "Thanks! Fixed in 3.29.6 - https://unpkg.com/svelte@3.29.6/package.json",
          "createdAt": "2020-11-09T16:57:31Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE0MzkzOQ==",
          "body": "not fixed, now I get error for `compiler.js`:\r\n```\r\n** RUNNING ROLLUP: prod: true **\r\nBundling: dynamic\r\n[!] Error: Package subpath './compiler.js' is not defined by \"exports\" in <path>/site/node_modules/svelte/package.json\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './compiler.js' is not defined by \"exports\" in <path>/site/node_modules/svelte/package.json\r\n```",
          "createdAt": "2020-11-09T17:02:19Z",
          "author": { "login": "bradak1", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE0NjMzOA==",
          "body": "The export map contains\r\n\r\n```\r\n    \"./compiler\": {\r\n      \"import\": \"./compiler.mjs\",\r\n      \"require\": \"./compiler.js\"\r\n    },\r\n```\r\n\r\nWhich I assume means that things need to use `svelte/compiler` and that something is using `svelte/compiler.js`. Do we need to also support `svelte/compiler.js`? In your case, what's trying to `import`/`require` that? Is it the Rollup plugin?",
          "createdAt": "2020-11-09T17:06:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE0Nzc1OQ==",
          "body": "yes, rollup",
          "createdAt": "2020-11-09T17:09:01Z",
          "author": { "login": "bradak1", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE0ODMxMw==",
          "body": "Yeah, I see it at https://github.com/sveltejs/rollup-plugin-svelte/blob/65fbfc7824b7e86e546ed064bf6d94b87ebb7b37/index.js#L15 - This will be fixed in the next major version of the Rollup plugin, but we should either also support importing from `svelte/compiler.js` in the export map, or we should backport a fix to 6.x of the Rollup plugin to use `svelte/compiler`. I don't know which is more proper.",
          "createdAt": "2020-11-09T17:10:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE1ODAwMw==",
          "body": "This should be fixed with rollup-plugin-svelte@6.1.1.",
          "createdAt": "2020-11-09T17:26:48Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE2MDI5NA==",
          "body": "yup, it's fixed.  Thx!",
          "createdAt": "2020-11-09T17:30:43Z",
          "author": { "login": "bradak1", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE4ODI3Nw==",
          "body": "> @MylesBorins is there a thread where this \"package.json not automatically included in export map\" behavior is already being discussed? I've seen this issue bite so many packages trying to upgrade to an export map, and it's only going to keep happening.\r\n>\r\n> If it hasn't been proposed yet, I'd like to start a thread.\r\n\r\nOh hi!\r\n\r\nThere is a historical thread https://github.com/nodejs/modules/issues/445\r\n\r\nTL;DR while it is \"unexpected\" today, the general intent of exports is to make the contract for a module explicit, and the general thought was that exposing the package.json as part of the module API should be opt-in by the module author\r\n\r\nMaking a carve out in exports for `package.json` imho complicates the API, and while there is a mismatch with current expectation, it would be more confusing in the long term.\r\n\r\nOne solution that has been discussion is exposing an API in Node.js core that would make it easy for tools / module consumers to easily get the path to a package.json. This is being discussed in https://github.com/nodejs/modules/issues/516\r\n\r\nWith this type of util api you would be able to do something like\r\n\r\n```js\r\nimport { readFile } from 'fs/promises';\r\nimport { resolvePackageRoot } from 'module';\r\nconst svelteRoot = await resolvePackageRoot('svelte');\r\nconst svelteJSON = JSON.parse(await readFile(svelteRoot + '/package.json'));\r\n```\r\n\r\nWhile this is definitely more verbose it would be consistent and reliable for all packages while still allowing a module author to not make the package.json part of their packages API by default.",
          "createdAt": "2020-11-09T18:20:50Z",
          "author": { "login": "MylesBorins", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDIwNjYxMg==",
          "body": "Thanks @MylesBorins, responded in historical thread.",
          "createdAt": "2020-11-09T18:51:13Z",
          "author": { "login": "FredKSchott", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzkxNDE4NjE=",
    "body": "\r\n\r\n### **Is your feature request related to a problem? Please describe.**\r\nYes. It appears that the [shorthand attribute](https://svelte.dev/tutorial/dynamic-attributes#shorthand-attributes) functionality is attempting to provide a familiar syntax that mirrors ES2015's [shorthand property names](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015) and ES2018's [spread in object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals).\r\n\r\nHowever, it appears to be incomplete, as shown in the following example:\r\n\r\n```html\r\n<script>\r\n  const src   = \"https://miro.medium.com/max/4000/1*KUy_KKExZrSpBuv9XfyBgA.png\"\r\n  const width = 300\r\n\r\n  const foo = {src, width}\r\n  const bar = {src}\r\n  const baz = {width}\r\n</script>\r\n\r\n<img {src} {width}    /> <!-- works as expected -->\r\n<img {...foo}         /> <!-- works as expected -->\r\n<img {...bar} {...baz}/> <!-- works as expected -->\r\n<img {src, width}     /> <!-- ParseError        -->\r\n<img {src, ...baz}    /> <!-- ParseError        -->\r\n<img {...bar, ...baz} /> <!-- ParseError        -->\r\n```\r\n\r\n```\r\n[!] (plugin svelte) ParseError: Expected }\r\nsrc\\App.svelte\r\n13: <img {src, width}/>\r\n               ^\r\nParseError: Expected }\r\n  at error (.\\node_modules\\svelte\\src\\compiler\\utils\\error.ts:25:16)\r\n  at Parser$1.error (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:100:3)\r\n  at Parser$1.eat (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:116:9)\r\n  at read_attribute (.\\node_modules\\svelte\\src\\compiler\\parse\\state\\tag.ts:327:11)\r\n  at tag (.\\node_modules\\svelte\\src\\compiler\\parse\\state\\tag.ts:173:22)\r\n  at new Parser$1 (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:52:12)\r\n  at parse (.\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:215:17)\r\n  at compile (.\\node_modules\\svelte\\src\\compiler\\compile\\index.ts:78:14)\r\n  at .\\node_modules\\rollup-plugin-svelte\\index.js:252:22\r\n```\r\n\r\n### **Describe the solution you'd like**\r\nThe shorthand attribute syntax should allow multiple attributes to provide a more seamless & intuitive developer experience.\r\n\r\nSpread resolution should match that of ES2018, e.g.\r\n```js\r\nexpect({...{a:1, b:2}, ...{a:100}})\r\n.toMatchObject({a:100, b:2})\r\n```",
    "closedAt": null,
    "createdAt": "2020-11-09T15:48:20Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mzg1MjcyMDM=",
    "body": "**Describe the bug**\r\nBound select value is not updated when the option list is updated.\r\n\r\n**To Reproduce**\r\nSee REPL [here](https://svelte.dev/repl/0027dd3f970846de9e7b9121fd5faa02?version=3.29.4) and switch first select value twice and try to select \"a\" in the other one. Going from \"first\" to \"second\" should also select \"b\" \r\n\r\n**Expected behavior**\r\nUpdating the list of options should change the value of the select to a value available in the new list\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 86.0.4240.183\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version: 3.29.4\r\n\r\n- Whether your project uses Webpack or Rollup: Webpack\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nAnnoying, might have some workaround\r\n\r\n**Possibly related issues**\r\n\r\n* https://github.com/sveltejs/svelte/issues/1764\r\n* https://github.com/sveltejs/svelte/issues/5051\r\n* https://github.com/sveltejs/svelte/issues/5641\r\n",
    "closedAt": "2020-11-09T21:54:32Z",
    "createdAt": "2020-11-08T18:37:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzk0MDcxMw==",
          "body": "Hello. How about this solution? https://svelte.dev/repl/2ededb1729df464299370679bb9b614a?version=3.29.4",
          "createdAt": "2020-11-09T11:02:52Z",
          "author": { "login": "zyxd", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDMwMDk5MA==",
          "body": "That works great, thanks!",
          "createdAt": "2020-11-09T21:54:32Z",
          "author": { "login": "OskarPersson", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mzg0ODg1NzA=",
    "body": "I was having a problem with binding the checked attribute in combination with a Promise. I made a REPL that demonstates this weird behaviour: https://svelte.dev/repl/3d0a1c1ad9824764b03016cf5b759305?version=3.29.4\r\n\r\nOn my setup I even get an infinite loop which breaks the browser, but I can't reproduce that on the REPL.\r\n\r\nWhat I found out so far:\r\n\r\n* Once the checkbox (with `bind:checked`) gets klicked the object updates, but the Promise resolves again and overrides the value.\r\n* The issue only happens if `entries$` is a prop. If I declare the Promise inside the List component, it works as I expect.\r\n* The issue only happens if I use `bind:checkbox`. When using `checked={} on:input={}` it works a I expect.\r\n\r\nThis feels like a bug with the binding directive. If anyone can look into this, I would appreciate it a lot!",
    "closedAt": null,
    "createdAt": "2020-11-08T15:20:45Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzYxMjg1Mg==",
          "body": "**Update:**\r\n\r\nI was able to solve my issue by using a store. If using a store is generally the recommended way to handle this, this issue can be closed.",
          "createdAt": "2020-11-08T16:15:32Z",
          "author": { "login": "timrosskamp", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzgyMDQ1OTk=",
    "body": "**Describe the bug**\r\nDestructuring into a svelte store directly, without typing the prop name in a rename syntax results in undefined behavior.\r\n```js\r\nimport {writable} from 'svelte/store'\r\nlet userName1 = writable('')\r\nlet userName2 = writable('')\r\nlet userName3 = writable('')\r\nlet obj = {userName1: 'user1', userName2: 'user2', userName3: 'user3'}\r\n;({userName1: $userName1, $userName2 } = obj)\r\n;({$userName3} = obj)\r\n// $userName1 === 'user1'\r\n// $userName2 === undefined\r\n// $userName3 === obj\r\n```\r\n\r\n**To Reproduce**\r\n<https://svelte.dev/repl/1e4f6ca9cf9c4f60ab48f40c5cf73d2a?version=3.29.4>\r\n\r\n**Expected behavior**\r\n`$userName1` works as expected.\r\n`$userName2` and `$userName3` are erroneous. I am not sure what behavior should be expected here, but what occurs is certainly not it. We could \r\n\r\n1) throw an error (possibly at compile time).\r\n2) Attempt to destructure the prop with the same name. That is, `$userName3` should look for a prop named `$userName3` and get undefined (matching what appears to happen to userName2). This is a no magic solution following standard js behavior.\r\n3) Attempt to access the prop with the same name as the store, without the dollar sign. So `$userName2` and `$userName3` would get `obj.userName2` and `obj.userName3` respectively. This is a magic solution that makes sense combined with the inherit magic of stores.\r\n\r\n**Severity**\r\nLow. I think attempting to destructure in any way other than the way I did with `$userName1` is asking for trouble. I have no intention of trying to de-structure into stores any other way, if I destructure into stores at all.  \r\n\r\n**Additional context**\r\nFound due to question asked by [OwnageJuice](https://discord.com/channels/457912077277855764/457912077277855766/774541807849570305)\r\n",
    "closedAt": null,
    "createdAt": "2020-11-07T09:06:57Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mzc3MzU1Njk=",
    "body": "The tutorial page showing parallax scrolling works fine on desktop (mac/chrome) even in mobile mode, but the parallax doesn't occur on an iPhone/Chrome.\r\nhttps://svelte.dev/tutorial/svelte-window-bindings\r\n\r\nThe same can be said about https://firewatchgame.com\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-11-06T12:52:48Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mzc2OTkzNzI=",
    "body": "Hi guys, I have two snippets that are rendering a spinner on the page, the first one works, the second one does not, and it looks like it gets no css applied:\r\n\r\n- Loader.svelte:\r\n\r\n```\r\n<script>\r\n\r\n</script>\r\n\r\n<style>\r\n    .loader {\r\n        margin: auto;\r\n        border: 8px solid #f3f3f3;\r\n        border-top: 8px solid #0047bb; \r\n        border-radius: 50%;\r\n        width: 60px;\r\n        height: 60px;\r\n        animation: spin 1s linear infinite;\r\n    }\r\n\r\n    @keyframes spin {\r\n        0% { transform: rotate(0deg); }\r\n        100% { transform: rotate(360deg); }\r\n    }\r\n\r\n    .loader-container{\r\n        display: flex;\r\n        height: -webkit-fill-available;\r\n        align-items: center;\r\n        padding-bottom: 10rem;\r\n    }\r\n\r\n</style>\r\n<div class=\"loader-container\">\r\n    <div class=\"loader\"></div>\r\n</div>\r\n```\r\n\r\nBrokenLoader.svelte:\r\n\r\n```\r\n<script>\r\n</script>\r\n\r\n<style>\r\n  .loader {\r\n    margin: auto;\r\n    border: 8px solid #f3f3f3;\r\n    border-top: 8px solid #0047bb;\r\n    border-radius: 50%;\r\n    width: 60px;\r\n    height: 60px;\r\n    animation: spin 1s linear infinite;\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  .loader-container {\r\n    display: flex;\r\n    height: -webkit-fill-available;\r\n    align-items: center;\r\n    padding-bottom: 10rem;\r\n  }\r\n</style>\r\n\r\n<div class=\"loader-container\">\r\n  <div class=\"loader\" />\r\n</div>\r\n```\r\n\r\nthey are basically the same file, but with different whitspaces, the second one is made using default VScode formatting (shift + alt + f). \r\n\r\n- this is what I get when seeing changes in git:\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/5662280/98363038-9b3d4380-202e-11eb-97eb-ee4742e97bb5.png)\r\n\r\n\r\nI am using:\r\n\r\n- svelte 3.21.0\r\n- rollup 2.33.1",
    "closedAt": "2020-11-24T09:02:18Z",
    "createdAt": "2020-11-06T11:49:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzA1ODAxMw==",
          "body": "Do you have a more complete reproduction? Both of those are working for me when I paste them into the REPL.",
          "createdAt": "2020-11-06T12:35:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzI4ODkzNA==",
          "body": "I created this repo: [here](https://github.com/edge33/css-issue-svelte-poc) it looks like that with this example neither components are working, I cannot figure out what's the issue here",
          "createdAt": "2020-11-06T20:37:48Z",
          "author": { "login": "edge33", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTc0MzA4MQ==",
          "body": "@edge33 in that repo you are not loading in `bundle.css` in your index.html:\r\n\r\n`<link rel='stylesheet' href=\"/static/bundle.css\" th:href=\"@{static/bundle.css}\">`\r\n\r\nOnce I did that both were working fine for me. However I was wondering if perhaps some browsers do not like self closing div tags such as you have in your broken example:\r\n\r\n`<div class=\"loader\" />`",
          "createdAt": "2020-11-22T12:49:15Z",
          "author": { "login": "will093", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjc1NjU3NA==",
          "body": "Indeed. Thank you for your support, I guess we can close.",
          "createdAt": "2020-11-24T09:02:18Z",
          "author": { "login": "edge33", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzYzMjY0NjA=",
    "body": "**Describe the bug / to Reproduce**\r\n\r\nhttps://svelte.dev/repl/05d4178d85474b8a8c1541eb0d422848?version=3.29.4\r\n\r\nComponent A:\r\n\r\n```svelte\r\n<slot name=\"activator\" />\r\n```\r\n\r\nComponent B:\r\n\r\n```svelte\r\n<slot />\r\n```\r\n\r\nComponent C:\r\n\r\n```svelte\r\n<A>\r\n\t<div slot=\"activator\">\r\n\t\t<B>\r\n\t\t\t{#each matrix as row, indexRow}\r\n\t\t\t\t{#each row as cell, indexCell}\r\n\t\t\t\t\t<slot name=\"cell\" {row} {indexRow} {cell} {indexCell}>{cell}</slot>\r\n\t\t\t\t{/each}\r\n\t\t\t{/each}\r\n\t\t</B>\r\n\t</div>\r\n</A>\r\n```\r\n\r\nRegarding syntax highlighting, I use VSCode with `svelte.svelte-vscode` v102.4.0 and `ardenivanov.svelte-intellisense` v0.7.1\r\n\r\n**working** Component D (syntax highlighting broken):\r\n\r\n```svelte\r\n{#if visible}\r\n\t<C>\r\n\t\t<div slot=\"cell\" let:indexCell>&nbsp;</div>\r\n\t</C>\r\n{/if}\r\n```\r\n\r\n**not working** Component D (syntax highlighting correct):\r\n\r\n```svelte\r\n{#if visible}\r\n\t<C>\r\n\t\t<div slot=\"cell\" let:indexCell />\r\n\t</C>\r\n{/if}\r\n```\r\n\r\n**Logs**\r\nWhen running `npm run dev`:\r\n`client: Cannot read property 'index' of undefined`\r\n\r\nWhen using the REPL: `block.renderer.context_lookup.get(...) is undefined`\r\n\r\n**Expected behavior**\r\nWell..... it should work, or not xP\r\n\r\n**Information about your Svelte project:**\r\n- OS: Solus\r\n- Svelte version 3.29.4\r\n- Rollup\r\n\r\n**Severity**\r\nIt was quite annoying right now, and the workaround feels kinda fishy, but it seems to work. Just not what I expected, that I had to do. To be honest, I don't even know, what I changed, dramatically, that I got to this error in the first place, and I've not yet tracked the two relevant files of my project in git so I can't even look at a diff for those.\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-11-04T18:18:27Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMjQzOTA2MQ==",
          "body": "Is this the simplest possible reproduction that can be created? Perhaps make two REPLs - one with the broken code, one with the working code. It's nearly impossible to reason about the code in its current form.",
          "createdAt": "2020-11-05T15:11:13Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMjU5MzgzOA==",
          "body": "I've simplified and split the example:  \r\n- [working](https://svelte.dev/repl/d06dd510b95b4dd19753fc5e7775d7ee?version=3.29.4)  \r\n- [not working](https://svelte.dev/repl/a4db9dbbf2584946a6245df80d19302a?version=3.29.4)\r\n\r\nIt seems like an unused `let` on a slot element creates this error, but either removing the unused `let` or adding any child to the element fixes it.\r\nNow that I've simplified it, I'm kinda confused if this is supposed to be like this, because it's just such a simple thing that anyone who has done something with svelte really should've found this ?!",
          "createdAt": "2020-11-05T19:32:12Z",
          "author": { "login": "AnthyG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMjY0ODUyMQ==",
          "body": "Great thank you :) this will make it much easier to pin down.\n\nOn Thu, 5 Nov 2020 at 19:32, Anthony Garratt <notifications@github.com>\nwrote:\n\n> I've simplified and split the example:\n> [working](\n> https://svelte.dev/repl/d06dd510b95b4dd19753fc5e7775d7ee?version=3.29.4)\n> [not working](\n> https://svelte.dev/repl/a4db9dbbf2584946a6245df80d19302a?version=3.29.4)\n>\n> It seems like a unused let on a slot element creates this error, but\n> either removing the unused let or adding any child to the element fixes\n> it.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5646#issuecomment-722593838>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABVORP6OCU2QM4EAQTZ64DSOL4UXANCNFSM4TKMGQ3A>\n> .\n>\n-- \n________________________________\nꜽ . antony jones . http://www.enzy.org\n",
          "createdAt": "2020-11-05T21:13:17Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzU4ODgxNzg=",
    "body": "## Describe the bug\r\n\r\nVarious combinations of `{...}` spread and `bind:` together seem to cause the value that gets passed to `select_options` to be `undefined`.\r\n\r\nI'm not _exactly_ sure what the common thread is between these cases, but the following cases appear to be different manifestations/variations of the same bug.\r\n\r\nWhat all of these cases have in common appears to be:\r\n- they happen only with `<select multiple>`\r\n- they happen when it's trying (in `select_options`) to select the `option`s corresponding to the given array `value`\r\n- they have at least 1 spread (`{...something}`)\r\n- they have at least 1 `bind:` (either `bind:value` or `bind:this`)\r\n\r\n\r\n## Case 1: `bind:this` and only 1 spread (`$$restProps`)\r\n\r\nThis seems to be the simplest of all the repros that I've been able to come up with so far, so I'll list it first.\r\n\r\n### To reproduce\r\n\r\n[REPL](https://svelte.dev/repl/3f4314d4c5ed40c1979f59b4dd4de939?version=3.29.4):\r\n\r\n```svelte\r\n<Select\r\n  value={ ['1'] }\r\n  bind:element\r\n/>\r\n```\r\n\r\n```svelte\r\n<select\r\n  multiple\r\n  bind:this={element}\r\n  {value}\r\n  {...$$restProps}\r\n>\r\n  <option value=\"1\">option 1</option>\r\n  <option value=\"2\">option 2</option>\r\n</select>\r\n```\r\n\r\n### Expected behavior\r\n\r\n- I expected `select_options` to receive a `value` of `['1']`, since that is the value that was passed in by the `{value}`.\r\n- I expected the `{...$$restProps}` to have absolutely no effect, since `$$restProps` was an empty object, `{}`.\r\n\r\n### Actual behavior\r\n\r\nIt looks like it actually/eventually successfully selected the requested `option` (`1`):\r\n\r\n> ![image](https://user-images.githubusercontent.com/14151/98079075-1bde2300-1e28-11eb-9095-47e969dd7b99.png)\r\n\r\n_but_ yet it also somehow ended up giving this error:<br/>\r\n> `Uncaught TypeError: Cannot read property 'indexOf' of undefined`\r\n\r\n(see case 3 for stack trace)\r\n\r\n### Necessary conditions\r\n\r\nDoing any of these things makes the problem go away:\r\n- Replacing the dynamic spread value `{...$$restProps}`) with a static spread value (`{...{}}`) (even though they evaluate to the same value)\r\n- Replacing `{value}` and `{...$$restProps}` with a single spread (`{...{value, ...$$restProps}}`)\r\n- Removing either of the binds (the `bind:element` from `App.svelte` or the `bind:this` from `Select.svelte`)\r\n\r\nWhy would any of those things even matter / make it not work?\r\n\r\n\r\n## Case 2: `bind:value` and only 1 spread\r\n\r\n### To reproduce\r\n\r\n[REPL](https://svelte.dev/repl/acd79edfe592439cad56f0bf676da3db?version=3.29.4):\r\n\r\n```svelte\r\n<Select\r\n  input={{ value: ['1'] }}\r\n  other={{}}\r\n/>\r\n```\r\n\r\n```svelte\r\n<select\r\n  multiple\r\n  bind:value={value}\r\n  {...other}\r\n>\r\n  <option value=\"1\">option 1</option>\r\n  <option value=\"2\">option 2</option>\r\n</select>\r\n```\r\n\r\n### Expected behavior\r\n\r\n- I expected `select_options` to receive a `value` of `['1']`, since that is the value that was passed in by the `bind:value={value}`.\r\n- I expected the `{...other}` to have absolutely no effect, since `other` was an empty object, `{}`.\r\n\r\n### Actual behavior\r\n\r\n![image](https://user-images.githubusercontent.com/14151/98080161-dae70e00-1e29-11eb-966a-750a1e78a9ee.png)\r\n\r\n### Necessary conditions\r\n\r\nDoing any of these things makes the problem go away:\r\n- _Removing_ the spread (`{...other}`)\r\n- (Unlike in the previous case, replacing the dynamic spread value with a static spread value (`{...{}}`) _didn't_ make a difference here.)\r\n- Removing the `bind`: Changing `bind:value={value}` to `value={value}`\r\n\r\nWhy would any of those things even matter / make it not work?\r\n\r\n\r\n\r\n## Case 3: multiple spreads (2 components)\r\n\r\n### To reproduce\r\n\r\n[REPL](https://svelte.dev/repl/577bdc3619fb46faa1c95f7a75c97d62?version=3.29.4):\r\n\r\n```svelte\r\n<Select\r\n  input={{ value: ['1'] }}\r\n  bind:element\r\n/>\r\n```\r\n\r\n```svelte\r\n<select\r\n  multiple\r\n  bind:this={element}\r\n  {...input}\r\n  {...$$restProps}\r\n>\r\n  <option value=\"1\">option 1</option>\r\n  <option value=\"2\">option 2</option>\r\n</select>\r\n```\r\n\r\n### Expected behavior\r\n\r\n- I expected `select_options` to receive a `value` of `['1']`, since that is the value that was passed in by the `{...input}`.\r\n- I expected the `{...$$restProps}` to have absolutely no effect, since `$$restProps` was an empty object, `{}`.\r\n\r\n### Actual behavior\r\n\r\n![image](https://user-images.githubusercontent.com/14151/98081038-47aed800-1e2b-11eb-94b1-8339f06beda9.png)\r\n\r\n`Uncaught TypeError: Cannot read property 'indexOf' of undefined`\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\nIt doesn't appear to be possible to get a stack trace from the [REPL](https://svelte.dev/repl/577bdc3619fb46faa1c95f7a75c97d62?version=3.29.4), but this is the stack trace I got from my local project:\r\n\r\n```\r\nindex.mjs:386 Uncaught TypeError: Cannot read property 'indexOf' of undefined\r\n    at select_options (index.mjs:386)\r\n    at Object.update [as p] (Select.svelte:24)\r\n    at update (index.mjs:741)\r\n    at flush (index.mjs:709)\r\n    at init (index.mjs:1477)\r\n    at new App (App.svelte:16)\r\n    at main.ts:3\r\n    at main.ts:5\r\n```\r\n</details>\r\n\r\nThese lines are implicated:\r\n```js\r\nfunction select_options(select, value) {\r\n    for (let i = 0; i < select.options.length; i += 1) {\r\n        const option = select.options[i];\r\n        option.selected = ~value.indexOf(option.__value);  // <---\r\n    }\r\n}\r\n```\r\n```svelte\r\n<select\r\n  multiple\r\n  bind:this={element}\r\n  {...input}\r\n  {...$$restProps}  <---\r\n>\r\n  <option>option</option>\r\n</select>\r\n```\r\n\r\n**Logs**\r\n\r\n```\r\n  \"received input:\" ▶ Object { value: Array(1)[ … ] }\r\n  \"received $$restProps:\" ▶ Object { }\r\n  \"spreading input:\" ▶ Object { value: Array(1)[ … ] }\r\n  \"spreading $$restProps:\" ▶ Object { }\r\n\r\n  \"received $$restProps:\" ▶ Object { }\r\n  \"spreading $$restProps:\" ▶ Object { }\r\n```\r\n(see case 4 for more comments about the log output)\r\n\r\n### Necessary conditions\r\n\r\nDoing any of these things makes the problem go away:\r\n- Removing either of the binds (the `bind:element` from `App.svelte` or the `bind:this` from `Select.svelte`)\r\n- Replacing the 2 spreads (`{...input}` and `{...$$restProps}`) with a single spread (`{...{...input, ...$$restProps}}`)\r\n\r\nWhy would any of those things even matter / make it not work?\r\n\r\n\r\n\r\n## Case 4: multiple spreads (3 components)\r\n\r\nThis case is actually the first \"minimal\" repro I came up with, before I realized I could simplify things even further. As such, it more close resembles my actual use case. It's a bit more complex (3 components instead of 2) than the other examples, which is why I saved it for last.\r\n\r\nThe reason it is interesting is that it's the only one of my test cases where **changing the order of the 2 spreads seemed to make the problem go away**.\r\n\r\n### To reproduce\r\n\r\n[REPL](https://svelte.dev/repl/d4c998ac500343dab2616f766bc3cd4b?version=3.29.4):\r\n\r\n```svelte\r\n<Select\r\n  input={{ value: ['1'] }}\r\n  bind:element\r\n/>\r\n```\r\n\r\n```svelte\r\n<select\r\n  bind:this={element}\r\n  {...input}\r\n  {...$$restProps}\r\n>\r\n  <option value=\"1\">option 1</option>\r\n  <option value=\"2\">option 2</option>\r\n</select>\r\n```\r\n\r\n### Logs\r\n\r\nWith this order:\r\n```svelte\r\n<select\r\n  bind:this={element}\r\n  {...spreadInputVar(input)}\r\n  {...spreadRestPropsVar($$restProps)}\r\n>\r\n```\r\n\r\nyou get this:\r\n```\r\n\"received input:\" ▶ Object { multiple: true, value: Array(1)[ … ] }\r\n\"received $$restProps:\" ▶ Object { multiple: true }\r\n\"spreading input:\" ▶ Object { multiple: true, value: Array(1)[ … ] }\r\n\"spreading $$restProps:\" ▶ Object { multiple: true }\r\n\r\n\"received $$restProps:\" ▶ Object { multiple: true }\r\n\"spreading $$restProps:\" ▶ Object { multiple: true }\r\n```\r\n\r\nAdded that debug output to try to figure out when / in what order / how many times it was evaluating those spread expressions. I'm not sure if this is an accurate way to debug the Svelte internals (since I'm coming from a React, where I'm used to the expectation that _everything_ in a component gets re-evaluated whenever the component re-renders, so such output can actually tell you what things are or are not getting evaluated on subsequent re-renders) (and I haven't yet tried to analyze the generated source), but it _seems_ to indicate that it is spreading `$$restProps` a 2nd time _without_ also spreading `input` a 2nd time ...\r\n\r\nAnd if you reverse the order of the 2 spreads:\r\n```svelte\r\n<select\r\n  bind:this={element}\r\n  {...spreadInputVar(input)}\r\n  {...spreadRestPropsVar($$restProps)}\r\n>\r\n```\r\nyou get this:\r\n```\r\n\"received input:\" ▶ Object { multiple: true, value: Array(1)[ … ] }\r\n\"received $$restProps:\" ▶ Object { multiple: true }\r\n\"spreading $$restProps:\" ▶ Object { multiple: true }            [different order]\r\n\"spreading input:\" ▶ Object { multiple: true, value: Array(1)[ … ] }   [different order]\r\n\r\n\"received $$restProps:\" ▶ Object { multiple: true }\r\n\"spreading $$restProps:\" ▶ Object { multiple: true }\r\n```\r\n\r\nMy hypothesis was that maybe it's a bug with multiple spreads, where it remembers which keys came from spreads, and then when the spread object changes, it loops through those keys, to find out which ones have been added or removed since the last \"render\". This would work fine if there was only 1 spread. But when there's 2 spreads, perhaps when it loops over the keys from the first spread, including `value` key, it ends up using `{value: $$restProps.value}`, even though that prop doesn't even exist on $$restProps, so it ends up evaluating it as `{value: $$restProps.value}` which is how undefined ends up getting passed to `function select_options(select, value)`?\r\n\r\nI've tried replacing the `<select>` element with a custom component but couldn't reproduce any problem that way. That is, it received as `$$props`/`$$restProps` an object containing `{value: ['1']}` and never `{value: undefined}`\r\n\r\n### Expected behavior\r\n\r\nI expected `select_options` to receive a `value` of `['1']`, since that is the value that was passed in by the first spread. Expected `$$restProps` (since it contains no `value` key) to have no effect on the props/attributes that ultimately get received by the element.\r\n\r\n### Necessary conditions\r\n\r\nDoing any of these things makes the problem go away:\r\n- Reversing the order of the 2 spreads (`{...input}` and `{...$$restProps}`) makes the error go away (see output/comments above)\r\n  - But _not_ if I remove the `multiple: true,` from the `field` object in `Field.svelte`\r\n\r\nWhy would this even matter / make it not work?\r\n\r\n\r\n\r\n\r\n\r\n## Severity\r\n\r\nIt's not severe at all in a practical sense, since it can be worked around pretty easily.\r\n\r\nBut it's a quite surprising behavior. When things that seem like _shouldn't matter_ seem to actually do make a difference and break things, it makes me feel like the magic that Svelte does behind the scenes is too mysterious (since I can't even tell from the stack trace or debugger how it ended up with `value` _being_ `undefined`) and too fragile (things work as expected _most_ of the time, but when you hit a weird edge case like this, it makes you wonder how fragilely things are being held together behind the scenes)... So pretty severe in terms of trust issues.\r\n\r\n## Additional context\r\n\r\nPossibly related (but not the same): #4392/#4894.",
    "closedAt": null,
    "createdAt": "2020-11-04T07:41:36Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjYzNTYxMw==",
          "body": "I think this would happen when there's an update other than the value when there's a spread on `<select multiple />`.\r\n\r\nhttps://svelte.dev/repl/3b620ff33c8b4887a175017597ec1cc0?version=3.29.7\r\n\r\nI presume the `select_options` check here happens when there is any attribute update on the select element.\r\nhttps://github.com/sveltejs/svelte/blob/240f5410f38a8ee0ca55e56aeb6cb1aac7ae0025/src%2Fcompiler%2Fcompile%2Frender_dom%2Fwrappers%2FElement%2Findex.ts#L684\r\nbut when it's not the value got updated, the data (`select_data`) won't have value.",
          "createdAt": "2020-11-24T03:46:53Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNjE4NjQ0OA==",
          "body": "I would like to help with this one but I don't know what direction should we go. From my understanding, the reason for it is because the result of the `get_spread_update` here doesn't have value in it. So the value passed into the `select_options` function is `undefined`.\r\n\r\nhttps://github.com/sveltejs/svelte/blob/5980446c2cc0c32c2644eafcc79682bf1f1e942e/src%2Fcompiler%2Fcompile%2Frender_dom%2Fwrappers%2FElement%2Findex.ts#L666\r\n\r\nAnd this might happen when:\r\n1. It has a value attribute instead of a value property in the spreading object.\r\n```svelte\r\n<select {value} {...spreading} />\r\n```\r\n2. Attribute other than value changes, including `bind:this`\r\n```svelte\r\n<select {required} {value} {...spreading} />\r\n```\r\n\r\nThe second one can be avoided by not checking `select_options` when the attribute is not value or spreading. \r\nThe spreading probably needs some null check. But what should the null check be? Should we ignore it or fall back to an empty array? Because in this case the value would not be merged with spreading. It seems like we need to more check to see if the value is missing from the spreading object or removed from the spreading object.\r\n\r\n`bind:value` seems like another issue, it would be undefined in the mount and get an update later. We can add a null check but that would remove the error from the select multiple without an array value attribute, do we want to warn about it in other ways?",
          "createdAt": "2020-12-01T03:03:56Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzU1NzA5MjE=",
    "body": "i'm trying to create a nested drag and drop component, but it gives error ` Uncaught (in promise) Error: {#each} only iterates over array-like objects.` .  I tried using this as reference: [board example](https://svelte.dev/repl/e2ef044af75c4b16b424b8219fb31fd9?version=3.22.2).and this is the RPEL of the component, [https://svelte.dev/repl/2357f46610da4363a80348852473a227?version=3.29.4](https://svelte.dev/repl/2357f46610da4363a80348852473a227?version=3.29.4) ",
    "closedAt": "2020-11-03T20:33:01Z",
    "createdAt": "2020-11-03T19:12:26Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTM1OTk0MA==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-11-03T20:33:00Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzU0MDQxNjI=",
    "body": "**Describe the bug**\r\nThe selected value is known oncreate, but the <option> values are added later. The selected value isn't set when they are added.\r\n\r\nThis problem is like #1764 but for `value` instead of `bind:value`.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/63a13fa5f6e2425a970824691919b87f?version=3.29.4\r\nYou will see `three` on the select element\r\n\r\n**Expected behavior**\r\nYou should see `two` on the select element\r\n\r\n**Severity**\r\nThis is annoying but there is a workaround described on https://github.com/sveltejs/svelte/issues/1764#issuecomment-432382104\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-11-03T15:13:39Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTQ5MTExNQ==",
          "body": "I believe this is because the option is not available in the select element when it's set.  And also, would adding a option with the attribute `selected` not be the proper way to set a select input's value?",
          "createdAt": "2020-11-04T03:26:39Z",
          "author": { "login": "MichealPearce", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTQ5MjMxNg==",
          "body": "Would this work?\r\n\r\n```\r\n<script>\r\n\timport { onMount } from 'svelte'\r\n\r\n\tlet items = []\r\n\tlet selected = 'two'\r\n\r\n\tonMount(() => {\r\n\t\tsetTimeout(() => {\r\n\t\t\titems = ['One', 'Two', 'Three'].map(d => ({\r\n\t\t\t\tslug: d.toLowerCase(),\r\n\t\t\t\tname: d,\r\n\t\t\t}))\r\n\t\t}, 1000)\r\n\t})\r\n</script>\r\n\r\n<h2>{selected} is selected</h2>\r\n\r\n{#if items.length}\r\n\t<select>\r\n\t\t{#each items as item (item.slug)}\r\n\t\t\t<option value={item.slug} selected={item.slug === selected}>\r\n\t\t\t\t{item.name}\r\n\t\t\t</option>\r\n\t\t{/each}\r\n\t</select>\r\n{/if}\r\n```",
          "createdAt": "2020-11-04T03:31:48Z",
          "author": { "login": "MichealPearce", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMjQxMTUyMw==",
          "body": "> I believe this is because the option is not available in the select element when it's set. And also, would adding a option with the attribute `selected` not be the proper way to set a select input's value?\r\n\r\nThis works for `bind:value`, and for what I read on other issues this should work for `value` also, it is only not working. This seems like the only inconsistency between `bind:value` and `value`.\r\n\r\n> Would this work?\r\n> \r\n> ```\r\n> <script>\r\n> \timport { onMount } from 'svelte'\r\n> \r\n> \tlet items = []\r\n> \tlet selected = 'two'\r\n> \r\n> \tonMount(() => {\r\n> \t\tsetTimeout(() => {\r\n> \t\t\titems = ['One', 'Two', 'Three'].map(d => ({\r\n> \t\t\t\tslug: d.toLowerCase(),\r\n> \t\t\t\tname: d,\r\n> \t\t\t}))\r\n> \t\t}, 1000)\r\n> \t})\r\n> </script>\r\n> \r\n> <h2>{selected} is selected</h2>\r\n> \r\n> {#if items.length}\r\n> \t<select>\r\n> \t\t{#each items as item (item.slug)}\r\n> \t\t\t<option value={item.slug} selected={item.slug === selected}>\r\n> \t\t\t\t{item.name}\r\n> \t\t\t</option>\r\n> \t\t{/each}\r\n> \t</select>\r\n> {/if}\r\n> ```\r\n> \r\n> ![](chrome-extension://annlhfjgbkfmbbejkbdpgbmpbcjnehbb/images/saveicon.png) Save\r\n\r\nThis works, as I pointed the same workaround in the issue itself.\r\n",
          "createdAt": "2020-11-05T14:26:28Z",
          "author": { "login": "mynomoto", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzQ4OTQyNzk=",
    "body": "**Describe the bug**\r\nI couldn't find an issue about it, and the docs don't mention the behaviour either. Is it expected behaviour that an animation of an element blocks a transition of it?\r\n\r\n![bug](https://user-images.githubusercontent.com/33468089/97928478-6cda1280-1d67-11eb-8b45-6185a72f8bde.gif)\r\n\r\n**To Reproduce**\r\n1. Create list of elements that changes over time, e.g. with an ephemeral list store.\r\n2. Put a transition and animation on these elements.\r\n3. Schedule the changes such that the transition happens at the same time as the animation.\r\n\r\nhttps://svelte.dev/repl/40d4bef097c645189e1a4d73d76ec79f?version=3.29.4\r\n\r\n**Expected behavior**\r\nI'd expect a transition of to not be blocked by an animation, the same way that two transitions don't block each other.",
    "closedAt": null,
    "createdAt": "2020-11-02T23:00:11Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDc4NzAwOQ==",
          "body": "Unfortunately this is expected, as css only applies the latest occurrence of a property, only the latest `transform` is taken into account",
          "createdAt": "2020-11-02T23:37:52Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzQ3OTA1NjI=",
    "body": "Correct 3.26.0:  https://svelte.dev/repl/500217b3f4eb42dba79609a51d8bec5d?version=3.26.0\r\n\r\nThe same in 3.29.4:  https://svelte.dev/repl/500217b3f4eb42dba79609a51d8bec5d?version=3.29.4\r\n\r\nSvelte generates invalid selector\r\n",
    "closedAt": "2021-01-26T15:26:19Z",
    "createdAt": "2020-11-02T20:17:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDcwNDY1NQ==",
          "body": "I think this might be a duplicate of #5499.",
          "createdAt": "2020-11-02T20:25:05Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzQ0OTY2Mzc=",
    "body": "**Describe the bug**\r\n\r\nIn the Brave browser opening the dev tools causes all styling to be removed. To keep it simple I just copied a code snippet from the [svelte examples](https://svelte.dev/examples#styling) to make sure it wasn't just me doing something stupid.\r\n\r\nI'm using the rollup template as described in the getting started. I replaced the very basic App.svelte with:\r\n\r\n```html\r\n<style>\r\n\tp {\r\n\t\tcolor: purple;\r\n\t\tfont-family: 'Comic Sans MS', cursive;\r\n\t\tfont-size: 2em;\r\n\t}\r\n</style>\r\n\r\n<p>Styled!</p>\r\n```\r\n\r\nThen I run `npm run dev` and see this:\r\n\r\n![image](https://user-images.githubusercontent.com/781745/97871162-58205f00-1d14-11eb-920a-48fdf7c76c94.png)\r\n\r\nGreat. Then I open dev tools and see this:\r\n\r\n![image](https://user-images.githubusercontent.com/781745/97871292-93229280-1d14-11eb-8f16-f08a442664f2.png)\r\n\r\nI'm using the brave browser. **It works fine in chrome**.\r\n\r\n**Logs**\r\n\r\nN/A\r\n\r\n**To Reproduce**\r\n\r\n1. `npx degit sveltejs/template`\r\n2. `npm install`\r\n3. replace App with code snippet from above \r\n4. `npm run dev` \r\n5. Open in brave browser.\r\n\r\n> If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n\r\nIt doesn't break there.\r\n\r\n**Expected behavior**\r\n\r\nThe styling should not be removed.\r\n\r\n**Stacktraces**\r\n\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Brave _(Version 1.16.68 Chromium: 86.0.4240.111 (Official Build) (x86_64))_\r\n\r\n- Your operating system: MacOS _(10.15.7 (19H2))_\r\n\r\n- Svelte version/rollup: Whatever is included with the template right now. Here's the package.json file:\r\n\r\n```json\r\n{\r\n  \"name\": \"svelte-test\",\r\n  \"version\": \"1.0.0\",\r\n  \"scripts\": {\r\n    \"build\": \"rollup -c\",\r\n    \"dev\": \"rollup -c -w\",\r\n    \"start\": \"sirv public\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@rollup/plugin-commonjs\": \"^14.0.0\",\r\n    \"@rollup/plugin-node-resolve\": \"^8.0.0\",\r\n    \"rollup\": \"^2.3.4\",\r\n    \"rollup-plugin-livereload\": \"^2.0.0\",\r\n    \"rollup-plugin-svelte\": \"^6.0.0\",\r\n    \"rollup-plugin-terser\": \"^7.0.0\",\r\n    \"svelte\": \"^3.0.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"sirv-cli\": \"^1.0.0\"\r\n  }\r\n}\r\n```\r\n\r\n**Severity**\r\n\r\nI do not care that much. I don't use svelte. I just noticed it and thought I'd report it.\r\n\r\n**Additional context**\r\n\r\nN/A\r\n",
    "closedAt": null,
    "createdAt": "2020-11-02T13:14:37Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzQxNzYzNTM=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\nNeed `onTransitionIn` and `onTransitionOut` Component event on transition.\r\n\r\nCurrently `onMount` and `onDestroy` event exist and `onDestroy` is being called after the transition is fully ended.\r\nSome behaviors might be needed to be called just after out transition is started and svelte does not have it.",
    "closedAt": "2020-11-02T11:24:37Z",
    "createdAt": "2020-11-02T04:49:46Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDM4NzkyNg==",
          "body": "These already exist: https://svelte.dev/docs#Transition_events",
          "createdAt": "2020-11-02T10:37:10Z",
          "author": { "login": "PatrickG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDQxMjQ5Nw==",
          "body": "@PatrickG  holy moly.",
          "createdAt": "2020-11-02T11:24:37Z",
          "author": { "login": "orange4glace", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzM4MDkxOTU=",
    "body": "I'm working on a prototype and would like to get started with svelte3.\r\n\r\nHow do I install it etc?",
    "closedAt": "2020-11-01T11:25:42Z",
    "createdAt": "2020-10-31T21:18:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDA2ODUwNQ==",
          "body": "[https://svelte.dev/](https://svelte.dev/)\r\n\r\nnpx degit sveltejs/template my-svelte-project\r\ncd my-svelte-project\r\n\r\nnpm install\r\nnpm run dev",
          "createdAt": "2020-11-01T10:46:07Z",
          "author": { "login": "tohodakilla", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzM3NjQ1ODI=",
    "body": "https://github.com/sveltejs/rfcs/pull/13",
    "closedAt": "2021-04-30T15:36:36Z",
    "createdAt": "2020-10-31T17:06:04Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTk4MTUzNA==",
          "body": "Honestly, looks bad. It will wrap my component markup with extra `div` which will break selectors like `a > b`. I will just not use this feature.",
          "createdAt": "2020-10-31T20:05:36Z",
          "author": { "login": "zamanruhy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTk4MzY1OQ==",
          "body": "@zamanruhy The RFC addresses this, essentially it comes down to using `display: contents`. Specifically this bit explains it:\r\n\r\n> display: contents essentially removes the wrapper element from the DOM, but allows it to set inheritable styles including custom properties.[ It's easier to show than tell](https://svelte.dev/repl/ea454b5d951141ce989bf9ce46767c71?version=3.29.4). It's supported in all modern browsers (ignore notes 2 and 3, they don't apply in this situation), including Edge when the Chromium version ships.\r\n\r\nEdit: I see now that this is not at all what you were commenting on. The times you would run into this is when you would do `.parentClass > :global(.childClass)`. Or if you had a global stylesheet that had a selector like that. A workaround to this is to use `a b` to select things.",
          "createdAt": "2020-10-31T20:21:43Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTk4NjA0Ng==",
          "body": "@kevmodrome Yes, that's exactly what I meant. Regardless of any workaround, I don't like the idea of adding an extra node without my knowledge. The good thing is this is an optional feature and doesn't add any code to runtime ...",
          "createdAt": "2020-10-31T20:41:37Z",
          "author": { "login": "zamanruhy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDA2NTE3NA==",
          "body": "Notice that this will make targeting a component that doesn't want to be targeted even easier:\r\n\r\n```html\r\n<style>\r\n    [style*=--starRating] > * {}\r\n</style>\r\n<StarRating --starRating />\r\n```\r\n\r\n**Edit:** The RFC mentions under drawbacks the idea of allowing a component to explicitly expose its \"style properties\" for validation and completions. that would help reduce marking an instance like this, and potentially you could then namespace the properties (although with namespace you would lose global theming - that can probably be handled differently anyhow in order to achieve validation and completions as well).",
          "createdAt": "2020-11-01T10:21:04Z",
          "author": { "login": "idoros", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDA3NjI0NQ==",
          "body": "This feature would definitely be useful but something feels odd/bad about this approach.",
          "createdAt": "2020-11-01T11:50:35Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDExNDMwNg==",
          "body": "I know the RFC already been merged, and I don't mean to drag this on. I do really like the idea of embracing CSS variables for this, but at the same time I share the concern about the use of `display: contents` and adding an extra wrapper element.\r\n\r\nWouldn't treating `--prop={value}` as syntactic sugar for ```style={`--prop: ${value};`}``` and limit the usage to actual elements hit a nice middle ground? To target a (third party) component you would then have to introduce a wrapping element yourself. This mirrors how classes already work and avoids the issues with introducing an unexpected DOM node.\r\n\r\nImplementing the above would also make it possible to achieve behavior described in the RFC as part of a theming or design system library like this:\r\n\r\n```svelte\r\n<script>\r\n  let vars = {}\r\n  $: spread = Object.fromEntries(\r\n    Object.entries(vars).map([key, val] => ['--' + key, val])\r\n  )\r\n</script>\r\n<style>\r\n  theme-context { display: contents; }\r\n</style>\r\n<theme-context {...spread}>\r\n  <slot />\r\n</theme-context>\r\n```\r\n\r\nThis has the advantage of making the use of an extra element a bit more explicit.\r\n\r\nSupport for targeting components directly could be also achieved by exposing passed css vars as a special prop (eg `$$vars`) that then can be spread on to the appropriate element inside the component. Although, really any way to spread an object as css vars would solve that.\r\n\r\n**Edit:** Something like the `Theme` component above could also be added to Svelte as say `<svelte:theme vars={...}>` or similar if you want to even further embrace this as a part of Svelte itself.",
          "createdAt": "2020-11-01T16:28:02Z",
          "author": { "login": "jonatansberg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDEzNjc2Nw==",
          "body": "I believe that keeping the status quo is better than implementing this RFC. But if it's inevitable, I prefer the first variant of the implementation described [here](https://gist.github.com/Rich-Harris/6ee465dca7e86e5743cb367ba0ae3bee). The previous variant looks good in comparison with the current one. At least it doesn't imply implicit creation of additional elements and a huge number of side effects.",
          "createdAt": "2020-11-01T19:10:13Z",
          "author": { "login": "PaulMaly", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDE4NTE4MQ==",
          "body": "I too have some serious doubts about syntax of this RFC, write `--bg-color=\"#000\"` on a component doesn't feel right and i don't understand what benefits it has against using a style prop (eg: `style=\"--bg-color=#000\"`), in fact I would have been much more inclined to go for \"Do nothing, but encourage the use of custom properties\" way.\r\n\r\nMoreover this extra wrapper div seems very bad, as others appointed, it breaks css selectors.\r\nI think that if someone want a wrapper div around it's component, this should be accomplished through declaring clearly with a svelte:option like configuration similarly to how custom components are handled. For example this configuration could create a wrapper div even if `customElement: false`:\r\n```\r\n<svelte:options tag=\"my-comp\" />\r\n```\r\nThis would allow someone else to write something like this (without :global):\r\n```\r\n<style>\r\n  my-comp {\r\n    background-color: #000;\r\n  }\r\n</style>\r\n\r\n<MyComp />\r\n```\r\nOf course the compiler should do some work to understand that `my-comp` and `MyComp` refer to the same thing.\r\n\r\nGetting back to what stated in the RFC, another nice feature is to have props working in style tag, this would be great but i understand the difficulties on implement such a thing.",
          "createdAt": "2020-11-02T01:04:09Z",
          "author": { "login": "raythurnevoid", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDI1NTgxMQ==",
          "body": "I feel something like this would be better\r\n\r\n```html\r\n<script>\r\nexport let color = 'red';\r\n</script>\r\n\r\n<style>\r\ndiv {color: var(color);}\r\nspan {color: var(--color)}\r\n</style>\r\n\r\n<div>\r\n  <span />\r\n</div>\r\n```\r\n\r\n**OUTPUT**\r\n```html\r\n<div class=\"svelte-nerdboi\" style=\"--color: red;\">\r\n  <span class=\"svelte-nerdboi\" />\r\n</div>\r\n\r\n<style>\r\ndiv {color: var(--color);}\r\nspan {color: var(--color);}\r\n</style>\r\n```\r\n",
          "createdAt": "2020-11-02T06:01:07Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDUyNjYyOA==",
          "body": "I'm going to lock this conversation as it's unproductive. The RFC repo (where the reaction was strongly positive) is the place for discussion about what features to add; the decision has been made.\r\n\r\nI will quickly address some of the feedback here though:\r\n\r\n> It will wrap my component markup with extra `div` which will break selectors like `a > b`\r\n\r\nThis is untrue. Since this syntax applies to components, not elements, we're talking about selectors that cross a component boundary. The only way CSS selectors are affected is if you have one like this `a > :global(b)`, which frankly is a bad selector anyway, since the parent is making assumptions about the structure of a child — that kind of tight coupling will always lead to breakage eventually.\r\n\r\nThe *whole point* of this RFC is it gives us an idiomatic way to avoid the need for those sorts of selectors in the first place.\r\n\r\n> Wouldn't treating `--prop={value}` as syntactic sugar for `` style={`--prop: ${value};`} `` and limit the usage to actual elements hit a nice middle ground?\r\n\r\nElements can already be styled. There's much less value to adding syntactic sugar for element styling than for components, where `style` attributes aren't a thing. That said, supporting this syntax on elements *as well as* components could make sense.\r\n\r\n> I feel something like this would be better\r\n\r\nThat's invalid CSS. We don't want to write our own bootleg CSS parser to handle non-standard syntax unless it's absolutely necessary, and it's not at all clear that there's an advantage here (on the contrary, making `var(color)` and `var(--color)` the same is confusing). As discussed in the RFC, using props introduces overhead (because the component has to anticipate that `color` might change, whereas using CSS custom properties natively allows them to be driven by even static .css files), and because the property is handled *inside* the component, it shadows properties declared higher up the tree.\r\n\r\n> a huge number of side effects\r\n\r\nDon't be silly.",
          "createdAt": "2020-11-02T15:04:00Z",
          "author": { "login": "Rich-Harris", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMDIxOTE1NA==",
          "body": "This is implemented in 3.38.0 whether you like it or not. I've created #6267 for documenting this feature.",
          "createdAt": "2021-04-30T16:41:06Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzM3MTI0OTI=",
    "body": "**Describe the bug**\r\nIt seems that changes to reactive attributes are not reflected if the `slot=\"...\"` attribute is defined at the end (_or after the reactive attributes_) of a named slot element. Example:\r\n```\r\n<button slot=\"footer\" disabled={disabled}>Working</button>\t\r\n<button disabled={disabled} slot=\"footer\">Not working</button>\r\n```\r\n\r\n**EDIT**\r\nThe above actually will work, but if both buttons have the slot attribute at the end, the disabled state is no longer reactive. So definitely there seems to be some issue with the order of occurrence of the slot attribute.\r\n\r\n**Logs**\r\nNothing is logged. It just silently ignore the new state.\r\n\r\n**To Reproduce**\r\nCheck the following repl - https://svelte.dev/repl/c90a72f4f9b14fde8775e81a22f44527?version=3.29.4\r\n\r\n**Expected behavior**\r\nI expect the order of the `slot` attribute to not have effect on the other reactive attributes.\r\n\r\n**Information about your Svelte project:**\r\n- Svelte 3.29.4 (Rollup)\r\n- Chrome 86.0.4240.75\r\n- Fedora 32\r\n\r\n**Severity**\r\nI don't consider the issue severe, but it is annoying.",
    "closedAt": "2021-02-27T17:43:54Z",
    "createdAt": "2020-10-31T12:49:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTkzNDQxNQ==",
          "body": "You have a typo in your REPL: `<button dibled={disabled} slot=\"footer\">Button2-Slot (not working)</button>`, change it and both buttons will work the same.",
          "createdAt": "2020-10-31T13:31:24Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTkzNzg4OA==",
          "body": "@kevmodrome @Conduitry  Actually, no. _I've updated the description of the bug._ The typo was one thing but it seems that if both buttons have the slot attribute at the end (or only one of the button is left) it doesn't work any more. See the updated repl - https://svelte.dev/repl/c90a72f4f9b14fde8775e81a22f44527?version=3.29.4\r\n",
          "createdAt": "2020-10-31T13:59:32Z",
          "author": { "login": "ganigeorgiev", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzMxODIwMjU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\n\"$:\" statements don't allow declaring variables via let. This means it's necessary to write for example\r\n\r\n```\r\nlet x;\r\n$: x = reactiveCalc();\r\n```\r\n\r\nWhile it's possible to omit the `let x` here, it's not idiomatic JS code anymore because it looks like a global definition now.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAllow `let` (and mayby `var`) statements in `$:` lines which allows writing\r\n```\r\n$: let x = reactiveCalc();\r\n```\r\n\r\nThis also has the advantage that it would also work well with typescript. Also it makes it easier to make existing non-reactive lets reactive by simply adding a \"$:\" before them. \r\n\r\n**How important is this feature to you?**\r\n\r\nOf course it's always possible to use the current way of using two statements or a single one with an implicit 'let'. But writing clear idiomatic code is important to me and it's impossible to write clean looking code in the moment. So while not a deal-breaker for using Svelte it's still annoying.\r\n",
    "closedAt": "2020-10-30T13:38:04Z",
    "createdAt": "2020-10-30T13:35:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTU1NzI1Ng==",
          "body": "`$: let x = reactiveCalc();` isn't syntactical JS, and so isn't something we can use.",
          "createdAt": "2020-10-30T13:38:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzMxMDU4ODA=",
    "body": "**Describe the bug**\r\n\r\nFrom https://github.com/webpack/webpack/issues/11875\r\n\r\n```\r\nnode node_modules/svelte/index.mjs\r\nError [ERR_UNSUPPORTED_DIR_IMPORT]: Directory import '/home/evilebottnawi/IdeaProjects/copy-webpack-plugin/node_modules/svelte/internal' is not supported resolving ES modules imported from /path/to/node_modules/svelte/index.mjs\r\n    at finalizeResolution (internal/modules/esm/resolve.js:267:17)\r\n    at moduleResolve (internal/modules/esm/resolve.js:668:10)\r\n    at Loader.defaultResolve [as _resolve] (internal/modules/esm/resolve.js:758:11)\r\n    at Loader.resolve (internal/modules/esm/loader.js:100:40)\r\n    at Loader.getModuleJob (internal/modules/esm/loader.js:246:28)\r\n    at ModuleWrap.<anonymous> (internal/modules/esm/module_job.js:47:40)\r\n    at link (internal/modules/esm/module_job.js:46:36) {\r\n  code: 'ERR_UNSUPPORTED_DIR_IMPORT',\r\n  url: 'file:///home/evilebottnawi/IdeaProjects/copy-webpack-plugin/node_modules/svelte/internal'\r\n}\r\n```\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2020-11-09T14:57:41Z",
    "createdAt": "2020-10-30T11:42:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTkxMzgyNw==",
          "body": "Related #5003",
          "createdAt": "2020-10-31T10:19:32Z",
          "author": { "login": "WofWca", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEyMTg3Mg==",
          "body": "The `import`s in the published package should now be fixed in 3.29.5.",
          "createdAt": "2020-11-09T16:27:12Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzMwNTIxOTA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThis feature is related to the ambiguity of reactive statement inference methods that, by abstracting the process of determining the dependencies, can cause unintended behavior (more in the examples below). This feature is an addition to the syntax that enables users to explicitly signal which variables should trigger a reactive statement, without changing the current behavior of standard reactive statements.\r\n\r\n**Describe the solution you'd like**\r\nAs per the example below, a possible solution can be the idiom:\r\n```\r\nfunction functionWithReactiveCode() {\r\n  // ...\r\n}\r\n$: [array, of, watched, variables] && functionWithReactiveCode();\r\n```\r\nWith this syntax simple values can be watched by the reactive statement, and, because an array always evaluates to true, any time one of the variables gets reassigned, it will be triggered independently of the variables read in the function code which won't affect the dependency graph computed by Svelte.\r\n\r\n*BUT* if any of the watched variables is the property of an object, the statement gets wrongly triggered even if that particular property wasn't changed. Because changing the way the dependency graph works would be a major breaking change and probably confuse a lot of developers that are already familiar with the current behavior, I came up with another idea: we could create a specific syntax that explicitly states the dependencies of a reactive block, thus letting the compiler skip the automatic construction of the dependency graph for this kind of statements.\r\nI can imagine something like the following:\r\n\r\n```\r\n$[array, of, watched, variables, and, obj.property]: {\r\n  // reactive code that won't get analyzed for dependency.\r\n  // The compiler will trust the developer intentions.\r\n}\r\n```\r\nThe square brackets can be adopted because they won't create ambiguity with jQuery-like function calls and also for symmetry with the cited idiom.\r\n\r\n\r\n**Describe alternatives you've considered**\r\nIt's often the case that in a reactive statement a variable is read or written to or *it is assumed it will be written to because of a nested structure*, thus triggering related statements. A classic example of this behavior has been brought up numerous times in this repository with something like this:\r\n\r\n```\r\n<script>\r\n  export let obj = { value: 'default' };\r\n  let inputValue = '';\r\n  $: inputValue = obj.value;\r\n</script>\r\n<input type=\"text\" bind:value={inputValue} />\r\n```\r\nThe example above results in a readonly input field, because `obj` is invalidated any time `inputValue` is. There are some ways to work around this problem, for example wrapping the reactive statement code in a function. Doing so, the example above becomes:\r\n\r\n```\r\n<script>\r\n  export let obj = { value: 'default' };\r\n  let inputValue = '';\r\n  function reactiveCode(newValue) {\r\n    inputValue = newValue;\r\n  }\r\n  $: reactiveCode(obj.value);\r\n</script>\r\n<input type=\"text\" bind:value={inputValue} />\r\n```\r\nThis fixes the reactivity problem by explicitly stating that the `reactiveCode` function should only be called when `obj` is changed.\r\n\r\nAnother way to explicitly state dependencies for a reactive block I've also found is this idiom:\r\n```\r\n<script>\r\n  let flag = false;\r\n  let color = '000000';\r\n  function reactiveCode() {\r\n    color = Math.random().toString(16).substring(2, 8);\r\n  }\r\n  $: [flag] && reactiveCode();\r\n</script>\r\n<input style=\"border: 1px solid #{color}\" type=\"text\" value=\"example\" />\r\n<button on:click={() => flag = !flag}>\r\n  change\r\n</button>\r\n```\r\nREPL: https://svelte.dev/repl/de48158c145a437e9cdf7f9896349354?version=3.29.4\r\nIn this example the reactive code does not depend on `flag` but the intended behavior is that whenever the `flag` variable changes, the border color must change. Moreover the reactive code is wrapped in a function so that even if there were other variables read in that code, they wouldn't affect the dependency graph.\r\n\r\n*Even if this syntax proposal gets rejected, I think that the idiom that already works should be added to the Svelte Docs and Tutorial* so that anyone can take advantage of this behavior without having to figure out how reactivity is currently implemented for different types.\r\n\r\n**How important is this feature to you?**\r\nThe new syntax per se is a really nice-to-have feature because it would solve different kinds of problems with very little verbosity when compared to the idiom. If instead the syntax gets rejected, I think it's really important to clearly state in the Tutorial and Docs how reactivity works when function calls are involved and present this example as a solution for use cases when a user wants to control which variables the code should react to.\r\n\r\n**Additional context**\r\nRelated issues:\r\n- https://github.com/sveltejs/svelte/issues/2761\r\n- https://github.com/sveltejs/svelte/issues/4785\r\n- https://github.com/sveltejs/svelte/issues/4305",
    "closedAt": "2020-10-30T12:33:52Z",
    "createdAt": "2020-10-30T10:16:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTQ4ODQ5NA==",
          "body": "You can already sort-of do this:\r\n`$: flag, reactiveCode();`",
          "createdAt": "2020-10-30T11:04:42Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTUyNjE0NQ==",
          "body": "```\r\n$[array, of, watched, variables, and, obj.property]: {\r\n  // reactive code that won't get analyzed for dependency.\r\n  // The compiler will trust the developer intentions.\r\n}\r\n```\r\n\r\nisn't valid JS syntax, and so isn't something we can use. As Kev mentions, you can already do this with a different syntax. Having a more in-depth guide/cookbook-type section on the site that discusses more details about how the reactivity works and how to achieve various results is something that's planned, and there's at least one issue for it somewhere.",
          "createdAt": "2020-10-30T12:33:51Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTUzODAwOQ==",
          "body": "As @kevmodrome mentioned there are a series of equivalent syntaxes to the one I presented in the example above that works in some cases, but that's not the point of the issue: using the comma operator or an array + && does not solve the problem of nested properties because **the reactive statement gets triggered if any of the values an object contains changes, even if the one the reactive statement is \"watching\" stays the same**, thus I think that the only way to implement this behavior is to create a specific syntax. That's the main reason, **right now there is no way to make a reactive statement on a single object property without having to manually check if the property actually changed**, which is a bit counter-intuitive.\r\n\r\nAbout the \"invalid JS syntax\", it's not really a compelling argument considering that Svelte is a compiler and that even if $: is valid JS syntax it has completely been repurposed in a way that makes it inconsistent with what any JS engine would interpret. Same applies for the autosubscription, $ before a variable name shouldn't modify the behavior of that variable but yield \"$something is not defined\" or even \"assignment to undeclared variable $something\" considering that $ is a valid character in a variable name.",
          "createdAt": "2020-10-30T13:00:11Z",
          "author": { "login": "cdellacqua", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTUzOTczOA==",
          "body": "Here is a REPL demonstrating what I'm referring to:\r\nhttps://svelte.dev/repl/239c2dccb5464004a5c7bcfcfb3d62a5?version=3.29.4",
          "createdAt": "2020-10-30T13:03:42Z",
          "author": { "login": "cdellacqua", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTU0MTMyNA==",
          "body": "You can get around that by passing through an intermediate value, in a sense destructuring your object and only 'listening' to changes to specific props\r\n\r\n```js\r\n$: prop2 = obj.prop2\r\n$: if (prop2) {\r\n  counter++;\r\n}\t\r\n```",
          "createdAt": "2020-10-30T13:07:10Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTU1MTc3Ng==",
          "body": "@stephane-vanraes only if prop2 is a primitive value, otherwise it still gets triggered, because the invalidation process that triggers reactive statements treats objects and primitive types differently. As before, a specific syntax that override the automatic dependency graph would solve this, but right now there are only workarounds. The one you suggest can work with nested properties only by walking down all the hierarchy until the one you want to watch is reached (assuming one needs to listen to that primitive property and not a whole nested object).\r\nREPL: https://svelte.dev/repl/199e608752c24905a4dab9fbe49ac79f?version=3.29.4",
          "createdAt": "2020-10-30T13:27:51Z",
          "author": { "login": "cdellacqua", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDk1MzUwNA==",
          "body": "> You can already sort-of do this:\r\n> `$: flag, reactiveCode();`\r\n\r\nfurther to reduce the naming problem:\r\n\r\n```\r\n$: flag, (() => {\r\n  ...\r\n})()\r\n```",
          "createdAt": "2020-11-27T18:56:33Z",
          "author": { "login": "zhaoyao91", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1NDEzNjQ4Ng==",
          "body": "further, maybe `uglier` :neutral_face: \r\n```\r\n$:{flag;{\r\n  // ...\r\n}}\r\n```",
          "createdAt": "2021-01-04T18:24:14Z",
          "author": { "login": "mdynnl", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NjY3MDMyMg==",
          "body": "Why not just use the $ label technique:\r\n```js\r\n$name: {\r\n}\r\n```\r\nThis is a non-breaking change; the compiler would not have to be changed much, and the implementation could be hidden behind a writable().\r\n\r\nWatching multiple variables would imply multiple statements, but the syntax is clean:\r\n\r\n```js\r\nlet one, two, three;\r\n\r\n$one: ...;\r\n$two: ...;\r\n$three: ...;\r\n```\r\n",
          "createdAt": "2021-01-25T09:13:31Z",
          "author": { "login": "TerrapinSoftware", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzIyNTc4Mjg=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n\r\n**Describe the solution you'd like**\r\n```js\r\nconst THING = {propName: 'lol'};\r\nexport let {propName} = THING;\r\n```\r\n\r\n**How important is this feature to you?**\r\n1/5, nice to have but not required, just my linting blares errors over it.\r\n",
    "closedAt": null,
    "createdAt": "2020-10-29T12:07:31Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzIyMDM5Mzg=",
    "body": "**Describe the bug**\r\n\r\nSafari doesn't display subtitles added via `<track>` on a `<video>` tag. This only happens if SSR is used. Subtitles only work if the `<video>` tag is not present in the SSR markup (e.g. by deferring rendering until after onMount ran).\r\n\r\n**Logs**\r\n\r\nSafari doesn't log anything in the console.\r\n\r\n**To Reproduce**\r\n\r\nI've created a small example app using svelte and SSR for demonstration: https://github.com/sfriedel/svelte-bug-safari-video-subtitles. To reproduce after cloning the repo:\r\n\r\n* yarn && yarn start\r\n* open http://localhost:3000/ in Safari\r\n\r\nThere should be 2 videos visible. The upper one doesn't show subtitles while the lower one does. The same markup is used for both (check `src/App.svelte`) with the only difference being that the lower video's rendering is deferred until after onMount ran and therefore the video is not included in the SSR output.\r\n\r\nFor comparison there is also http://localhost:3000/plain-video.html which is a static html file (from `static/plain-video.html`) using identical markup for the video. Safari does show subtitles in that one too.\r\n\r\n**Expected behavior**\r\n\r\nSubtitles should be working even if the video is present in the SSR markup.\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Tested with Safari 12.1.2 and 14.0 running on macOS 10.12.6 and 10.15.6\r\n- Svelte version: svelte@3.29.4\r\n- Bundler: rollup@2.32.1\r\n\r\n**Severity**\r\n\r\nThere is a working workaround (deferring rendering until after onMount) but this took a long time to find out. It's not a blocker for me currently though.\r\n",
    "closedAt": null,
    "createdAt": "2020-10-29T10:46:38Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MTg4Mzg0Mw==",
          "body": "+1, This issue also happens on Chrome now (tested on `91.0.4472.57`)",
          "createdAt": "2021-05-16T22:04:18Z",
          "author": { "login": "pimdewit", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzE0MTI4MzY=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen I do something like the below, I get an error of:\r\n> Element with a slot='...' attribute must be a child of a component or a descendant of a custom element\r\n\r\n```\r\n<MyComponent>\r\n  {#if something()}\r\n    <a slot=\"right-container\">Hi</a>\r\n  {/if}\r\n</MyComponent>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI want to be able to do the first example and wrap my optional slot's in if statements. The reason for this is I actually have default slot text in my component that I want to show.\r\n\r\n**Describe alternatives you've considered**\r\nThe alternatives is doing something like this which has a lot of duplicate code.\r\n\r\n```\r\n{#if something()}\r\n  <MyComponent>\r\n  {#if something()}\r\n    <a slot=\"right-container\">Hi</a>\r\n  {/if}\r\n  </MyComponent>\r\n{:else}\r\n  <MyComponent />\r\n{/if}\r\n```\r\n\r\n**How important is this feature to you?**\r\nThis is a big hassle for me and it would make for a lot cleaner code if I could wrap this slots in if statements. However, it would not affect my ability to code and use svelte.\r\n",
    "closedAt": null,
    "createdAt": "2020-10-28T12:50:31Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3OTgyNDQ2MA==",
          "body": "I would enjoy this feature.\r\n\r\nIs there a workaround for now, to have conditional slots? (Except of copy paste..)",
          "createdAt": "2021-02-16T13:07:01Z",
          "author": { "login": "s0me0ther", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NzU4NzAxMw==",
          "body": "+1. this would help make my code less verbose in some cases.",
          "createdAt": "2021-03-12T16:05:20Z",
          "author": { "login": "ajschmidt8", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MjAyMjM2Mw==",
          "body": "+1, Especially useful for slot forwarding!!!\r\nOtherwise there is no way to use the deepest slot fallbacks\r\n\r\nhttps://svelte.dev/repl/7941b94f6c6f42df93aba4d5ef543917?version=3.38.2",
          "createdAt": "2021-05-17T06:08:51Z",
          "author": { "login": "ash0080", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1MDg5NTM4NQ==",
          "body": "I agree, this is a must-have for complex components. Code duplication is one of the largest sources of bugs, please don't make us do it.",
          "createdAt": "2021-05-29T20:37:54Z",
          "author": { "login": "thislooksfun", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NjM0MjQwMg==",
          "body": "Here's the workaround I'm using:\r\n\r\n```html\r\n{#if $$slots.header}\r\n  <header>\r\n    <slot name=\"header\" />\r\n  </header>\r\n{/if}\r\n\r\n<style>\r\n  header {\r\n    padding: 16px;\r\n    /* ... */\r\n  }\r\n  header:empty {\r\n    display: none;\r\n  }\r\n</style>\r\n```\r\n\r\nThis means that when you have something like this:\r\n\r\n```html\r\n<Demo>\r\n  <svelte:fragment slot=\"header\">\r\n    {#if condition}\r\n      <p>HELLO</p>\r\n    {/if}\r\n  </svelte:fragment>\r\n</Demo>\r\n```\r\n\r\nYou will only see the `<header>` – and its padding – when `condition` is true. ",
          "createdAt": "2021-06-08T00:07:41Z",
          "author": { "login": "lukeed", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzEzNTYzMjM=",
    "body": "**Describe the bug**\r\nSvelte compiler fails to handle {@html} inside `<textarea>` tags\r\n\r\n**Logs**\r\nNo output in browser console. Compiler throws error `Unexpected character '@' (7:11)`\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/001f72ee82ac4115920eaf086d785584\r\n\r\n**Expected behavior**\r\nThe compiler compiles the code successfully, the output `<textarea>` contains the child HTML elements in the string.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 82, Chrome 86 (doesn't matter)\r\n\r\n- Your operating system: Windows 10 (doesn't matter)\r\n\r\n- Svelte version: 3.29.4\r\n\r\n- Whether your project uses Webpack or Rollup: None, as I used Snowpack in dev mode.\r\n\r\n**Severity**\r\nLow. I was able to use `<div>` instead for my use case.\r\n\r\n**Additional context**\r\nI was trying to integrate TinyMCE editor into my Svelte app. On the surface, TinyMCE uses <textarea> and the content to be edited must be children of that `<textarea>`. But upon reading through their docs (it's a bit unclear) turns out `<div>` can be used too, so that's my solution for the time being.\r\n",
    "closedAt": null,
    "createdAt": "2020-10-28T11:27:34Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzg4MzEyMA==",
          "body": "Sometimes Svelte isn't quite normal html. The docs show how to [bind_element_property](https://svelte.dev/docs#bind_element_property) to a `textarea`  \r\n`<textarea bind:value={name}></textarea>`",
          "createdAt": "2020-10-28T11:52:29Z",
          "author": { "login": "nickolasgregory", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzk0ODEzMA==",
          "body": "Yes, it is true that I can use `bind:value` with `<textarea>`, but for my use case, that does not work out. As stated in the original report, TinyMCE wants the content to be raw HTML children nodes of the main editor element, which `bind:value` does not fulfill.",
          "createdAt": "2020-10-28T13:53:03Z",
          "author": { "login": "ethan-tqa", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxODA0NDk2Mw==",
          "body": "I don't know what I'd expect `{@html foo}` to do inside a `<textarea>` that's different from just `{foo}`. Perhaps we can improve the parser error here, but I don't see what the desired behavior is. I don't think `<textarea>`s _have_ child elements.",
          "createdAt": "2020-10-28T16:17:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTQ5MzMyMg==",
          "body": "To achieve your desired outcome, you could use a div tag with the attribute `contenteditable`. I'm not sure TinyMCE's requirements however.",
          "createdAt": "2020-11-04T03:35:49Z",
          "author": { "login": "MichealPearce", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzEwNzg1MDg=",
    "body": "This is a proposal to introduce a more straightforward way to declare component events, namely through the use of empty functions.\r\nExporting a named function with an empty body would declare an event, and calling that function would dispatch it.\r\n```svelte\r\n<script lang=\"ts\">\r\n    export function message(msg: string) {}\r\n    message(\"I just dispatched a message event!\");\r\n</script>\r\n```\r\nThe consumer remains the same\r\n```jsx\r\n<Component on:message={console.log} /> // \"I just dispatched a message event!\"\r\n```\r\n\r\nThis solution comes as a hybrid between prop functions and `createEventDispatcher` :\r\n\r\n|   | `export function message(){}` | `export let onMessage = noop` | createEventDispatcher |\r\n|-|---|---|---|\r\n|`on:` syntax | ✅ |❌it's a prop|✅| \r\n| Event forwarding  |✅| ❌it's a prop|✅| \r\n| Amount of listeners | ✅ Infinity |❌1|✅Infinity | \r\n| Setup | ✅ one line  |  ✅ one line |❌>3 lines |\r\n| \"Is there events ?\" | ✅ it's in the exports  |  ✅ it's in the exports |❌could be anywhere |\r\n| Arguments | ✅ like any function | ✅ like any function |❌1 argument <br> ❌wrapped in a CustomEvent|\r\n| Listener callback | ✅ like any function | ✅ like any function |❌must destructure CustomEvent <br>❌must fill type manually|\r\n| Typings | ✅ like any function | ✅ like any function|❌troublesome |\r\n| Refactoring  | ✅ like any function | ✅ like any function|❌troublesome|\r\n\r\nAs a side effect this proposal also introduces the ability to rename events when forwarding them:\r\n```svelte\r\n<script lang=\"ts\">\r\n    export function hoverLeft(event: MouseEvent) {}\r\n    export function hoverRight(event: MouseEvent) {}\r\n</script>\r\n<button on:mouseover={hoverLeft} /> \r\n<button on:mouseover={hoverRight} />\r\n```\r\n\r\nThe implementation is simple, the compiler just has to fill the body of those functions with `createEventDispatcher`'s :\r\n```ts\r\nfunction message(...args) {\r\n    const listeners = $$self.$$.callbacks.message;\r\n    if (listeners) listeners.slice().forEach((fn) => fn.apply($$self, args))\r\n}\r\n```\r\n\r\nI cannot think of any realistic scenario where this would be a breaking change.\r\n\r\n`createEventDispatcher` has been critisized multiple times #2323 #3488 #4584 #5211 #5597. I for one actively avoid using it. The go-to solution appears to be to introduce yet another reserved variable #5598, I see all of those $$variables slowly creeping up on svelte and I'm very much not looking forward to see another.",
    "closedAt": null,
    "createdAt": "2020-10-28T04:12:02Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzA1Mjc5MTk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm annoyed with the boilerplate to write for a event dispatcher\r\n\r\n**Describe the solution you'd like**\r\nBecause Svelte uses a compiler, it's often possible to detect the need for an event-dispatcher and create the code if necessary. \r\n\r\nA simple possibility would be to use `$dispatch` as a shorthand for importing createEventDispatcher, calling it and assigning it to the variable called '$dispatch'.  If '$dispatch' is already in use, the compiler won't use this shortcut to prevent interfering with existing code. \r\n\r\nAn even more concise variant would be to use $onXXX to write it even shorter, for example `$onAction(value)` would be compiled to `dispatch('action', value)`. But this has the disadvantage of cluttering the $-namespace more.\r\n\r\n**How important is this feature to you?**\r\nNot very important but seems quite convenient especially considering Sveltes general conciseness.\r\n\r\n",
    "closedAt": "2020-10-27T14:57:01Z",
    "createdAt": "2020-10-27T14:55:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzMwMjM2OA==",
          "body": "Duplicate of #3488.",
          "createdAt": "2020-10-27T14:57:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzAzMTExMTY=",
    "body": "Are there any plans in the near future to add an error boundary for the svelte?\r\nBecause now an error in one component breaks the application\r\n\r\nOr do you have other options for solving this problem?",
    "closedAt": "2020-10-27T10:41:30Z",
    "createdAt": "2020-10-27T10:19:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzE1MTMzOA==",
          "body": "No plans for the near future, no, but there is an issue for this already somewhere.",
          "createdAt": "2020-10-27T10:41:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzQzMjYxMQ==",
          "body": "Related to https://github.com/sveltejs/svelte/issues/1096",
          "createdAt": "2020-10-27T18:18:59Z",
          "author": { "login": "kyrylkov", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MzAyMjE4Nzk=",
    "body": "This is about the docs.\r\n\r\nWhile I was trying to implement a particular transition in my site I've tried to implement a custom easing function. I've had difficulties because I could not figure out what my custom easing function was supposed to return based on the `t` parameter. And also the meaning of the `t` parameter is not totally clear. Although `t` is probably a fraction of the point of time we're in within the transition as a value between 0 and 1. \r\n\r\nQuestions that come to my mind about the return value:\r\n\r\n- What will Svelte do with that value? \r\n- Does it need to be a value between 0 and 1?\r\n- Can it return a value below 0? What will happen then?\r\n- Can it return a value above 1? What will happen then?\r\n- Does the value returned depend in any way on the value returned in the previous call? Maybe just the difference between the previous and the current value matters?\r\n\r\nWhen looking at the API docs (e.g. in https://svelte.dev/docs#svelte_easing) I couldn't find anything.\r\n",
    "closedAt": null,
    "createdAt": "2020-10-27T08:15:28Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxODcxNTgxMQ==",
          "body": "There is a section discussing this in the [tutorial](https://svelte.dev/tutorial/custom-css-transitions).\r\n\r\n> The t value is 0 at the beginning of an intro or the end of an outro, and 1 at the end of an intro or beginning of an outro.",
          "createdAt": "2020-10-29T12:18:18Z",
          "author": { "login": "ankarhem", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxODg4Mjk4NQ==",
          "body": "Thank you, @JAnken123. I still think it would be good to document this a little more thoroughly. Especially a the part about what to return from the function. A good place might be the API docs.",
          "createdAt": "2020-10-29T16:50:21Z",
          "author": { "login": "teggno", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTA3NDE1NA==",
          "body": "Maybe adding a link to this part of the docs would suffice? https://svelte.dev/docs#Custom_transition_functions",
          "createdAt": "2020-10-29T23:08:53Z",
          "author": { "login": "ankarhem", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjk5NjY3Mjc=",
    "body": "When I enable the `customElement: true` option to create a web component, `$$slots` always returns `{}` instead of the slots being used.\r\n\r\nExample:\r\n```svelte\r\n<svelte:options tag=\"my-wc\"/>\r\n\r\n<script>\r\n$: console.log($$slots);\r\n</script>\r\n\r\n<slot name=\"foo\"></slot>\r\n```\r\n\r\n```html\r\n<my-wc>\r\n  <span slot=\"foo\">Foobar</span>\r\n</my-wc>\r\n```\r\n\r\nSvelte v3.29.4 using Rollup\r\n\r\n**Severity**\r\nMostly annoying, I can work around it.",
    "closedAt": "2020-11-09T15:11:37Z",
    "createdAt": "2020-10-26T23:02:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEyMTU5OQ==",
          "body": "This should be fixed now in 3.29.5..",
          "createdAt": "2020-11-09T16:26:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjk4OTE4ODg=",
    "body": "**Describe the bug**\r\nThis may be by design, but I couldn't tell — when state changes are made within `onMount` (that would cause a component to update), these changes will _not_ trigger `afterUpdate` within any child components. It appears you can only depend on `afterUpdate` triggering if a state change happens outside of `onMount`.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a3a7cb61eb7b4b74aed5eb1340fd0c33?version=3.29.4\r\n\r\nI would expect the `afterUpdate` logs within `Canvas.svelte` to reflect the changes made in `onMount` within `App.svelte`.\r\n\r\n**Expected behavior**\r\nIdeally all state/component changes would propagate. It'd make sense I think if in this scenario `afterUpdate` triggers twice.\r\n\r\n**Information about your Svelte project:**\r\n- Svelte version\r\n3.29.4\r\n\r\n**Severity**\r\nIt was certainly a surprise! I know it's possible to hack around this with `tick()` (though I'm unsure if it makes more sense to do that in `onMount` or `afterUpdate`) and that may ultimately be \"the answer.\"\r\n",
    "closedAt": null,
    "createdAt": "2020-10-26T20:43:28Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjgxNTgwMw==",
          "body": "For me it would be unexpected if it would trigger another `afterUpdate`. I see `onMount` as some kind of initialisation method, that triggering other hooks depending on it's content seems inconsistent to me. Having an Angular background `onMount` is similar to `ngOnInit` to me, and that doesn't trigger `ngOnChange` either.",
          "createdAt": "2020-10-26T20:51:42Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjk2NjA0MTY=",
    "body": "https://svelte.dev/repl/21c32360e1154f34bbfe07172d2ed826?version=3.29.4\r\n\r\n`onMount` callbacks are called _after_ mounting a component's nodes, and actions are initiated in the same timing\r\n\r\n`onDestroy` callbacks are called _before_ unmounting component nodes from the DOM, yet `action.destroy` is called _after_ the relevant node has unmounted\r\n\r\nThis is documented behavior, but is there a particular reason why it must be the case ? If not, I'd like to raise a proposal for `action.destroy` to be called before the relevant node unmounts, so as to allow them to perform last second operations if necessary",
    "closedAt": null,
    "createdAt": "2020-10-26T15:22:55Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjk0NjkwODU=",
    "body": "**Describe the bug**\r\nIf anything changes in the wrapper component with a slot or the slot content at any time after transition, the reference to the slot content will be `null`.\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/e769cb0153b34ee5898f4cf4a6445117?version=3.29.4).\r\n\r\nHere we have a wrapper component. Think of it as a generic modal component, that provides you with a slot and decides when we need to show it.\r\nIf we have a reference to the slotted component/element, we'll lose it as soon as the state of the slot OR the wrapper inner data will be changed.\r\n\r\nIf you push on \"trigger animation\" button, the data will be recreated (using `{#key}` directive) the refs will be ok. But as soon as you push on \"change data\" button, the refs will become `null`. In the first case this button would change the data inside the slot (so in parent component); in the second it will pass a new prop value to the wrapper component, which would be put in the DOM.\r\n\r\n**Expected behavior**\r\nThe ref should contain a link to a valid HTML element or component instance.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 85\r\n- Your operating system: OS X\r\n- Svelte version: 3.29.4\r\n\r\n**Severity**\r\nTo me it looks quite bad. Bindings is an essential thing in web dev, as well as slots. I don't have any workaround for this at this moment, tbh.",
    "closedAt": null,
    "createdAt": "2020-10-26T11:07:13Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjUxNTA3NA==",
          "body": "It seems to me this bug is quite bad, because actually it cannot be worked around at all. Even actions have stale links to DOM elements.\r\nFor now I use an action up very high on a parent node, that searches for an element based on a selector and triggers a form submit. Sic.\r\n\r\n@Conduitry Just a ping to be sure someone will see this.",
          "createdAt": "2020-10-26T12:29:22Z",
          "author": { "login": "dkzlv", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjU0MTkxOA==",
          "body": "The bug becomes even peskier.\r\n\r\nI've updated the REPL. It now also has an exported function in the wrapper (`export let`; we cannot use `export const`, because refs turn into `null`), that we bind to a local variable in the parent component. It _never_ updates. The same goes for any other variables.\r\n\r\nWill try some mix of context and stores, maybe I'll have some luck there.",
          "createdAt": "2020-10-26T13:22:02Z",
          "author": { "login": "dkzlv", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjk0NTIxNjU=",
    "body": "Starting trying out svelte, I've encountered a problem I'm not sure if it's a bug or if I'm doing it wrong.\r\n\r\nI wanted to create a simple tree-component which uses a slot to render each node to make it customizable.\r\n\r\n[Example in REPL](https://svelte.dev/repl/5ce7aacb35494289b91f01546553707f?version=3.29.4)\r\n\r\nThis doesn't work without an error. The error disappears if I remove the `let:node={ch}` in the svelte:self call in Tree.svelte, but then the slot doesn't get the right node as value.\r\n\r\nIs this a bug or am I doing it wrong?\r\n\r\n",
    "closedAt": "2020-10-28T09:56:04Z",
    "createdAt": "2020-10-26T10:42:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzc2NzM4NQ==",
          "body": "https://svelte.dev/repl/89408db07b2d4859a8238e376e57c0c2?version=3.29.4\r\n\r\nFirst I removed <slot> from App which was unnecessary unless you would need it for App component itself which won't happen.\r\n\r\nSecond thing is your binding. You had same name for both bind on component and let declaration which probably led to errors in initialization of this variables.\r\nIf you have problem understanding nested slots try it with just 2 regular components, it will help for sure. I almost blown my mind trying to crack this one :D",
          "createdAt": "2020-10-28T08:03:49Z",
          "author": { "login": "majkelbed", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzgyMzg4OQ==",
          "body": "Thank you! \r\n\r\nI assumed normal 'let-scoping' rules and reused the name which create the obscure \"Cannot set property 'undefined' of undefined\" error (executing in Chrome).\r\n\r\n",
          "createdAt": "2020-10-28T09:56:04Z",
          "author": { "login": "kay999", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjkzMTMyMzQ=",
    "body": "https://svelte.dev/repl/11d3f7dc166f412eae208b1e9be81418?version=3\r\n```svelte\r\n<script>\r\n\texport let foo;\r\n</script>\r\n\r\n{#if foo instanceof Node}\r\n\t_\r\n{/if}\r\n```\r\n```\r\n'Node' is not defined (5:20)\r\n```",
    "closedAt": "2020-10-28T16:24:22Z",
    "createdAt": "2020-10-26T07:17:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEyMTQ5NQ==",
          "body": "`Node` and `Element` are now known globals in 3.29.5.",
          "createdAt": "2020-11-09T16:26:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjg5MDY2Mzc=",
    "body": "Hi there! I came from a VueJS background and I just installed svelte on my Laravel app. I just want to know how can I use svelte components on hybrid php apps like this for an example:\r\n\r\nInside let's say route `http://localhost:8000/post/create.html` I want to call `<Input/>` or `<Dropdown/>` or `<Wysiwg/>` components. How do I export them if I can only export the default `app` on my `main.js`? Sure, I can call those components inside my `<App></App>` but I want to call it directly on my HTML pages. In my case, blade files.\r\n\r\nI tried `export default { Input, Dropdown }` it works but not accepting props if I call `<Dropdown title=\"Title\" />`. I think I'm missing something in here.\r\n\r\nI'm new here and kinda liking it so far because it is blazing fast!\r\n\r\nThanks so much.",
    "closedAt": "2020-10-25T00:42:45Z",
    "createdAt": "2020-10-25T00:24:04Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjA3NDkyMw==",
          "body": "You can export as many components as you want as named exports from a single file.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-10-25T00:42:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjg4Nzg3NzU=",
    "body": "Since inside `{@html}` it is guaranteed to be either an empty string or html code, I think it would be nice to add the ability to animate content inside using transition:/in:/out:\r\n\r\nLike this, for example:\r\n\r\n```svelte\r\n{@html transition:fade htmlCode}\r\n```\r\nThe same result can be achieved by wrapping `{@html}` in a node(`div` for example) with `transition:fade`, but the option without `div` tag is more readable(IMHO) and allows to spend less time thinking about styles (`<style>` may contain styles for all `div` tags(`div { color: #000!important }`)) that may affect the markup inside",
    "closedAt": "2020-10-25T16:38:04Z",
    "createdAt": "2020-10-24T21:15:20Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjE3NTYzNw==",
          "body": "It wouldn't be possible to animate something which isn't an element:\r\n\r\n```\r\nlet myVar = 'You &amp; me'\r\n{@html myVar}\r\n```\r\n\r\nso therefore I think your guarantee assumption above is incorrect.\r\n\r\nI don't think this is something that is technically feasible, and if it were, it would be unlikely to get implemented since the alternative (wrapping your content in a div/span) is more readable, and reliable.",
          "createdAt": "2020-10-25T16:38:04Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjg4NDc5NjA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm currently creating an audio player with Svelte and a feature expected of all audio players is to be able to loop the same song over and over again. Sadly, Svelte's bind functionality currently lacks `bind:loop` for media elements, making it more challenging to implement my feature.\r\n\r\n**Describe the solution you'd like**\r\n`bind:loop` should essentially be identical to the implementation of `bind:muted`, a boolean value where `true` is looping.\r\n```svelte\r\n<script>\r\nlet loop = true;\r\n</script>\r\n\r\n<audio bind:loop>\r\n    <track kind=\"captions\" />\r\n</audio>\r\n```\r\nThis will change the `loop` attribute of the audio element.\r\n```js\r\naudio.loop = true;\r\n```\r\n**Describe alternatives you've considered**\r\nThis gives me my desired outcome: but it isn't as clear and concise:\r\n```svelte\r\n<script>\r\nlet loop = true;\r\n</script>\r\n\r\n<audio loop={loop}>\r\n    <track kind=\"captions\" />\r\n</audio>\r\n```\nThis also gets very close:\n```svelte\r\n<script>\r\nlet loop = true;\r\n</script>\r\n\r\n<audio {loop}>\r\n    <track kind=\"captions\" />\r\n</audio>\r\n```\r\n**How important is this feature to you?**\r\nI'm just making this audio player for fun and to become acquainted with Svelte, so this isn't super necessary; in fact, if I could wrap my head around Svelte's codebase, I'd do it myself. I would really like it though, and I'm sure this would benefit a lot of other people in the future.",
    "closedAt": "2021-01-24T07:12:55Z",
    "createdAt": "2020-10-24T18:30:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDEwNjYxNw==",
          "body": "afaik, `loop` is an unidirectional property, I doesn't make sense to `bind` to it. ",
          "createdAt": "2020-11-01T15:33:00Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjg2Mjc2MDM=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSvelte currently has a blog at svelte.dev/blog.\r\nIt also now has monthly posts covering what's new (see #5429 and #5554 )\r\nI've been copy/pasting the post and sending it out via svelte.substack.com so that the 200 or so subscribers get an email when a new post is up.\r\nTo help drive traffic to the svelte.dev site AND standardize communication with the community, it'd be nice to have a way to send emails for our new blog posts (or at least the \"what's new in svelte\" monthly posts, whatever is easier)\r\n\r\n**Describe the solution you'd like**\r\nWe've discussed this a bit on the `#contributing` channel in the discord and came up with the following options:\r\n1. Use a free (or free for small lists) solution, but not controlled by svelte, solution (e.g. keep using substack but hand over the keys, or switch to revue, tinyletter, buttondown, etc.)\r\n2. Use a self-hosted solution like SendPortal or listmonk\r\n3. Build it ourselves! Maybe just a github action integrated with Amazon SES, Sendgrid, or any other email API? We would need a (private) place to store our email list.\r\n\r\nBoth 1 and 2 would probably require copying the finished text over to a platform or maybe integrating with an API in the CI. Number 3 is probably a CI-only option.\r\n\r\nNo matter which option we choose, I'm really hoping we can also add a \"subscribe\" box somewhere on the blog so that folks won't have to go to a completely separate site to get email updates.\r\n\r\n**How important is this feature to you?**\r\nMedium priority. It's totally not a big deal for me to copy/paste to the \"unofficial\" newsletter every month. I just want to do the right thing by the community and transfer the list over to be \"controlled\" by the svelte site.\r\n\r\n**Additional context**\r\nFeel free to close this if we think it makes more sense to keep the \"email blast\" power out of the project and/or prefer that it remains \"unofficial\". Happy to discuss other options as well :)\r\n",
    "closedAt": "2021-04-16T01:55:52Z",
    "createdAt": "2020-10-24T01:39:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTkxMTUzNw==",
          "body": "Given the current schedule of the maintainers, I would suggest that this would start as a community project, vs something that we would be looking to build.\r\n\r\nFWIW I'm very opposed to using sendgrid since their free/low-cost solution's email sending reliability is pretty terrible right now as they have a spam and phishing problem, and their documentation is abysmal.\r\n\r\nI've started switching over to Mailjet recently, which has the advantages of a decent API and excellent documentation. However  one specific reason is that we can use their own language to remove the burden of creating the horrible email HTML required by most mail clients See https://mjml.io/",
          "createdAt": "2020-10-24T12:59:51Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTk2MDc4NQ==",
          "body": "I can set this up as part of Svelte Society but I feel like it should be an official newsletter (pretty much a copy of the one that goes up on the blog). MJML looks great! It would give much more \"street cred\" if it was sent from svelte.dev..",
          "createdAt": "2020-10-24T16:08:33Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjAzOTQ1MA==",
          "body": "@kevmodrome i think this @antony's suggestion for this to start as a community project is a great opportunity to bring svelte society and svelte.dev closer together. By having the blog posts on the svelte.dev website and the email coming from a svelte society handle, it'll make it super clear that the newsletter is community run + maintainer approved :) Plus, it'd make it easier to send non-newsletter emails to the list without it feeling spammy.\r\n\r\nMailjet also has an email capture & storage feature that we would need if we wanted to embed a \"sign up for the newsletter\" section on the blog itself.\r\n\r\nWho would be the right person from Svelte Society to sign up for an account on Mailjet (or another similarly-priced competitor)?",
          "createdAt": "2020-10-24T18:57:03Z",
          "author": { "login": "d3sandoval", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjA0NzE0Ng==",
          "body": "Yes, I know what he's saying, I'm just trying to push it to be from the official Svelte domain because I think it carries more \"weight\". :)",
          "createdAt": "2020-10-24T19:57:20Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNjU1MDYxMQ==",
          "body": "Bump. @kevmodrome how do you feel about setting this up with me sometime this month, in time for the Jan 1 newsletter?",
          "createdAt": "2020-12-01T13:27:14Z",
          "author": { "login": "d3sandoval", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NTQyNTU5NQ==",
          "body": "Alternatively, we could just update the svelte.substack.com branding to be the \"official\" svelte newsletter... they have an embed: https://support.substack.com/hc/en-us/articles/360041759232-Can-I-embed-a-signup-form-for-my-publication-\r\n\r\nThis would prevent us from having to migrate the email list to a different system. I would be happy to add all the svelte community team admin/members as admins/writers on substack, so anyone could post (if I get hit by a bus, win the lottery, etc.)",
          "createdAt": "2020-12-15T16:59:11Z",
          "author": { "login": "d3sandoval", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MDQ3ODM5Mg==",
          "body": "Hey @d3sandoval! I operate the svelte.news newsletter. I've got all the infrastructure built already (including auto-twittering). I've built a nice site, got a nice domain and I'm willing to put a lot of time and effort into curating.\r\n\r\nHow would you like to join forces?\r\n\r\nYou can see the newsletter here: https://svelte.news & https://svelte.news/weekly",
          "createdAt": "2020-12-23T21:20:06Z",
          "author": { "login": "pjebs", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MTI2ODA3MA==",
          "body": "@pjebs love your newsletter! But i feel like the separate domain is the underlying issue here. Currently, the blog posts are hosted on svelte.dev yet it seems strange that we'd have to send out the newsletter from svelte.news (or svelte.substack.com per my suggestion).\n\nI want to make sure we do everything we can to not fracture our community properties even further. The split between svelte.dev and the community / svelte society site is already confusing for newcomers. So I'd prefer we try to stay consistent whenever possible.\n\nAs for joining forces, I do create a PR ~1-2 weeks before a post. I'd love to get your feedback on those PRs before they go out :D",
          "createdAt": "2020-12-25T16:18:22Z",
          "author": { "login": "d3sandoval", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MjYxNDY4MQ==",
          "body": "@kevmodrome looks like substack supports custom domains for a one time setup fee of $50: https://support.substack.com/hc/en-us/articles/360051222571-How-do-I-set-up-my-custom-domain-\r\n\r\nI might have some time this weekend to do a proof of concept for an email collection box on the blog and the svelte community website. That may help visualize what's possible with substack (or really any other newsletter tool)",
          "createdAt": "2020-12-30T13:39:20Z",
          "author": { "login": "d3sandoval", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MDQ3NDg1Nw==",
          "body": "A conversation in #contributing is making me think about where the email collection form would go. @peopledrivemecrazy  brought up this example from the vue newsletter: https://news.vuejs.org/\r\n![image](https://user-images.githubusercontent.com/7872348/106401926-c9d37c00-63db-11eb-8f83-86bcbe51b9b9.png)\r\n\r\nI really like the main-sidebar style layout for the blog. The sidebar remains present in the upper right as you click through to different blog posts.",
          "createdAt": "2021-01-31T23:52:04Z",
          "author": { "login": "d3sandoval", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjAyNTU2Mg==",
          "body": "I just saw this and would propose another thing. We can seperate this into a own issue if you think that is better.\r\n\r\nIn order to bring this forward we could start by creating a `#news` channel in the discord server. Everyone in there could change his notification settings to be notified for it, or disable them if he / she wants.\r\nSure this would not cover everybody possible, but I think a quite a lot of people are on the discord.\r\n\r\nAs for the implementation: I think this could just be an easy CI / CD step that checks for a new blog post and the sends a short message to the discord server. We could then choose to include the whole post into discord, or provide a link to the official site (personally prefered).",
          "createdAt": "2021-03-06T19:00:45Z",
          "author": { "login": "manuel3108", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxMjkyMDIxMQ==",
          "body": "Finally got a chance to make this PR to help folks signup for the newsletter: https://github.com/sveltejs/svelte/pull/6163\r\n\r\nWould love some thoughts from the community on how best to approach this. I've heard that folks are confused by the split between the blog and the \"unofficial\" newsletter. Hoping to close that gap with this (or a similar) PR.",
          "createdAt": "2021-04-03T20:18:27Z",
          "author": { "login": "d3sandoval", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyMDg1MTQ3Mw==",
          "body": "Closing per discussion on PR. Thanks for the efforts on this!",
          "createdAt": "2021-04-16T01:55:52Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjgzNDAwOTE=",
    "body": "**Describe the bug**\r\nLet's say we use variable with type string, on use bind from input type range or number on that value. It's forced to retype to number, as You can see in Repl, but somethimes, You don't want to automatically force retype of variable if it's value is changed by bind from input type number or range, that is now forced, see https://github.com/sveltejs/svelte/blob/229a16d6e78dd5a11c75cc439c1a88e1079d452b/src/compiler/compile/render_dom/wrappers/Element/Binding.ts#L396-L400\r\n\r\n**Logs**\r\n(none)\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/64ae5620f0bd44adaba952ccfd444493?version=3.29.4\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nHave ability to change variable from input type number or range with preserve type string in variable\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome and Firefox (newest verrsions)\r\n\r\n- Your operating system: Ubuntu 20.04\r\n\r\n- Svelte version: 3.29.4\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nMedium, You need now to do:\r\n```\r\nlet a = \"5\" // and use it to bind inputs.\r\n$: a_string = String(a); // and use this in other code, but still there is problem, if a_string is changed from somewhere else.\r\n// if You add another line:\r\n$: a = Number(a_string); // but it will redeclare \"a\" so You need to use \"a_string | 5\", but it still not work:\r\n// it will result in `Cyclical dependency detected: a_string → a → a_string (3:1)`\r\n// so there is not easy solution for this.\r\n```\r\n\r\n**Additional context**\r\nWe should propably don't depend on type of input, but on another attribute, that will say, what type we will really want in result, like\r\n\r\n`<input bindtype=\"string\"> // or any other type`\r\n\r\npropably for other binds as well\r\n",
    "closedAt": "2020-10-23T17:15:44Z",
    "createdAt": "2020-10-23T16:05:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTQ2ODY2MA==",
          "body": "Essentially a duplicate of #3937.",
          "createdAt": "2020-10-23T17:15:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjgyMjc0MDY=",
    "body": "**Describe the bug**\r\nA bit difficult to describe. Suppose you have this code:\r\n```\r\n{#if $loading}\r\n    <div class=\"spinner\" />\r\n{:else}\r\n    {#each $store as element}\r\n  \t<p transition:slide class=\"name\">{element}</p>\r\n    {/each}\r\n{/if}\r\n```\r\nFirst render will be correct, however when the value of `store` changes (e.g. via `.set`) - the `each` block (inside `else`) does not seem to get the updated value of store. Transition plays out, but the elements remain the same. `{@debug $store}` statement inside `else` doesn't get triggered. `$: console.log($store);` shows that the store does update correctly every time.\r\nIf you remove transition:slide from element in `each` - everything start to work perfectly.\r\n\r\n**To Reproduce**\r\nClick on the checkbox that asynchronously updates the store value. Check the console for `@debug` vs `$: console.log` info. Remove `transition:slide` to see how it *should* work.\r\nhttps://svelte.dev/repl/49cef205e5da459594ef2eafcbd41593?version=3.29.4\r\n\r\n**Expected behavior**\r\nStore value should be read correctly inside of `else + each` block and elements should be drawn with an animation\r\n\r\n**Severity**\r\nAnnoying but avoidable - either do not use transition, or avoid `else` block (replacing it with an `if` block works just fine)",
    "closedAt": "2020-10-29T20:32:13Z",
    "createdAt": "2020-10-23T13:39:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEyMTA5OQ==",
          "body": "This is fixed in 3.29.5 - https://svelte.dev/repl/49cef205e5da459594ef2eafcbd41593?version=3.29.5",
          "createdAt": "2020-11-09T16:25:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjgxNDMzMjY=",
    "body": "It is often the case that component props happen to be either by intent or _de facto_ constant and unreactive\r\n\r\nUnfortunately Svelte does not provide a way to define unreactive props, in doing so it outputs a substantial amount of superfluous code, makes components less shareable , and misses an otherwise fantastic opportunity for the compiler to identify \"unreactive\", so called _pure components_ on its own to optimize their output accordingly\r\n\r\nWhile Svelte features the ability to define props using `export const`, props defined by that syntax can only be _derived from other props_, and _cannot be set directly_. \r\n\r\nDescribed in the documentation as a way [to define \"readonly\" props](https://svelte.dev/docs#1_export_creates_a_component_prop), it mistakenly draws parallels for some of us to Typescript's `readonly` [class property modifier](https://www.typescriptlang.org/docs/handbook/classes.html#readonly-modifier) which, contrary to Svelte's const props, defines readonly properties that in fact _[can be set directly](https://www.typescriptlang.org/play?#code/MYGwhgzhAEDCD2BbADvAdgUzQF2gbwFgAoaaYdCbAJwFdht4qAKKjMAE3RAE9ow0IAdwxVoAXmgBmAHQBGACwBKfNAC+xdUXID4IDNJDwA5k0yC4SVJhxN5AJkXT+QkYoDcQA)_ on init\r\n\r\nFor those reasons, and because it would greatly enhance an otherwise very rarely used feature, I believe that there is a great case to make for const props to be settable on init\r\n\r\nThis proposed change asserts for the following to render `42`\r\n```svelte\r\n<script>\r\n    export const answer = 1.618;\r\n</script>\r\n{answer}\r\n```\r\n```svelte\r\n<Component answer={42} />\r\n```\r\n\r\nMost scenarios where this change would qualify as breaking also qualifies as an unintended use case as values passed to const props currently throw `unknown prop` dev warnings. With that said this is still a breaking change in cases where `export const` is used in combination with `$$props`, as the latter suppresses unknown props dev warnings. \r\n\r\nI do not expect this to be implemented as it is technically breaking, but considering the value it could hypothetically add to the framework I still think it's worth putting a proposal out there\r\n\r\nPossibly related #5183",
    "closedAt": null,
    "createdAt": "2020-10-23T11:31:26Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNzA1MTczMg==",
          "body": "So, you're suggesting that `const` props could be set externally. What happens when `answer` changes value?\r\n\r\n```\r\n<Component { answer }/>\r\n<button on:click={() => answer += 1}>Increment</button>\r\n```\r\n",
          "createdAt": "2020-11-13T21:48:38Z",
          "author": { "login": "rsdavis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNzE1NjY0Nw==",
          "body": "> So, you're suggesting that `const` props could be set externally. What happens when `answer` changes value?\r\n> \r\n> ```\r\n> <Component { answer }/>\r\n> <button on:click={() => answer += 1}>Increment</button>\r\n> ```\r\n\r\nMy suggestion would be that the original component is destroyed and a new one is created in its place with the new const value.\r\nThis would be similar to how the #key directive currently works.\r\n\r\nIn support of the proposal, i would suggest that the lack of   this feature is the cause of some bugs.\r\nWhere a component author has used an input with the assumption that it would not change, they likely will not have created reactive initialisation code.\r\nThen, when the input changes the component becomes only partially updated.\r\n\r\nIm on a phone so providing an example is hard right now. Let me know if I am being unclear and I will provide an example when I am at a computer.",
          "createdAt": "2020-11-14T06:51:45Z",
          "author": { "login": "WHenderson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyODYzNjQwNQ==",
          "body": "> Im on a phone so providing an example is hard right now. Let me know if I am being unclear and I will provide an example when I am at a computer.\r\n\r\nHere is an example, with a workaround:\r\nhttps://svelte.dev/repl/693e994fa12248efbd8d2700db97727d?version=3.29.7\r\n\r\nIdeally we could come up with a way to automatically produce an equivalent of the workaround.",
          "createdAt": "2020-11-17T02:00:21Z",
          "author": { "login": "intelcentre", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMzgxNDg3OQ==",
          "body": "> My suggestion would be that the original component is destroyed and a new one is created in its place with the new const value.\r\n> This would be similar to how the #key directive currently works.\r\n\r\nThat behavior would be extremely surprising and unintuitive. \r\n\r\nI think `export const` is better reserved for exposing interfaces on components though `bind:this`.",
          "createdAt": "2021-05-06T19:50:13Z",
          "author": { "login": "akiselev", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjgwODE2Mjg=",
    "body": "**Describe the bug**\r\nPR #5302 is too strict and will warn on any import that bears an html element name\r\n\r\n**To Reproduce**\r\n```\r\n<script>\r\n\timport {b} from './some.js'\r\n</script>\r\n\r\n<b>Hello {b}!</b>\r\n```\r\n\r\nhttps://svelte.dev/repl/e29cafcb75874c8082a849ffbdd65dc1?version=3.29.4\r\n\r\nIt should only warn on real components.",
    "closedAt": "2020-11-22T15:45:54Z",
    "createdAt": "2020-10-23T09:55:51Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTMwMTU1Nw==",
          "body": "What would you suggest changing the heuristics to? Keep in mind that we cannot tell what's in the imported file.",
          "createdAt": "2020-10-23T12:07:05Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTMwODE5MA==",
          "body": "Seeing the warning in my app I opened the PR I assuming there was an array of \"valid\" elements (such as listed here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element) but it only checks elements against imported names. No problem with that. It just causes the issued behaviour. Would it be a good idea to create such a list of valid elements? Or check against such a list as well to filter out false positives? The downside would be that it is basically an evergrowing list and it would add rather unncecessary weight to the compiler (since the checks against that list would only be for positives).",
          "createdAt": "2020-10-23T12:21:32Z",
          "author": { "login": "burningTyger", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTgxNzAxMg==",
          "body": "I have no issue with closing this if it doesn't affect anybody else.",
          "createdAt": "2020-10-30T21:53:36Z",
          "author": { "login": "burningTyger", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTcxODAwOA==",
          "body": "I import `time` from store (as in example https://svelte.dev/examples#readable-stores), put it in `<time>` tag, and got this warning. Of course I can use other tag of variable name, but it would be nice to mute this, maybe something like this:\r\n```svelte\r\n<time ignore:component-name-lowercase>{time}</time>\r\n```",
          "createdAt": "2020-11-22T09:00:09Z",
          "author": { "login": "ziggi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTczMzczNg==",
          "body": "@ziggi You can use comments to ignore the warning: https://svelte.dev/docs#Comments\r\n\r\nIn this case you want to use:\r\n```\r\n<!-- svelte-ignore component-name-lowercase -->\r\n<time>{time}</time>\r\n```\r\n\r\n",
          "createdAt": "2020-11-22T11:32:04Z",
          "author": { "login": "hmt", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTc0MjU1Mw==",
          "body": "@hmt oh, thanks.",
          "createdAt": "2020-11-22T12:45:15Z",
          "author": { "login": "ziggi", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjc5NjU5NDI=",
    "body": "This issue tracker is intended to collect bug reports and feature requests.\n\nFor help with installation, information on how features work, or questions about specific features of Svelte, please come and join us in the [Svelte Discord](https://svelte.dev/chat), or ask your question on [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte). Any issues open for help requests will be closed to keep from clogging up the issue tracker.\n.",
    "closedAt": "2020-10-23T06:55:04Z",
    "createdAt": "2020-10-23T06:54:28Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjc5NTAzMDk=",
    "body": "Hi, I'm middle Front-End developer from Ukraine, and know already 4 frameworks: Vue.js, React, AMP, Svelte. \r\n\r\nI want to be a volunteer and popularize your framework into Russian community, so I want to start translate your documentation, tutorials, etc... So how can I make this? \r\n\r\nPlease add plugin such as \"i18n\" into your Github repo, add fully localizated English file. We will make RU file and some volunteers other languages files, that will have the same object structure as your original English file. Watching Github issues we will update and correct our translations. Also need to configure your site with doc. If in some languages we don't find required object with translation or our translation is not up to date, it will borrow actual from original translation (ENG).",
    "closedAt": null,
    "createdAt": "2020-10-23T06:23:26Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTEzNDQ1NA==",
          "body": "You might be interested in this https://github.com/AlexxNB/svelte3-translation-ru also site is available here https://ru.svelte.dev/\r\n\r\nAlso please check #5122 ",
          "createdAt": "2020-10-23T08:07:28Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjc4NTQ0Nzc=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen a component has a default slot and named slots, the textual line-break between named slots will be considered as the default slot.\r\n\r\nExample:\r\n`MyComponent`:\r\n```html\r\n<slot name=\"slotA\" />\r\n<slot name=\"slotB\" />\r\n<slot>Default value</slot>\r\n```\r\nUsage:\r\n```html\r\n<MyComponent>\r\n    <div slot=\"slotA\"> ... </div>\r\n    <div slot=\"slotB\"> ... </div>\r\n</MyComponent>\r\n```\r\nThis will define an empty default slot (the '⏎' in `</div>⏎<div slot=\"slotB\">`) and \"Default value\" won't be displayed.\r\nIn order to use the default of the slot, we need to make sure there is no space between the named slots this way:\r\n```html\r\n<MyComponent>\r\n    <div slot=\"slotA\">\r\n        ...\r\n    </div><div slot=\"slotB\">\r\n        ...\r\n    </div>\r\n</MyComponent>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nWhen the default slot value contains only spaces-like, the default should be used as if it was empty\r\n\r\n**How important is this feature to you?**\r\nannoyance-level + I had to search for some time why my slot didn't display\r\n",
    "closedAt": "2021-03-02T07:25:58Z",
    "createdAt": "2020-10-23T03:04:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTUwNzc1OQ==",
          "body": "See #4546",
          "createdAt": "2020-10-23T18:34:58Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODY4MzA0Mg==",
          "body": "This should be fixed now in 3.35.0.\r\n\r\n[See REPL](https://svelte.dev/repl/d0faa4e20697498f84c839018a379cb1?version=3.35.0)",
          "createdAt": "2021-03-02T07:25:58Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3Mjc2ODY5NjA=",
    "body": "**Describe the bug**\r\n\r\nCode such as this:\r\n```svelte\r\n<script>\r\n    function setKey(key, value) { ... }\r\n</script>\r\n\r\n{#each keys as key}\r\n    <slot {key} set={(value) => setKey(key, value)} />\r\n{/each}\r\n```\r\n\r\nGenerates this code: \r\n```js\r\nconst get_default_slot_context = ctx => ({ key: /*key*/ ctx[4], set: func });\r\n\r\nfunction create_each_block(ctx) {\r\n\tlet current;\r\n\r\n\tfunction func(...args) {\r\n\t\treturn /*func*/ ctx[3](/*key*/ ctx[4], ...args);\r\n\t}\r\n\r\n\tconst default_slot_template = /*#slots*/ ctx[2].default;\r\n\tconst default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], get_default_slot_context);\r\n\r\n    // rest of the function here\r\n}\r\n```\r\n\r\n`func` is defined inside create_each_block, not in `get_default_slot_context`, which causes a runtime error `func is not defined`.\r\n\r\nThis only happens if the value of `set` can't be hoisted outside the `#each`. If I don't use an #each loop or if I just remove the reliance on `key` like this `set={(value) => setSomething(value)}`, then everything works fine.\r\n\r\nLooking back, 3.15 is the latest version of Svelte in which this worked.\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/ad8e6f39cd20403dacd1be84d71e498d?version=3.29.3\r\n\r\n**Information about your Svelte project:**\r\n\r\nSvelte 3.29.3 in REPL.\r\n\r\n**Severity**\r\n\r\nMildly inconvenient. I can work around it in this case by just using a static function for the slot prop and having the slot content just call the function with all the necessary arguments.\r\n",
    "closedAt": "2020-10-29T19:15:54Z",
    "createdAt": "2020-10-22T20:07:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDEyMDUyNA==",
          "body": "This is fixed in 3.29.5 - https://svelte.dev/repl/ad8e6f39cd20403dacd1be84d71e498d?version=3.29.5",
          "createdAt": "2020-11-09T16:24:55Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjczNzM4NjM=",
    "body": "**Describe the bug**\r\non:click events ( and maybe others ) seem to damage the lifecycle of x3dom objects\r\n\r\n![image](https://user-images.githubusercontent.com/17650/96876193-723a8180-1478-11eb-8682-b793e65dc847.png)\r\n\r\n\r\n**Logs**\r\nhttps://stackoverflow.com/questions/64482871/svelte-doesnt-handle-click-events-from-x3dom-correctly\r\n\r\nThis is the stack trace I get from chrome devtools \r\n\r\n```\r\nx3dom.js:3219 Uncaught (in promise) TypeError: Cannot read property '_listeners' of undefined\r\n    at HTMLUnknownElement.domNode.removeEventListener (x3dom.js:3219)\r\n    at eval (eval at handle_message (VM4701 about:srcdoc:13), <anonymous>:56:27)\r\n    at eval (eval at handle_message (VM4701 about:srcdoc:13), <anonymous>:300:13)\r\n    at Object.destroy [as d] (eval at handle_message (VM4701 about:srcdoc:13), <anonymous>:388:8)\r\n    at Object.update [as p] (eval at handle_message (VM4701 about:srcdoc:13), <anonymous>:556:18)\r\n    at update (eval at handle_message (VM4701 about:srcdoc:13), <anonymous>:145:40)\r\n    at flush (eval at handle_message (VM4701 about:srcdoc:13), <anonymous>:113:17)\r\n```\r\n\r\nIt seems x3dom has had something removed from underneath it.\r\n\r\n**To Reproduce**\r\n\r\nhttps://stackoverflow.com/questions/64482871/svelte-doesnt-handle-click-events-from-x3dom-correctly \r\nhttps://svelte.dev/repl/6427e29e27404f48911d8e2708bcdfc0?version=3.29.0\r\n\r\n\r\n**Expected behavior**\r\nClicking on any of the objects should show an alert. However only the green objects shows an alert but the second time the checkbox is click the green object no longer displays\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-10-22T13:08:06Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDU1NDUyOA==",
          "body": "I'm pretty sure this is an x3dom bug/feature. I can work around the issue by creating a custom click event.\r\n\r\nhttps://svelte.dev/repl/52001a7c6a5648819e786f69f019f083?version=3\r\n\r\n",
          "createdAt": "2020-10-22T14:59:43Z",
          "author": { "login": "bradphelan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDY2ODkxMg==",
          "body": "I have a workaround solves two problems and allows me to handle events.\r\n\r\nhttps://github.com/bradphelan/svelte-x3dom-demo/blob/main/src/App.svelte\r\n![2020-10-22_20-16-27](https://user-images.githubusercontent.com/17650/96913171-93649780-14a3-11eb-8e6f-60a2f94b89d0.gif )\r\n\r\n\r\nI needed to create a custom action like below to replace ``on:click``\r\n\r\nhttps://github.com/bradphelan/svelte-x3dom-demo/blob/main/src/x3dom.ts\r\n```\r\n\r\nlet r = ()=>{};\r\n\r\nwindow.x3dom.runtime.ready = ()=>{\r\n   r();\r\n}\r\n\r\nlet loaded = new Promise((resolve) => {\r\n    r = resolve;\r\n});\r\n\r\n\r\nexport let onclick = (node, handler) => {\r\n    // Don't register the event handler unless the x3dom is ready\r\n    loaded.then(v=>{\r\n        node.addEventListener(\"click\", handler);           \r\n    });\r\n\r\n    return {\r\n        destroy() {\r\n            try {\r\n                node.removeEventListener(\"click\", handler);\r\n            } catch (error) {\r\n                console.warn(\"Cannot remove event handler from x3dom node\");\r\n                \r\n            }\r\n        },\r\n    };\r\n};\r\n```\r\n\r\nSo two problem are handled above. \r\n\r\n1.)  Events can't be handled until x3dom is actually ready for them\r\n2.)  By the time destroy is called it is too late to do it. The object is in a bad state.\r\n\r\nWith regards to (2). If, when registering the handler I immediately call ``removeEventListener`` afterward then no error occurs which suggests the problem is a matter of timing or perhaps x3dom has already cleaned up the object and disposed of internal state.\r\n\r\n```\r\n node.addEventListener(\"click\", handler);           \r\n node.removeEventListener(\"click\", handler);\r\n````\r\n\r\nI have a repository where all this can be played with including the workaround https://github.com/bradphelan/svelte-x3dom-demo\r\n\r\nIs this entirely a x3dom problem or is there a core adjustment that svelte could make to make working with x3dom events out of the box easier?\r\n",
          "createdAt": "2020-10-22T18:11:34Z",
          "author": { "login": "bradphelan", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjcyODk1OTg=",
    "body": "**Describe the bug**\r\nFollowing the steps in https://youtu.be/qSfdtmcZ4d0 and running `npm init svelte@next` followed by `yarn` followed by `yarn add -D @sveltejs/adapter-static` and replacing\r\n\r\n```diff\r\n// svelte.config.js\r\nmodule.exports = {\r\n-  adapter: '@sveltejs/adapter-node',\r\n+  adapter: '@sveltejs/adapter-static',\r\n}\r\n```\r\n\r\n`yarn build` fails with\r\n\r\n```\r\n(node:74941) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'find' of undefined\r\n    at render_route (node_modules/@sveltejs/adapter-static/node_modules/@sveltejs/app-utils/src/render/route.ts:7:1)\r\n```\r\n\r\nThis is what the generated `manifest.js` file in `.svelte/main` looks like\r\n\r\n```js\r\nexport const routes = [\r\n\t{\r\n\t\t// index.svelte\r\n\t\tpattern: /^\\/$/,\r\n\t\tparts: [\r\n\t\t\t{ i: 0 }\r\n\t\t]\r\n\t}\r\n];\r\n```\r\n\r\nIs it supposed to contain an `endpoints` key?\r\n\r\n**Stacktrace**\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n> (node:74941) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'find' of undefined\r\n>     at render_route (node_modules/@sveltejs/adapter-static/node_modules/@sveltejs/app-utils/src/render/route.ts:7:1)\r\n>     at render (node_modules/@sveltejs/adapter-static/node_modules/@sveltejs/app-utils/src/render/index.ts:15:1)\r\n>     at crawl (node_modules/@sveltejs/adapter-static/node_modules/@sveltejs/app-utils/src/prerender/index.ts:82:1)\r\n>     at prerender (node_modules/@sveltejs/adapter-static/node_modules/@sveltejs/app-utils/src/prerender/index.ts:209:1)\r\n>     at adapter (node_modules/@sveltejs/adapter-static/index.js:13:2)\r\n>     at build (node_modules/@sveltejs/kit/src/api/build/index.ts:260:1)\r\n>     at processTicksAndRejections (internal/process/task_queues.js:93:5)\r\n>     at node_modules/@sveltejs/kit/src/cli.ts:71:1\r\n> (Use `node --trace-warnings ...` to show where the warning was created)\r\n> (node:74941) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)\r\n> (node:74941) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your operating system: maxOS 10.15.7\r\n\r\n- Whether your project uses Webpack or Rollup: Snowpack\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nBlocking usage.",
    "closedAt": "2020-10-22T11:12:12Z",
    "createdAt": "2020-10-22T11:10:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDQyMDAzOQ==",
          "body": "`svelte@next` is not yet ready, please do not open bug reports for it.",
          "createdAt": "2020-10-22T11:12:12Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDQzNTU5NQ==",
          "body": "It worked in the video so I thought I'd warn about a possible regression.",
          "createdAt": "2020-10-22T11:41:58Z",
          "author": { "login": "janosh", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDQzODA5OQ==",
          "body": "Thanks for letting us know anyway - unfortunately there will be lots of regressions as we completely change the internal API on a pretty regular basis.",
          "createdAt": "2020-10-22T11:47:15Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzM4NjI3NQ==",
          "body": "@antony Side question: when can we expect Svelte kit to be released?",
          "createdAt": "2021-01-26T08:31:05Z",
          "author": { "login": "kaushalyap", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjY5MTMwNjk=",
    "body": "**Describe the bug**\r\n\r\nWith a reactive expression like `(a ?? b) || c`, the parentheses are stripped and it renders in the output as `a ?? b || c`, which some later parser stage (in the bundler I think) does not like.\r\n\r\nThis might actually be a problem with some dependency of Svelte that deals with JS parsing, but I'm not sure, so filing here first.\r\n\r\n**Logs**\r\n\r\nTrying it in the REPL reports this error: \r\n\r\n> Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses (Note that you need plugins to import files that are not JavaScript)\r\n\r\nOn my local setup with Babel, I see a similar error:\r\n\r\n> [!] (plugin babel) SyntaxError: Overridable.svelte: Nullish coalescing operator(??) requires parens when mixing with logical operators (150:57)\r\n\r\nAlso manually confirmed that Chrome and Node throw a SyntaxError when the parentheses are missing.\r\n\r\n**To Reproduce**\r\n\r\nREPL: https://svelte.dev/repl/ece0d31ee4d44ef380b2b3d1ee1d3603?version=3.29.0\r\n\r\nThe invalid expression is on line 35 of the generated output.\r\n\r\nOr just use this Javascript.\r\n```js\r\n$: usedValue = (1 ?? 2) || 0;\r\n```\r\n\r\nWhile the example here just uses constants, the same behavior occurs with normal variables.\r\n\r\n\r\n**Expected behavior**\r\n\r\nPreserve the parentheses in this case.\r\n\r\nNotably, when the parentheses are around the logical operator like `1 ?? (2 || 0)`, the output still contains the parentheses.\r\n\r\n**Information about your Svelte project:**\r\n\r\nLocally, Svelte 3.29.0 with Rollup 2.26.11 and Babel 7.11.6 with `preset-env: { esmodules: true }`\r\n\r\nAlso reproduces in the REPL with the above link.\r\n\r\n**Severity**\r\n\r\nLow. In my case `a ?? b ?? 0` works just fine and it could also be worked around by breaking it into 2 expressions if necessary.\r\n",
    "closedAt": "2020-10-22T19:53:56Z",
    "createdAt": "2020-10-21T22:44:23Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMzkyMzE4MA==",
          "body": "Interesting! I wasn't aware of this nuance in the syntax. I've opened https://github.com/Rich-Harris/code-red/issues/52 for the underlying issue.",
          "createdAt": "2020-10-21T22:52:03Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDczMTk0Ng==",
          "body": "Fixed in 3.29.4 - https://svelte.dev/repl/ece0d31ee4d44ef380b2b3d1ee1d3603?version=3.29.4",
          "createdAt": "2020-10-22T20:07:25Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjY4ODc0ODU=",
    "body": "**Describe the bug**\nA clear and concise description of what the bug is.\n\n**Logs**\nPlease include browser console and server logs around the time this bug occurred.\n\n**To Reproduce**\nTo help us help you, if you've found a bug please consider the following:\n\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\n\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\n\n**Expected behavior**\nA clear and concise description of what you expected to happen.\n\n**Stacktraces**\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\n\n<details>\n  <summary>Stack trace</summary>\n\n  Stack trace goes here...\n</details>\n\n**Information about your Svelte project:**\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\n\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\n\n- Svelte version (Please check you can reproduce the issue with the latest release!)\n\n- Whether your project uses Webpack or Rollup\n\n**Severity**\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\n\nNote: the more honest and specific you are here the more we will take you seriously.\n\n**Additional context**\nAdd any other context about the problem here.\n",
    "closedAt": "2020-10-21T22:53:52Z",
    "createdAt": "2020-10-21T21:50:25Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjY3OTY0NjI=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nSvelte scores 88/100 on Skypack's new [Package Score](https://www.skypack.dev/view/svelte), because it doesn't have an [export map](https://docs.skypack.dev/package-authors/package-checks#export-map) (which explicitly states which files can be imported from an npm package. This is a relatively new thing that's supported by npm and some bundlers).\r\n\r\n**Describe the solution you'd like**\r\nAdd an export map — should be very straightforward\r\n\r\n**How important is this feature to you?**\r\nI mean...\r\n\r\n<img width=\"1083\" alt=\"Screen Shot 2020-10-21 at 3 15 50 PM\" src=\"https://user-images.githubusercontent.com/1162160/96771915-58ce0280-13b0-11eb-8bf9-67f7cb56d91f.png\">\r\n",
    "closedAt": "2020-11-09T15:26:34Z",
    "createdAt": "2020-10-21T19:16:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDE2NDM4Mg==",
          "body": "This should be all set now, but https://www.skypack.dev/view/svelte still isn't showing the latest version of the package and score. I don't know whether there's something we need to do to get them to re-calculate, or we just need to wait.",
          "createdAt": "2020-11-09T17:38:03Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjY2MTk2NjA=",
    "body": "**Describe the bug**\r\nWhen binding to a property of a store value, the value is updated / changed (subscribe called) for each bind statement, instead of just once for the initialization.\r\n\r\n**To Reproduce**\r\nREPL: https://svelte.dev/repl/83c80ca45be54486ae7fd15827660280?version=3.29.0\r\n\r\n![image](https://user-images.githubusercontent.com/177476/96744103-b05d7580-1392-11eb-9a00-73d7376fd228.png)\r\n\r\nIn the REPL, I would expect \"pagination changed!\" to be logged once when initialized, but it is being logged 3 times (2 additional times due to each `bind:`).\r\n\r\nAfter the initial 3, only a single subscribe is called when changing anything on the store, as expected.\r\n\r\n**Expected behavior**\r\nI would expect a single call to `subscribe` on initialization, instead of ```1 + (number of `bind:` properties)```\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Svelte version: 3.29.0\r\n\r\n**Severity**\r\nIn my application, this is causing all my HTTP requests to fire multiple times on init due to the changing store value, which makes this a rather significant issue for my project.",
    "closedAt": "2021-02-08T19:22:26Z",
    "createdAt": "2020-10-21T15:47:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMDU4MDc2Nw==",
          "body": "This actually seems to be a pretty annoying bug. It doesn't apply only to stores. Binding all complex structures (objects, arrays) fires another extra update. Here's a link to my simplified REPL.\r\n\r\nhttps://svelte.dev/repl/2bbb8d98fc8a49398d269dff0eb9843b?version=3.29.7\r\n\r\n@techniq If you may, please update the bug title to something more straightforward, so as it gets more attention.",
          "createdAt": "2020-11-19T19:13:50Z",
          "author": { "login": "xpuu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTM5MDg5MQ==",
          "body": "This should be fixed now in 3.32.2 - https://svelte.dev/repl/83c80ca45be54486ae7fd15827660280?version=3.32.2",
          "createdAt": "2021-02-08T19:35:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTQwNzU5OA==",
          "body": "I can confirm the fix. Many thanks! <3",
          "createdAt": "2021-02-08T20:01:27Z",
          "author": { "login": "xpuu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTQxMTk5Mg==",
          "body": "Confirmed as well.  Thanks @pushkine and @Conduitry!",
          "createdAt": "2021-02-08T20:09:08Z",
          "author": { "login": "techniq", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjU2MTU4OTU=",
    "body": "**--EDIT--** found the problem as described [here](https://svelte.dev/docs#2_Assignments_are_reactive), please disregard the issue \r\n(and forgive me, I'm new to Svelte) :)\r\n\r\nWhen an array is defined, changes are not reflected if an element is added with the `push` method from inside the `onMount` function.\r\n\r\nThis doesn't work:\r\n\r\n```\r\n<script>\r\n\timport { onMount } from \"svelte\";\r\n\r\n\tlet list = [1];\r\n\t\r\n\tonMount(() => {\r\n\t\tlist.push(list[list.length-1] + 1);\r\n\t});\r\n</script>\r\n```\r\n\r\nwhile the spread operator works:\r\n\r\n```\r\n<script>\r\n\timport { onMount } from \"svelte\";\r\n\r\n\tlet list = [1];\r\n\t\r\n\tonMount(() => {\r\n\t\tlist = [...list, list[list.length-1] + 1];\r\n\t});\r\n</script>\r\n```\r\n\r\nAny idea why?\r\n\r\nYou can reproduce the example [here](https://svelte.dev/repl/a7921c1817b94a90ad9e1db593e5131e?version=3.29.0).",
    "closedAt": "2020-10-20T13:54:34Z",
    "createdAt": "2020-10-20T13:52:45Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjg2ODM0Ng==",
          "body": "Hi, we don't use github issues for support. Please use [chat](https://svelte.dev/chat) instead.\r\n\r\nThe situation you are describing is not specific to `onMount`. Please see the section on [reactivity](https://svelte.dev/docs#2_Assignments_are_reactive).",
          "createdAt": "2020-10-20T13:54:34Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjU1NTU5MTc=",
    "body": "I started using Svelte for creating reusable web components and I had a blast lately with it, super easy to use and very lightweight, we started implementing these web components in our Angular applications and everything works fine unit I add conditional operators to my Svelte code. For example:\r\n- I created a minimal table component and I have something like this:\r\n``` html\r\n...\r\n{#each cols as col}\r\n        <th>{col.title ?? col.name}</th>\r\n{/each}\r\n...\r\n```\r\n\r\n- When I build and install it via npm in Angular I get the following error instantly (I'm using rollup in svelte):\r\n``` log\r\nModule parse failed: Unexpected token (1:2831)\r\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\r\n```\r\n- However, if I remove the 'critical' conditional operators like so:\r\n``` html\r\n{#each cols as col}\r\n        <th>{col.title}</th>\r\n{/each}\r\n```\r\n- It works perfectly and I can use it like this:\r\n``` html\r\n<svelte-minimal-table\r\n        [data]=\"arrData\"\r\n        [cols]=\"arrCols\"\r\n        (rowSelect)=\"rowSelect($event.detail)\">\r\n</svelte-minimal-table>\r\n```\r\n\r\nMaybe it's not a problem with Svelte at all, but since I only experienced this with Svelte I don't know where I'm supposed to search for the solution.\r\n\r\nThanks for the help in advance!\r\n",
    "closedAt": "2020-10-20T13:04:46Z",
    "createdAt": "2020-10-20T12:53:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjgzNDM3Mg==",
          "body": "When you compile a Svelte component containing the `??` operator, it will have that operator in the compiled JS output. If the build process in whatever environment you're trying to use the component in doesn't support that syntax, you'll have to transpile it (either as part of your component's build process, or as part of the consuming project's build process).",
          "createdAt": "2020-10-20T13:04:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjUyMzQzNjY=",
    "body": "I am using custom svg font to display icons, but it doesn't render correctly when codepoints are bigger than 0xFFFF.\r\nThis works:\r\n```svelte\r\n<span class='ico'>&#xE806;<span>\r\n```\r\nThis doesn't\r\n```svelte\r\n<span class='ico'>&#xF0141;</span>\r\n```\r\nWhen I inject the icon HTML Entity (&#xF0141;) in index.html or from browser, it works fine.\r\nPlus, ```console.log(span.innerHTML.codePointAt(0)) //returns 0```\r\n\r\nI have work around which I don't want to use\r\n```svelte\r\n<span class='ico'>{'\\u{F0141}'}</span>\r\n```",
    "closedAt": null,
    "createdAt": "2020-10-20T06:04:43Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMzkzMTAzNw==",
          "body": "This is being handled by [this code](https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/utils/html.ts#L71) which is returning `\\0` for characters it deems to be invalid, but I'm not sure what this ought to be doing. The Wikipedia link in the comment above the function appears to be out of date.",
          "createdAt": "2020-10-21T22:59:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjUyMjg3MTM=",
    "body": "For example, I have `store.js` looks like this:\r\n```js\r\nimport { writable } from 'svelte/store';\r\n\r\nlet obj = {\r\n  firstProp: \"Initial value\",\r\n  secondProp: \"Initial value\",\r\n}\r\nexport const storeName = writable(obj)\r\n```\r\nIf I need to change object in store every N time, I can do it this way:\r\n```js\r\nexport const storeName = writable(obj, () => {\r\n  setInterval(() => {\r\n    storeName.set({\r\n      firstProp: get(storeName).firstProp,\r\n      secondProp: \"New value\"\r\n    })\r\n  }, 5_000)\r\n})\r\n```\r\n\r\n> If I use `storeName.update` instead of `storeName.set` inside `setInterval`, markup in components(that use this store) is not updated - initial value of storeName is displayed.\r\n\r\nIt seems to me that this is not the right way to change a single object property in store (due to copying of each property)\r\n\r\nIt would be nice to have some sort of syntax to change just one property\r\n\r\nIt may look like this:\r\n\r\n```js\r\nimport { writable } from 'svelte/store';\r\n\r\nexport const storeName = writable(obj, setProperty => {\r\n  setInterval(() => setProperty(storeName.secondProp, \"New value\"), 5_000)\r\n})\r\n```\r\nIt would be ideal to allow changing sub properties of an object(`setProperty(storeName.secondProp.subProp, \"New value\")`)",
    "closedAt": "2020-10-20T07:30:45Z",
    "createdAt": "2020-10-20T05:55:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjYzNjE0Mw==",
          "body": "I realized that I did'nt detail example code enough.\r\nI'm going to create a more detailed REPL now",
          "createdAt": "2020-10-20T06:54:59Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjY1NDMxNg==",
          "body": "There's nothing magical about the current store implementations, they're just blessed versions of things that could just as well be user code. If there's another feature you want, you can implement it in your own stores. New features in the existing stores are unlikely to happen, as it means more code for everyone, and they're meant to be very basic and minimal.",
          "createdAt": "2020-10-20T07:30:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjUwOTE1MDA=",
    "body": "**Describe the bug**\r\nIf you try to replace the `<html>` wrapper during hydration, it throws errors on line 179 of `svelte/internal/index.mjs` because it can't insertBefore the top-level document. I'm trying to use an entrypoint in this format:\r\n```js\r\nnew App({                \r\n  target: document,\r\n  hydrate: true\r\n});\r\n```\r\n\r\n**Logs**\r\n- Chrome: `DOMException: Failed to execute 'insertBefore' on 'Node': Only one element on document allowed.`\r\n- Firefox: `DOMException: Node.insertBefore: Cannot have more than one Element child of a Document`\r\n\r\n**To Reproduce**\r\nUnfortunately I don't think I can use the [repl](https://svelte.dev/repl) to demonstrate hydration issues. This can be seen in the default starter of https://github.com/plentico/plenti. **EDIT:** Added a demo that doesn't require plenti: https://github.com/jimafisk/svelte-document-replace\r\n\r\n**Expected behavior**\r\nI'd like to be able to use the top-level `document` as a target without hitting errors. I'm not sure the exact fix to minimize negative impact on other aspects of svelte would be, but a temp fix on line 178 of `node_modules/svelte/internal/index.mjs` works for me:\r\n```js\r\nfunction insert(target, node, anchor) {       \r\n  if (target != document) {\r\n    target.insertBefore(node, anchor || null);\r\n  }\r\n}\r\n```\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version:\r\n  - Chrome Version 85.0.4183.102 (Official Build) (64-bit)\r\n  - Firefox Version 81.0 (64-bit)\r\n- Your operating system: Ubuntu Linux 18.04 LTS\r\n- Svelte version: 3.23.2\r\n- Whether your project uses Webpack or Rollup: N/A, I'm using ESM imports\r\n\r\n**Severity**\r\nI currently have to tweak the Svelte lib to make it work with [my project](https://github.com/plentico/plenti), but I recognize that we have a small userbase and there are higher priority items. \r\n\r\n**Additional context**\r\nThe error message is the same as [shown here](https://github.com/sveltejs/svelte/issues/2573#issuecomment-623051706), although that seems to be related to a slightly different issue. \r\n\r\nHere's another conversation about replacing top-level elements during hydration: https://stackoverflow.com/questions/61640429/how-to-replace-the-contents-of-a-target-in-svelte-instead-of-appending-to-childr\r\n\r\nThank you!",
    "closedAt": null,
    "createdAt": "2020-10-20T00:56:11Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjUzMjIyNg==",
          "body": "Here's a quick repo that demonstrates the issue: https://github.com/jimafisk/svelte-document-replace\r\n\r\n<details>\r\n<summary>Screenshot</summary>\r\n\r\n![doc_hydrate_error](https://user-images.githubusercontent.com/5913244/96529177-78e7af80-1252-11eb-8007-6847b43e77a2.png)\r\n\r\n\r\n</details>",
          "createdAt": "2020-10-20T01:32:04Z",
          "author": { "login": "jimafisk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMzcwOTQxOA==",
          "body": "I'm not sure what you'd need to mount an app at `document` for, as opposed to mounting it at `document.body`. Svelte provides a mechanism for manipulating elements in the head (`<svelte:head>`) - what else do you need? What would you expect mounting at `document` do differently from mounting at `document.body`?",
          "createdAt": "2020-10-21T16:45:06Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMzgwMTAxNg==",
          "body": "One of our primary goals for the project is to simplify the dev experience for new folks as much as possible, so ideally the users won't even have to think about how it's getting mounted at all. Using `<svelte:head>` is a hugely useful feature, and I suspect folks who are familiar with Svelte will want to use it in our project, but it's a syntax that's foreign to people coming from a strictly HTML background. Our theory is that it will be easier for junior devs to find and manipulate the metadata in a `<head>` that is included like every other component in their projects.\r\n\r\nAlso when mounting `document.body` if folks want to add attributes to the `<html>` wrapper for instance, they would need to edit a standard HTML file. Currently in our project, the only files people can edit are Svelte templates (we abstract away things like the entrypoint and routing). I'm worried new devs might not understand why you can't do regular Svelte things in this file. In our current setup the HTML wrapper is just a regular Svelte template people can edit like any other template. It gets SSR'd into static HTML that mounts itself - but the user doesn't necessarily need to think about how it creates HTML fallbacks and hydrates them.\r\n\r\nWe're hoping to make it so the Svelte templates tell a complete story of the dom, while limiting the number of concepts required to get started. Are there challenges to implementing something like this that I might not thinking of? Thanks for taking a look @Conduitry!",
          "createdAt": "2020-10-21T18:51:13Z",
          "author": { "login": "jimafisk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzI0NjM2MA==",
          "body": "Just following up on this issue, is this something that could be pulled into the project? It would let Plenti users manage their specific version of Svelte.",
          "createdAt": "2020-11-06T18:59:27Z",
          "author": { "login": "stephanieluz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTAxNTA4OQ==",
          "body": "Hi @Conduitry, would checking if the `target` is the `document` in the insert function be an acceptable change to pull in? I created a PR for that here: https://github.com/sveltejs/svelte/pull/5743.\r\n\r\nIt would help our project out greatly to be able to hydrate the full dom. If this has consequences that I'm not considering, or if you think a different approach would be better please let me know! Thank you!",
          "createdAt": "2020-12-04T20:54:59Z",
          "author": { "login": "jimafisk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTQ0ODI1Nw==",
          "body": "I think that being able to use `<svelte:head>` and `<head>` in one component and only `<svelte:head>` in others would be confusing to users. I think we generally want to avoid having multiple ways of doing something to avoid the potential for confusion",
          "createdAt": "2020-12-06T03:14:03Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTQ1MjE3OA==",
          "body": "You're right, those essentially do accomplish the same thing. We're generally trying to take a content driven approach in our project wherever possible. That way a developer can set up a general template structure and from there everything is fed from the JSON source managed by a content editor. You'd still be able to set things like titles from the content source using `<svelte:head>` so that's good. \r\n\r\nIs there a similar mechanism for reactive attributes on the `<html>` wrapper? For instance, if someone wanted to switch the lang attr:\r\n```svelte\r\n<script>\r\n  import Head from './head.svelte';\r\n  import Nav from './nav.svelte';\r\n\r\n  export let content;\r\n\r\n  let lang = \"en\"\r\n  const setFrench = () => {\r\n    lang = \"fr\";\r\n  }\r\n</script>\r\n\r\n<html lang=\"{lang}\">\r\n  <Head title={content.title} />\r\n  <body>\r\n    <Nav />\r\n    <button on:click={setFrench}>Fr</button>\r\n  </body>\r\n</html>\r\n```\r\n\r\nI understand that you can't cater the project to everyone's individual preferences, so if this is a change can't pulled in it's ok to close out this issue. I appreciate you both taking the time to discuss options with me. For posterity my main concerns for our particular project are:\r\n1. `<svelte:head>` is a new concept outside of the normal flow of vanilla HTML\r\n2. New folks who want to add a stylesheet, etc might be confused by not finding a `head.svelte` template\r\n3. Managing a separate `index.html` entry point is an extra layer of complexity outside of the main app\r\n4. Varying top level templates in a reactive manner could be challenging\r\n\r\nThanks!",
          "createdAt": "2020-12-06T04:15:52Z",
          "author": { "login": "jimafisk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjQzNjM1MDQ=",
    "body": "Hey guys,\r\n\r\nI'm coming from the Vue and Agular background. But I love Svelte and I need to use this for my next project which is a e-commerce based solution. I need to use so many 3rd party tools and plug-ins. For example, I need to use image sliders, html editor wysiwyg, multiple image uploaders, etc. In vue or angular, when we search \"html editor wysiwyg\", there are many options and we can simply use them.\r\n\r\nBut can we do that in Svelte too? I did some searching and I didn't find any good solutions. For example, if I need to use a wysiwyg editor, how to proceed that? \r\n\r\nPlease advice. \r\n",
    "closedAt": "2020-10-19T10:31:05Z",
    "createdAt": "2020-10-19T07:43:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjAwNzY3NQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-10-19T10:30:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjQyMzM4Mzc=",
    "body": "![Screenshot_2020-10-19-11-39-33-30_84d3000e3f4017145260f7618db1d683](https://user-images.githubusercontent.com/7939342/96399139-372e1900-1200-11eb-81b1-d7f07c75565f.png)\r\n\r\nMy device: Realme C2\r\n\r\nAnd, I use `pnpm i` for installing all devDependencies",
    "closedAt": "2020-10-20T09:56:05Z",
    "createdAt": "2020-10-19T03:43:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjczNjYyMQ==",
          "body": "This isn't an issue with Svelte, it relates to esbuild, which is printing a very clear error message which says it isn't compatible with the ARM64 platform.",
          "createdAt": "2020-10-20T09:56:05Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjQxMjM3Nzg=",
    "body": "Thank you for making RxJS Observable easier to be consumed in components by applying $store syntax. One thing I noticed I am wishing for is to have the same for `{#await}`. The use case would be to show loading indicator until the emission from the observable. \r\n\r\nIf `counter` is an observable, I currently have to write `{#await counter.pipe(take(1)).toPromise()}` and it would be great to shorten it to `{#await counter}`.\r\n\r\nHere's a [REPL](https://svelte.dev/repl/4b61699664b2464a8c3bc6ae3fc21237?version=3.29.0) \r\n",
    "closedAt": "2020-10-21T23:48:09Z",
    "createdAt": "2020-10-18T21:23:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjc3NzgyNg==",
          "body": "Soon enough, RxJS team will publish 7.0 release where there will introduce function [lastValueFrom](https://github.com/ReactiveX/rxjs/blob/master/src/internal/lastValueFrom.ts). So your code will look like\r\n```svelte\r\n{#await lastValueFrom(counter)}\r\n    Loading...\r\n{:then _}\r\n    {$counter}\r\n{/await}\r\n```\r\nYou can now test it by running `npm i rxjs@7.0.0-beta.8`",
          "createdAt": "2020-10-20T11:16:06Z",
          "author": { "login": "ituxka", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjkxOTg1Mw==",
          "body": "Thank you @ituxka I understand I can use a function like the soon to be release [firstValueFrom](https://github.com/ReactiveX/rxjs/blob/master/src/internal/firstValueFrom.ts) to get it working. Nothing stops me from making this simple utility function myself now. My point was that if observables can be accessed in the templates just like stores, allowing them to be used in the `#await` call would be logical and more consistent from the developer's perspective.",
          "createdAt": "2020-10-20T15:05:00Z",
          "author": { "login": "sserdyuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDAwNTUyNQ==",
          "body": "Before an observable emits its first value, Svelte's autosubscription `$observable` will be equal to `undefined`, which should in most cases be sufficient for determining whether its value has come in or not. (Meaning, you could do `{#if $counter === undefined}...{:else}...{/if}` instead of `{#await counter}...{:then}...{/await}`.) I don't think the case where the value in the observable might itself become `undefined` warrants adding this behavior to `{#await}`, which really is intended for use with promises, especially since adding support for this to `{#await}` would mean extra code for everybody's apps, whether or not they ever plan to use it with observables.",
          "createdAt": "2020-10-21T23:48:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTM4OTA5Ng==",
          "body": "> especially since adding support for this to `{#await}` would mean extra code for everybody's apps, whether or not they ever plan to use it with observables.\r\n\r\nIt wouldn't be _a lot_ of extra code though, would it? It'd be something relatively simple like:\r\n\r\n```javascript\r\nif (arg instanceof Promise) {\r\n  // Do whatever the current behavior is\r\n} else if (arg instanceof Observable) {\r\n  // render waiting block\r\n  arg.subscribe({\r\n    next(value) {\r\n      if (value !== undefined) {\r\n        // render then block with value\r\n      }\r\n    },\r\n    error(err) {\r\n      // render error block with err\r\n    },\r\n  })\r\n}\r\n```\r\n\r\nAnd it would be _really_ sweet to be able to use this natively in svelte. Svelte and RxJS are just such a good match already, let's not deny them this romance. :-p",
          "createdAt": "2021-03-17T20:01:36Z",
          "author": { "login": "Evertt", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjQwMTA2OTA=",
    "body": "**Describe the bug** / **To Reproduce**\r\nWe encountered a weird edge case in our app where where one of the stores didn't trigger any updates in a child component sometimes.\r\nThere are multiple steps necessary for this bug to happen, so I'll try to explain it in a step-by-step way, otherwise it gets unreadable.\r\n\r\nThe step-by-step is tied to this REPL:\r\nhttps://svelte.dev/repl/ae73276603ff41048ac558daae06bf4a?version=3.29.0\r\n\r\nIn the basic outline `App` has two childs:\r\n  - `Bind` which will set `displayPanel` to `true` when `$x != undefined` and show `Subscr`\r\n  - `Subscr` which subscribes to `$x` in code within a reactive block `$:`\r\n  - And we have a global store `x` initialized to `undefined`\r\n\r\nWhen clicking on start:\r\n1. store `x` is set to \"1\"\r\n2. `Bind` will notice this and set `displayPanel` to true\r\n3. `App` will notice this and render the `{#if}` Block\r\n4. `Subscr` will render with the store value correctly set and show `E: 1`\r\n5. store `x` is set to `undefinded`\r\n6. `Subscr` will *not* notice this update, even though `$x` is in the recative block. In fact the reactive block does not get executed at all (check the console output).\r\n7. Only setting `$x` to something that is not `undefined` and then setting it back to `undefined` the `Subscr` component will notice each update again.\r\n\r\nYou can see in the console log that the first set to undefined does not get noticed by the `Subscr` component.\r\n```\r\nSet to e\r\nupdate 1\r\nSet to undef\r\nSet to e\r\nupdate 2\r\nSet to undef\r\nupdate undefined\r\n```\r\n\r\nFrom my debugging it *seems* like `Subscr` has a stale value of `x` when it gets created but `$x` has the new value. When then setting `x` to `undefined` the update will not execute since the old value already is `undefined`. But I might be wrong here.\r\n\r\nAlso when using the $x variable in the html this problem does not occour and the store gets updated correctly. (I've added a comment in the `Subscr` to mark this)\r\n\r\n**Expected behavior**\r\nThe reactive statement should correctly be executed with the store change.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 81.0.2 (64-bit)\r\n- Your operating system: Windows 10 Education\r\n- Svelte version 3.29.0\r\n- Using rollup (but should not relevant for this case)\r\n\r\n**Severity**\r\nLow to Medium:\r\nThe bug itself can be easily work around by adding the store somewhere in the html part, but finding and debugging the cause is a nightmare.",
    "closedAt": "2020-11-23T16:57:45Z",
    "createdAt": "2020-10-18T13:46:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzI3OTY2NA==",
          "body": "This has been fixed in 3.30.0 - https://svelte.dev/repl/ae73276603ff41048ac558daae06bf4a?version=3.30.0",
          "createdAt": "2020-11-24T22:53:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzQwNzg2MA==",
          "body": "Nice, thanks!",
          "createdAt": "2020-11-25T01:40:28Z",
          "author": { "login": "Splamy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjM5NDA0ODU=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThere is no proper way to forward slots other than for them to be wrapped in a parent element.\r\n\r\n**Describe the solution you'd like**\r\nThe slot prop to be able to be added to slot elements.\r\n```html\r\n<Component>\r\n  <slot slot=\"inherited\" name=\"forwarded\" />\r\n</Component>\r\n```\r\n\r\nWhere the slot `inherited` is forwarded as `forwarded` to the component that consumes this one.\r\n\r\n**Describe alternatives you've considered**\r\nWrapping the slot in a div element, causes problems with flexbox and performance.\r\n\r\n**How important is this feature to you?**\r\n3/5. not too important but very useful to have.\r\n\r\n**Additional context**\r\nhttps://svelte.dev/repl/5acc582e28f04d06aff5f3b861e7537f?version=3.29.0\r\n",
    "closedAt": "2020-10-30T03:12:49Z",
    "createdAt": "2020-10-18T06:38:40Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTEyNzc4OA==",
          "body": "Hello @TheComputerM I fixed this issue, you didn't give me time to upload it.\r\nI was working to solve it.",
          "createdAt": "2020-10-18T07:16:16Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTEyNzg2NQ==",
          "body": "Thanks @damianpumar, you can still push it now right? This issue was just for better understanding for the feature for anyone confused.",
          "createdAt": "2020-10-18T07:17:22Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTEyNzk0OA==",
          "body": "Yes, I'm uploading right now.",
          "createdAt": "2020-10-18T07:18:14Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTEyODAzOA==",
          "body": "Please, check my pull request, and we can take a decision, if we take my solution, or we can resolve it as a new feature.",
          "createdAt": "2020-10-18T07:19:06Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjMzMTk0NzE=",
    "body": "**Describe the bug**\r\n\r\n1. I have a main component dynamically imported and a child component imported statically\r\n2. The child component is rendered in the main component's slot after a DOM change (e.g. loading)\r\n3. The child component's onMount is not called at the beginning but right before onDestroy (BUG)\r\n\r\nIf the parent component is imported statically or the loading is omitted (the slot content doesn't change), it's OK.\r\n\r\nAll three case are demonstrated in the app in the repo bellow.\r\n\r\n**To Reproduce**\r\nhttps://github.com/jindrahm/svelte-component-dynamic-import\r\n\r\n**Expected behavior**\r\nonMount should be called right after the component is mounted regardless the way it's imported or whether it's render later or not.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 86\r\n- Your operating system: Mac 10.15.7\r\n- Svelte version: 3.29.0\r\n- Using Rollup\r\n\r\n**Severity**\r\nI would say 2 out of 3. It's no blocker but it increases my project size because I cannot share the components using dynamic imports. I have to bundle them in every module to work this bug around.",
    "closedAt": null,
    "createdAt": "2020-10-16T15:26:04Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDExNzk5Ng==",
          "body": "This is related to the rollup configuration. \r\n\r\nIn the repo, the rollup configuration create two entries, and svelte is bundled twice. The dynamic-import import the secondary entry and not the composant.\r\n\r\nWhen updating `rollup.config.js` to use the \"official svelte-template\" configuration, and using a relative dynamic import (`import('./MainCompo.svelte')`), it works as expected.\r\n",
          "createdAt": "2020-11-01T16:52:42Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTAwMDEzNQ==",
          "body": "Hi j3rem1e, thank you for having a look. Do you mean to update the rollup config to have just one bundle? That's not wanted because I have a set of components in one bundle shared via CDN among standalone apps.",
          "createdAt": "2020-11-03T09:24:50Z",
          "author": { "login": "jindrahm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTA0Njg1NQ==",
          "body": "You can't bundle multiple svelte runtimes.",
          "createdAt": "2020-11-03T11:00:11Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTA5MTY0Mg==",
          "body": "Why? I expected it's more about the component API which is exported by the component bundle than about the way it's imported or bundled in an app.\r\nAlso I've been running on this solution for several months without some serious problems.. just this one and this one https://github.com/sveltejs/svelte/issues/3448. So it seems to me solvable that it could work.",
          "createdAt": "2020-11-03T12:39:16Z",
          "author": { "login": "jindrahm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTA5NDQyNg==",
          "body": "A svelte runtimes has global states like render-callbacks, dirty components, and lifecycle loop (flush) for example.\r\n\r\nMultiple runtimes can't share this states and you see this kind of bugs.\r\n\r\nI own myself severals applications which use like you \"independants\" compiled bundle. However svelte should be configured as a singleton in order to work. I don't know how to do that with rollup but with webpack there is a concept of \"external\" dependency which allow to share a runtime between entry points.",
          "createdAt": "2020-11-03T12:45:14Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMTExNzg3NQ==",
          "body": "OK, thanks for explanation. I actually use the external dependencies with rollup but not sure if I can share a runtime.. gonna look deeper.",
          "createdAt": "2020-11-03T13:33:31Z",
          "author": { "login": "jindrahm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjI3MDk4NzA=",
    "body": "Using the template, enabled typescript\n\n    npm i graphql\n\n    <script language='typescript'>\n        import graphql from 'graphql';\n    </script>\n   \n    npm run dev\n \n    > svelte-app@1.0.0 dev /root/github.com/markfirmware/viewer\n    > rollup -c -w\n    \n    rollup v2.28.2\n    bundles src/main.js → public/build/bundle.js...\n    [!] Error: 'default' is not exported by node_modules/graphql/index.mjs, imported by src/App.svelte\n    https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module\n    src/App.svelte (2:11)\n    1: <script language='typescript'>\n    2:     import graphql from 'graphql';\n                  ^\n    3: </script>\n    Error: 'default' is not exported by node_modules/graphql/index.mjs, imported by src/App.svelte\n        at error (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:5210:30)\n        at Module.error (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:9725:16)\n        at handleMissingExport (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:9647:28)\n        at Module.traceVariable (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:10120:24)\n        at ModuleScope.findVariable (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:8679:39)\n        at FunctionScope.findVariable (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:2759:38)\n        at ChildScope.findVariable (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:2759:38)\n        at ReturnValueScope.findVariable (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:2759:38)\n        at Identifier$1.bind (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:4116:40)\n        at Property$1.bind (/root/github.com/markfirmware/viewer/node_modules/rollup/dist/shared/rollup.js:2844:23)",
    "closedAt": "2020-10-15T22:38:07Z",
    "createdAt": "2020-10-15T22:13:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTYyMDgxNw==",
          "body": "Certainly not a Svelte issue. Per [`graphql`'s documentation](https://graphql.org/graphql-js/):\r\n\r\n```js\r\nvar { graphql, buildSchema } = require('graphql');\r\n\r\n// Construct a schema, using GraphQL schema language\r\nvar schema = buildSchema(`\r\n  type Query {\r\n    hello: String\r\n  }\r\n`);\r\n\r\n// The root provides a resolver function for each API endpoint\r\nvar root = {\r\n  hello: () => {\r\n    return 'Hello world!';\r\n  },\r\n};\r\n\r\n// Run the GraphQL query '{ hello }' and print out the response\r\ngraphql(schema, '{ hello }', root).then((response) => {\r\n  console.log(response);\r\n});\r\n```\r\n\r\nOr the [documentation on npm](https://www.npmjs.com/package/graphql):\r\n```ts\r\nimport {\r\n  graphql,\r\n  GraphQLSchema,\r\n  GraphQLObjectType,\r\n  GraphQLString,\r\n} from 'graphql';\r\n \r\nvar schema = new GraphQLSchema({\r\n  query: new GraphQLObjectType({\r\n    name: 'RootQueryType',\r\n    fields: {\r\n      hello: {\r\n        type: GraphQLString,\r\n        resolve() {\r\n          return 'world';\r\n        },\r\n      },\r\n    },\r\n  }),\r\n});\r\n```\r\n\r\nThere is no default export from `\"graphql\"`, as your error shows. You must import `{ graphql }` (aka a named export) from it and use that.\r\n\r\n\r\n\r\n",
          "createdAt": "2020-10-15T22:22:09Z",
          "author": { "login": "babichjacob", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTYyNzg2Nw==",
          "body": "Well I thought that that was one of the umpteen permutations that I tried, but a fresh repo does work! Thanks.",
          "createdAt": "2020-10-15T22:41:55Z",
          "author": { "login": "markfirmware", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTYzNTQ0MQ==",
          "body": "Per guidance I added this to the top of the script\r\n\r\n    import {\r\n      graphql,\r\n      GraphQLSchema,\r\n      GraphQLObjectType,\r\n      GraphQLString,\r\n    } from 'graphql';\r\n\r\nand now localhost:5000 returns blank. Is this expected from just importing?\r\nThanks, Mark\r\n@babichjacob ",
          "createdAt": "2020-10-15T23:06:27Z",
          "author": { "login": "markfirmware", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjIzNTk2OTQ=",
    "body": "**To Reproduce**\r\nhttps://svelte.dev/repl/385622e1aa2d4dd1a538a649761ef50a?version=3.29.0\r\n\r\n**Expected behavior**\r\nI don't really know if this is working as expected, but in a component oriented context i would expect to work the way i'm describing here: Global CSS injected should be removed after the component that contains it is destroyed.\r\n\r\nI say so because in this way i would be allowed to style parent elements conditionally to which child is mounted (like in my repl).\r\nWith the actual implementation, i'm stuck to use props or context with store to tell in some way the parent which style should he have.\r\n\r\n**Information about your Svelte project:**\r\nSvelte 3.29.0\r\n\r\n**Severity**\r\nAnonoying",
    "closedAt": null,
    "createdAt": "2020-10-15T13:54:56Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTM1MjYyOQ==",
          "body": "I don't think there's really a good way to do this without having each component also be responsible for tracking how many instances of it currently exist, so that once it drops back to zero the styles can be removed - which is extra overhead for something that almost everyone will not need.\r\n\r\nIt's also worth noting that this only really matters with selectors that are purely `:global()` which generally is somewhat of an undesirable thing to be doing anyway. Any selectors that are even partially scoped to the current component won't have any effect if the styles hang around.\r\n\r\nMy personal vote on this behavior is that it should be documented somewhere rather than changed.",
          "createdAt": "2020-10-15T14:11:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTM3NTAwMg==",
          "body": "> I don't think there's really a good way to do this without having each component also be responsible for tracking how many instances of it currently exist, so that once it drops back to zero the styles can be removed - which is extra overhead for something that almost everyone will not need.\r\n> \r\n> It's also worth noting that this only really matters with selectors that are purely `:global()` which generally is somewhat of an undesirable thing to be doing anyway. Any selectors that are even partially scoped to the current component won't have any effect if the styles hang around.\r\n> \r\n> My personal vote on this behavior is that it should be documented somewhere rather than changed.\r\n\r\nIs it at least possibile to pass an id/class to the appended style element in order to easily implements this behaviour manually?\r\n\r\nSomething like\r\n```\r\n<style id=\"my-style-with-globals\">...</style>\r\n```",
          "createdAt": "2020-10-15T14:45:05Z",
          "author": { "login": "raythurnevoid", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTU0MjUwOQ==",
          "body": "> This only really matters with selectors that are purely :global() which generally is somewhat of an undesirable thing to be doing anyway.\r\n\r\nIt may occasionally be desirable to propagate styles upwards from certain components (think Sapper routes wishing to style the document/body), for which `:global()` in its purest would make sense (if not for the behaviour in question, that is).\r\n\r\nI believe this has already been considered (see https://github.com/sveltejs/svelte/issues/1281), but the current behaviour does make certain things annoying.",
          "createdAt": "2020-10-15T19:26:18Z",
          "author": { "login": "intrikate", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTY3MTk1OA==",
          "body": "> It may occasionally be desirable to propagate styles upwards from certain components (think Sapper routes wishing to style the document/body), for which `:global()` in its purest would make sense (if not for the behaviour in question, that is).\r\n\r\nThat's exactly my use case, we created some pages, and wanted to apply different css on body element on the basis of the viewed component. Actually we workarounded it by the use of a writable store on a top component which manage to remove and manually set classes with vanilla dom methods.\r\nI think this solution is dirty though.",
          "createdAt": "2020-10-16T01:15:43Z",
          "author": { "login": "raythurnevoid", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNTAxMDkyNQ==",
          "body": "Is it possible to make a compiler-flag \"removeStylesOnDestroy\" (or a better name). If the flag is set, additional code will be generated, that tracks the count of currently created instances of an component. When the last component was destroyed, the styles will be removed. \r\nThe code would look something like this:\r\n```\r\nlet counter = 0\r\n\r\ninit( /* options */ ) {\r\n\r\n   // code\r\n\r\n   counter++\r\n}\r\n```\r\n\r\nand\r\n\r\n```\r\ndestroy_component( /* options */)\r\n\r\n   // code   \r\n\r\n   counter--\r\n   if (counter === 0) {\r\n      // TODO: remove stylesheet\r\n   }\r\n```",
          "createdAt": "2020-10-23T06:57:38Z",
          "author": { "login": "ivanhofer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTc4MzE0Ng==",
          "body": "This weird issue just bit me too.\r\n\r\nIn my opinion, this is not only annoying, it is definitely a Svelte bug, since when a component is removed from the DOM, there shouldn't be any traces of it left that affect the rest of the app, that is neither visually nor functionally.\r\n\r\n> It's also worth noting that this only really matters with selectors that are purely `:global()` which generally is somewhat of an undesirable thing to be doing anyway\r\n\r\nThat doesn't make sense to me. `:global()` is made for what it's named after, setting global styles. Whether this happens in a context that begins in the hierarchy above or below the reference component shouldn't make any difference as to how the app, the component or `:global()` works, because of the principle of least surprise alone. If that cannot be reasonably done without too much overhead, `:global()` shouldn't at least be renamed to `:childStyles()` or something similarly obvious.\r\n\r\nIf I can set global styles in a component that can be removed programmatically at any time, like all components do, I expect the styles that are part of said component to be removed as well, without any visual of functional traces left afterwards. Period.\r\n\r\nThis should either be fixed or `:global()` should be renamed.",
          "createdAt": "2020-11-22T17:43:24Z",
          "author": { "login": "Odiumediae", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMTg1NjM1OA==",
          "body": "I don’t agree. Current behaviour seems very ressonable imo: If you use :global you’re setting styles using standard css behavoiur - affecting the whole document. Hence, those effects are not only ”for” the injecting component but any element that the style targets, effectively ceasing to be tied to the injector comp the moment they are declared... Any other behaviour seems contrived and should (and could) be solved by writing your own specific css handling in onmount/destroy as needed. My 2 cents.",
          "createdAt": "2020-11-22T22:18:58Z",
          "author": { "login": "xelius", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MzM4NDA2NQ==",
          "body": "I am currently experiencing this, and believe it is unexpected. I have a component, while not a route, that is still basically guaranteed to exist just once on the page. Here's what I have:\r\n```html\r\n<div>\r\n  <body />\r\n</div>\r\n\r\n<style>\r\n  @import url(\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,400italic,700italic\");\r\n\r\n  body {\r\n    font-family: Source Sans Pro, sans-serif;\r\n    overflow: hidden;\r\n  }\r\n\r\n  div body {\r\n    display: none;\r\n  }\r\n</style>\r\n```\r\nIf I use `:global(body)`, when the user navigates away from the route that has this component, `overflow: hidden;` stays on `body`, which breaks the app. It's not ideal to have a random `<body>` somewhere deep in the tree. Either way, as a compiler I expect Svelte to \"do the right thing\" every time, so if there's some extra tracking it needs to do to avoid duplicate styles then it should do that. \r\n\r\nMy point of view is that what the component brings in, it should bring out. Leaving non-scoped styles on the page after the component was destroyed is unexpected and feels like a leak. ",
          "createdAt": "2020-12-11T19:28:33Z",
          "author": { "login": "yuriys-kentico", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjIyNDA4MjM=",
    "body": "Case when labelable element is not direct child of label element triggers current warning\r\n\r\nhttps://svelte.dev/repl/418bcf45f55741e49361839687cf11fa?version=3.29.0\r\n\r\nExpected behavior: compiler recursively checks if label has labelable element\r\n\r\nAdditional context:\r\nI started to write recursive function to get this warning working properly but then I found https://github.com/sveltejs/svelte/pull/5323 PR that covers my issue\r\n",
    "closedAt": null,
    "createdAt": "2020-10-15T11:18:04Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTIxMjI0Mw==",
          "body": "There is opened PR but there are no opened issues about this bug. That's the reason why I opened this issue",
          "createdAt": "2020-10-15T11:19:04Z",
          "author": { "login": "ZerdoX-x", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTIxNDQxMg==",
          "body": "Possible related:\r\n\r\nhttps://svelte.dev/repl/c16ecfdb7f484b5190692bb08bd0ea32?version=3.29.0\r\n\r\nWarning if the actual form element is conditional\r\n\r\n```html\r\n<label>\r\n\t{#if A}\r\n\t\t<input type=\"text\">\r\n\t{:else}\r\n\t\t<textarea></textarea>\r\n\t{/if}\r\n</label>\r\n```\r\n\r\nThis gives: \"A11y: A form label must be associated with a control.\"",
          "createdAt": "2020-10-15T11:21:24Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMzU3MTkzMA==",
          "body": "I guess this warning should be emitted? Checking recursively all child elements, components, conditions, etc. may be really slow and the implementation is not so easy",
          "createdAt": "2020-10-21T13:27:22Z",
          "author": { "login": "ZerdoX-x", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Mjg5MTQ1MQ==",
          "body": "I'm suffering this warning as well. If it happens on own components, we just set \"id\" and \"for\". But if it happens on library's components, we can't fix it. At least, I'd like to avoid this situation.",
          "createdAt": "2021-02-21T17:15:55Z",
          "author": { "login": "Hentaro1989", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5NDA2NTE3OQ==",
          "body": "> If it happens on own components, we just set \"id\" and \"for\".\r\n\r\nPay attention that if you will use one component with static id inside more than once in the same document it won't be valid html markup. That's the reason why this workaround is not for everyone.\r\n\r\n",
          "createdAt": "2021-03-09T15:42:42Z",
          "author": { "login": "ZerdoX-x", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjE5ODA4OTU=",
    "body": "I am new to Svelte and I am already in love with its magic. However, I am facing an issue which looks generic to me but I couldn’t find a documented solution to it.\r\n\r\nI used the rollup template with Sapper using npx degit and it was working perfectly fine earlier but now, when I run npm run dev, the app listens on the port but the server hangs indefinitely. The auto reload stops functions and keeps loading for all eternity. I tried running a brand new template repository to check if there was something wrong with my code but the new repo didn’t run either.\r\n\r\nI am 100% positive that I am running only one app at a time. Worth noting is that I also get a loading message that says “Awaiting an available socket” I tried flushing out all the sockets and no help.\r\n\r\nI’d really appreciate and respect it if you guys could help me out here.\r\n\r\n**Update:** I used `npx degit sveltejs/sapper-template#rollup my-app` to generate a brand new app. It threw the same error post a reload and I had not made any changes to it which, in all likelihood indicates that the problem's in my local machine.\r\n\r\n**Update 2:** I deleted `service-worker.js` and the app is working now. \r\n",
    "closedAt": "2020-10-15T11:24:18Z",
    "createdAt": "2020-10-15T05:10:36Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwODkxMDc4Mg==",
          "body": "If the server hasn't crashed and you do not see any port errors on your terminal the rollup+sapper works fine, I highly doubt it has something to do with the browser and the cache. Also, this looks like [sapper](https://github.com/sveltejs/sapper/issues) issue.\r\n\r\nWell, in any case, head over to our discord https://svelte.dev/chat for quick support.",
          "createdAt": "2020-10-15T05:41:14Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwODkxMTk3Nw==",
          "body": "> If the server hasn't crashed and you do not see any port errors on your terminal the rollup+sapper works fine, I highly doubt it has something to do with the browser and the cache. Also, this looks like [sapper](https://github.com/sveltejs/sapper/issues) issue.\r\n> \r\n> Well, in any case, head over to our discord https://svelte.dev/chat for quick support.\r\n\r\nHi, thanks for the guidance. Would be great if you could check out the recent update on the issue and it does look like a Sapper issue.\r\n",
          "createdAt": "2020-10-15T05:44:53Z",
          "author": { "login": "KrishSkywalker", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwODkxNjgzMw==",
          "body": ">Update 2: I deleted service-worker.js and the app is working now.\r\n\r\nService worker comes in handy for sapper. Consider clearing application storage under `Clear Storage`\r\n\r\n![image](https://user-images.githubusercontent.com/3922469/96082552-0afd5a00-0ed9-11eb-9024-838f6ed51aed.png)\r\n also you can use `update on reload` checkbox that helps.",
          "createdAt": "2020-10-15T05:57:54Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwODkyNDg0MA==",
          "body": "> > Update 2: I deleted service-worker.js and the app is working now.\r\n> \r\n> Service worker comes in handy for sapper. Consider clearing application storage under `Clear Storage`\r\n> \r\n> ![image](https://user-images.githubusercontent.com/3922469/96082552-0afd5a00-0ed9-11eb-9024-838f6ed51aed.png)\r\n> also you can use `update on reload` checkbox that helps.\r\n\r\nAlright, thank you so much. Will try this out\r\n",
          "createdAt": "2020-10-15T06:18:07Z",
          "author": { "login": "KrishSkywalker", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTIxNzAxOQ==",
          "body": "For future reference, support questions are better answered in [chat](https://svelte.dev/chat) - we try to reserve github issues for bugs and feature requests only.\r\n\r\nI see your answer has been found in chat, so closing this.",
          "createdAt": "2020-10-15T11:24:18Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MjAwNjYzODA=",
    "body": "Reactive statement declaration through $: label before the second reactive statement that changes the first one through function is not reactive;\r\n\r\nREPL: https://ru.svelte.dev/repl/7a9593fcd21848f7bdac90bd93fb2f9e?version=3.29.0\r\n\r\n![image](https://user-images.githubusercontent.com/13717428/95843654-48ec6800-0d8b-11eb-9bdb-ef2035310b2b.png)\r\n",
    "closedAt": "2020-10-13T13:45:49Z",
    "createdAt": "2020-10-13T09:49:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzY1OTMwNQ==",
          "body": "duplicate #4516",
          "createdAt": "2020-10-13T10:51:25Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzY2MzQ2OQ==",
          "body": "> duplicate #4516\r\n\r\nI wouldn't be so sure. \r\n\r\n---\r\n**To be clear**: without function all works fine ↓\r\n\r\n![image](https://user-images.githubusercontent.com/13717428/95853793-54469000-0d99-11eb-8fc1-e68bf348eb70.png)\r\n",
          "createdAt": "2020-10-13T11:00:23Z",
          "author": { "login": "zamkevich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzY3MTE3Mw==",
          "body": "yep my bad, it works as expected then,\r\nthere's two unintuitive things happening here, 1) the compiler does not link changes made in functions to the reactive declarations they're called from and 2) reactive declarations only run once per tick even if further updates happen within them\r\n\r\nthe compiler will try to re-order the executing order of declarations depending on each other ( so in the second screenshot, `foo,bar++` is reordered to run first ) _but_ doesn't in this case as it does not take into account mutations made within functions\r\n\r\nYou can check the executing order under the `JS compiled` tab at `$$self.$$.update = () =>`",
          "createdAt": "2020-10-13T11:17:08Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzc0OTcxNg==",
          "body": "Indeed, this is the expected behavior. When the compiler sorts reactive declarations/blocks according to dependencies, it only looks at variables referenced and assigned to within the block itself. This lets you specifically 'hide' references and updates from the compiler, and also makes the whole ordering process much more feasible.",
          "createdAt": "2020-10-13T13:45:49Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzc1MjI4Mw==",
          "body": "> Indeed, this is the expected behavior. \r\n\r\n@Conduitry no is not. Is surprising behavior.\r\nWhy is't any word about in docs?",
          "createdAt": "2020-10-13T13:50:02Z",
          "author": { "login": "zamkevich", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzg0NTM4NA==",
          "body": "@Conduitry I'm not sure, but I think you didn't catch the whole problem described by example. Perhaps, because this example doesn't fully reflect the problem and concentrates on unnecessary things.\r\n\r\nLet's say, we've a much cleaner [example](https://svelte.dev/repl/bf8ad01682c145bb9957e651ac8e0f9c?version=3.29.0):\r\n\r\n```svelte\r\n<script>\r\n  let foo = 0, \r\n      bar = 0;\r\n\t\r\n  $: bar, alert();\r\n  $: foo, func();\r\n\r\n  function func() {\r\n    bar += 2;\r\n  } \r\n</script>\r\n\r\n{foo} {bar}\r\n<button on:click={e => ++foo}>\r\n  Increment\r\n</button>\r\n```\r\n\r\nThe `alert()` will fire only once here, no matter that actual `bar` value will be changed as many times as you like. DOM updates will be performed as appropriate, but the `reactive expression` won't. So, here we can't say \"alert() will be performed each time dependency (bar value) changed\". But worst of all, if we swap these 2 `reactive expressions`, we'll get the converse effect.\r\n\r\nI know why it's happening, but is it really not a problem? @Rich-Harris ",
          "createdAt": "2020-10-13T16:04:54Z",
          "author": { "login": "PaulMaly", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTkyNjY2NzY=",
    "body": "**Describe the bug**\r\nOpen console in this [repl](https://svelte.dev/repl/eada079a48e04360b92ef3baec1591f0?version=3.29.0)\r\nin synchronous for loop `store.subscribe` runs callback for each `set`, while reactive `$:` runs only on last `set`\r\n\r\n```\r\nconst store = writable(0);\r\n\t\r\nsetTimeout(() => {\r\n\tfor (let i = 1; i <= 10; ++i) {\r\n\t\tstore.set(i); // syncronous set calls\r\n\t}\r\n});\r\n\t\r\n$: console.log('$:', $store); // logs only last value\r\nstore.subscribe(v => console.log('subscribe', v)); // logs each value\r\n```\r\n\r\n**Expected behavior**\r\nAutosubscription and manual subscription should behave the same way or explained in documentation\r\n\r\n**Severity**\r\nMight broke some logic, if you expect all callback of `set` to run in autosubscription.\r\nI think this should be clarified in documentation.\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-10-12T10:30:40Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzEwODU3MA==",
          "body": "This is expected. It's not that `$store` doesn't update right away, it's that `$:` only runs at most once per microtask.",
          "createdAt": "2020-10-12T13:06:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MzAzNDk3Ng==",
          "body": "I've made a [reproduction of the issue in a REPL](https://svelte.dev/repl/1afe59d2c99d4919a34985e34c5913ba?version=3.35.0), where using either the increment or the fetch buttons should switch a `loading` store to false for one second.\r\n\r\nUsing `$store` directly in markup or subscribing manually to it works fine in either case. Using a reactive statement works only if the update is done via a direct update call, but NOT when reacting to `value` increment.\r\n\r\nIf I use `await tick()` before updating the `loading` store, reactive assignment works as expected in both cases.\r\n\r\nThis to me is very confusing and misleading, since I was expecting `$store` to be syntactic sugar for a manual subscription with lifecycle safety, but it is obviously quite different. I don't really understand how microtask management is affecting this behavior, since the value of the store has plenty of time to get updated.\r\n\r\nThanks for the help...",
          "createdAt": "2021-03-08T20:01:22Z",
          "author": { "login": "davidsavoie1", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzODkzNjc1Mw==",
          "body": "I just looked at the issue reproduction I had made and I now understand what I was doing wrong (I've learned the hard way when dealing with other similar issues): **The order of the reactive statements is important.** \r\n\r\nDoing\r\n```js\r\n$: loading2 = $loading;\r\n$: {\r\n  value;\r\n  loading.fetch();\r\n}\r\n```\r\nis not the same as\r\n```js\r\n$: {\r\n  value;\r\n  loading.fetch();\r\n}\r\n$: loading2 = $loading;\r\n```\r\nIt seems obvious now that I understand it, but reactive assignments and statements seem so magical sometimes that it's easy to forget basic principles.",
          "createdAt": "2021-05-11T18:13:05Z",
          "author": { "login": "davidsavoie1", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTkyNTYzODQ=",
    "body": "**Describe the bug**\r\n\r\nI am not not if this is the correct place to describe it, hopefully it is.\r\n\r\nI am following MDN's tutorial (https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props). I am the point where I need to write:\r\n\r\n`let newTodoId`\r\n`  $: {\r\n    if (totalTodos === 0) {\r\n      newTodoId = 1;\r\n    } else {\r\n      newTodoId = Math.max(...todos.map(t => t.id)) + 1;\r\n    }\r\n  }`\r\n\r\nThe bug is that Webstorm lables newTodoId as \"Unresolved variable or type totalTodos\" and marks it with red color. I am able to run the app, yet this issue remains even after re-launching Webstorm.\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your operating system: Linux\r\n\r\n- Webstorm version: 2020.2.2\r\n\r\n- Svelte version: 3.24.1\r\n\r\n- I use Rollup",
    "closedAt": "2020-10-12T10:43:16Z",
    "createdAt": "2020-10-12T10:15:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzA0MTU2MA==",
          "body": "There is a third party plugin for Intellij to get better Svelte support: https://github.com/tomblachut/svelte-intellij . Related issues should be filed to that repo.",
          "createdAt": "2020-10-12T10:43:16Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTg5MzAxNTc=",
    "body": "**Describe the bug**\r\nA circular dependency does not exist here, yet the compiler throws an error, not a warning, and I cannot continue my work.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/db72e35157f24b968d3a8c7875e45add?version=3.29.0\r\n\r\n**Expected behavior**\r\nA way of explicitly disabling this detection for a code segment or having such detection give a warning rather than throwing an error.\r\n\r\n**Severity**\r\nHigh, I cannot continue my work. I could not find a way of explicitly disabling this detection. I had this code work great in Vue.",
    "closedAt": "2020-10-11T21:31:14Z",
    "createdAt": "2020-10-11T21:25:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjc3MTE1Mw==",
          "body": "If you wrap one of the assignments in a function call, cyclical dependency detection cannot keep up and is disabled. Now the code works.",
          "createdAt": "2020-10-11T21:31:14Z",
          "author": { "login": "kim366", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTg4MTMwMzQ=",
    "body": "This is a proposal to add a `$$self` ( or else ) reserved keyword that resolves into a reference to a component's own class, such as to make the following output `<h1>hello world !</h1>`\r\n```svelte\r\n<script>\r\n\texport let name;\r\n</script>\r\n\r\n{#if !name}\r\n\t<svelte:component this={$$self} name={'world'} />\r\n{:else}\r\n\t<h1>hello {name} !</h1>\r\n{/if}\r\n```\r\nNow that usecase is already covered by `svelte:self`, and even then there will always be a way to sneak that reference in to the script block or proxy it through other script modules ( see below ), yet I happen to find myself needing `$$self` more than any other supported \"escape hatch\" `$$keyword`, so while the argument for such keyword is definitely not compelling, I do think that it would be a nice to have\r\n\r\n[Script block workaround at component instantiation](https://svelte.dev/repl/17a9575281c543f59441ff22020dd5fe?version=3.29.0)\r\n```svelte\r\n<script>\r\n\texport let name;\r\n\tconst self = arguments[0].__proto__.constructor;\r\n</script>\r\n\r\n{#if !name}\r\n\t<svelte:component this={self} name={'world'} />\r\n{:else}\r\n\t<h1>hello {name} !</h1>\r\n{/if}\r\n```\r\nFor typescript users, the only way to use a component in any other way but as inlined in another component's xhtml markup is by exporting it through the script module of a proxy component, as importing from a non `.svelte` file is not yet supported by the vscode plugin\r\n```svelte\r\n<!-- Utils.svelte -->\r\n<script context=\"module\" lang=\"ts\">\r\n\timport CustomScrollbar from \"./CustomScrollbar.svelte\";\r\n\r\n\ttype SvelteProps<T> = T extends Svelte2TsxComponent<infer U> ? U : never;\r\n\r\n\texport function custom_scrollbar(target, props: SvelteProps<CustomScrollbar>) {\r\n\t\tconst instance = new CustomScrollbar({ target, props: {...props, parentNode: target} });\r\n\t\treturn { update: (props) => instance.$set(props), destroy: () => instance.$destroy() };\r\n\t}\r\n</script>\r\n\r\n<!-- MyComponent.svelte -->\r\n<script lang=\"ts\">\r\n\timport { custom_scrollbar } from \"./Utils.svelte\";\r\n</script>\r\n\r\n<div use:custom_scrollbar={{ /** autocomplete works ! */ }}>\r\n\t...\r\n</div>\r\n```",
    "closedAt": null,
    "createdAt": "2020-10-11T11:10:35Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjY5NjI0NA==",
          "body": "What would `$$self` facilitate that isn’t already possible with `svelte:self`? You didn’t make that clear. ",
          "createdAt": "2020-10-11T12:16:43Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzY1NDg0Nw==",
          "body": "There's been 4 times\r\nFirst was while using sapper pages, in order to implement native app-like transitions properly you need to keep all page components in a centralized array iterated by a `#each <svelte:component this={PageComponent} />` in root `_layout`, so all page components roughly looked like the following\r\n```svelte\r\n<script>\r\n    import { getContext } from \"svelte\";\r\n    import MyPageComponent from \"./Component.svelte\";\r\n    getContext(\"page-state\").push(MyPageComponent);\r\n</script>\r\n```\r\nNot being able to push the component itself directly meant I had to make a proxy and an actual component for each page, using `$$self` I would have been able to do the following :\r\n```svelte\r\n<script>\r\n    import { getContext } from \"svelte\";\r\n    getContext(\"page-state\").push($$self);\r\n    export let rendered = false;\r\n</script>\r\n{#if rendered}\r\n    <!-- MyPageComponent content -->\r\n{/if}\r\n```\r\nSecond situation is kind of meta, I needed to add every mounted component in a centralized Set, $$self would've come in handy ( had to either write a unique hash in `script` or an object in each component's `script module` )\r\nThird time I wanted to use a component as an action ( as described in op ) and would've liked exporting that action directly from the component's script module\r\nFourth time was while Iterating a  `#each <svelte:component />`, there were cases where the component could itself be part of the iterable and I needed to provide a different logic if `$$self === each_component`",
          "createdAt": "2020-10-13T10:42:45Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NDAzNjkwOA==",
          "body": "@pngwn Different use case that `svelte:self` doesn't solve - I'm finding myself needing this now as well, dependency injection kind of scenario for me. I have a grid component which I'm making extensions for, I want to pass extensions as a property to the grid, and have the grid set on each extension the 'grid' property so those models have a reference to the grid they're attached to.. but currently it looks like every component that uses the grid component will have to use `bind:this` then watch for that getting set, then have the code to pass that value into the extensions, would be much nicer to have a component self serve its instance. Hope this makes sense!\r\n\r\nWill try to clarify with some dummy code.\r\n\r\n### Current option (bind and watch the binding every time I use Grid):\r\n``` \r\n// SomePage.svelte\r\n<script>\r\n  const ext1 = new GridExt1();\r\n  const ext2 = new GridExt2();\r\n  const options = new GridOptions();\r\n  $: if (grid) {\r\n    ext1.grid = grid;\r\n    ext2.grid = grid;\r\n  }\r\n</script>\r\n<Grid bind:this={grid} {options} extensions=[ext1, ext2]>\r\n```\r\n\r\n### Like to have (just pass them in and let Grid manage itself):\r\n```\r\n// SomePage.svelte\r\n<script>\r\n  const ext1 = new GridExt1();\r\n  const ext2 = new GridExt2();\r\n  const options = new GridOptions();\r\n</script>\r\n<Grid {options} extensions=[ext1, ext2]>\r\n\r\n// Grid.svelte\r\n<script>\r\n  export let extensions: Array<GridExt> = [];\r\n  extensions.forEach(ext => ext.grid = $$self);\r\n</script>\r\n```\r\n\r\nUpdate: Have got it working using `current_component` from `svelte/internal` but haven't tested if this still works in production",
          "createdAt": "2021-05-19T12:03:40Z",
          "author": { "login": "mbacon-edocs", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTg3Mzc3NDQ=",
    "body": "https://svelte.dev/repl/01a14375951749dab9579cb6860eccde?version=3.29.0\r\n```ts\r\n<script>\r\n\tfunction action(){}\r\n</script>\r\n\r\n<div use:action use:action />\r\n```\r\n```\r\nAttributes need to be unique (5:16)\r\n```",
    "closedAt": "2021-01-25T20:55:13Z",
    "createdAt": "2020-10-11T01:48:40Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjY1MDU0NA==",
          "body": "Do you want to have the same script run twice on the node?",
          "createdAt": "2020-10-11T05:02:56Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTMxOTQyMQ==",
          "body": "@peopledrivemecrazy @antony I have a similar question: Is it possible to use an action twice on the same node? I have written a small animation function that looks something like this:\r\n\r\n```html\r\n<div use:animate={{trigger: scrollY, opactiy: {start: 0, end: 200, from: 0, to: 1}}} />\r\n```\r\nIt would be very helpful for me if I could use them several times on same element, so i can create `in` and `out` scroll animations.",
          "createdAt": "2020-10-18T17:35:29Z",
          "author": { "login": "niklasgrewe", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTQxMzc5NA==",
          "body": "Heya,\n\nIt is not. Why not make your action take an array?\n\nOn Sun, 18 Oct 2020 at 18:36, Niklas Grewe <notifications@github.com> wrote:\n\n> @peopledrivemecrazy <https://github.com/peopledrivemecrazy> @antony\n> <https://github.com/antony> I have a similar question: Is it possible to\n> use an action twice on the same node? I have written a small animation\n> function that looks something like this:\n>\n> <div use:animte={{trigger: scrollY, opactiy: {start: 0, end: 200, from: 0, to: 1}}} />\n>\n> It would be very helpful for me if I could use them several times on same\n> element.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5516#issuecomment-711319421>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABVORP4RNL2O5WJLQUJVYTSLMRQXANCNFSM4SLOAYYQ>\n> .\n>\n-- \n________________________________\nꜽ . antony jones . http://www.enzy.org\n",
          "createdAt": "2020-10-18T19:58:18Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjI1Mjk2Ng==",
          "body": "You can use it twice like this:\r\n\r\n```\r\n<script>\r\n\tfunction action(){}\r\n\tconst alias = action;\r\n</script>\r\n\r\n<div use:action use:alias />\r\n```",
          "createdAt": "2020-10-19T15:40:11Z",
          "author": { "login": "voscausa", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjI4Nzk1Nw==",
          "body": "> You can use it twice like this:\r\n> \r\n> ```\r\n> <script>\r\n> \tfunction action(){}\r\n> \tconst alias = action;\r\n> </script>\r\n> \r\n> <div use:action use:alias />\r\n> ```\r\n\r\nThis works great.",
          "createdAt": "2020-10-19T16:36:58Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzE2NjYzMg==",
          "body": "As of 3.32.0, you can now have multiple instances of the same action - https://svelte.dev/repl/01a14375951749dab9579cb6860eccde?version=3.32.0",
          "createdAt": "2021-01-25T22:57:14Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NzQxODI2MQ==",
          "body": "```\r\n<script>\r\n\tlet x = 0\r\n\tfunction action(){\r\n\t\tx+=1\r\n\tconsole.log(x)\r\n\t}\r\n</script>\r\n\r\n<div use:action use:action use:action use:action />\r\n```\r\nThis works fine good job @pushkine ",
          "createdAt": "2021-01-26T09:30:47Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTg2OTQ3Mzk=",
    "body": "`||=` is valid javascript, but using it in Svelte results it a compiler crash with `Unexpected token (Note that you need plugins to import files that are not JavaScript)`:\r\n\r\n```\r\n<script>\r\n  let x;\r\n  x  ||= \"name\";\r\n</script>\r\n\r\n<h1>Hello {x}!</h1>\r\n```\r\n\r\nIt doesn't seem to matter what's on left and right side of `||=`, and where it is (top level or inside a function).\r\n\r\nIt happens both locally and on [REPL](https://svelte.dev/repl/hello-world?version=3.29.0).",
    "closedAt": null,
    "createdAt": "2020-10-10T20:16:48Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjYzNTk3MQ==",
          "body": "If build with terser, may crash due to unsupported syntax in terser.\r\n\r\nhttps://github.com/terser/terser/pull/849",
          "createdAt": "2020-10-11T01:38:51Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTg2MjM4MzE=",
    "body": "Is it currently possible to configure `svelte/register` to handle typescript ? Can't find an easy way of doing that.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nCan't find a way to ssr typescript components\r\n\r\n**Describe the solution you'd like**\r\nBeing able to configure svelte/register to handle typescript in for `.svelte` files\r\n\r\n**Describe alternatives you've considered**\r\ncreate my own fork of `svelte/register`\r\n\r\n**How important is this feature to you?**\r\nNot really, just experimenting right now\r\n\r\n**Additional context**\r\nI'm a svelte newbie. Maybe I'm missing something here\r\n",
    "closedAt": "2020-10-10T15:38:37Z",
    "createdAt": "2020-10-10T13:48:36Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjU2NzQyOA==",
          "body": "You need to preprocess the svelte file first and safe the result to disk. The recommended way to preprocess files is using `svelte-preprocess`. `svelte/register` will only work with js/css. Related/more info: https://github.com/sveltejs/svelte-preprocess/pull/263",
          "createdAt": "2020-10-10T15:37:08Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjU2ODkzNQ==",
          "body": "Ok thanks for your response,\r\n\r\nJust in case someone is interested before this PR is merged I just made a quick and dirty patch of svelte/register [here](https://gist.github.com/maxime-aknin/34f1a808aac723e6854d16fc4b0cc95d) that does the work for now.",
          "createdAt": "2020-10-10T15:48:19Z",
          "author": { "login": "maxime-aknin", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTgzOTgyMDE=",
    "body": "Supposing a component lives in `src/components/menu/submenu/index.svelte` and for some reason it needs some utility function in `src/helpers\\utils.js`, the programmer would imports it as something like this:\r\n\r\n```js\r\nimport { someFunction } from '../../../../utils';\r\n```\r\n\r\nhowever, what do you thing about to use `@` as root alias? For example, the code above could be rewrite as:\r\n\r\n```js\r\nimport { someFunction } from '@/utils';\r\n```\r\n\r\nbecause the `@` would holds the full path of the root project directory.",
    "closedAt": "2020-10-09T20:19:03Z",
    "createdAt": "2020-10-09T20:16:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjM4NDM3OQ==",
          "body": "Svelte isn't responsible for resolving modules. This would be something you'd set up yourself in your project, using the appropriate alias plugin for your bundler tool. Aliases like this aren't included in the default templates for a couple of reasons, one of which being that they break editor intellisense.",
          "createdAt": "2020-10-09T20:19:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTgzOTMwMDI=",
    "body": "Svelte already support binding with the following syntax:\r\n\r\n```svelte\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<input bind:value={name}>\r\n\r\n<h1>Hello {name}!</h1>\r\n```\r\n\r\nhowever, what do you think about a shorten version, something like:\r\n\r\n```svelte\r\n<script>\r\n  let name = 'world';\r\n</script>\r\n\r\n<input :value={name}>\r\n\r\n<h1>Hello {name}!</h1>\r\n```\r\n\r\nit would make it easier to coding when a componente declares many bindings.",
    "closedAt": "2020-10-09T20:20:54Z",
    "createdAt": "2020-10-09T20:05:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjM4NTA4Nw==",
          "body": "`:value={name}` looks very similar to `value={name}`, but do rather different things. I don't think this is something we need another way of doing, and certainly not a less-descriptive one that looks like another existing syntax and which saves only four characters.",
          "createdAt": "2020-10-09T20:20:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTgxNjczNjU=",
    "body": "**Describe the bug**\r\n\r\nHey guys! I am failing to understand why this tweak to the starter example doesn't \"work\". Since it feels like it should, I'm filing it as a bug, but it might well just be my lack of understanding (and in that case, my apologies!)!\r\n\r\n```\r\n<script lang=\"ts\">\r\n\texport let name: string;\r\n\r\n\t$: title = `Hello, ${name}!`\r\n\r\n\tfunction updateName(e: MouseEvent) {\r\n\t\tconsole.log(`Clear name`)\r\n\t\tname = \"\"\r\n\t}\r\n</script>\r\n\r\n<main>\r\n\t<h1>{title}</h1>\r\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\r\n\t<input bind:value={title} />\r\n\t<button on:click={updateName}>Update!</button>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t\tpadding: 1em;\r\n\t\tmax-width: 240px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n</style>\r\n```\r\n\r\nHere, I've added an `<input/>` and a `<button/>`. Modifying the input changes part of the `title`. Clicking the button is supposed to erase the `name` part of the title. And it does.. the first time it's clicked. If I update the title again using the input, clicking \"Update!\" again does nothing.\r\n\r\nIs this an issue with me or with Sveltes Reactivity?\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-10-09T13:56:29Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjIxMDUwMg==",
          "body": "I think what you want here is to bind to name `<input bind:value={name} />` rather than title. By binding the input to `title` I think `title` is then only referring to the value of the input and no longer the reactive statement.",
          "createdAt": "2020-10-09T14:20:37Z",
          "author": { "login": "srmullen", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjI3ODg4MQ==",
          "body": "I think the lesson here then is; don't bind to computed/reactive properties.\r\n\r\nMy assumption was that I could alter the value of a computed thing, and it would be altered back when something led to it being recomputed. This isn't really a sensible design, more I was playing with things to see what worked and what didn't, and I guess in this case my assumption doesn't hold? (should an error be thrown or something if I _do_ try doing this (perhaps by mistake)?",
          "createdAt": "2020-10-09T16:27:56Z",
          "author": { "login": "jsdw", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTIyODAwMQ==",
          "body": "I think binding implies a two-way read/write scenario for a variable, and computing a variable implies one-way. Svelte can't really do much if you tell it two different things.\r\n\r\nI am inclined to say there could be a dev warning here, but I don't really know how feasible it is.",
          "createdAt": "2020-10-15T11:39:56Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNzgwMDI3Nw==",
          "body": "I think this is confusing. Manual \"binds\" work.\r\n\r\nhttps://svelte.dev/repl/4bedd5473d294e88a5ab4148ce9346d5\r\n\r\nThe case is:\r\n- user clicks things and populates textarea with them\r\n- the result of clicking is then edited and used\r\n- if user changes selection of things - adds, removes or reorders them, then it should recompute `combined`\r\n\r\nI expect `combined = things.join(' ')` to only run when `things` change. Then everything would be easy to understand.\r\n\r\nI feel like I shouldn't have to use `on:input`, or a buffer variable, or mask `combined` from reactivity like:\r\n\r\n```svelte\r\n<script>\r\n  $: if (things) updateCombined(); \r\n\r\n  function updateCombined() {\r\n    combined = things.join(' ');\r\n  }\r\n</script>\r\n\r\n<input bind:value={combined} />\r\n```\r\n\r\nThe funny thing is that `<svelte:options immutable />` fixes binds. Just why...\r\nthx @MarkTanashchuk for the find.",
          "createdAt": "2021-04-27T17:57:17Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTgwOTIzNjY=",
    "body": "**Describe the bug**\r\nValues in a destructured promise result become undefined after a re-render.\r\n\r\n```html\r\n<script>\r\n\tlet test = 0;\r\n\r\n\t$: promise = Promise.resolve({ data: 1 });\r\n</script>\r\n\r\n{#await promise then { data }}\r\n\t{#if data}\r\n\t\t<button on:click={() => (test = 1)}>Test</button>\r\n\t{:else}data is {data}{/if}\r\n{/await}\r\n```\r\n\r\nFor some reason, having promise defined in a reactive statement was necessary here to reproduce the bug. In my project, I was calling a function in the `{#await}` block and passing it a store value.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/3fd4e2cecfa14d629961478f1dac2445?version=3.29.0\r\n\r\n**Expected behavior**\r\nI would expect promise results to persist between renders.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\nChrome, Firefox\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\nArch Linux\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n3.29.0\r\n\r\n- Whether your project uses Webpack or Rollup\r\nN/A\r\n\r\n**Severity**\r\nThis is annoying, but I can avoid using destructuring here to get around the problem.\r\n\r\n**Additional context**\r\nN/A\r\n",
    "closedAt": "2020-10-22T16:43:12Z",
    "createdAt": "2020-10-09T12:06:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTU3MjI5Ng==",
          "body": "@Conduitry I've added a pull request that seems to fix this bug.",
          "createdAt": "2020-10-15T20:28:02Z",
          "author": { "login": "jesseskinner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTA5MjU5MA==",
          "body": "I think the undefined is because data can't just be accessed since a Promise is involved.",
          "createdAt": "2020-10-17T23:19:58Z",
          "author": { "login": "hdJerry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTA5MzIxOA==",
          "body": "@hdJerry I fixed it with my pull request, though. Once the promise resolves, the data should remain available.",
          "createdAt": "2020-10-17T23:28:21Z",
          "author": { "login": "jesseskinner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTA5MzM2Mw==",
          "body": "cool, because I tried something using setTimeout and anytime I click the button the value of data continues to increase\r\n",
          "createdAt": "2020-10-17T23:30:26Z",
          "author": { "login": "hdJerry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTA5MzU1NA==",
          "body": "![Screenshot from 2020-10-18 00:32:16](https://user-images.githubusercontent.com/28502531/96355426-71e96180-10d9-11eb-98de-04a108dbbb5a.png)\r\n\r\nis data suppose to increase by one?\r\njust curious.",
          "createdAt": "2020-10-17T23:32:59Z",
          "author": { "login": "hdJerry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTA5Mzc4Ng==",
          "body": "@hdJerry I think what you're seeing there is the return value of `setTimeout`, which returns an incremented timeout index to be used with `clearTimeout`.",
          "createdAt": "2020-10-17T23:36:01Z",
          "author": { "login": "jesseskinner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjcwMDAwMQ==",
          "body": "How did you solve it?\r\nI really love svelte.",
          "createdAt": "2020-10-20T08:54:24Z",
          "author": { "login": "hdJerry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjgyMDU2MQ==",
          "body": "@hdJerry I actually coded it live on Twitch, if you're interested in watching: https://youtu.be/_7nKfgke29U",
          "createdAt": "2020-10-20T12:41:26Z",
          "author": { "login": "jesseskinner", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjgyMzg3NA==",
          "body": "sweet!!, I will check now.\r\n",
          "createdAt": "2020-10-20T12:47:41Z",
          "author": { "login": "hdJerry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDY0NzYyOA==",
          "body": "Released you fix in 3.29.3 - https://svelte.dev/repl/3fd4e2cecfa14d629961478f1dac2445?version=3.29.3 - thank you!",
          "createdAt": "2020-10-22T17:33:06Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTc2MjQ1Mzk=",
    "body": "**Describe the bug**\r\nBinding DOM nodes in a loop is causing infinite updates thus hanging the component if the data iterated over depends on a store.\r\n\r\n**Logs**\r\nNo logs as the bug hangs the browser instance.\r\n\r\n**To Reproduce**\r\nUncomment line 20.\r\nhttps://svelte.dev/repl/16e4c51a54014c57a514af46097d0044?version=3.29.0\r\n\r\n**Expected behavior**\r\nA reference to a DOM node from each item.node.\r\n\r\n**Stacktraces**\r\nNA\r\n\r\n**Information about your Svelte project:**\r\n- Microsoft Edge Version 85.0.564.63\r\n\r\n- Win10 Pro\r\n\r\n- Svelte 3.29.0\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nI'm using stores (via context) to share component states to child components to keep inter-component dependencies as loose as possible. Would have to implement additional event handling as a work around so I can use non store states in parent component and be able to bind nodes.\r\n\r\n**Additional context**\r\nIf this is a known limitation I think it should be highlighted as it is intuitive in a Svelte capability context.",
    "closedAt": null,
    "createdAt": "2020-10-08T20:00:56Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTc1NDA0ODY=",
    "body": "![chrome_2020-10-08_19-44-29](https://user-images.githubusercontent.com/30108880/95494762-b3be2d80-099e-11eb-8798-1e9e73823924.png)\r\nDebugging would be more straightforward if block functions had a little more context to their name\r\n```diff\r\n- m: function mount(target, anchor) {},\r\n+ m: function mount_Header(target, anchor) {},\r\n- p: function update(ctx, dirty) {},\r\n+ p: function update_Header_if_block(ctx, dirty) {},\r\n```",
    "closedAt": null,
    "createdAt": "2020-10-08T17:43:42Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTc1MzE0MzU=",
    "body": "https://svelte.dev/repl/bd49de5726ac4426a5a56da473578de8?version=3.29.0\r\n```svelte\r\n<script>\r\n\tconst action = () => ({\r\n\t\tfoo: \"bar\",\r\n\t\tupdate() {\r\n\t\t\tconsole.log(this); // null\r\n\t\t},\r\n\t\tdestroy() {\r\n\t\t\tconsole.log(this); // undefined\r\n\t\t},\r\n\t});\r\n\tlet leet = 1337;\r\n\tPromise.resolve()\r\n\t\t.then(() => leet++)\r\n\t\t.then(() => leet++);\r\n</script>\r\n\r\n{#if leet < 1339}\r\n\t<div use:action={{ leet }} />\r\n{/if}\r\n\r\n```\r\nChanges needed:\r\n```diff\r\n- action_action.update.call(null, { leet: /*leet*/ ctx[0] })\r\n+ action_action.update({ leet: /*leet*/ ctx[0] })\r\n```\r\n```diff\r\nfunction action_destroyer(action_result) {\r\n-        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\r\n+        return action_result && is_function(action_result.destroy) ? action_result.destroy.bind(action_result) : noop;\r\n}\r\n```",
    "closedAt": null,
    "createdAt": "2020-10-08T17:28:42Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTY0NjMzMTQ=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI'm frustrated when my tests use the same `document` object and (a) they have inconsistent behavior when run concurrently and (b) there is not way of isolating them from each other and so they share state. It also is explicitly recommended against putting JSDOM variables into global scope: https://github.com/jsdom/jsdom/wiki/Don't-stuff-jsdom-globals-onto-the-Node-global\r\n\r\n**Describe the solution you'd like**\r\nInstead of using https://github.com/lukechilds/browser-env for testing I would like to use https://github.com/lukechilds/window, which does not throw everything into the global scope. Runtime code like `https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/dom.ts` would only use the global dom object if none was provided when creating the component.\r\n\r\n**Describe alternatives you've considered**\r\nReinitializing browser-env before every test. This does not allow concurrent testing, though.\r\n\r\n**How important is this feature to you?**\r\nNot very important, but moving into the direction of greater testability and isolation is always a good idea.\r\n",
    "closedAt": null,
    "createdAt": "2020-10-07T11:57:25Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTU3MTY0Njc=",
    "body": "**Describe the bug**\r\n\r\nUsing typescript inside a Svelte component is fine, except when that file comes from an external module. This bug happens either when an external component using a Typescript file is imported and used or when the external Typescript file itself is directly imported and used.\r\n\r\nAdditional infos :\r\n\r\n1. the web app project was setup using the provided script\r\n2. the component library (external package) project was setup using a similar config, although such config is not provided by Svelte\r\n3. the usage of the component library (external package) is done wither via `npm link` or by installing from npmjs.\r\n\r\n**Logs**\r\n\r\nSee stacktraces\r\n\r\n**To Reproduce**\r\n\r\n1. clone app project and install dependencies : https://github.com/vigenere23/svelte-issue-5503\r\n2. clone component library project and install dependencies : https://github.com/vigenere23/svelte-component-issue-5503\r\n3. to locally link dependencies :\r\n    1. inside component project, run `yarn link`\r\n    2. inside app project, run `yarn link svelte-component`\r\n\r\n**Expected behavior**\r\n\r\nI would expect one of the following:\r\n\r\n1. the library component would use an inlined compiled version of the used typescript file\r\n2. the app project would directly import the typescript file and compile it itself, just like it does for local typescript files\r\n\r\n**Stacktraces**\r\n\r\n<details>\r\n  <summary>Stack trace for locally linking dependencies</summary>\r\n\r\n  ```\r\nbundles src/main.ts → public/build/bundle.js...\r\n[!] Error: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n../gabio-design-svelte/src/utils/url.ts (1:7)\r\n1: export type RelativeUrlResolver = (relativeUrl: string) => string\r\n          ^\r\n2:\r\n3: export function resolveURL(\r\nError: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n    at error (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:5210:30)\r\n    at Module.error (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:9725:16)\r\n    at tryParse (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:9639:23)\r\n    at Module.setSource (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:10036:30)\r\n    at ModuleLoader.addModuleSource (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:18178:20)\r\n    at ModuleLoader.fetchModule (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:18232:9)\r\n    at async Promise.all (index 1)\r\n    at ModuleLoader.fetchStaticDependencies (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:18256:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (/home/gabio/Documents/projects/gabio-web-svelte/node_modules/rollup/dist/shared/rollup.js:18233:9)\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Stack trace for remotely linking dependencies</summary>\r\n\r\n```\r\nsrc/main.ts → public/build/bundle.js...\r\n[!] (plugin typescript) Error: Could not load /home/gabio/Documents/svelte-typescript-test/node_modules/@vigenere23/svelte-component/src/index.ts (imported by src/App.svelte): Debug Failure. False expression: Expected fileName to be present in command line\r\nError: Could not load /home/gabio/Documents/svelte-typescript-test/node_modules/@vigenere23/svelte-component/src/index.ts (imported by src/App.svelte): Debug Failure. False expression: Expected fileName to be present in command line\r\n    at Object.getOutputFileNames (/home/gabio/Documents/svelte-typescript-test/node_modules/typescript/lib/typescript.js:94573:18)\r\n    at findTypescriptOutput (/home/gabio/Documents/svelte-typescript-test/node_modules/@rollup/plugin-typescript/dist/index.js:391:33)\r\n    at Object.load (/home/gabio/Documents/svelte-typescript-test/node_modules/@rollup/plugin-typescript/dist/index.js:592:28)\r\n```\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Browser: agnostic\r\n- OS: Linux Ubuntu-based 20.04\r\n- Svelte: `3.29.0` (latest from the time of writing)\r\n- Rollup (from the given template)\r\n\r\n**Severity**\r\n\r\nIt is currently blocking my project, and probably any other project that uses typescript component libraries. Starting from scratch in pain JS is possible but that's not the goal.\r\n\r\n**Additional context**\r\n\r\nMore infos about the bug and temporary fixes here : https://github.com/sveltejs/component-template/issues/29#issuecomment-704292134",
    "closedAt": null,
    "createdAt": "2020-10-06T14:11:32Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MzUyNjI1OA==",
          "body": "@vigenere23 were you able to find a solution?",
          "createdAt": "2021-01-20T11:04:55Z",
          "author": { "login": "stefanovualto", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMTI0NzIwOQ==",
          "body": "@stefanovualto Yes, [my template](https://github.com/vigenere23/svelte-template-web) has a working fix inspired from [this discussion](https://github.com/sveltejs/component-template/issues/29).",
          "createdAt": "2021-03-17T16:56:39Z",
          "author": { "login": "vigenere23", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTUzMTMxMzQ=",
    "body": "I'm trying to get the dom element value of my \"Span\" component in the main App.svelte, but for some unfortunate combination this is not possibile while using a mix of reactive declarations, slots and props.\r\nI don't find an easy way to describe it but i succeed on isolating the problem, details in the REPL.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/d91cff8ca54947e2bbc56143ec06fe04?version=3.29.0\r\n\r\n**Expected behavior**\r\nI expect the component above in the REPL to correctly export the value of its dom element.\r\n\r\n**Severity**\r\nActually it's annoying, i don't know how many people in the world came up with the same combination as me.\r\n\r\n**Information about your Svelte project:**\r\nI'm using Webpack and Svelte 3.29.0",
    "closedAt": null,
    "createdAt": "2020-10-06T03:41:32Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTUxMTY3NzI=",
    "body": "This is continuation for #5351.\r\n\r\nThe problem is that there's no way to render an asynchronously loaded component on SSR. My use-case for asynchronously loaded components is rendering JAM-stack site's content from JSON files. My JSON-files describe page content as blocks, that are different components (type) and their props (data).\r\n\r\nI want to have top-level await support for component's `<script>` that will allow awaiting for promises before component's initialization is finished.\r\n\r\nI've done [an implementation](https://github.com/joas8211/svelte/tree/top-level-await) for this, but changing initialization asynchronous is quite a breaking change. After the change it's not possible to initialize component with constructor, but instead we have to use a static async builder method `Component.init(options)`. Not being able to initialize synchronously breaks custom elements. Component updating also becomes asynchronous so assignments to props don't get reflected to DOM synchronously. That will also break a lot of code.\r\n\r\nIf I make async initialization a compiler option, so that it doesn't trash backwards compatibility, would maintainers be willing to merge the changes? Is there any demand for this feature?",
    "closedAt": null,
    "createdAt": "2020-10-05T19:50:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTIyMDM3Nw==",
          "body": "Top level await I believe is something which would be provided by acorn, not something we would try to implement ahead of it. Once acorn supports top level await then we will gain support for it.",
          "createdAt": "2020-10-15T11:28:18Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTUyODc1MQ==",
          "body": "@antony What do you mean? Acorn already supports \"top-level await\" with `allowAwaitOutsideFunction: true`. And I'm not trying to have a real top-level await (top-level of module). I'm just trying to have await for component's script-tag (init script) that is actually wrapped in a function that can be changed to an async function just like I did in my fork.",
          "createdAt": "2020-10-15T18:58:36Z",
          "author": { "login": "joas8211", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzg1OTk5Nw==",
          "body": "@antony Any word on what Jesse said?\r\n\r\nMy use case: I have a module that loads some data synchronously, which is then used by a bunch of components. All those components are shown to the user only after the data is loaded. If I make the loading async, it requires me to make a lot of changes to make it work, whereas a top-level await would mean I just put a single `await` statement in the necessary components.",
          "createdAt": "2021-04-12T14:28:24Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNzg5NDE3Mw==",
          "body": "I opened this on kit. Same question: https://github.com/sveltejs/kit/issues/941.\r\n\r\nHow to use acorn options?",
          "createdAt": "2021-04-12T15:12:15Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODA2MTIzNg==",
          "body": "@frederikhors I think you cannot change how the Svelte compiler parses JavaScript without modifying the compiler. And the Acorn flag alone wouldn't do you any good. The component script must be wrapped inside an async function in the final output for await to work. And that function must be run asynchronously (eg. with async-await) etc... \n\nSo I might do the compiler option. But don't expect it too soon. It is a lot of work to do it properly.",
          "createdAt": "2021-04-12T19:05:46Z",
          "author": { "login": "joas8211", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODI5MTcwMg==",
          "body": "@joas8211 Sorry for my noobness, could it be possible to add syntax for async instead of a compiler option?\r\nLike this:\r\n```\r\n<script async>\r\n\r\n</script>\r\n```",
          "createdAt": "2021-04-12T22:46:08Z",
          "author": { "login": "filipot", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODMwMjg1NQ==",
          "body": "@filipot Probably not possible. Problem is with 1: the difference of how the components are initialized and with 2: mixing the different types of components.\n\n1: Asynchronous component is initialized with asynchronous static function on components class `const instance = await Component.init(options);` and synchronous aka. \"normal\" component is initialized with the class constructor `const instance = new Component(options);`.\n\n2: Synchronous components cannot contain asynchronous components since they must function synchronously.",
          "createdAt": "2021-04-12T23:14:19Z",
          "author": { "login": "joas8211", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODM0MzI5Mg==",
          "body": "@joas8211 Does the initialization of an async component have to be async? Would something like this be viable:\r\n\r\n```html\r\n<script>\r\n  data = await import('module.js')\r\n  export let name = ''\r\n  function handler() {\r\n    data.name = 'updated'\r\n  }\r\n</script>\r\n\r\n<p on:click={handler>{name}</p>\r\n```\r\ntransforms to\r\n```html\r\n<script>\r\n  data = await import('module.js')\r\n  export let name = ''\r\n  async function handler() {\r\n    data = await data\r\n    data.name = 'updated'\r\n  }\r\n</script>\r\n\r\n{#await}\r\n{:then data}\r\n  <p on:click={handler}>{data.name}</p>\r\n{/await}\r\n```",
          "createdAt": "2021-04-13T00:46:57Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODQ0NzU0Ng==",
          "body": "@probablykasper For my use case, yes. I wanted to load dynamic components defined by component's prop or eg. external resource before rendering on server-side / build-time (SSR). SSR only runs the initial script (top-level of script tag) and does not wait for await keyword in the template. Here's some code I just made up to demonstrate my use case:\r\n```html\r\n<!-- ContentArea.svelte -->\r\n<script>\r\n    export let id = 'main';\r\n    \r\n    const response = await fetch(`/areas/${id}`);\r\n    const blocks = await response.json();\r\n\r\n    for (const block of blocks) {\r\n        block.component = (await import(block.module)).default;\r\n    }\r\n</script>\r\n\r\n{#each block as blocks}\r\n    <svelte:component this={block.component} {...block.props} />\r\n{/each}\r\n```",
          "createdAt": "2021-04-13T05:27:12Z",
          "author": { "login": "joas8211", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTEyMTM1Ng==",
          "body": "@joas8211 Is the only issue that SSR wouldn't support it? Does SSR even support loading dynamic components currently?",
          "createdAt": "2021-04-13T23:46:48Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTIxNDY5MA==",
          "body": "@probablykasper Well, it does support dynamic components with static import, but not with dynamic import aka. code splitting if you use Rollup. Because dynamic import is asynchronous.",
          "createdAt": "2021-04-14T04:13:08Z",
          "author": { "login": "joas8211", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTIyMDEzOA==",
          "body": "@joas8211 In that case I think it might be fair to consider special SSR handling of `await` as a separate issue, and then SSR could handle `await` like a normal promise for now. Besides, what would SSR do if the response you get in your `fetch` depends on a cookie, user agent or something like that?",
          "createdAt": "2021-04-14T04:32:13Z",
          "author": { "login": "probablykasper", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg1NTM2MjY4MQ==",
          "body": "> @probablykasper For my use case, yes. I wanted to load dynamic components defined by component's prop or eg. external resource before rendering on server-side / build-time (SSR). SSR only runs the initial script (top-level of script tag) and does not wait for await keyword in the template. Here's some code I just made up to demonstrate my use case:\r\n> \r\n> ```\r\n> <!-- ContentArea.svelte -->\r\n> <script>\r\n>     export let id = 'main';\r\n>     \r\n>     const response = await fetch(`/areas/${id}`);\r\n>     const blocks = await response.json();\r\n> \r\n>     for (const block of blocks) {\r\n>         block.component = (await import(block.module)).default;\r\n>     }\r\n> </script>\r\n> \r\n> {#each block as blocks}\r\n>     <svelte:component this={block.component} {...block.props} />\r\n> {/each}\r\n> ```\r\n\r\nI have the same issue and wanted to load dynamic components by an external list from sveltekit-load. In dev-mode everything is fine but when trying to load it in preview mode the components are not rendered.",
          "createdAt": "2021-06-06T08:43:53Z",
          "author": { "login": "tonprince", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTUwODAwMTg=",
    "body": "",
    "closedAt": "2020-10-05T18:53:03Z",
    "createdAt": "2020-10-05T18:52:24Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTQ4NjM5MTY=",
    "body": "**Describe the bug**\r\nWhen a style start with :global() and contain ~, it is detected as unused css and it won't be in the compiled component.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/f912b3cecd29433990eca1947b902184?version=3.29.0\r\n\r\n**Severity**\r\nMedium\r\n",
    "closedAt": "2021-02-08T16:26:47Z",
    "createdAt": "2020-10-05T13:54:53Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzY1MTg5OQ==",
          "body": "Interesting. @tanhauhau do you think it's practical to let the `+` and `~` combinators match as siblings to `:global()`s?",
          "createdAt": "2020-10-05T14:00:39Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNDE0MjQ4NQ==",
          "body": "I debugged it more deeply and it came with version 3.27.0 and with https://github.com/sveltejs/svelte/pull/5427/files#diff-ad7d8aa7ba8f1612a46a38b563c075aaR211\r\nI can downgrade svelte to 3.26.0, but I would really appreciate if you give an exception for globals.",
          "createdAt": "2020-10-06T09:18:43Z",
          "author": { "login": "btamas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNDE0MjcwMw==",
          "body": "I debugged it more deeply and it came with version 3.27.0 and with https://github.com/sveltejs/svelte/pull/5427/files#diff-ad7d8aa7ba8f1612a46a38b563c075aaR211\r\nI can downgrade svelte to 3.26.0, but I would really appreciate if you give an exception for globals.",
          "createdAt": "2020-10-06T09:19:06Z",
          "author": { "login": "btamas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNDI5MDg3Mw==",
          "body": "It's a bug. Will look into it.\r\n\r\nFound that the scoping for `:global(.abc) > .def` wasn't working fine too",
          "createdAt": "2020-10-06T14:03:03Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDcwNzMxNw==",
          "body": "@tanhauhau any progress? Had to rollback to 3.26 :(",
          "createdAt": "2020-11-02T20:30:34Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMjIyMjYwMA==",
          "body": "@Conduitry @Rich-Harris @antony \r\nCan somebody rollback that PR until it is fixed or add exceptions for globals please?\r\nCan't upgrade to `^3.27.0` because it will break components in several projects. :disappointed: ",
          "createdAt": "2020-11-23T15:11:36Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzU1Mjk5OQ==",
          "body": "@btamas Until fixed, you can workaround it like this:\r\n```css\r\n:global(* +) .class\r\n```\r\nThanks to https://github.com/lega911",
          "createdAt": "2020-11-25T08:35:36Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NTM5MTQ5OA==",
          "body": "This should be fixed in 3.32.2 - https://svelte.dev/repl/f912b3cecd29433990eca1947b902184?version=3.32.2",
          "createdAt": "2021-02-08T19:36:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTQ2MTU3ODA=",
    "body": "**Describe the bug**\r\nusually, the CSS specificity is id > class > tag.\r\nbut when using global style syntax, the class is not taking president over the Tag.\r\n\r\n**To Reproduce**\r\n[svelte REPL](https://svelte.dev/repl/9304e53757d54994b30d472f2ea379e7?version=3.29.0)\r\n\r\n**Expected behavior**\r\nI would expect that in the case of\r\n```\r\n<p class=\"class\">secret stuff</p>\r\n```\r\nthe following style\r\n```\r\n<style>\r\n  :global(.class){ \r\n    /* some style */ \r\n  } \r\n</style>\r\n```\r\nwill override styled Tag with \r\n```\r\n<style>\r\n  p{ \r\n    /* some style */\r\n  }\r\n</style>\r\n```\r\n\r\n\r\n\r\n**Information about your Svelte project:**\r\n- browser version: any\r\n\r\n- operating system: OS X 10\r\n\r\n- Svelte version: v3.29.0\r\n\r\n**Severity**\r\nI think this is kind of severe, but I may be missing some background on this specific use-case\r\n\r\n**Additional context**\r\nworking on a table component and want to override styles from the outside\r\n```\r\n<style>\r\n  :global(.td){\r\n    color: red;\r\n  }\r\n}\r\n</style>\r\n\r\n<MySuperTableComp data={somedata} />\r\n```",
    "closedAt": "2020-10-08T21:22:04Z",
    "createdAt": "2020-10-05T08:02:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzU4ODMwOQ==",
          "body": "I think I'm more inclined to say that this is not a bug, but a gotcha. Scoped styles on `p` are compiling to `p.svelte-123xyz`, which has a higher specificity than `.class`. One way to increase the specificity of `.class` is to use the selector `.:global(.class.class)` instead. I don't think we want Svelte to be doing anything to change the selectors that appear inside `:global()`s.",
          "createdAt": "2020-10-05T12:06:12Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzY4NDg1OQ==",
          "body": "I understand why you dont consider this a bug, though I wish it wasn't so. it feels natural to me to expect the specifity to act this way. \r\nIf its svelte that addes the class to the the style, it should also acomedate for this logic in other areas as well.\r\n",
          "createdAt": "2020-10-05T14:53:30Z",
          "author": { "login": "galangel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzY5OTczMg==",
          "body": "Because of how Svelte's manipulating the CSS to add scoping, there's going to have to be a detectable 'seam' somewhere. If Svelte manipulated the selectors inside `:global()`s (and I'm not sure what would be a reasonable way to do that), then there'd be an inconsistency in how this interacts with styles in external CSS files that Svelte never touches. I'd be interested in hearing what other maintainers have to say on the topic, but I think drawing the line at \"stuff in `:global()` is you bailing out of Svelte's scoping and is your responsibility\" makes sense.",
          "createdAt": "2020-10-05T15:16:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTczNzQwMQ==",
          "body": "I hope you can help me with something else that is related that I'm missing here\r\nIs there a way to override style only on children? \r\n`:global` effect even the parent of the component using it.\r\nlets say i use the hack and override the classes in the table. if I use the table someplace else on the page , it will also take in the overrides. what would be the approach of overriding the css of the children?",
          "createdAt": "2020-10-08T18:10:41Z",
          "author": { "login": "galangel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTczOTU3Nw==",
          "body": "@galangel \r\nYou should put a local selector before the global, as explained here https://stackoverflow.com/questions/59142472/how-can-i-force-the-svelte-compiler-to-include-a-style-rule/59144710#59144710",
          "createdAt": "2020-10-08T18:14:52Z",
          "author": { "login": "mosheduminer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTgyOTg2NA==",
          "body": "@mosheduminer, Amazing, thank you.",
          "createdAt": "2020-10-08T21:20:20Z",
          "author": { "login": "galangel", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTQyNjM3Mjk=",
    "body": "I'm currently trying to use Svelte to create applications for targets other than web. My specific use-case it that I want to use Svelte to create native applications - with libraries like Nodegui. Looking at the current implementation of the compiler, the option locks it down to use either the dom or ssr renderer. opening it up would mean allowing for custom renderers.\r\n\r\n<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nSvelte's rendering system is locked. It allows for rendering to dom and SSR. Can the compiler somehow be extracted to allow for custom renderers? This would mean custom SvelteComponent generators as the output might not be for web, as well #4168\r\n\r\n**Describe the solution you'd like**\r\nCreate base classes for renderer class so that custom implementations can be passed. This allows for projects like [Svelte Native](https://github.com/halfnelson/svelte-native) and [Nodegui](https://github.com/nodegui/nodegui) to pass in their renderers and use the compiler.\r\n\r\n**Describe alternatives you've considered**\r\nStill at the thinking phase so open to ideas.\r\n\r\n**How important is this feature to you?**\r\nThis would allow Svelte to be used in many other sorts of application than just the web. So I'd say pretty important. \r\n\r\n**Additional context**\r\nHere's the changes I'm working on currently: https://github.com/mrsauravsahu/svelte/compare/master...mrsauravsahu:feat/inject-render-function?expand=1\r\n",
    "closedAt": null,
    "createdAt": "2020-10-04T08:28:08Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzI0Mzc2MQ==",
          "body": "## Describe the solution you'd like\r\n\r\nPlayed around with the code a little bit. Currently, looks like if the compiler allowed to take the renderer itself as a parameter, svelte's compiler would get separated from the renderer. This means anyone who calls svelte - currently [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte) and [svelte-loader](https://github.com/sveltejs/svelte-loader) would pass renderers when compiling svelte code.\r\nFor `dom` and `ssr` generation, these would be svelte's internal renderers. But for all intents and purposes, these would be the plugin's job to pass the renderer",
          "createdAt": "2020-10-04T11:47:23Z",
          "author": { "login": "mrsauravsahu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTM0NjEyNg==",
          "body": "Probably worth to check on [svelte-native-preprocessor](https://www.npmjs.com/package/svelte-native-preprocessor).\r\nI wonder if there is already a doc on how to build a custom renderer. It would be interesting writing a svelte version [reactpixi](https://reactpixi.org/).",
          "createdAt": "2020-10-08T05:51:57Z",
          "author": { "login": "DrSensor", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTU3ODk2MA==",
          "body": "@DrSensor Yes, so I'm also thinking of writing a preprocessor. The one thing I'm trying to wrap my head around is once the renderer does its job, in the code-generation step, I need to generate custom code rather than svelte's default DOM related code, that would require extra changes.",
          "createdAt": "2020-10-08T13:45:31Z",
          "author": { "login": "mrsauravsahu", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTQyMTU4ODc=",
    "body": "How can I sponsor the project and get logo placed on homepage?\r\n\r\nI sent question via open collective a month ago but go no reply?",
    "closedAt": "2020-10-04T10:40:46Z",
    "createdAt": "2020-10-04T02:21:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzIzNjIwNw==",
          "body": "All sponsors will have their details appear on the open collective page. This is the only kind of sponsorship we are offering at this stage. If this changes we will be sure to let people know. ",
          "createdAt": "2020-10-04T10:40:46Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTQxNzIwNTc=",
    "body": "First off, thanks for creating and maintaining Svelte! It is a fantastic framework. :slightly_smiling_face: \r\n\r\n## Summary\r\n\r\nTL;DR: I would like an option like\r\n\r\n```js\r\n{ styleEncapsulation: false }\r\n```\r\n\r\n... which does the same thing as `customElement: true` without actually building a custom element. I.e., it would remove the `svelte-*` classes from the DOM rendering and CSS, but do nothing else.\r\n\r\n## Justification\r\n\r\nCurrently there are several issues with using Svelte in `customElement: true` mode, such as:\r\n\r\n- Lack of an implicit `$destroy()` call can cause memory leaks: https://github.com/sveltejs/svelte/issues/1152\r\n- Props are not set at creation time, requiring timing workarounds https://github.com/sveltejs/svelte/issues/2227#issuecomment-670983661\r\n- Supporting reflected attributes with kebab-case is tricky https://github.com/sveltejs/svelte/issues/3852#issuecomment-665037015\r\n- Every component-within-a-component gets its own custom element, which is not always what you want (e.g. a standalone web component built with Svelte)\r\n- The constructor is [not to everyone's taste](https://github.com/nolanlawson/emoji-picker-element/blob/012b8a7cd2d414c84c808bab9c07800cfb3cadae/src/picker/PickerElement.js#L8-L9) (e.g. I prefer to pass the props in directly, rather than `{ target: ..., props: ...}`).\r\n\r\nAlso: the solutions are not obvious. For instance, I would prefer to create the Svelte component in `connectedCallback()` and destroy it in `disconnectedCallback()`, but perhaps others have different needs. You could also imagine folks disagreeing on whether to use shadow DOM or light DOM (https://github.com/sveltejs/svelte/issues/1748), closed shadow versus open shadow, or even the emerging [declarative shadow DOM](https://web.dev/declarative-shadow-dom/) standard.\r\n\r\n## Proposal\r\n\r\nSo here's my pitch: instead of a one-size-fits-all solution for custom elements, what if we separate the concept of style encapsulation and custom elements? Then users could just use the standard Svelte component API to create their own web components. It doesn't actually require much code, as [I found through tinkering](https://github.com/nolanlawson/emoji-picker-element/blob/26514aa4408b42e3cf08d30817dea614cb417b61/src/picker/PickerElement.js).\r\n\r\nHowever, this approach isn't really viable because of how CSS is handled. There's no way to create a regular Svelte component without the built-in style encapsulation, i.e. without the `svelte-*` classes. You could write a Rollup plugin to remove the `svelte-*` stuff and attach the CSS to `shadowRoot` instead of `document.head`, but that gets kinda gnarly. (Or you could just learn to live with the extra unneeded `svelte-*` stuff, but I'm a perf guy, so I'm against that. :grin:)\r\n\r\nTo be fair, with my proposal, the solution for \"components within components\" would just be that it's up to the author to make sure that styles are properly encapsulated between the inner and outer components. But I'd argue that this is probably the default case, especially when you're building a standalone web component for third-party consumption.\r\n\r\nSo this is my proposal. I hope it's interesting at least! :slightly_smiling_face: ",
    "closedAt": null,
    "createdAt": "2020-10-03T20:41:19Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNDUyNDMzMQ==",
          "body": "I like the style encapsulation but not the shadow dom for inner custom elements.",
          "createdAt": "2020-10-06T20:07:50Z",
          "author": { "login": "benkeil", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMDY4MzA0OA==",
          "body": "I would appreciate this unrelated to custom elements. I'm (trying to) preprocessing the svelte styles to css-modules so don't need the extra encapsulation.",
          "createdAt": "2020-11-02T19:39:19Z",
          "author": { "login": "jquense", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTQwNjAyMTI=",
    "body": "This would be useful as it would save storage space and prevent accidental saving of REPLs.",
    "closedAt": "2020-10-03T11:05:09Z",
    "createdAt": "2020-10-03T10:31:16Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzA4NjEwMw==",
          "body": "Duplicate of #3457.",
          "createdAt": "2020-10-03T11:05:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTM4OTg4OTQ=",
    "body": "I use `<svelte:options immutable={true}/>` all the time during development and I noticed that adding svelte:options in each component is a bit tedious and it would be nice to add the ability to set this option globally for the entire app.\r\n\r\nFor example it can be set in the main.js like this:\r\n\r\n```svelte\r\nconst app = new App({\r\n\ttarget: document.body,\r\n\timmutable: true\r\n});\r\n```",
    "closedAt": "2020-10-02T21:58:22Z",
    "createdAt": "2020-10-02T20:58:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjk3NjE1MQ==",
          "body": "Option in main.js is convenient, however, as specified in svelte.dev/docs#svelte_compile - this can be done in rollup",
          "createdAt": "2020-10-02T22:00:46Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTM0MjM4NzY=",
    "body": "**Describe the bug**\r\nUsing `svelte:component` is not possible with custom elements. The rendering works not as expected and styles are not included.\r\n\r\n**Expected behavior**\r\nShould render correctly.\r\n\r\n**Information about your Svelte project:**\r\n- master",
    "closedAt": null,
    "createdAt": "2020-10-02T07:49:03Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTg3MjYwMA==",
          "body": "@benkeil maybe this is no longer relevant but... there's no link in the \"master\"",
          "createdAt": "2021-01-17T20:14:50Z",
          "author": { "login": "akauppi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3MjQyMTI4OA==",
          "body": "Maybe my problem is different, but I found this issue when looking for it. Maybe my answer helps others who do the same.\r\nI have a `SearchResults.svelte` file with a style tag. When I include this in the main `App.svelte` as `<SearchResults />` the style tag is not taken over.  When I include it as `<search-results />` style is included as expected.\r\nThis was not expected for me, after following the tutorial. I am very new (last week) to Svelte though.\r\nAnyway, for me it works now.",
          "createdAt": "2021-02-03T10:58:39Z",
          "author": { "login": "mauritsvanrees", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTMxNzc5NzI=",
    "body": "Hi, wondering if it's possible to use Svelte on the backend.  \r\nie: server side reactive components running on nodejs.\r\n\r\nNOTE: I'm NOT talking about server-side rendering, \r\nrather I'm suggesting reactive nodejs components which run on the server, not in the browser.\r\n\r\nIf this is not possibly today, I'd like to propose it as a feature request.\r\n\r\nthanks for the awesome work so far!\r\n\r\nDavid\r\n\r\n",
    "closedAt": "2020-10-01T21:31:57Z",
    "createdAt": "2020-10-01T20:55:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjQwOTQ3OA==",
          "body": "I really can't tell what this is asking for, but it sounds like something well outside Svelte's intended area. You can already use the `svelte/store` exports in any js project if you want to use that part of Svelte's reactive model, but something like a compiler that can figure out dependencies ahead of time and output a js class would be an entirely separate project from Svelte.",
          "createdAt": "2020-10-01T21:31:57Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjQ1NzM4NQ==",
          "body": "I've love to know what @Rich-Harris thinks, he's enjoyed my previous suggestions,\r\neg: https://github.com/ractivejs/ractive/issues/366\r\n(essentially the genesis of single file components used by both Vue and Svelte)\r\nHe might not be so quick on the 'close' button, just saying.\r\nDave\r\n\r\n",
          "createdAt": "2020-10-02T00:01:37Z",
          "author": { "login": "davidmoshal", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjQ3MDI1Mg==",
          "body": "Indeed, @davidmoshal played a somewhat pivotal role in frontend framework history! Though I do share @Conduitry's sentiment — I'm not totally sure what the suggestion is?\r\n\r\nIt's certainly possible to instantiate a Svelte component in a simulated DOM (Svelte's own tests use JSDOM), though there isn't much benefit to doing so. If the goal is to generate HTML in response to new state, it's better to use the `Component.render(props)` API which is much more efficient.",
          "createdAt": "2020-10-02T00:51:08Z",
          "author": { "login": "Rich-Harris", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjU4MDUzNQ==",
          "body": "@Rich-Harris thanks for the response, and apologies for me being somewhat vague on the suggestion. \r\n\r\nI'll dig into the working of your reactive machinery, and then present the use case, pretty sure you'll like it!\r\n\r\nQuestions: \r\nIf I wanted to understand just the reactive piece, separate from the DOM or any other browser specific components, where best to start in the codebase ? \r\n\r\nIs there a design doc explaining the architecture of just the reactivity piece?",
          "createdAt": "2020-10-02T07:46:13Z",
          "author": { "login": "davidmoshal", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjU5MTAyNQ==",
          "body": "@davidmoshal a good place to ask this stuff is in our dedicated contributors channel - https://discord.gg/vTrWhcQ\r\n\r\nI don't believe we have any sort of design docs, besides twitter and possibly the blog. Older github issues might also have some nuggets, but the file naming inside the project is pretty decent, so you should be able to find what you want with some ease.",
          "createdAt": "2020-10-02T08:11:09Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjkxNTAzOA==",
          "body": "Thx, joined",
          "createdAt": "2020-10-02T19:22:34Z",
          "author": { "login": "davidmoshal", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTI3OTAzMjQ=",
    "body": "**Describe the bug**\r\nOn HTML\r\n`<base-input id=\"1\" type=\"tel\" required placeholder=\"Enter a name\"></base-input>`\r\n\r\nOn BaseInput.svelte\r\n`<script>\r\n    export let type = \"text\";\r\n  export let value = \"\";\r\n  export let id;\r\n</script>\r\n<input {type} {value} {id} {...$$restProps} />`\r\n\r\nTotal: $$restProps will be empty.\r\nBUT!\r\nIf we use BaseInput in some component(App.svelte for example) then $$restProps will work",
    "closedAt": "2020-10-28T19:33:04Z",
    "createdAt": "2020-10-01T12:20:59Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDExOTExOA==",
          "body": "This should be fixed now in v3.29.5.",
          "createdAt": "2020-11-09T16:22:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTE3OTk0MTE=",
    "body": "REPL: https://svelte.dev/repl/5acc582e28f04d06aff5f3b861e7537f?version=3.29.0\r\n\r\nThe component is not compiling.",
    "closedAt": "2020-10-18T06:39:41Z",
    "createdAt": "2020-09-30T09:45:27Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMTQyMTczMw==",
          "body": "You've got an error in your sample (as in discord). But you are right. \r\n\r\nThe compiler hangs on ```<slot slot=\"...\" /> ```\r\n\r\nExample: https://svelte.dev/repl/29959e70103f4868a6525c0734934936?version=3.29.0",
          "createdAt": "2020-09-30T14:19:10Z",
          "author": { "login": "neoel", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjU0Nzg2OQ==",
          "body": "Replacing `<slot slot=\"test\" />` with `<slot slot=\"test\" name=\"test\" />` also results in the same error.",
          "createdAt": "2020-10-02T06:17:29Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzIyMTMzOQ==",
          "body": "Hi guys, I was reviewing this example in svelte's page [https://svelte.dev/tutorial/named-slots](https://svelte.dev/tutorial/named-slots) and following this issue, I think the correct behaviour is throw an error, right? \r\n\r\nMany thanks!",
          "createdAt": "2020-10-04T08:25:44Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzI0ODgzNw==",
          "body": "@damianpumar Nah, its a new feature https://github.com/sveltejs/svelte/issues/2079",
          "createdAt": "2020-10-04T12:31:41Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzQyMTAyNg==",
          "body": "> @damianpumar Nah, its a new feature #2079\r\n\r\nSomeone has already started to fix it? I can help to fix this issue ",
          "createdAt": "2020-10-05T06:15:41Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNDAxNzI1Nw==",
          "body": "I don't think anyone has started work on this @damianpumar .",
          "createdAt": "2020-10-06T04:17:10Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNDAzODU3MQ==",
          "body": "Cool, I will try to fix this, in case I need help I will let you know 👍 @TheComputerM",
          "createdAt": "2020-10-06T05:35:27Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzM0NTY2OQ==",
          "body": "Any updates?",
          "createdAt": "2020-10-12T21:05:48Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwODE5MDA1NA==",
          "body": "Good morning guys, Yesterday I talked with @tanhauhau he helped me to discover the problem behind this issue, I'm working on solve it as soon as possible.\r\nThe problem is like a stack overflow exception inside a compiler.\r\n\r\nMany and special thanks to @tanhauhau for him time!\r\n\r\nThanks! ",
          "createdAt": "2020-10-14T06:31:31Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTEyNDc5NA==",
          "body": "I think this should be implemented as a new feature, continued at https://github.com/sveltejs/svelte/issues/5535",
          "createdAt": "2020-10-18T06:39:41Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMTEyNzYxMg==",
          "body": "Hello @TheComputerM I fixed this issue, I will push the changes in a few minutes",
          "createdAt": "2020-10-18T07:14:22Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDY0NjgxMg==",
          "body": "This should be fixed in 3.29.3 - https://svelte.dev/repl/29959e70103f4868a6525c0734934936?version=3.29.3",
          "createdAt": "2020-10-22T17:31:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDY0ODUyMA==",
          "body": "Thank you very much @damianpumar !",
          "createdAt": "2020-10-22T17:34:45Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDY1Mjk5Ng==",
          "body": "> Thank you very much @damianpumar !\r\n\r\nMany thanks to all of you guys!, it was a pleasure.  👍 ",
          "createdAt": "2020-10-22T17:42:58Z",
          "author": { "login": "damianpumar", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTE1OTA0Mzc=",
    "body": "\r\n**Is your feature request related to a problem? Please describe.**\r\nLet's say we are making a button component so instead of doing\r\n```svelte\r\n<button class=\"button is-primary\">text</button>\r\n```\r\nin bulma. I could do\r\n```svelte\r\n<Button primary>text</Button>\r\n```\r\nWhen I start thinking about how to implement such a component I would want to use $$props to pass all props down (which is great), but there isn't a way (that I know of) to do this with events.\r\n\r\n**Describe the solution you'd like**\r\nI think something like\r\n```svelte\r\n<button on:*></button>\r\n```\r\nwould be nice to listen to all events and forward them so in my Button.svelte it would be (simplified)\r\n```svelte\r\n<button {...$$props} on:*><slot></slot></button>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nlist every event I could possibly need\r\n**How important is this feature to you?**\r\nIt isn't crucial but it would be nice.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n",
    "closedAt": "2020-09-30T03:37:37Z",
    "createdAt": "2020-09-30T02:47:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMTEzNzY4OQ==",
          "body": "Duplicate of #2837.",
          "createdAt": "2020-09-30T03:37:37Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTE0NjY2MTM=",
    "body": "**Describe the bug**\r\nComponents meant to be used in a list may use a wrapper class and `.class + .class` for styling.  Starting with 3.27, Svelte marks these styles as unused and they no longer function.\r\n\r\n**To Reproduce**\r\n3.26.0: https://svelte.dev/repl/0532852192094153b34cb3a40921f33c?version=3.26.0\r\n3.29.0: https://svelte.dev/repl/0532852192094153b34cb3a40921f33c?version=3.29.0\r\n\r\n**Expected behavior**\r\nThe old behaviour, as demonstrated in 3.26, is what I would expect.  The linked repl is missing a border between the two section in 3.29\r\n\r\n**Severity**\r\nComponents and styling would need to be rearranged to work around the bug.  The end result wouldn't be as clean either.\r\n",
    "closedAt": "2020-09-29T21:50:47Z",
    "createdAt": "2020-09-29T21:33:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMTAxMDY1Ng==",
          "body": "I don't think this would be considered a bug - it's just that `+` and `~` are now being scoped to this component. Scoped styles have always been scoped to _this instance_ of the component, not scoped to _all instances_ of the component. You don't need to do much rearranging of the component to account for this - just use the selector `section + :global(section)` instead. This will compile to the same CSS as `section + section` did before. The old behavior didn't scope the second `section` to this component either.",
          "createdAt": "2020-09-29T21:50:47Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTE0MTc5Nzc=",
    "body": "**Describe the bug**\r\nIf you create HTML fallbacks that exactly mirror your client app and use hydration to enhance elements with JS, the [dynamic components](https://svelte.dev/tutorial/svelte-component) (created like `<svelte:component this={} />`) get completely removed from the page and then added back in. This creates a cumulative layout shift resulting in what looks like a flash of content to the visitor.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nI can't demonstrate the hydration with the REPL, but you can see this with the default starter of our project: https://github.com/plentico/plenti. \r\n\r\n**Expected behavior**\r\nI expect the HTML elements that existed previously to persist and hydration should only attach event handlers. \r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version:\r\n  - Chrome Version 85.0.4183.102 (Official Build) (64-bit)\r\n  - Firefox Version 81.0 (64-bit)\r\n\r\n- Your operating system: Ubuntu Linux 18.04 LTS\r\n\r\n- Svelte version: 3.23.2\r\n\r\n- Whether your project uses Webpack or Rollup: Neither, we're hitting the Svelte compiler directly\r\n\r\n**Severity**\r\nWe use dynamic components to create all the different pages for the https://github.com/plentico/plenti framework. For us it's important, but I recognize that our project is rather small.\r\n\r\n**Additional context**\r\nPossibly related to the open issue for better hydration: https://github.com/sveltejs/svelte/issues/4308\r\n",
    "closedAt": "2020-09-29T20:18:20Z",
    "createdAt": "2020-09-29T20:16:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDk2MzAyOA==",
          "body": "Yeah, this is basically a duplicate of that issue. There's also problems with iframes refreshing, videos replaying, etc.",
          "createdAt": "2020-09-29T20:18:20Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDk2ODYyOA==",
          "body": "Ok sounds good, thanks for the quick reply @benmccann! \r\n\r\nOne thing I wanted to note was that I just created a test repo so folks could take a look without having to install plenti: https://github.com/jimafisk/svelte-dynamic-components. Interestingly I don't see the same problem there, which leads me to believe that maybe I have an issue with how I'm passing the component constructor values to `this` in my framework.",
          "createdAt": "2020-09-29T20:29:28Z",
          "author": { "login": "jimafisk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxMjUyNDg1MA==",
          "body": "Just wanted to drop a quick note that my specific issue turned out to be related to something I was doing incorrectly with clientside routing: https://github.com/lukeed/svelte-demo/issues/13. Without that specific problem, the dynamic component loads correctly as shown in this example repo: https://github.com/jimafisk/svelte-dynamic-components. Thanks!",
          "createdAt": "2020-10-20T01:04:49Z",
          "author": { "login": "jimafisk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTEwODAxMzE=",
    "body": "After the update to 3.28.0 this error breaks svelte:\r\nWin Chrome 85.0.4183.121/node.js 14.11.0:\r\n```Cannot read property 'toLowerCase' of null```\r\nFirefox 81.0 (64-Bit) reports ```TypeError: attr.name is null```\r\n\r\nAfter some tests in repl I found the source of this crash:\r\nThe svelte parser dosn't like  CSS-sibling selectors (+, ~) in combination with destructored variables...\r\n\r\nREPL:\r\nhttps://svelte.dev/repl/fe56269d373a462cb363a485ddc7aa09?version=3.28.0",
    "closedAt": "2020-09-29T15:06:28Z",
    "createdAt": "2020-09-29T12:48:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDk3MTk2OA==",
          "body": "This has been fixed in 3.29.0 - https://svelte.dev/repl/fe56269d373a462cb363a485ddc7aa09?version=3.29.0",
          "createdAt": "2020-09-29T20:36:18Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDk3NDIyOTY=",
    "body": "**Describe the bug**\r\nTrying to load a deployed Svelte app shows a blank screen on Safari with an error.\r\n\r\n**Logs**\r\nThis error gets logged in the console:\r\n```\r\nSyntaxError: Cannot declare a let variable twice: 't'.\t\t\t\t\t\t\t\t\t\t\t\tbundle.js:1\r\n```\r\n\r\n**To Reproduce**\r\n\r\n* Visit https://chartr.vercel.app on Safari\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Stacktraces**\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Safari 10.0 (Happens on newer versions as well.)\r\n\r\n- Your operating system: OS X 10.12\r\n\r\n- Svelte version: 3.0.0\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nI'd say this is of moderate severity for me because while so far I've only gotten a complaint from a single user, this could be blocking quite a lot of new users since the app just very recently launched.\r\n\r\n**Additional context**\r\nThis seems like some issue with Safari/WebKit because my app works fine on every other browser.\r\n",
    "closedAt": "2020-09-27T14:07:06Z",
    "createdAt": "2020-09-27T13:41:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTYzOTk2Mg==",
          "body": "Sounds like this Safari bug: https://bugs.webkit.org/show_bug.cgi?id=171041 - [Terser](https://github.com/terser/terser) has an option to work around it and use different names when minifying.",
          "createdAt": "2020-09-27T14:07:06Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDk1NTYyMDA=",
    "body": "**Describe the bug**\r\nChanging a variable in a template only works inside a block\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/d626d47a44e443d19338be6555d0b371?version=3.28.0\r\n\r\n**Expected behavior**\r\nThe variables are described in advance, and are not local to the #each and #key blocks - they were expected to change as the key variable does.\r\nExplain:\r\n- why does assignment inside the #each and #key blocks not work?\r\n- why increment the behavior of increment differs in the #each and #key blocks (in the #each block, it does not change the value of a variable (as assignment works locally), but in the #key block, it works globally)?\r\n\r\n**Information about your Svelte project:**\r\n- Chrome 85.0, FireFox 81.0\r\n- Windows 7 sp1, Windows 10\r\n- Svelte 3.28.0\r\n",
    "closedAt": "2020-09-29T16:20:07Z",
    "createdAt": "2020-09-26T15:21:16Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTUxMzQ5NA==",
          "body": "See example: https://prnt.sc/uochwz (or https://yadi.sk/i/OGsgHSxjD-OdFg)\r\n",
          "createdAt": "2020-09-26T15:56:38Z",
          "author": { "login": "iGureEV", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDgxNjQ1Ng==",
          "body": "See also: https://github.com/sveltejs/svelte/issues/3793#issuecomment-593155539\r\n\r\nMutating values in the template isn't really something we have a well-defined answer for how it should behave. It should probably be discouraged, but I don't know whether this is something that's used infrequently enough that we could make any change here and call it a fix as opposed to a breaking change. Whatever we decide, I'm closing this, as we don't want multiple places to have this discussion.",
          "createdAt": "2020-09-29T16:20:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDkxNzc0Mzg=",
    "body": "**Describe the bug**\r\nI just was looking to run npm install and get my project updated.  I have not used Typescript and have no intention of using Typescript in the foreseeable future on this project.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Open existing project folder, type npm update.\r\n2. Installation completes.  Svelte now at version 3.28.0\r\n3. Type npm run dev\r\n4. See error\r\n```\r\n[!] (plugin svelte) Error: [svelte-preprocess] Error transforming 'typescript'.\r\n\r\nMessage:\r\nCannot find module 'typescript'\r\nRequire stack:\r\n- /node_modules/svelte-preprocess/dist/transformers/typescript.js\r\n- /node_modules/svelte-preprocess/dist/modules/transformers.js\r\n- /node_modules/svelte-preprocess/dist/autoProcess.js\r\n- /node_modules/svelte-preprocess/dist/index.js\r\n- /rollup.config.js\r\n- /node_modules/rollup/dist/bin/rollup\r\n\r\nStack:\r\nError: Cannot find module 'typescript'\r\nRequire stack:\r\n- /node_modules/svelte-preprocess/dist/transformers/typescript.js\r\n- /node_modules/svelte-preprocess/dist/modules/transformers.js\r\n- /node_modules/svelte-preprocess/dist/autoProcess.js\r\n- /node_modules/svelte-preprocess/dist/index.js\r\n- /rollup.config.js\r\n- /node_modules/rollup/dist/bin/rollup\r\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:797:15)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:690:27)\r\n    at Module.require (internal/modules/cjs/loader.js:852:19)\r\n    at require (internal/modules/cjs/helpers.js:74:18)\r\n    at Object.<anonymous> (/node_modules/svelte-preprocess/dist/transformers/typescript.js:1:281)\r\n    at Module._compile (internal/modules/cjs/loader.js:959:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)\r\n    at Module.load (internal/modules/cjs/loader.js:815:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:727:14)\r\n    at Module.require (internal/modules/cjs/loader.js:852:19)\r\nnode_modules/sveltestrap/src/Icon.svelte\r\nError: [svelte-preprocess] Error transforming 'typescript'.\r\n```\r\n\r\n**Expected behavior**\r\nAs I was not using Typescript before I would expect it not to become a requirement now.\r\n\r\nOS: MacOS 10.15.6\r\n\r\n**Files**\r\nConfig Files before update where project compiles and runs fine:\r\n[Before.update.and.works.zip](https://github.com/sveltejs/svelte/files/5284566/Before.update.and.works.zip)\r\n\r\nConfig Files after update where project no longer runs:\r\n[After_update.zip](https://github.com/sveltejs/svelte/files/5284568/After_update.zip)\r\n\r\n\r\n\r\n",
    "closedAt": "2020-09-25T18:40:58Z",
    "createdAt": "2020-09-25T18:06:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTA3NTYyMQ==",
          "body": "Did you also change your version of `svelte-preprocess`? It's probably more likely that the issue would be there based on the stacktrace\r\n\r\nIt would be helpful to provide a full project to reproduce this. There's not quite enough detail here to reproduce it otherwise",
          "createdAt": "2020-09-25T18:08:58Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTA4MTc3Mg==",
          "body": "I ran npm update so it would have updated everything and you would be able to see the version changes in the provided zip files.  In terms of the project it's actually a production site that I'm just doing some updates on.\r\n\r\nI just checked the zip files myself:\r\n\"svelte-preprocess\": \"^3.7.1\"\r\nto:\r\n\"svelte-preprocess\": \"^3.9.12\"",
          "createdAt": "2020-09-25T18:21:35Z",
          "author": { "login": "crazedVic", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTA4MzI2Nw==",
          "body": "Can you try just changing the version of `svelte-preprocess`? Can you also try with `svelte-preprocess` 4.x and intermediate versions of `svelte-preprocess` like 3.8.x to help narrow it down?",
          "createdAt": "2020-09-25T18:24:55Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTA5MDY2OQ==",
          "body": "ok i actually removed everything from the project save App.svelte and main.js and was going to send it over.  Funny thing is it ran fine after the update so there's something weird going on in my project.  I'll take it from here.   Thanks for the speedy replies :)",
          "createdAt": "2020-09-25T18:40:58Z",
          "author": { "login": "crazedVic", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTA5NzMzMw==",
          "body": "Just for others who might stumble upon this, the issue is actually in the plugin svelte-strap, src/Icon.svelte, version 3.8.1.  This version of svelte-strap assumes Typescript is enabled.    I will log this bug on their repo.  Thanks again for your help.\r\n\r\nhttps://github.com/bestguy/sveltestrap/issues/189\r\n",
          "createdAt": "2020-09-25T18:54:44Z",
          "author": { "login": "crazedVic", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDg5NTg0NTg=",
    "body": "",
    "closedAt": "2020-09-25T13:53:14Z",
    "createdAt": "2020-09-25T13:53:01Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDg3MTU5MjE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThis is not really a problem, more like a nice-to-have feature\r\n\r\n**Describe the solution you'd like**\r\nAs described in the title, the chain of originating component(s) could be included in the `path` attribute of the `CustomEvent` sent by `dispatch(event, detail)`. This way, we could know which component sent the event.\r\n\r\n**How important is this feature to you?**\r\nWe could include the component in the `detail` section of the event, but this feels unnatural since only data should be passed with the detail.\r\n\r\nI did my homework and searched for other ways to accomplish this. The only solution I came up is the one described above, but since I don't know the internals there could be some other way to do this. If there is an easy way to do it, please let me know and feel free to close.\r\n\r\nTIA,\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-09-25T07:33:23Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODc4MzI0Mg==",
          "body": "Is this even possible?\r\n\r\nFrom the specs I cannot seem to find a way to set the path of a customEvent :( ",
          "createdAt": "2020-09-25T07:56:07Z",
          "author": { "login": "sourcegr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODc4NjI1NA==",
          "body": "only \r\n\r\n`Object.defineProperty(event, 'path', {writable: false, value: .......});`\r\n\r\nbut it feels unnatural (and might not work in all environments) :/ ",
          "createdAt": "2020-09-25T08:02:39Z",
          "author": { "login": "sourcegr", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDgzMDY0MjU=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI have run into cases where it would be nice to be able to pass arbitrary props to a slot, similar to the ability to spread the $$props global over a regular component.\r\n\r\nA specific use case was having a generic link wrapper that would wrap any arbitrary components, which would require passing through all properties without knowing what could be present. The consuming component would know what would be present, but not the wrapper itself. \r\n\r\nTrying to spread properties over a slot results in a `<slot> cannot have directives` error\r\n\r\n**Describe the solution you'd like**\r\nI would like to see a way to pass through arbitrary properties to slot components. The first idea that comes to mind is allowing the spreading of props over a slot.\r\n\r\n```svelte\r\n<slot {...$$props} />\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nAs an alternative I have written component specific wrappers rather than generic wrappers.\r\n\r\n**How important is this feature to you?**\r\nIt's more of a nicety than a necessity, but I have encountered situations where this would have been handy on more than one occasion.\r\n",
    "closedAt": "2020-11-24T22:47:04Z",
    "createdAt": "2020-09-24T16:20:44Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODYxNjk3Nw==",
          "body": "I have wished for this as well...",
          "createdAt": "2020-09-24T22:16:12Z",
          "author": { "login": "TylerRick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxODY5NjM1NA==",
          "body": "Similarly, it could be useful to have a catch-all for the `let:` directive\r\n```svelte\r\n<Component let:$$lets>\r\n    <slot {...$$lets} />\r\n</Component>\r\n```",
          "createdAt": "2020-10-29T11:36:44Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczMzI3OTQ5MQ==",
          "body": "Version 3.30.0 now lets you use spread props in slots: `<slot {...foo} />`",
          "createdAt": "2020-11-24T22:53:24Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDgwNTM2MTk=",
    "body": "https://svelte.dev/repl/a35c87076e0d4ca48aef925ce40ff5b7?version=3.26.0\r\n```svelte\r\n<script>\r\n\timport {foo} from \"./actions\"\r\n</script>\r\n\r\n<div use:foo />\r\n```\r\nIn cases where actions are not sourced from the component `ctx` such as in imports and global variables, `.call null,` can be safely stripped\r\n```diff\r\n- dispose = action_destroyer(foo_action = foo.call(null, div));\r\n+ dispose = action_destroyer(foo_action = foo(div));\r\n```",
    "closedAt": null,
    "createdAt": "2020-09-24T10:31:26Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODQ0NzA1Ng==",
          "body": "Why is the `.call(null, <el>` form necessary for local actions? I don't see any comments or commit messages describing it.\r\n\r\nhttps://github.com/sveltejs/svelte/commit/f45e2b70fdaad54e86fbdf725ed19176b8746262#diff-d1ebc375a97576f79267cd9014ba4ff7R36",
          "createdAt": "2020-09-24T16:19:19Z",
          "author": { "login": "tivac", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDc5NjcwMTk=",
    "body": "Using support for 'use:obj.method={..}' returns:\r\n- (!) Plugin svelte: 'test1.say' is not defined\r\n- (!) Plugin svelte: 'test2.say' is not defined\r\n\r\n```\r\n<script>\r\n  class Test {\r\n    say(node, msg) {\r\n      node.innerHTML = 'class: ' + msg;\r\n    };\r\n  }\r\n  const test2 = new Test();\r\n\r\n  const test1 = {\r\n    say(node, msg) {\r\n      node.innerHTML = 'obj: ' + msg;\r\n    }\r\n  };\r\n\r\n  function test(node, msg) {\r\n    node.innerHTML = msg;\r\n  };\r\n  let hi = 'Hi';\r\n</script>\r\n\r\n<div use:test={hi}></div>\r\n<!-- svelte-ignore missing-declaration -->\r\n<div use:test1.say={hi}></div>\r\n<!-- svelte-ignore missing-declaration -->\r\n<div use:test2.say={hi}></div> -->\r\n```\r\n",
    "closedAt": "2020-09-24T13:48:27Z",
    "createdAt": "2020-09-24T08:27:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODU2NzQzNA==",
          "body": "This should be fixed now in 3.27.0.",
          "createdAt": "2020-09-24T20:19:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDgyODEwNTg=",
    "body": "This is mostly in regards to component libraries, particularly [svelte-materialify](https://github.com/TheComputerM/svelte-materialify). If I have to use my library with sapper, then I have to go through the hassle of installing all my dependencies such as svelte-preprocess, sass, postcss (see [advanced install](https://github.com/TheComputerM/svelte-materialify)).\r\n\r\nIf someone who wants to use svelte-materialify with sapper he has to install all the dependencies and use the source files, it heavily impacts the development speed (compiling each component repeatedly). The current website of svelte materialify is made with sapper and a single reload takes about 15-30 seconds.\r\n\r\nI propose that we add a `svelte:ssr` field in the package.json similar to `svelte` where the files compiled using `generate: 'ssr'` are located. This is a massive improvement to component authors and users who do not have to go through much hassle to setup their project.\r\n",
    "closedAt": "2020-09-24T16:08:38Z",
    "createdAt": "2020-09-24T06:50:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODE1MjQ5Ng==",
          "body": "I'd like to propose the addition of a `svelte:ssr` to package.json for ssr compiled modules.\r\n\r\nThis way we have:\r\n- `svelte` for `generate: 'dom'`\r\n- `svelte:ssr` for `generate: 'ssr'`\r\n\r\nand sapper takes care of the client and server modules.",
          "createdAt": "2020-09-24T06:52:24Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODE1NDIxMA==",
          "body": "Just to be clear:\r\nIf I do: `import { Button } from 'svelte-materialify';`\r\n\r\nThen sapper does:\r\n`import { Button } from 'svelte-materialify/dist/dom/index.js';` for client\r\nand\r\n`import { Button } from 'svelte-materialify/dist/ssr/index.js';` for server\r\n\r\nWith the package.json being:\r\n```json\r\n\"svelte\": \"dist/dom/index.js\",\r\n\"svelte:ssr\": \"dist/ssr/index.js\",\r\n```",
          "createdAt": "2020-09-24T06:56:15Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODQyNzk4Nw==",
          "body": "See https://github.com/sveltejs/svelte/issues/604 for some discussion of the reason it's currently done this way",
          "createdAt": "2020-09-24T15:45:10Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODQ0MTE1NQ==",
          "body": "This is a big change and far-reaching, and, from the way part of it's being worded, sounds like a breaking one. This should be opened as an [RFC](https://github.com/sveltejs/rfcs).",
          "createdAt": "2020-09-24T16:08:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDc4NTgxNDc=",
    "body": "How does Svelte Compare to solidJS in terms of\r\n- bundle sizes\r\n- scaling for large sized pages\r\n- performance\r\n",
    "closedAt": "2020-09-29T16:23:35Z",
    "createdAt": "2020-09-24T05:09:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODI1NTI4OQ==",
          "body": "Checkout this: https://github.com/krausest/js-framework-benchmark",
          "createdAt": "2020-09-24T10:20:05Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDgxODQwMw==",
          "body": "There are some discussions with the author of SolidjS in #3898. This isn't really a question with a simple answer, and isn't the sort of thing issues should be being opened for.",
          "createdAt": "2020-09-29T16:23:35Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDc1NTA5NzE=",
    "body": "**Describe the bug**\r\nPlease look at the repl code to see what's going on.\r\nI'm trying to destructure two properties into stores which fails for the second value. It works for the first though.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/ee374115fae74168916e62549aa751a9?version=3.26.0\r\n\r\n**Expected behavior**\r\nDestructuring works with as many peoperties as necessary\r\n\r\n**Information about your Svelte project:**\r\nThis happens in FF80 and Electron 10\r\n\r\n- OS X \r\n\r\n- 3.26\r\n- Rollup\r\n\r\n**Severity**\r\nI could work around this issue\r\n\r\n**Additional context**\r\n3.25.1 works as expected\r\n",
    "closedAt": "2020-09-24T18:55:55Z",
    "createdAt": "2020-09-23T17:31:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Nzc3MzcyNg==",
          "body": "Looks like the values are in there, just not destructured - https://svelte.dev/repl/17214fd2d84c4a44a6322f790886ff4f?version=3.26.0\r\n\r\nI feel like this relates to https://github.com/sveltejs/svelte/issues/5437 and https://github.com/sveltejs/svelte/issues/5412",
          "createdAt": "2020-09-23T17:44:24Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODU2NzA1NQ==",
          "body": "This is fixed in 3.27.0 - https://svelte.dev/repl/ee374115fae74168916e62549aa751a9?version=3.27.0",
          "createdAt": "2020-09-24T20:18:20Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5OTQ1NDU4Nw==",
          "body": "Thank you!",
          "createdAt": "2020-09-26T08:02:31Z",
          "author": { "login": "hmt", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDc0Mjc3MDU=",
    "body": "**Describe the bug**\r\nUsing `bind:clientHeight` on an element with `z-index` prevents that element's contents from being scrolled on iOS 14. On previous versions of iOS and on other OS's, this bug does not appear.\r\n\r\nThe iframe added by `add_resize_listener` specifies a `z-index` that is 1 less than the element's `z-index`, as well as `pointer-events: none`. Perhaps this is connected...\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nI've made a small REPL with a simplified version of the environment this occurred in for us at [Playpilot](https://www.playpilot.com/us/) (in our top navigation): https://svelte.dev/repl/695f80e7948e4575b6e1f0fd536716fb?version=3.26.0\r\n\r\n**Expected behavior**\r\nThe `z-index` should not make a difference to whether you can scroll or not (as on other platforms/OS versions).\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Safari, Chrome, Firefox (tested various browsers)\r\n\r\n- Your operating system: iOS 14 (it works fine for previous versions of iOS, as well as other OS's)\r\n\r\n- Svelte version: 3.26.0\r\n\r\n- Bundler: Rollup\r\n\r\n**Severity**\r\nJust a bit annoying. It was quite a mystery in the beginning, but once we found the issue, solving it was relatively simple: we just wrapped the content of the element in a div with `position: relative;` plus the same `z-index` as the element itself and it works fine. Of course we would like to remove this once the bug is fixed, but for now this is not pressing.\r\n",
    "closedAt": "2021-01-02T02:06:33Z",
    "createdAt": "2020-09-23T14:41:25Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODQ3ODUzNw==",
          "body": "Just ran into this same exact issue as well...\r\n\r\nFor some reason, in my specific case, this is also blocking scroll in Safari 14 on macOS Catalina.\r\n\r\nThe workaround I'm considering is to use an empty div inside the resized element to measure width.\r\n\r\nSimple enough to work around I suppose, but pretty unexpected behavior...\r\n\r\n(Also, this looks like a duplicate of #5241...)",
          "createdAt": "2020-12-04T00:51:49Z",
          "author": { "login": "nick-vincent", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODQ4NTc0OA==",
          "body": "I'm confused because the other issue says that it affects iOS12 and below, and this issue says iOS 14, and works fine below that. Not sure how this would be the same issue?",
          "createdAt": "2020-12-04T01:11:44Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODQ5NDYzNw==",
          "body": "@antony Yeah, my apologies, I'm a bit confused as well... \r\n\r\nBoth issues appear to be caused by to the iframe's z-index layering above sibling elements, and both issues involve Safari.\r\n\r\nIn my specific case, I'm observing the behavior on macOS Catalina in Safari 14 as well as the iPhone simulator in Xcode 12.2.\r\n\r\nI've confirmed that setting the z-index of the iframe to -1 (as suggested in #5241) does fix this problem.\r\n\r\nI'm having trouble replicating the behavior in the REPL however... Hope to have more information soon.",
          "createdAt": "2020-12-04T01:32:03Z",
          "author": { "login": "nick-vincent", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODUyNTUwNA==",
          "body": "FWIW, It does appear that the iframe `z-index` indeed used to be set to `-1` before [this diff](https://github.com/sveltejs/svelte/pull/2989/files#diff-7ad300a4efc821b2576200a7bfc99205d558792b81c037fbc20f9236f8b6f1bbL243)...\r\n\r\nNot sure why it changed there, do you have context around that @mrkishi / @Conduitry?\r\n",
          "createdAt": "2020-12-04T02:45:23Z",
          "author": { "login": "nick-vincent", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODU4MDc0MQ==",
          "body": "Okay, after much frustration, I've figured out how to repro this.\r\n\r\nSteps I took to verify:\r\n\r\n- Download @jhwheeler's original [REPL example](https://svelte.dev/repl/695f80e7948e4575b6e1f0fd536716fb?version=3.26.0) posted above and run it locally.\r\n- Load the app in Safari and make the browser viewport skinnier than the nav list. (Dock the web inspector to do this.)\r\n- **Using the trackpad only**, try to scroll the list horizontally - it won't let you and appear to be \"stuck\".\r\n- In the web inspector, change the `z-index` of the `<iframe>` from `4` to `-1`.\r\n- Try to scroll the list horizontally again **using the trackpad only** - now it works!\r\n\r\n![ezgif-6-aa0599bcf9bc](https://user-images.githubusercontent.com/31055081/101125889-29193980-35af-11eb-9f75-8ab86aead056.gif)\r\n\r\nAgain, I'm observing this behavior in Safari 14.0.1 on macOS Catalina 10.15.7. What's even stranger is that, if you have \"Show scroll bars: Always\" in System Preferences, you can actually still use the scrollbar to scroll, but not the trackpad.\r\n\r\nI believe this issue at its core is the same issue that @crotru identified in #5241. As he put it:\r\n\r\n> This seems weird to have a correlation between parent and children z-indexes.\r\n> In the end we have something like this :\r\n> \r\n> holder : `z-index: 3`\r\n> |- element : `z-index: auto`\r\n> |- element : `z-index: auto`\r\n> |- iframe : `z-index: 2`\r\n> \r\n> No matter what z-index is on the holder, a positive z-index on the iframe will always be above `auto` ones\r\n\r\nSo the original `z-index: -1` solution prevented the invisible iframe from overlaying everything inside the holder element.",
          "createdAt": "2020-12-04T05:50:00Z",
          "author": { "login": "nick-vincent", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODczMzg0Mw==",
          "body": "Same issue indeed that #5241 indeed.\r\n\r\nTo put it in another words :\r\n\r\n---\r\n\r\niframe can't take `pointer-events: none` statement in safari (I guess for security reason)\r\nSo when the iframe is on top of any content, iframe receives the scroll event, content does not. (scrollbar you see with \"Show scroll bars: always\" are the ones of the content, so they indeed work).\r\n\r\n---\r\n\r\nZ-index are scoped to their dom-level.\r\nie. if a parent has its `z-index` (and its `position`) set, there is absolutely no correlation between parents and child z-indexes : \r\n\r\n\r\nso in this case\r\n  - **parent1** : auto\r\n  - |- **children** : z-index: 100\r\n  - **parent2** : z-index: 2\r\n\r\n**children** will be over **parent2**\r\n\r\nbut in this case :\r\n  - **parent1** : z-index: 1\r\n  - |- **children** : z-index: 100\r\n  - **parent2** : z-index: 2\r\n\r\n**parent2** will be above **children**\r\n\r\nSo having the Iframe (which is a children) to have a z-index value of [parent z-index minus 1] doesn't do anything good 🙂  \r\n\r\n--- \r\n\r\n`z-index: -1` on the other hand forces the children to display below the first child. \r\nSo that's why it worked fine before [the diff](https://github.com/sveltejs/svelte/pull/2989/files#diff-7ad300a4efc821b2576200a7bfc99205d558792b81c037fbc20f9236f8b6f1bbL243)\r\n(also if it gets set back as this, `pointer-events` statement can be removed)\r\n\r\n",
          "createdAt": "2020-12-04T11:30:28Z",
          "author": { "login": "crotru", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1MzQxNzM4MA==",
          "body": "I don't have an iOS device to test this on, but this should be fixed now in 3.31.1, which includes @nick-vincent's `z-index: -1` fix - thanks!",
          "createdAt": "2021-01-02T02:06:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDcxNzkwMzY=",
    "body": "When i import typescript scripts from outside the svelte project directory rollup does not compile and throws an error.\r\nI added the following options to `tsconfig.json`:\r\n```\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@foo/scripts/*\": [\"../scripts/*\"]\r\n    }\r\n  ```\r\n#### First error\r\nIn `App.svelte` I tried to import the script in one of the following ways:\r\nimport { test } from '@foo/scripts/index';` or `import { id } from '@foo/scripts/test';`\r\n\r\n#### Second error\r\nWhen trying `import { test } from '@foo/scripts'` rollup compiles but the browser throws an error.\r\n\r\n**Logs**\r\n#### First error\r\n[!] Error: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n../scripts/test.ts (1:18)\r\n1: export const id = <T>(x: T): T => x;\r\nError: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n    at error (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:5210:30)\r\n    at Module.error (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:9725:16)\r\n    at tryParse (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:9639:23)\r\n    at Module.setSource (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:10036:30)\r\n    at ModuleLoader.addModuleSource (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:18178:20)\r\n    at ModuleLoader.fetchModule (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:18232:9)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchStaticDependencies (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:18256:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (/home/florian/sample-svelte-typescript/svelte/node_modules/rollup/dist/shared/rollup.js:18233:9)\r\n\r\n#### Second error\r\nFor the second error I get the following message in my browser: `main.ts:8 Uncaught ReferenceError: scripts is not defined\r\n    at main.ts:8`\r\n\r\n**To Reproduce**\r\nI set up a repository with a clean install of svelte 3.26.0 and reverted to Typescript wit the `setupTypeScript.js` script. I did not touch rollup.config.js in any way.\r\n\r\nhttps://github.com/floratmin/svelte-typescript-paths-example\r\n\r\n**Expected behavior**\r\nScripts should be executed.\r\n\r\n**Information about your Svelte project:**\r\nSvelte 3.26.0\r\nUbuntu 18.04.02 LTS\r\n\r\n**Severity**\r\nAnother solution would be to set up folder structure with symbolic links. But i would definitely prefer this approach.\r\n\r\n",
    "closedAt": "2020-09-23T10:38:27Z",
    "createdAt": "2020-09-23T08:57:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NzI4MTM1Mw==",
          "body": "This is a support question. Please ask such questions on StackOverflow. [In your case there is already such a question](https://stackoverflow.com/questions/63899629/how-to-import-typescript-file-from-outside-of-the-project-folder ) (or at least it seems very related to me), but it is lacking details to reproduce it. I suggest you add your details (the link to the repo for reproduction essentially) to it. There's also [this question](https://stackoverflow.com/questions/60010702/reference-typescript-project-outside-of-the-source-folder) on StackOverflow which seems related.",
          "createdAt": "2020-09-23T10:38:27Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NzkzNTE2Ng==",
          "body": "I found a partial solution to this problem with putting the whole installation one level up. The whole project becomes a monorepo. \r\n\r\nI changed the repo show the solution with a clean install at https://github.com/floratmin/svelte-typescript-paths-example.",
          "createdAt": "2020-09-23T19:48:17Z",
          "author": { "login": "floratmin", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDcwODgwODc=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIt is recommended to ship source code (*.svelte) to npm according to [this documentation](https://github.com/sveltejs/rollup-plugin-svelte#pkgsvelte), and the rollup plugin would take these source code and recompile them. However, preprocessors would cause some problems in this case:\r\n\r\n1. It requires users to add the same preprocessors to their app's rollup config.\r\n2. These preprocessors' config should also be the same as the library to keep consistant.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nVery thankful to kaisermann, the solution is quite clearly explained in https://github.com/sveltejs/svelte-preprocess/issues/255#issuecomment-696722279, and I'll do some digging later.\r\n\r\nJust wondering If there is other best practice I missed.\r\n\r\n**How important is this feature to you?**\r\n\r\nWe encountered this problem when developing [ByteMD](https://github.com/bytedance/bytemd), which is a hackable Markdown editor built with Svelte.\r\n",
    "closedAt": "2020-09-23T17:49:21Z",
    "createdAt": "2020-09-23T06:33:20Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NzE3ODc0OA==",
          "body": "Related https://github.com/sveltejs/component-template/pull/31 ",
          "createdAt": "2020-09-23T07:10:40Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Nzc3NjA0NQ==",
          "body": "I'm not sure how this can be avoided - you're shipping uncompiled code which requires a preprocessor to compile. This will need some thinking about.",
          "createdAt": "2020-09-23T17:45:52Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Nzc4MTU3NA==",
          "body": "Yeah, this is what https://github.com/sveltejs/component-template/issues/8 was opened for. The ideal solution is going to involve shipping preprocessed but uncompiled Svelte components, so that people don't need to use the same preprocessors as you.",
          "createdAt": "2020-09-23T17:49:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDcwNDU1MTE=",
    "body": "https://svelte.dev/repl/b1ed6b7fc7cf47ce9fc75f0555bcd799?version=3.26.0\r\n```svelte\r\n<script>\r\n\texport let id = 0;\r\n</script>\r\n{#each [\"foo\", \"bar\"] as key(id + key)}\r\n\t{Math.random()}\r\n{/each}\r\n```\r\nExpected a different result on every `id` change",
    "closedAt": "2020-09-24T19:20:18Z",
    "createdAt": "2020-09-23T04:51:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODU2Njg4Mw==",
          "body": "This is fixed in 3.27.0 - https://svelte.dev/repl/b1ed6b7fc7cf47ce9fc75f0555bcd799?version=3.27.0",
          "createdAt": "2020-09-24T20:18:00Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDY4ODAxMTY=",
    "body": "I'd like to suggest that the following article is updated to include an instruction to install git.\r\n\r\n- [https://svelte.dev/blog/svelte-for-new-developers](https://svelte.dev/blog/svelte-for-new-developers) \r\n\r\nWithout git installed `npx degit sveltejs/template my-svelte-project` results in \r\n```\r\nnpx: installed 1 in 0.839s\r\n! could not fetch remote https://github.com/sveltejs/template\r\n! could not find commit hash for master\r\n```\r\nFrom a newbie perspective it isn't immediately obvious that git is required.\r\n\r\n**Replace:**\r\n(Eventually you'll probably have to learn , which most programmers use to manage their projects. But you don't need to worry about it just yet.)\r\n\r\n**With:**\r\nYou will need to have git installed in order to use degit.\r\n",
    "closedAt": "2021-01-28T21:46:58Z",
    "createdAt": "2020-09-23T01:53:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTIyMDk0Nw==",
          "body": "@michaelphipps happy to accept a PR for this if you are willing",
          "createdAt": "2020-10-15T11:29:12Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNDg4MDQxNw==",
          "body": "@antony I'm nudging you because I am not sure what the next step is now that I've submitted the PR.",
          "createdAt": "2020-10-23T03:10:50Z",
          "author": { "login": "michaelphipps", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2OTM2MTA1NQ==",
          "body": "@antony looks like this issue can be closed :)",
          "createdAt": "2021-01-28T20:23:21Z",
          "author": { "login": "taismassaro", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDY4MDA5MTE=",
    "body": "Hello, I saw you're missing a description on who does what so I would suggest adding a GOVERNANCE.md file\r\n\r\nYou can read more about the file here http://opensource.guide/leadership-and-governance/ and view and example one here https://github.com/nodejs/node/blob/master/GOVERNANCE.md\r\n\r\n",
    "closedAt": "2020-09-23T19:58:46Z",
    "createdAt": "2020-09-23T00:49:06Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Nzk0MDIwMw==",
          "body": "People's roles are fairly well defined internally to the org, but having somewhere that officially consolidates in one place and publishes this information seems to be asking for those people to be getting pinged on GitHub even more than they already are.\r\n\r\nThe Svelte maintainers also all have other, real, full-time jobs, and the amount of ceremony and overhead described in, for example, that Node governance document is something we absolutely do not have the time for.",
          "createdAt": "2020-09-23T19:58:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Nzk4ODgyOQ==",
          "body": "You could have at least tried bro.",
          "createdAt": "2020-09-23T21:44:24Z",
          "author": { "login": "7yearold", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDYyMjcyMzc=",
    "body": "Honestly I don't know what Svelte is doing exactly, but I tried and this bug only happens in 3.25.1 and not in 3.25.0.\r\n\r\nI can only tell you what I see. Normally in my sapper app I use `$session` store which at the moment always only consists of 2 items: `{ csrfToken: \"a random string...\", user: { /* a user object */ }}`.\r\n\r\nNow for some reason, in version 3.25.1, `$session` gets messed up and `csrfToken` is gone and `user` is now the root object. It's like svelte did `$session = $session.user` somewhere...\r\n\r\nAnd it must have happened somewhere [between these 2 commits](https://github.com/sveltejs/svelte/compare/v3.25.0...v3.25.1).",
    "closedAt": "2020-09-22T12:08:23Z",
    "createdAt": "2020-09-22T09:40:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjYyNTE4Ng==",
          "body": "It feels it's similar to https://github.com/sveltejs/svelte/issues/5437",
          "createdAt": "2020-09-22T10:01:51Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjY2Njg3Mg==",
          "body": "Probably yes.",
          "createdAt": "2020-09-22T11:40:09Z",
          "author": { "login": "Evertt", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjY3OTIxOA==",
          "body": "Yes, duplicate of #5412, already fixed on master, will be fixed in the next version of Svelte",
          "createdAt": "2020-09-22T12:08:23Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDYxNTMzMjY=",
    "body": "[REPL](https://svelte.dev/repl/f289ef24129f475a906fdd22c0dc97e6?version=3.24.1)\r\nOpen Devtools:\r\n```\r\nVM77:45 [Violation] Added non-passive event listener to a scroll-blocking 'touchmove' event. Consider marking event handler as 'passive' to make the page more responsive. See https://www.chromestatus.com/feature/5745543795965952\r\n```\r\n\r\nAs you can see the touchmove event is not marked as passive.",
    "closedAt": "2020-09-24T19:54:55Z",
    "createdAt": "2020-09-22T07:44:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjYxMzQ0OA==",
          "body": "Related: #2068",
          "createdAt": "2020-09-22T09:35:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NzA1OTQ1OQ==",
          "body": "@TheComputerM  if you want it to be passive,\r\n\r\n```svelte\r\n<h1 on:touchstart|passive={touchmove}>Hello {name}!</h1>\r\n```",
          "createdAt": "2020-09-23T00:58:32Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDYxMDMwMDI=",
    "body": "**Describe the bug**\r\nWhen assigning a value to a store whose value is an object, the whole store value now gets overwritten beginning from 3.25 and above. Working in 3.24. See more details with example in \"to reproduce\" below. Also broken in 3.26.\r\n\r\n**To Reproduce**\r\nSee below repl links, same code but in version 3.24 and 3.25.\r\n\r\nThe example creates a store which is an object containing two strings. First it logs the store's value to the console.\r\nThen it overwrites the value of one of the strings in the object, and logs the store's value to the console again.\r\nIn version 3.24, the object got updated correctly. In version 3.25, the entire object got overwritten.\r\n\r\nhttps://svelte.dev/repl/d9a6917ded77445d97af5ff826890e93?version=3.24.1\r\nhttps://svelte.dev/repl/d9a6917ded77445d97af5ff826890e93?version=3.25.1\r\n\r\nVersion 3.24 gives the following output - string2 has been overwritten which is correct.\r\n▶\r\n Object { string1: \"abc\" ,string2: \"\" }\r\n▶\r\n Object { string1: \"abc\" ,string2: \"def\" }\r\n\r\nVersion 3.25 gives the following output - instead of updating the value of string2 in the object, the entire object got overwritten with the string.\r\n\r\n▶\r\n Object { string1: \"abc\" ,string2: \"\" }\r\n\"def\"\r\n\r\n**Expected behavior**\r\nExpected behaviour is as per the result using Svelte version 3.24.\r\n\r\n**Severity**\r\nBlocking an upgrade to newer Svelte version. In my application I'm using stores for accessing global data, e.g. API Urls, tokens, user preferences etc used throughout the application. This change breaks the whole app.\r\n",
    "closedAt": "2020-09-22T07:08:24Z",
    "createdAt": "2020-09-22T06:06:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjU0ODAwNg==",
          "body": "Duplicate of #5412 - this is already fixed on master and will be released soon.",
          "createdAt": "2020-09-22T07:08:24Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDU1ODU3NDU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nTransitions always get triggered when a div is added to the DOM or removed from it regardless of the grandparent of the div being removed or the direct parent of a div being removed or the div itself being removed. I need to write a lot of extra code to prevent this behaviour because in my experience, 90% of the time we want the transition to be triggered only if the div that has the transition is being removed or added, not its parents or grandparents. This behaviour causes problems for page-like transitions in which parents of the div also has transitions but the transitions on the parent have to wait for the transitions on the child.\r\n\r\n**Describe the solution you'd like**\r\nPlease provide an option (if possible) to scope transitions so that they can get triggered only when the exact element that has transition is being removed or added to the DOM (or the exact element that has the transition is wrapped with an if block, not its parent or grandparents).\r\n\r\n**Describe alternatives you've considered**\r\nI can't think of any alternatives other than manually making the transition duration of the child div 0 when its parent elements are being transitioned. But this is also problematic because it sometimes causes glitches in the child div even though it has a transition time of 0.\r\n \r\n**How important is this feature to you?**\r\nFor me personally it is quite important because most of the time it makes transitions unusable for me if the parent or grandparents of the div that are being transitioned has any kind transitions themselves.\r\n",
    "closedAt": "2020-09-21T13:16:46Z",
    "createdAt": "2020-09-21T13:12:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjEwNzY1Nw==",
          "body": "You are looking for the `|local` [modifier of transitions](https://svelte.dev/docs#transition_fn) which makes transitions local only to their immediate parent.",
          "createdAt": "2020-09-21T13:16:46Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjExMjgyNA==",
          "body": "Thanks for the fast response. Looks like I didn't search the documentation thoroughly.",
          "createdAt": "2020-09-21T13:25:05Z",
          "author": { "login": "yekta", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDUwMTA2OTI=",
    "body": "[Check out this REPL.](https://svelte.dev/repl/db1d51df436343498c2f24b11518fb74?version=3.25.1)\r\n\r\nEverything is working as expected right now. You see a counter counting up. To trigger the bug you need to change some code. Look at `store.js` and replace this code:\r\n\r\n```javascript\r\n\tthen(fn) {\r\n\t\tsetTimeout(\r\n\t\t\t() => this.subscribe(v => fn(v))(),\r\n\t\t\t1000\r\n\t\t)\r\n\t}\r\n```\r\n\r\nWith this code:\r\n\r\n```javascript\r\n\tthen(fn) {\r\n\t\tthis.subscribe(v => fn(v))()\r\n\t}\r\n```\r\n\r\nSuddenly you'll get an error:\r\n\r\n    Cannot read property 'parentNode' of undefined\r\n\r\nAll because you removed a timeout. That shouldn't happen, right?",
    "closedAt": "2020-09-20T08:46:42Z",
    "createdAt": "2020-09-19T22:52:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NTc0NzkyNA==",
          "body": "I you remove the setTimeout, your promise is not anymore a valid Promise: then should always execute asynchronously.\r\n",
          "createdAt": "2020-09-20T05:33:42Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NTc2MTgyNw==",
          "body": "Yes you're right. I read that too after I opened this issue. I'll close this issue then.",
          "createdAt": "2020-09-20T08:46:09Z",
          "author": { "login": "Evertt", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDQ1ODE4MTQ=",
    "body": "Are there plans to implement a possibility to use a function in an object as an _action_ function?\r\n\r\nAt the moment, if I have a function in an object or in an IIFE module(Revealing module, etc.) that I want to use as an action function, I need to put it in a separate variable:\r\n\r\nhttps://svelte.dev/repl/54dfee99c74a43bda2a74146b3eb685f?version=3.25.1\r\n\r\nIt would be nice to have the possibility to use function which can be located not only on the first nesting level in `use:`\r\n\r\nFor example, in case of an object, the syntax can be like this:\r\n\r\n```svelte\r\n<script>\r\n  let object = {\r\n    func: function(node) {\r\n      console.log(node.textContent\r\n    }\r\n  }\r\n</script>\r\n\r\n<div use:object:func>\r\n  Text\r\n</div>\r\n```",
    "closedAt": "2020-09-18T18:54:21Z",
    "createdAt": "2020-09-18T18:44:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NTAzMjA3OQ==",
          "body": "Duplicate of #3935 - This is coming in the next version of Svelte with the syntax `use:obj.method`",
          "createdAt": "2020-09-18T18:54:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NTAzMjMyOA==",
          "body": "Also duplicate of https://github.com/sveltejs/svelte/issues/5395",
          "createdAt": "2020-09-18T18:54:51Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NTAzMjQ0OA==",
          "body": "Just now I noticed",
          "createdAt": "2020-09-18T18:55:06Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDQwNjI0NzA=",
    "body": "**Describe the bug**\r\nIn modern JavaScript, `import.meta.xxx` is valid syntax. It parses inside a `<script>`, but not inside markup.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/9630de41957a4c80a4fce264360a6bc7?version=3.25.1\r\n\r\n**Severity**\r\nNot urgent right now, but likely to become a blocker in the near future.",
    "closedAt": "2020-09-18T16:09:45Z",
    "createdAt": "2020-09-18T03:54:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjcwNTIxNg==",
          "body": "This works now in 3.26.0 - https://svelte.dev/repl/9630de41957a4c80a4fce264360a6bc7?version=3.26.0",
          "createdAt": "2020-09-22T13:00:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDM5NzYxNDU=",
    "body": "**Describe the bug**\r\nTrying to build a Svelte Accordion component, which takes advantage of the `open` html attribute on the `<details>` element.\r\n\r\nDuring compile time, the CSS selector `details[open]>summary` gets thrown away because it is not being used in the DOM. However, the design pattern for this code is such that on page load, the open attribute likely is not present, and will be applied once the user starts to interact with the accordion.\r\n\r\n**To Reproduce**\r\nSee this REPL, in particular, pay attention to the CSS output. The CSS rule is not included:\r\n\r\nhttps://svelte.dev/repl/5ee534ac293043c6a288db0946b46118?version=3.25.1\r\n\r\nPrepending the CSS rule with `:global(...)` fixes the issue - but I am hoping to scope all CSS within the component if possible.\r\n\r\n**Expected behavior**\r\nWhen opening the `<details>` element, the color should change to pink as per my CSS rule I specified. See this codepen for the desired behvaiour:\r\n\r\nhttps://codepen.io/amar-gill/pen/LYNJXdB\r\n\r\n**Information about your Svelte project:**\r\n- Browser: Firefox 80.0.1\r\n\r\n- OS: MacOS Catalina 10.15.6\r\n\r\n- Svelte version: 3.25.1\r\n\r\n- Bundler: Rollup (I believe? It's still only in REPL)\r\n\r\n**Severity**\r\nlow to medium.\r\n\r\n",
    "closedAt": "2020-09-18T17:53:19Z",
    "createdAt": "2020-09-17T23:36:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDU1ODc4Mw==",
          "body": "Yeah I suppose it would make sense to have special handling for this case, where we know browsers might be adding and removing `open` attributes to `<details>` elements.",
          "createdAt": "2020-09-17T23:46:04Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDU3NTEyMw==",
          "body": "Would have been fine if there was a `:open` pseudo-selector to use.",
          "createdAt": "2020-09-18T00:31:27Z",
          "author": { "login": "Amar-Gill", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjcwNTAyNA==",
          "body": "In 3.26.0, `[open]` will now always be seen as a potential match for `<details>` elements for the purposes of CSS scoping.",
          "createdAt": "2020-09-22T13:00:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDM4ODgzMTM=",
    "body": "I'm having a growing list which I display reversed, meaning, newest entries on top.\r\nI'd now like to animate every new item. By new item I mean literally the item added to list last (via `push()`).\r\nHowever - when now displaying the (on-the-fly) reversed list with transitions enabled - the last element of the /reversed/ list, which maps to the /oldest/ entry, is being shown animated.\r\n\r\nExample: https://svelte.dev/repl/daddae532d7b41c39e55fa031687de42?version=3.25.1\r\n\r\nThe example shows my issue with a dictionary/object, as when writing the example I hit another issue, which seems to screw with the order the array for (to me) non-obvious reasons: https://svelte.dev/repl/a9b31c40627e4530b1f5810a18fd12bb?version=3.25.1\r\nIs this expected behaviour?",
    "closedAt": "2020-09-17T20:39:40Z",
    "createdAt": "2020-09-17T20:28:44Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDQ4Nzc1Mg==",
          "body": "You need to use a keyed each.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-09-17T20:39:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDUwMDk2NA==",
          "body": "> You need to use a keyed each.\r\nthanks!\r\n\r\n> GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our Discord chat room.\r\n\r\nWhy having a category \"Questions and help, If you think you need help with something related to Svelte\" then?\r\n",
          "createdAt": "2020-09-17T21:08:51Z",
          "author": { "login": "mirko", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDUwNjUyOA==",
          "body": "@mirko Did you read that template, it is there for visibility about our policy on support requests and clearly says:\r\n\r\n> This issue tracker is intended to collect bug reports and feature requests.\r\n>\r\n>For help with installation, information on how features work, or questions about specific features of Svelte, please come and join us in the [Svelte Discord](https://svelte.dev/chat), or ask your question on [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte). Any issues open for help requests will be closed to keep from clogging up the issue tracker.",
          "createdAt": "2020-09-17T21:21:38Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDUwODkzNw==",
          "body": "No I didn't read the \"template\" (which I rather dismissed as a placeholder anyway tbh), not after I selected the perfectly fitting sounding option right before (I even was like \"oh, wow, offering help via github issues - didn't see that before..\"). If it's just me, then it's just me, but I'm having the feeling I won't be the only one falling for this.. (and causing you guys more work than necessary).",
          "createdAt": "2020-09-17T21:27:17Z",
          "author": { "login": "mirko", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDM2NTU5MDY=",
    "body": "At the moment, there is only one way to declare reactive expressions - `$:`\r\n\r\nI've seen many times that developers (mostly from other frameworks) aren't used to this syntax or they don't like it, for example because this syntax isn't used anywhere (including vanilla) except Svelte.\r\n\r\nI propose a more manual, longhand version of reactive expression declaration in a more familiar style for JS developers.\r\n\r\n(I couldn't find a normal name, so in these examples I'll just call it `manualReactivity`, but name can be easily changed).\r\n\r\nExample of use of this feature:\r\n\r\n```svelte\r\n<script>\r\n  import { manualReactivity } from 'svelte';\r\n\r\n  let reactiveVariable = \"I'm reactive\";\r\n  let secondReactiveVariable = \"I'm too\";\r\n  \r\n  function myFunction() {\r\n    console.log('Svelte is universal');\r\n  }\r\n\r\n\r\n  // Current approach\r\n  $: if(reactiveVariable) myFunction(); // or reactiveVariable && myFunction();\r\n\r\n\r\n  // Manual approach\r\n  manualReactivity([\r\n    [reactiveVariable, myFunction()]\r\n  ]);\r\n\r\n  // OR(if only one array is given)\r\n  manualReactivity([reactiveVariable, myFunction()]);\r\n\r\n\r\n  // Variants of use:\r\n  manualReactivity([\r\n    [reactiveVariable, myFunction()], // pass array with dependency and expression\r\n    [\r\n      [reactiveVariable, secondReactiveVariable], // if there are several dependencies, the first parameter can be an array\r\n      myFunction()\r\n    ],\r\n    () => {\r\n      if(reactiveVariable) myFunction()  // If only a function is given, compiler automatically selects dependencies as in Сurrent approach\r\n    }\r\n  ]);\r\n```\r\n\r\n\r\n```javascript\r\n  // Errors:\r\n  manualReactivity([\r\n    [reactiveVariable], // Error. Function is required.\r\n    [\r\n      reactiveVariable,\r\n      myFunction(),\r\n      secondReactiveVariable // Error. manualReactivity accepts only 2 parameters: dependencies and function\r\n    ]\r\n  ]);\r\n```\r\n\r\nThis method also allows to extend Svelte reactivity capabilities by allowing choosing dependencies and collecting all reactive expressions in one place in a Svelte file.\r\n\r\n\r\nAnd, which I personally really like, it allows to avoid multiple use of `$:`, which can improve appearance of the code\r\n\r\n\r\n```svelte\r\n<script>\r\n  $: expressionOne(myProp);\r\n  $: anotherOne(myProp);\r\n  // many  \"$:\" later\r\n  $: lastOne(anotherProp);\r\n\r\n  // IMHO - looks better\r\n  manualReactivity([\r\n    [myProp, expressionOne()], // Or expressionOne(myProp)\r\n    [myProp, anotherOne()],\r\n    //...\r\n    [lastOne, anotherProp()]\r\n  ]);\r\n</script>\r\n```\r\n\r\n\r\n## Drawbacks\r\n\r\n- Basically, since a person spends less time on understanding the choice of dependencies for reactivity - the probability of using completely variables increases.\r\n\r\n## Unresolved questions\r\n\r\n* An idea is that it is possible to use the reactivity logic from the current approach, but it may take time for additional adaptation.\r\n* Should variable with `manualReactivity` with parent dependencies be allowed to pass to child components?",
    "closedAt": "2020-09-17T15:05:22Z",
    "createdAt": "2020-09-17T14:44:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDI5ODk5NA==",
          "body": "See #2746. This has already come up, and there are no plans to change it. Using a function call to represent this also doesn't work.",
          "createdAt": "2020-09-17T15:05:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDM2MjA4MzE=",
    "body": "You should add spotify to the list of companies using svelte on svelte.dev homepage",
    "closedAt": "2020-09-17T14:09:40Z",
    "createdAt": "2020-09-17T14:03:34Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDI2MjEwMA==",
          "body": "We can't just decide to use their logo as an implied endorsement of Svelte. If someone who works for Spotify who authorized by them to add their logo to the site, they can open a PR against https://github.com/sveltejs/community as indicated by the \"+ your company?\" link.",
          "createdAt": "2020-09-17T14:09:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDMzMTIxNDA=",
    "body": "**Describe the bug**\r\nI got an error message `An element that use the animate directive must be the sole child of a keyed each block` when using animate flip if there is no space in front of each block.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/1661180017a5479caf0b6451c6279a7a?version=3.25.1\r\n\r\n**Additional context**\r\nI use inline blocks on my project, excess spaces must be removed to make the layout accurate.\r\nSo I use preprocessor like this ( https://github.com/sveltejs/svelte/issues/189#issuecomment-586142198 ) to remove all excess spaces between tags, but it will then cause the above error.",
    "closedAt": null,
    "createdAt": "2020-09-17T06:37:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMTM4MDM5Nw==",
          "body": "Here's a more minimalistic reproduction. The following does not parse:\r\n\r\n```\r\n<div>{#each [] as n (n)} <div animate:flip /> {/each}</div>\r\n```",
          "createdAt": "2020-09-30T13:10:20Z",
          "author": { "login": "ehrencrona", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDMxOTg2ODc=",
    "body": "**Crashing Logos \"**\r\nWhen hovering on \"Who's Using Svelte?\" section\r\n![sveltebug00](https://user-images.githubusercontent.com/60907795/93409331-e7041580-f853-11ea-896b-7d951acc5d00.gif)\r\n\r\n (especially those that are aligned in the last column) logos start crashing.\r\n\r\nThe bug was finded using Mozilla Firefox  80.0.1 (64-bit)(Windows version) and lately rechecked in Chrome 85.0.4183.102 (64-bit)(Windows version) \r\n\r\n\r\n",
    "closedAt": "2020-10-01T15:22:46Z",
    "createdAt": "2020-09-17T01:38:15Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjA1NTE4MQ==",
          "body": "Has this been fixed already?\r\nNot zoom effect visible on macOS (neither Safari, Firefox, and Chrome).",
          "createdAt": "2020-10-01T10:55:35Z",
          "author": { "login": "marzepani", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjIxMTAwNw==",
          "body": "I'm not seeing this anymore either.",
          "createdAt": "2020-10-01T15:22:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDMxNzkxMjg=",
    "body": "PR #5390 introduced a bug where upon direct property assignment on a store it will overwrite the entire store's value.\r\n\r\n**Reproduction**\r\nhttps://svelte.dev/repl/d9156516adcd4775b89112b65a071ef4?version=3.25.1\r\n\r\n**3.25.0 Compiler Output**\r\n```\r\nset_store_value(store, $store.data = [1, 2, 3, 4], $store);\r\n```\r\n\r\n**3.25.1 Compiler Ouput**\r\n```\r\nset_store_value(store, $store.data = [1, 2, 3, 4]);\r\n```",
    "closedAt": "2020-09-18T16:17:36Z",
    "createdAt": "2020-09-17T00:36:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjcwMzU5Nw==",
          "body": "This has been fixed in 3.26.0 - https://svelte.dev/repl/d9156516adcd4775b89112b65a071ef4?version=3.26.0",
          "createdAt": "2020-09-22T12:58:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDMxNTIyMzE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nWhen I have a syntax error in a svelte file, the error message does not indicate which line to look at.\r\n\r\nFor example, in the script section of a svelte file, I began a \"$:\" line, but didn't finish it (leave it dangling, with no statement following the \"$:\"). This is a syntax error. I received the following error message when compiling:\r\n\r\n```\r\n🚨  /Users/duane/Projects/relm/src/audiovideo/Conference.svelte: Unexpected token\r\n    at error$1 (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:15595:20)\r\n    at Parser$1.error (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:15671:10)\r\n    at Parser$1.acorn_error (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:15665:15)\r\n    at Object.read_script [as read] (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:7377:17)\r\n    at tag (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:14737:34)\r\n    at new Parser$1 (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:15630:22)\r\n    at parse$3 (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:15761:21)\r\n    at compile (/Users/duane/Projects/relm/node_modules/svelte/compiler.js:26931:18)\r\n    at SvelteAsset.generate (/Users/duane/Projects/relm/node_modules/parcel-plugin-svelte/lib/svelte-asset.js:43:25)\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI'd like the error message to indicate the line where the first syntax error occurs.\r\n\r\n**How important is this feature to you?**\r\nIt's a \"nice to have\". Binary search can come be a handy alternative :)\r\n",
    "closedAt": "2020-09-17T00:09:28Z",
    "createdAt": "2020-09-16T23:44:45Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzczMDkyOA==",
          "body": "The exception objects thrown by the underlying compiler already have `line`, `column`, and `character` fields in them, which whatever layer you have on top of the compiler can use to give you more information. Judging by your stack trace, it looks like this would be an issue for the third-party Parcel plugin.",
          "createdAt": "2020-09-17T00:09:28Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDMxMDg2Mzc=",
    "body": "Opening https://svelte.dev/docs#getContext goes back to the top of the page on Chrome (85.0.4183.102). On Firefox (80.0.1) the page becomes completely white. Tested on linux.",
    "closedAt": null,
    "createdAt": "2020-09-16T22:12:18Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDgxOTc0MA==",
          "body": "I can't reproduce this in current Chrome or Firefox anymore.",
          "createdAt": "2020-09-29T16:25:55Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDkwMDI2MA==",
          "body": "> I can't reproduce this in current Chrome or Firefox anymore.\r\n\r\nNeither can I.\r\n\r\nI guess we have thank \"someone\" LOL.",
          "createdAt": "2020-09-29T18:30:22Z",
          "author": { "login": "carloslenz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjA1MzUyOA==",
          "body": "This is not working today! (Chrome 88, Win 10). Can you please reopen it, @Conduitry @antony? Thanks.",
          "createdAt": "2021-02-09T16:08:43Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjA1OTg2NQ==",
          "body": "Yeah, this is happening for me. Probably a bug in Sapper. Though we'll migrate the docs to SvelteKit at some point, so I'd rather fix it there",
          "createdAt": "2021-02-09T16:19:28Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc3NjA2MjA4MQ==",
          "body": "@benmccann SvelteKit 😍😍😍 Any ETA on it?",
          "createdAt": "2021-02-09T16:23:38Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDMwNjg1MTY=",
    "body": "**Describe the bug**\r\nA slot given a prop by its \"owning\" container instead passes undefined (or doesn't pass the prop at all?). This definitely seems to last until the onMount and in the example repl seems to persist forever somehow? Is a binding higher up in the component chain required? Maybe this is a docs issue?\r\n\r\n**Logs**\r\n```\r\n\"<Foo> was created without expected prop 'foo'\"\r\nundefined\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/0d72ae0822b64363a1838fcc14a783f1?version=3.25.1\r\n\r\n**Expected behavior**\r\nWrapper should render the slot with the prop defined.\r\n\r\n**Severity**\r\nI'm still a noob figuring this out so thanks for any help!\r\n\r\n**Additional context**\r\nI've reduced this down from my actual aim of wrapping a component in a `<Location>` component.\r\n\r\nIt fetches the location using browser geolocation (wrapped in a promise) and then renders a slot with a `location` prop.\r\n\r\nI then use this to call to an API in onMount - this obviously fails because it is undefined!\r\n\r\nI could munge this altogether into a single component, but I was hoping to be able to nest components in this way. If there's a better pattern for this that isn't just \"make one component that does both\" I'd be keen to learn more, thanks.\r\n",
    "closedAt": "2020-09-16T22:27:45Z",
    "createdAt": "2020-09-16T20:55:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzY3MTg1Mw==",
          "body": "Props passed to default slots are retrieved using the `let:prop` syntax on the component\r\n```svelte\r\n<Wrapper let:foo>\r\n    <Foo {foo}/>\r\n</Wrapper>\r\n```\r\n",
          "createdAt": "2020-09-16T21:20:41Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzY5ODg3Nw==",
          "body": "As of the moment I looked at it, there's actually a syntax error - `let const foo = \"why is this not defined?\";` is invalid js.\r\n\r\nComponents don't inherit their parent's scope, if that's what you're asking. GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-09-16T22:27:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDM1OTI4OA==",
          "body": "Thank you pushkine. That was exactly the fix I was missing.\n\nIt seems like you have to pull the prop back out of the component using let: and then plumb it back in as a normal prop to the slot.\n\nThe wrapper alone can't add a prop to the slot if the component filling the slot doesn't have the same prop added at the top level as well.\n\nSorry about the let const, not sure how that slipped in there! Wasn't the issue but is none the less completely wrong",
          "createdAt": "2020-09-17T16:45:02Z",
          "author": { "login": "drmason13", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDI4NTI0NzA=",
    "body": "EDIT: I just realized this actually reproduces in REPL, so here I go writing this up again...\r\n\r\nI have a problem I can't seem to figure out and I am not quite sure where to look so I am bit lost. \r\n\r\nLet's assume I have something like this: https://svelte.dev/repl/1df2eb0e67b240e9b1449e52fb26eb14?version=3.25.1\r\n\r\nYou can see that changing the \"value\" prop of the Comp.svelte instance:\r\n1. triggers the reactive statement if condition which then calls `updateInputValue(value)`\r\n2. that then sets the `inputValue`...\r\n3. ... and NOTHING. The reactive statement `validate(inputValue)` is never executed.\r\n\r\nWhen I omit the `updateInputValue(value)` call in the reactive if condition and just put this function's content directly into the condition, then the `validate(inputValue)` fires as expected. So it seems like the reactivity is not triggered when `updateInputValue` function changes the variable. But why?\r\n\r\nAny ideas? How should one debug this? What am I doing wrong? Thanks for any comments.",
    "closedAt": "2020-09-16T15:34:55Z",
    "createdAt": "2020-09-16T15:15:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzQ4NjY1Ng==",
          "body": "Hi @Fygo \r\n\r\nWe reserve github issues for bugs and feature requests for Svelte, since it's a pretty bad tool for realtime support.\r\n\r\nHowever, feel free to come and chat to the community and maintainers [on discord](https://svelte.dev/chat) to see if we can help you diagnose and fix your issue.",
          "createdAt": "2020-09-16T15:34:55Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NDExOTA0Ng==",
          "body": "@antony Sorry, let me rephrase. Is this how it is supposed to work? Because right now it looks like a bug. The documentation is really terribly sparse on this topic.\r\n\r\nWhy I think it is a bug:\r\n\r\n1. The HTML input text element is updated (i.e. it reacts to the bound `inputValue`) but the reactivity stops there, not calling the reactive `$: validate(inputValue)` when `inputValue` changes\r\n2. Unluckily the discord server provided basically 0 feedback but SO did and it was found that changing the position of `$: validate(inputValue)` AFTER the function declaration works (actually, after the reactive if condition). Here is the fixed REPL: https://svelte.dev/repl/4dce7d79a41d4251960257bc1b2feb33?version=3.25.1\r\n\r\nIs this really the intended behavior? Is the placement/position of reactive statements important in this case? If it is, it should be pointed out somewhere.\r\n\r\nHOWEVER: why is the position not important when the reactive if condition doesn't call the function but instead contains the function's code? It makes no sense.",
          "createdAt": "2020-09-17T09:38:59Z",
          "author": { "login": "Fygo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NTM0NTI3Mw==",
          "body": "Hi @antony 👋 \r\n\r\nAs you can see in this stackoverflow [Q/A](https://stackoverflow.com/q/63934543/8583669), nobody can really explain the behaviour of this code snippet and it really looks like a bug if there is nothing mentioned about it in the doc. For sure @Rich-Harris knows why it behave like that 😉 Thanks a lot for all your work guys 👏 ",
          "createdAt": "2020-09-19T19:04:45Z",
          "author": { "login": "johannchopin", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NTc2ODg5OA==",
          "body": "@johannchopin @Fygo i've [explained the issue in the stack overflow](https://stackoverflow.com/a/63977760/1513547). have a nice day.",
          "createdAt": "2020-09-20T10:07:10Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDkxMjkwOA==",
          "body": "So we now need to order reactive statements?",
          "createdAt": "2020-11-27T16:34:35Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNDk5ODQ2MQ==",
          "body": "@Florian-Schoenherr Have you read the answer on SO? If not, give it a read, definitely worth it.\r\n\r\nBut basically yes, the easiest is to order them if you hit the same issue.\r\n\r\nI still cannot get over the fact that this is not mentioned in the documentation. I do not want to sound negative or unappreciative towards the work that went into this tool (because it has many awesome parts and awesome people working on it and contributing to it), but I do feel kind of let down that \"basic\" internal mechanics are not explained at all. You either have to find them out yourself or hope some other programmers did and wrote an article about it. @antony Some advanced section in the docs would be really nice.",
          "createdAt": "2020-11-27T21:59:22Z",
          "author": { "login": "Fygo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczNTIwNzg4MA==",
          "body": "Yes I did read it, and I essentially thought there is no ordering in reactive statements, because it orders based on dependencies.\r\nI hope there is some kind of pattern to keep it that way, do you @tanhauhau know of a way to make the SO example use dependencies to order?\r\nWould\r\n```\r\n$: if (rendered) {\r\n  updateInputValue(value);\r\n  inputValue = inputValue; \r\n}\r\n```\r\nwork?\r\n@Fygo I think you can reformulate this issue to \"please mention this in the docs\", I had some versions of the same problem before.",
          "createdAt": "2020-11-28T09:44:36Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDI3NTg4ODc=",
    "body": "In JS you [can](https://v8.dev/features/numeric-separators) use `_` as a number separator. \r\n\r\nHowever, I recently noticed that Svelte displays an error `Identifier directly after number` when i use `_` in numbers\r\n\r\nhttps://svelte.dev/repl/6612cec5c50b44cbab7f4a64ff930153?version=3.25.1\r\n\r\nThis feature is [definitely useful](https://github.com/tc39/proposal-numeric-separator), so it would be nice to fix this bug.",
    "closedAt": "2020-09-18T16:09:45Z",
    "createdAt": "2020-09-16T13:19:16Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzQwNTEyMg==",
          "body": "I'm hesitant to call it a bug, Svelte is a language/DSL so it's more of an unsupported language feature.\r\n\r\nI will agree that it's desirable however, and I *think* it might be an easy solve, so I'm marking it as a good first issue.",
          "createdAt": "2020-09-16T13:28:15Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzQwNzE4Nw==",
          "body": "I'm hoping this would just be a matter of updating Acorn. It looks like ours is out of date.",
          "createdAt": "2020-09-16T13:31:28Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzQxMDA0OA==",
          "body": "Yep, [Acorn's changelog](https://github.com/acornjs/acorn/blob/master/acorn/CHANGELOG.md) says they were added in 7.4.0, and we're using 7.3.1. We should still update to 8.x though, and that will likely involve bumping the dependency in code-red.",
          "createdAt": "2020-09-16T13:36:24Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjcwMzI5NA==",
          "body": "You can now do this in 3.26.0 - https://svelte.dev/repl/6612cec5c50b44cbab7f4a64ff930153?version=3.26.0",
          "createdAt": "2020-09-22T12:57:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjgwNjU0Ng==",
          "body": "Nice!",
          "createdAt": "2020-09-22T15:45:44Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDI3MTI4MDc=",
    "body": "**Describe the bug**\r\nWhen a `>` is behind a `:global()` and thus outside the parentheses, the globalised class still gets the class of the component.\r\nI think it's a conflict between svelte and svelte-preprocess that got started with https://github.com/sveltejs/svelte/issues/4795 (we didn't have this issue yesterday)\r\nI will also post this on the svelte-preprocess repo. **edit: https://github.com/sveltejs/svelte-preprocess/issues/253**\r\n\r\n**To Reproduce**\r\nI couldn't reproduce the issue with https://svelte.dev/repl because I think it's a conflict between svelte and svelte-preprocess.\r\n\r\nSo in our project we have something like this:\r\n```\r\n:global(.menu) > .menu-item {...}\r\n```\r\nThis outputs to:\r\n```\r\n.svelte-100eekq.menu > .menu-item.svelte-100eekq {...}\r\n```\r\nThe adjustment below does produce the expected output, but shouldn't be required I think:\r\n```\r\n:global(.menu >) .menu-item {...}\r\n```\r\nIf this is ok for the svelte team, then this might need to be warned about in the documentation.\r\n\r\n**Expected output**\r\n```\r\n.menu > .menu-item.svelte-100eekq {...}\r\n```\r\n\r\n**Information about your Svelte project:**\r\n- node-sass: 4.14.1\r\n- sass-loader: 8.0.2\r\n- svelte 3.25.1\r\n- svelte-preprocess: 3.9.12 (and 4.3.0 tested with same results)\r\n- webpack 4.44.1\r\n\r\n**Severity**\r\nBlocking upgrade",
    "closedAt": "2020-09-29T16:27:28Z",
    "createdAt": "2020-09-16T12:12:53Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzM3MDM4NQ==",
          "body": "If it's not a bug in svelte-preprocess, anything like this should be reproducible in the REPL by giving it the output of svelte-preprocess. In any case, we do need some sort of reproduction to be able to investigate this.",
          "createdAt": "2020-09-16T12:24:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjU0OTQ5Mw==",
          "body": "I have the same problem, but in a different context. When I add autoprefixer in svelte-preprocess, then I get `:global()` injected into my style imported from sass. I just created a repo for this:\r\nhttps://github.com/floratmin/sapper-bulma-scss-treeshaking",
          "createdAt": "2020-09-22T07:12:41Z",
          "author": { "login": "floratmin", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDgyMDcxOQ==",
          "body": "Closing this for now. If this can be reproduced with svelte-preprocess (which it ought to be able to if this is indeed an issue in Svelte), this can be reopened.",
          "createdAt": "2020-09-29T16:27:28Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDI2Mzc4ODc=",
    "body": "If we use `dispatch` in a reactive expression, when the component is first rendered, the `dispatch` event will not be handled. But if you do the same with `onMount`, it will work. I fixed it with `await tick()` before `dispatch` in reactivity expression. But I don't understand the bug is this or not. \r\nWhat do you think of it? I didn't find anything like this in the documentation.\r\n\r\n\r\nREPL reproduced bug with reactive expression: [https://svelte.dev/repl/1055153bb575466cbcd91f38af019d1c?version=3.25.1](https://svelte.dev/repl/1055153bb575466cbcd91f38af019d1c?version=3.25.1)\r\n\r\nREPL solution with await tick: [https://svelte.dev/repl/2864c5f152b14e6988328045b61f72ac?version=3.25.1](https://svelte.dev/repl/2864c5f152b14e6988328045b61f72ac?version=3.25.1)\r\n\r\nREPL everything is works with onMount: [https://svelte.dev/repl/33c316946a0e4f97bbc899af151c6407?version=3.25.1](https://svelte.dev/repl/33c316946a0e4f97bbc899af151c6407?version=3.25.1)",
    "closedAt": "2020-09-16T11:17:07Z",
    "createdAt": "2020-09-16T10:13:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzMzOTg2NA==",
          "body": "Duplicate of #4470.",
          "createdAt": "2020-09-16T11:17:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MDYwNDc2OA==",
          "body": "In other words, this issue is about how to postpone dispatching an event containing the initial value from the Child2 component until its parent component has mounted.\r\n\r\nThanks for the `await tick()` idea. Not sure I would have thought of that solution to this problem.\r\n\r\n---\r\n\r\nTo clarify, for future readers, the 3rd [REPL](https://svelte.dev/repl/33c316946a0e4f97bbc899af151c6407?version=3.25.1) as is _isn't_ actually \"everything working\" in the same way that the 2nd REPL is. To have it dispatch an event for both the initial value _and_ any changes from that initial value, you would need to have a reactive `$` as _well as_ the `onMount` that it already has. See [updated REPL](https://svelte.dev/repl/b055716ab023402f8eb3ffa44938990e?version=3.25.1):\r\n```svelte\r\n \tonMount(handleOptionChange)\r\n\t$: { handleOptionChange(); option }\r\n```\r\n\r\nBut that has 2 downsides that I can see:\r\n1. It dispatches a duplicate event on first render — the initial one from the `$:` being the one that gets dispatched _before_ parent has registered its listener. (Not sure how this could be a problem in practice, but still seems unfortunate.)\r\n2. it is more verbose than the `await tick()` trick.\r\n \r\nSo, it seems like the `await tick()` option is the best workaround for this problem. Are there any downsides to doing it that way? Like maybe it could cause changes to _not_ show up immediately in certain cases because it waited until _after_ the render was complete to dispatch?\r\n\r\nIt's hard to believe this is really the intended behavior. It just seems unintuitive and easy to forget that this is needed. Will re-read #4470 to try figure out why the current behavior might be desired/intended, but so far, I can't understand why this behavior would be desirable.\r\n\r\n\r\n",
          "createdAt": "2021-01-15T02:33:43Z",
          "author": { "login": "TylerRick", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDE5NjAxNTQ=",
    "body": "When you're using a typescript interface that has lots of nested optional properties, it's nice that you can use question marks to write clean and safe code:\r\n\r\n```typescript\r\nconst avatarUrl = $session.user?.profile?.avatarUrl || \"\"\r\n```\r\n\r\nIn fact, if I wouldn't include those question marks (or some other form of null-checking) then svelte-check would produce an error that I'm trying to access a property on an object that may be undefined.\r\n\r\nNow I'm very happy with that. The bug that I want to report is that this doesn't work in the html. In fact, I'm being put in a double bind. If I write code like this:\r\n\r\n```html\r\n<img src={$session.user.profile.avatarUrl} alt=\"avatar\" />\r\n```\r\n\r\nThen svelte-check rightly throws an error letting me know that I'm trying to access a property on an object that may be undefined. But then if I write this code:\r\n\r\n```html\r\n<img src={$session.user?.profile?.avatarUrl} alt=\"avatar\" />\r\n```\r\n\r\nThen svelte-check is like 👍, but that code isn't transpiled to valid javascript. The question marks end up in the final bundle and cause a syntax error in the browser.\r\n\r\n**Expected behavior**\r\nFor the code to be transpiled by typescript before ending up in the bundle.\r\n\r\n**Information about your Svelte project:**\r\n- Your operating system: macOS Big Sur\r\n- Svelte version: 3.25\r\n- Bundler: Rollup\r\n\r\n**Severity**\r\nIt's annoying, but I *can* work around it.\r\n\r\n**Additional context**\r\nI'm actually working in a Sapper project with typescript included. Maybe that's relevant, I don't know.\r\n",
    "closedAt": "2020-09-15T14:21:23Z",
    "createdAt": "2020-09-15T14:05:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Mjc0NzkzMA==",
          "body": "This is unrelated to TypeScript. That syntax is valid JS (optional chaining), just a recent iteration of it. Preprocessors not running on the template is a known limitation - #4701. You'll need to transpile after Svelte compiles if you're using JS syntax that isn't supported by browsers you need to support.",
          "createdAt": "2020-09-15T14:21:23Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDE4NzYxNDY=",
    "body": "We get an infinite wait if promise rejection and there is no catch block in template. \r\nSvelte version 3.25.0\r\nREPL: https://svelte.dev/repl/791ef575157744ca95fc53c867048c2e?version=3.25.0\r\n\r\nBut in svelte version 3.24.1 is everything works.\r\nREPL: https://svelte.dev/repl/aafb907381524e5db23c1ae7f2c94b8f?version=3.24.1\r\n\r\nThe documentation says the catch block is optional [https://svelte.dev/docs#await](https://svelte.dev/docs#await)\r\n",
    "closedAt": "2020-09-15T13:13:51Z",
    "createdAt": "2020-09-15T12:11:26Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjY3Nzg5Ng==",
          "body": "Presumably the result of #5149 - I'm guessing there were other effects to rethrowing the error, but I haven't looked into this yet.",
          "createdAt": "2020-09-15T12:19:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjY4OTkzMA==",
          "body": "Checking the console, it seems like the error is thrown and since it was  unhandled,  the  content in await block is shown. Shouldn't this be the expected behaviour?\r\n\r\nWe can't satisfy both #5129 and this right?\r\n",
          "createdAt": "2020-09-15T12:44:56Z",
          "author": { "login": "irshadshalu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjY5OTE4NQ==",
          "body": "No, we can still re-throw/re-emit the unhandled rejection after we update the DOM. That feature request was just that there be an unhandled rejection to listen for globally.",
          "createdAt": "2020-09-15T13:02:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjcxOTM2Nw==",
          "body": "This is fixed in 3.25.1 - https://svelte.dev/repl/791ef575157744ca95fc53c867048c2e?version=3.25.1",
          "createdAt": "2020-09-15T13:36:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDEyMjE2NDA=",
    "body": "I'd like to suggest making methods valid actions that keep their contextual `this`, such as to make the following code valid :\r\n\r\n```svelte\r\n<script>\r\n\tconst obj = { \r\n\t\tfoo : \"bar\",\r\n\t\taction(element, { leet }) {\r\n\t\t\tconsole.log(this.foo); // \"bar\"\r\n\t\t},\r\n\t }\r\n</script>\r\n\r\n<div use:obj.action={{ leet: 1337 }} />\r\n```\r\n\r\nIt happens that some cross component functionality can only [is more convenient to] be applied through actions, in those situations one may want to bundle it all in an object or a class with action methods directly applying the relevant state. \r\n\r\nUnfortunately methods must at least be destructured and optionally bound to the relevant object before being used, all in seemingly unnecessary boilerplate repeated across every component\r\n\r\nWhile `const obj_action = obj.action.bind(obj);` in the script block or the class constructor is not the end of the world, it still acts on readability, performance, bundle size and memory consumption, not to mention the ReturnType of bind is always `any` in typescript\r\n\r\nSupporting object methods as actions requires the following changes\r\n* Allow action functions to be a `MemberExpression` whose object and property are both `Identifier`s ( currently only accepts a single `Identifier` )\r\n* Pass `MemberExpression.object` in the block `ctx` and call the relevant property name on mount\r\n```diff\r\n- /* obj.action */ ctx[0].call(null, div, { leet: 1337 });\r\n+ /* obj */        ctx[0].action(div, { leet: 1337 });\r\n```\r\n\r\n",
    "closedAt": "2020-09-18T16:50:19Z",
    "createdAt": "2020-09-14T15:47:51Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjE5NTQ5OQ==",
          "body": "Duplicate of #3935, although this one does have a better explanation.",
          "createdAt": "2020-09-14T17:17:20Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDExOTczNjE=",
    "body": "**Describe the bug**\r\nSlot content seems to have stale state if the component were to be destroyed, but the transition was reversed midway.\r\n\r\n**To Reproduce**\r\n[REPL](https://svelte.dev/repl/405911d112e040818e26e30f37c61b8d?version=3.25.0).\r\n\r\nI apologize if the example is excessive, I just tried to recreate the components from my app as close as possible. My case:\r\n\r\n1. I have an array of stuff in a store\r\n2. I want to open a single item in a modal. The modal is a component with a default slot, that basically handles the transition of the modal wrapper based on a boolean prop\r\n3. in this modal I will perform some async operations and then delete the item from the store. The modal should close with a transition every time and then be recreated with a new item if it is present in the store\r\n\r\nSteps:\r\n\r\n1. click on the \"Run\" button. It has a 300 seconds delay\r\n2. the modal goes away, but then goes back up. Both the prop `text` and local variable `loading` are now stale: the `text` prop is the same as it was before the transition started and loading is in `true` state. They'll never update no matter how much you try\r\n3. also, you can push the \"Toggle loading\" button and it won't do anything the first time (presumably, it would toggle the default `false` state to `true` state, therefore the interface doesn't change)\r\n\r\n**Expected behavior**\r\nProp should be updated, and the local state should be independent.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Brave 1.13.86 (latest), Chrome 85.0 (latest), Safari 13.1.2 (latest)\r\n- Your operating system: OS X 10.15.6\r\n- Svelte version: first noticed when was working with 3.23.1, though could be present before. Still present on 3.25.0\r\n- Whether your project uses Webpack or Rollup: Rollup ()\r\n\r\n**Severity**\r\nNot really. I use shady timers to avoid this bug and it is not critical for me.\r\n\r\n**Additional context**\r\nI added a timer-based fix on line 21 of the `ShowSingleItem.svelte` component. It seems to me that this timer value is somehow connected to transition duration, although `scale` has a default of 400, but the fix works fine for me with a value of 350ms.",
    "closedAt": null,
    "createdAt": "2020-09-14T15:17:58Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjU1NzM1MQ==",
          "body": "I think I am having the same problem:\r\n- Go [here](https://svelte-materialify.vercel.app/getting-started/installation/)\r\n- Then click the closed navigation groups on the left side multiple times quickly.",
          "createdAt": "2020-09-22T07:32:43Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDA1Mjc3MzM=",
    "body": "**Describe the bug**\r\n\r\nWhen binding to computed properties of objects as properties of objects in an array inside {#each} _(whew!)_, updating one nested object property value changes the same property of _all_ the objects in said array. When adding new objects with supposedly different values to the array, they instead have the same values as the other items already in the array.\r\n\r\n```svelte\r\n<!--\r\n  key = 'foo'\r\n  items = [\r\n    { nested: { foo: 'bar' } },\r\n    { nested: { foo: 'abc' } },\r\n  ]\r\n-->\r\n{#each items as item (item.id)}\r\n   <input bind:value={item.nested[key]}/>\r\n{/each}\r\n```\r\n\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/b335c5f876184abbb830de1126d619d3?version=3.25.0\r\n\r\n**Expected behavior**\r\nAfter adding the first FAQ item and typing in something, then adding another FAQ item, I would expect the text inputs to be empty.\r\n\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Latest Chrome\r\n\r\n- Your operating system: Mac OS Mojave\r\n\r\n- Svelte version: 3.25.0\r\n\r\n\r\n**Severity**\r\nBreaks our app. Severe.\r\n",
    "closedAt": "2020-09-13T09:11:08Z",
    "createdAt": "2020-09-13T08:52:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTY0MTIzMw==",
          "body": "1. `Object.freeze` only freeze the object 1 level deep (See [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)), so, it is still make changes to `CUSTOM_FAQ`, such as: `CUSTOM_FAQ.question.en = 'abcd';`\r\n1. when you use spread, eg: `newFaq = { ...CUSTOM_FAQ }`, it is 1 level deep too. ie `newFaq.question === CUSTOM_FAQ.question`, they are both pointing to the same object reference.\r\n\r\nthus, based on the REPL, all the different `faqs.question` and `faqs.answer` are referring to the same object reference, therefore the values are the same.\r\n\r\nsee an example of how this can be fixed: https://svelte.dev/repl/06d04beb58144825acc78c04839b8215?version=3.25.0",
          "createdAt": "2020-09-13T09:11:08Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTY0MjE0MA==",
          "body": "Arggh 😅  Thank you for helping!",
          "createdAt": "2020-09-13T09:16:46Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MDAyNDUyODU=",
    "body": "```ts\r\nconst store = writable(0);\r\nlet local_value = 0;\r\n\r\n$: local_value = $store;\r\n$: if (local_value > 10) $store = 0;\r\n```\r\n```\r\nCyclical dependency detected: local_value → $store → local_value (5:1)\r\n```\r\nI'd expect this to work but I don't think the error can be relaxed without injecting runtime (dev-only ?) checks or introducing a \"ignore cyclical\" comment\r\n\r\nI'm not sure whether the following is an instance of an unrelated reactive declaration reordering/ invalidation race bug or that cyclical deps aren't allowed by design but circumventing the error using `store.set` gives wild results https://svelte.dev/repl/84ce1f98c98a4211ac3349cd7195ad2c?version=3.25.0",
    "closedAt": "2020-09-12T14:39:37Z",
    "createdAt": "2020-09-12T13:53:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTQ5OTc3Nw==",
          "body": "I don't think we want to allow / want to have to worry about stuff like this. But also: All reactive blocks, once they're sorted, are run together in one chunk, and things getting invalidated during that do not cause the reactive blocks to be run again from the beginning. Which blocks depend on which is only used to sort them in the output code. I think there's an issue for this somewhere, but I don't know how or whether we want to change the behavior, or whether just to document it.\r\n\r\nBecause of this, even if we allowed code like what you wrote, the two reactive blocks would have to end up in _some_ order, and the first one wouldn't be re-triggered because of changes in the second one.",
          "createdAt": "2020-09-12T14:39:37Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTk4MzQ1ODU=",
    "body": "**Describe the bug**\r\n\r\nWhen using object destructuring assignment to extract 2 stores out of an object, like this:\r\n```javascript\r\nlet store1\r\nlet store2\r\n({\r\n\tstore1,\r\n\tstore2,\r\n} = context);\r\n```\r\n\r\n, then only whichever store is assigned to a variable _first_ (in this case `store1`) can be used. The other one is undefined when you (auto)subscribe to it (`$store2`).\r\n\r\n**To Reproduce**\r\n\r\nI have tried many variations to try to identify which factors are necessary and sufficient conditions for this strange behavior to occur. The 1 broken behavior and various variations that seem to work fine are summarized in this [REPL repro](https://svelte.dev/repl/ba980bfbd031448b8f49500f5900f305?version=3.25.0).\r\n\r\nIt appears that this strange behavior — `$store2` being undefined (see `Broken.svelte`) — only occurs iff all of these conditions are true:\r\n\r\n<ol>\r\n\t<li>We use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destructuring assignment </a> instead of regular assignment (see <code>AssignWithoutDestructure1.svelte</code>)</li>\r\n\t<li>Reference <code>$store1</code> at all (see <code>OnlyReferenceStore2.svelte</code>)</li>\r\n\t<li>Use <code>let</code> instead of <code>const</code> (see <code>Const.svelte</code>)</li>\r\n\t<li>Destructure/assign <code>store1</code> first (see <code>AssignStore2First.svelte</code>)</li>\r\n</ol>\r\n\r\nWhy exactly can I not use this combination of factors in my Svelte component? What is the rule that I am breaking, and where is it documented?\r\n\r\n**Expected behavior**\r\n\r\nI expect to be able to use `let` and destructuring assignment with store objects just the same as I can with any other type of value.\r\n\r\nThis works just fine, for example:\r\n```javascript\r\nlet store1\r\nlet store2\r\n({\r\n\tstore1,\r\n\tstore2,\r\n} = {store1: 'value1', store2: 'value2'});\r\n\r\n// store1 => \"value1\"\r\n// store2 => \"value2\"\r\n```\r\nso I don't think there's anything wrong with my JavaScript. So what is so special about _stores_ as values that would make it not work? And why does `let` vs. `const` make a difference here? Is the Svelte compiler doing something special with `let`s (even though I'm not using `$:` here) that is causing this strange behavior?\r\n\r\n**Severity**\r\n\r\nIt seems medium severe to me. I can _probably_ work around it (I will attempt that next), but it certainly diminishes my confidence in Svelte when:\r\n1. a Svelte store mysteriously reports being `undefined` for no apparent reason\r\n2. something that seems like standard JavaScript just doesn't work as expected and I have to come up with an arbitrarily different way to write it\r\n\r\nMaybe I'm just doing something wrong, but I couldn't figure it out (after hours of turning this into a simple as possible repro), so I reported this as a bug until proven otherwise... :)\r\n",
    "closedAt": "2020-09-15T13:03:10Z",
    "createdAt": "2020-09-11T22:56:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTM1NDEzNQ==",
          "body": "In the first broken example, the compiler is outputting\r\n\r\n```js\r\n\tlet store1;\r\n\t$$subscribe_store1();\r\n\tlet store2;\r\n\t$$subscribe_store2();\r\n\t$$subscribe_store1({ store1, store2 } = context);\r\n```\r\n\r\nwhich is incorrect - as opposed to the example without destructuring, where it is outputting\r\n\r\n```js\r\n\tlet store1;\r\n\t$$subscribe_store1();\r\n\tlet store2;\r\n\t$$subscribe_store2();\r\n\t$$subscribe_store1(store1 = context.store1);\r\n\t$$subscribe_store2(store2 = context.store2);\r\n```\r\n\r\nWe need to make sure _both_ subscription functions are called after the destructuring assignment happens. So we can continue to use the destructuring in the output, probably what makes them most sense is to make two separate subscription calls afterwards.",
          "createdAt": "2020-09-11T23:33:06Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjcxOTE2NA==",
          "body": "This is fixed in 3.25.1 - https://svelte.dev/repl/ba980bfbd031448b8f49500f5900f305?version=3.25.1",
          "createdAt": "2020-09-15T13:36:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTg5NjM2Nzc=",
    "body": "In the CodeSandbox example below, what is the trick to applying a FLIP animation to an element outside `each` block? This would be useful when the element being rendered is not iterated over.\r\n[CodeSandbox](https://codesandbox.io/s/compassionate-bash-wouiq?file=/App.svelte)",
    "closedAt": "2020-09-11T11:18:15Z",
    "createdAt": "2020-09-11T07:37:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTAzNTAyMw==",
          "body": "In Svelte, animations are specifically for handling reordering of an array nicely, so using them outside of an each block doesn't really make sense. GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-09-11T11:18:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTg2NTg2ODI=",
    "body": "Similar issues have been raised and they have been closed, but I'm going to try this again because I believe a lot of people would also love to see this feature.\r\n\r\nA svelte component should be able to iterate over child components in `<slot />`.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI constantly get hit by this problem when I want to create a component used for layout purposes. This type of component is solely for creating a specific layout, so it does not care what child component it has. You can think of a relationship between flex container and flex items.\r\n\r\n#4455  is the issue that comes up when I google for similar issues, but this one assumes that every child is related to the parent component. The solution proposed in this issue was to pass data of children as an array, but in my case, the child can be anything, it gets cumbersome to achieve this.\r\n\r\n**Describe the solution you'd like**\r\nI'd like to do something like this. Also, note that the number of children or what children is rendered can be dynamic.\r\n\r\nApp.svelte\r\n```\r\n<FluidLayout>\r\n  <Button {...buttonProps1} />\r\n  <Button {...buttonProps2}/>\r\n  <ButtonWithCompletelyDifferentSetOfProps  {...btnProps} />\r\n</FluidLayout>\r\n\r\n<FluidLayout>\r\n  <Foo {...fooProps} />\r\n  <Bar {...barProps} />\r\n</FluidLayout>\r\n```\r\n\r\nFluidLayout.svelte\r\n```\r\n<script>\r\n  import classnames from 'classnames';\r\n  export let wide = false;\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  .fluid-layout {\r\n    /* ... */\r\n\r\n    > .fluid-layout__item {\r\n      /* ... */\r\n    }\r\n  }\r\n\r\n  .fluid-layout--wide {\r\n    > .fluid-layout__item {\r\n      width: 100%;\r\n      /* ... */\r\n    }\r\n  }\r\n</style>\r\n\r\n<div class={classnames(\"fluid-layout\", { [\"fluid-layout--wide\"]: fluid })}>\r\n  {#each child in slot}\r\n    <div class=\"fluid-layout__item\">\r\n      {child}\r\n    </div>\r\n  {/each}\r\n</div>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n**Solution 1**\r\nI could still pass an array of props to the parent component to achieve this.\r\n\r\n```\r\n<FluidLayout childProps={[{\r\n      ...fooProps,\r\n      render: prop => <Foo {...props} />\r\n    }, {\r\n      ...barProps,\r\n      render: props => <Bar {...props} />\r\n    }]}\r\n/>\r\n```\r\n\r\nThis should work, but, I think most people could agree that my proposed solution feels a lot more natural.\r\n\r\nBut, there's one big problem to this. When using TypeScript, you can't get nice type information because every prop can be a completely different type. You'd need to defined a childProps type listing every child component prop, but this can be dynamic.\r\n\r\n**Solution 2**\r\nI can wrap every child component with another layout component (See below). Well, this doesn't work easily because the CSS stylings child component depends on the parent selector (See how `fluid-layout--wide` is used above to affect the stylings of the child), but component stylings are scoped in Svele. One way to make this work is to make the child selector global, and use that in both parent and child component. But, this makes the code cluttered.\r\n\r\ne.g.\r\n```\r\n<FluidLayout>\r\n  <FluidLayoutItem>\r\n    <Foo />\r\n  <FluidLayoutItem>\r\n  <FluidLayoutItem>\r\n    <Bar />\r\n  <FluidLayoutItem>\r\n</FluidLayout>\r\n```\r\n\r\nI'm aware of solutions like [this one](https://svelte.dev/repl/765f182ddd75486a8f6cf0b3ba75f276?version=3.25.0), but this doesn't really apply here because I'd need to pass a global class name to each child component.\r\n\r\nThere are other ways to achieve the same effect, but all of them I've seen seem hacky because Svelte is not expect to support this scenario properly.\r\n\r\n**How important is this feature to you?**\r\nSimply having the child components wrapped inside a parent maintains good HTML semantics, and having to pass them via props is counter-intuitive, and it can quickly get cumbersome. It also helps hide the implementation details. Other frameworks such as React support this and I think Svelte should, too.\r\n\r\nHaving stylings scoped by component is a good thing in general, but it gets in the way when we have a composite component that expects certain styling on multiple levels of DOM elements. My proposed solution looks a lot more like standard HTML and, if I'm not mistaken, I believe Svelte is trying to provide that feel to developers.\r\n\r\nI use TypeScirpt and there doesn't seem to have a nice way to achieve this currently. I wouldn't say this is a deal breaker if I'm not using TypeScript, but I won't enjoy writing in Svelte as much if this doesn't get supported. Is there a technical challenge to achieve this or Svelte has been consciously avoiding this? If latter, that seems a bit odd to me. ",
    "closedAt": "2020-10-15T11:43:34Z",
    "createdAt": "2020-09-11T00:35:25Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDg0MjUxMQ==",
          "body": "Usage of `getContext` and `setContext` may help to solve your problem. These functions are more powerful than you know.\r\n\r\n## Using getContext to set index of children\r\nIn this you can use getContext to set the index value of children inside slot without using onMount.\n\n**Parent.svelte**\r\n```js\r\nlet startIndex = -1;\r\nsetContext('SetIndex', {\r\n  index: () => {\r\n    startIndex += 1;\r\n    return startIndex;\r\n  }\r\n})\r\n```\n\n**Child.svelte**\r\n```js\r\nconst { index } = getIndex('SetIndex');\r\nvalue = index();\r\n```\r\nNow the result would be like:\r\n```jsx\r\n<Parent>\r\n    <Child /> // has value set as 0\r\n    <Child /> // has value set as 1\r\n    <Child /> // has value set as 2\r\n</Parent>\r\n```\r\n\r\nThis is one way to iterate over child components in svelte. But I have no solution for component styles.\r\nHope this helps, this is just an example to help you understand the usage of setContext and getContext.",
          "createdAt": "2020-09-11T02:54:38Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTIzMDU1MQ==",
          "body": "@TheComputerM is correct. You can see the mapbox example on the site to understand how this could work.\r\n\r\nThe reason that frameworks like React can do this is because they do computation at runtime, vs Svelte where this work is done at compile time. Iterating over the contents of a slot would require a runtime computation, which is not really what Svelte is about.\r\n\r\nSvelte however encourages you to hold state and allow Svelte to render based on that state. This means you have a single source of truth (state) and aren't trying to determine state by inspecting the dom.\r\n\r\nI think the modification that needs to be done here is how you're using Svelte, rather than an actual modification to Svelte itself.",
          "createdAt": "2020-10-15T11:43:34Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTg1NTUyMzA=",
    "body": "It seems like `bind:` does not trigger the `input` or `change` event on the element. What are the \"best practices\" re: dispatching the `input` & `change` event when the value changes?\r\n\r\nI'm asking this because I have a validation directive that listens to the `input` event. If the `bind:value` variable changes, the validation is not triggered. Do Svelte directives have an event to listen to for `bind:value` updates?\r\n\r\nSee:\r\n\r\nhttps://svelte.dev/repl/3943df6dd7cb48a9965a095b7a6d1750?version=3.25.0\r\n\r\n```html\r\n<script>\r\n\tlet value = 'initial'\r\n\tlet text = 'input not dispatched'\r\n\tsetTimeout(()=> value = 'changed', 100)\r\n</script>\r\n\r\n<input bind:value on:input={evt => text = 'input was dispatched'}>\r\n<div>\r\n\t{text}\r\n</div>\r\n```",
    "closedAt": null,
    "createdAt": "2020-09-10T22:16:14Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDc2Nzk2MQ==",
          "body": "Re: the directive case, there is a hack. The `update` directive method can be invoked when the `bind:value` variable update.\r\n\r\n```html\r\n<input bind:value={$value} use:validation={$value, ['validation input']}>\r\n```\r\n\r\nOf course this does not solve dispatching `on:input` on `on:change`, but it solve my immediate problem re: directives. I'd still love to see \"best practices\" re: input & change in this thread...",
          "createdAt": "2020-09-10T22:35:52Z",
          "author": { "login": "btakita", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTc2Njk1ODY=",
    "body": "**To Reproduce**\r\n```html\r\n<h1 class=\"h1\">Hello <span>World!</span></h1>\r\n<p>Paragraph</p>\r\n<style>\r\nh1 { color: red; }\r\nh1 span { color: blue; }\r\np { color: green; }\r\n</style>\r\n```\r\n\r\nThis generates \r\n```css\r\nh1.svelte-1vwpyzz.svelte-1vwpyzz { color:red }\r\nh1.svelte-1vwpyzz span.svelte-1vwpyzz{ color:blue }\r\np.svelte-1vwpyzz.svelte-1vwpyzz{ color:green }\r\n```\r\n\r\n**Expected behavior**\r\n```css\r\nh1.svelte-1vwpyzz { color:red }\r\nh1.svelte-1vwpyzz span.svelte-1vwpyzz{ color:blue }\r\np.svelte-1vwpyzz { color:green }\r\n```",
    "closedAt": "2020-09-10T10:26:20Z",
    "createdAt": "2020-09-10T09:26:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDEzOTYxOQ==",
          "body": "Duplicate of #4374.",
          "createdAt": "2020-09-10T10:26:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTcxMjk3OTY=",
    "body": "**Describe the bug**\r\nI am using typescript and compiling a small routing library with Rollup which I'm writing out of educational perspective. When I try to import the parser library that I intend to use, it doesn't seem to work from within a component. \r\n```\r\n<script lang=\"ts\">\r\n  import { urlListener } from './../stores/url-listener.ts'      // works for local files\r\n  import * as RouteParser from '@funjs/route-parser'    // this one fails. \r\n  const parser = RouteParser.RouteParser(r);\r\n```\r\n**Logs**\r\nThe browser gives me a routeParser not defined error (there is no such variable in my code): \r\n```\r\nmain.ts:6 Uncaught ReferenceError: routeParser is not defined\r\n    at main.ts:6\r\n```\r\n\r\nand the Rollup build will produce a warning:\r\n```\r\n(!) Unresolved dependencies\r\nhttps://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency\r\n@funjs/route-parser (imported by src/components/route.svelte)\r\n```\r\n\r\n**To Reproduce**\r\n\r\n- I importing the library in a svelte component.\r\n- Compiled it with rollup to umd (svelte, typescript, resolve, commonjs plugins) \r\n- Imported it with yalc in another project and placed the Svelte component in my Svelte app .\r\n\r\n**Expected behavior**\r\nI would have expected it to be possible to include external libs since I seem to recall I did this before. \r\n\r\n**Information about your Svelte project:**\r\n- Chrome Version 84.0.4147.125 (Official Build) (64-bit)\r\n\r\n- Ubuntu Linux 18 mate\r\n\r\n- Svelte version: 3.24.1\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nMinor, I mainly wanted to report this somewhere for the workaround to save other people time.\r\n\r\n**Additional context**\r\nI used a workaround and instead imported a local **.ts** file which loads the library and throws it back to the Svelte component. For example a parser.ts file: \r\n```\r\n// @ts-ignore\r\nimport RouteParser from '@funjs/route-parser'\r\nexport { RouteParser }\r\n```\r\n\r\ncan then perfectly be included in my route.svelte file.\r\n\r\n` import { RouteParser } from './../helpers/parser.ts'\r\n`",
    "closedAt": "2020-09-09T20:37:22Z",
    "createdAt": "2020-09-09T20:18:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTgwNTgwMg==",
          "body": "In the working example you're importing as `import RouteParser from '@funjs/route-parser'` and in the broken example you're importing as `import * as RouteParser from '@funjs/route-parser'`. Perhaps that's the reason?",
          "createdAt": "2020-09-09T20:32:34Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTgwODEzNQ==",
          "body": "In any case, this would be related to what exactly that package exports, and what your bundler config is - and not anything to do with Svelte.",
          "createdAt": "2020-09-09T20:37:22Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDA0ODAzNA==",
          "body": "No it also doesn't work for 'import RouteParser from '@funjs/route-parser', that was a typo of going to far back in my file history. \r\n The node-resolve plugin seems to work fine if I import the library outside of a Svelte component yet reports an Unresolved Dependencies warning when it's imported in a svelte component. Could be something naive from my side since I'm new to Rollup but it seemed to me it had something to do with the svelte rollup plugin in combination with the node-resolve plugin.  I wasn't sure where to report it but hoped to help someone who had the same error. \r\n\r\nMy rollup config: \r\n```\r\nimport resolve from '@rollup/plugin-node-resolve'\r\nimport typescript from 'rollup-plugin-typescript2'\r\nimport svelte from 'rollup-plugin-svelte'\r\nimport sveltePreprocess from 'svelte-preprocess'\r\nimport commonjs from '@rollup/plugin-commonjs'\r\n\r\nconst generalSteps = (production, fileName) => {\r\n  return {\r\n    input: 'src/main.ts',\r\n    output: [\r\n      {\r\n        sourcemap: true,\r\n        format: 'umd',\r\n        name: 'app',\r\n        file: fileName,\r\n      },\r\n    ],\r\n    plugins: [\r\n      svelte({\r\n        dev: !production,\r\n        preprocess: sveltePreprocess(), // enable run-time checks when not in production\r\n        hydratable: true,\r\n      }),\r\n      typescript({\r\n        rollupCommonJSResolveHack: true,\r\n        clean: true,\r\n        tsconfig: './tsconfig.json',\r\n      }),\r\n      resolve({\r\n        browser: true,\r\n        extensions: ['.js', '.jsx'],\r\n        jsnext: true,\r\n        main: true,\r\n        dedupe: importee =>\r\n          importee === 'svelte' || importee.startsWith('svelte/'),\r\n      }),\r\n      commonjs(),\r\n      // terser(),\r\n    ],\r\n  }\r\n}\r\n\r\nconst rollupSteps = [\r\n  generalSteps(true, 'build/prod.js'),\r\n  generalSteps(false, 'build/dev.js'),\r\n]\r\nexport default rollupSteps\r\n\r\n```\r\n\r\nAnd the dev.js build file starts with:\r\n```\r\n(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@funjs/route-parser')) :\r\n    typeof define === 'function' && define.amd ? define(['exports', '@funjs/route-parser'], factory) :\r\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.app = {}, global.RouteParser));\r\n}(this, (function (exports, RouteParser) { 'use strict';\r\n...\r\n```\r\n\r\nusing (importing the package and running via rollup) the buildfile in another project results in \r\n![image](https://user-images.githubusercontent.com/56540741/92695315-8ef77b80-f348-11ea-9885-40fc115a761f.png)\r\n\r\nThere is no 'routeParser' var in that project, which was what made it confusing to figure out. The error is caused by the import (which also doesn't contain that var with a lowercase letter). \r\n\r\nPut the import outside of a svelte component and all problems go away. \r\n\r\nSorry if it's not related to the svelte rollup plugin. ",
          "createdAt": "2020-09-10T07:29:47Z",
          "author": { "login": "fauna-brecht", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NTE0NDA3Nw==",
          "body": "I'm having the same issue when trying to use rxjs. Compiler also complains about guessing output globals for rxjs. Looks like all libraries are excluded from the bundle but not properly imported.",
          "createdAt": "2021-06-21T15:47:03Z",
          "author": { "login": "DaSchTour", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTY5MjA5ODU=",
    "body": "I followed the site documentation without any luck trying to get the github 0auth feature to work with the REPL.\r\ndiscord link: https://discordapp.com/channels/457912077277855764/457912077277855766/753267308658556928\r\n\r\nError\r\n```\r\nGET /auth/callback Error: Unauthorized\r\n    at toError (/Users/benjaminschachter/svelte/site/node_modules/httpie/dist/httpie.js:6:15)\r\n    at IncomingMessage.<anonymous> (/Users/benjaminschachter/svelte/site/node_modules/httpie/dist/httpie.js:41:6)\r\n    at IncomingMessage.emit (events.js:326:22)\r\n    at endReadableNT (_stream_readable.js:1226:12)\r\n    at processTicksAndRejections (internal/process/task_queues.js:80:21) {\r\n  statusMessage: 'Unauthorized',\r\n  statusCode: 401,\r\n  headers: {\r\n    server: 'GitHub.com',\r\n    date: 'Wed, 09 Sep 2020 14:34:02 GMT',\r\n    'content-type': 'application/json; charset=utf-8',\r\n    'content-length': '80',\r\n    connection: 'close',\r\n    status: '401 Unauthorized',\r\n    'x-github-media-type': 'github.v3; format=json',\r\n    'x-ratelimit-limit': '60',\r\n    'x-ratelimit-remaining': '56',\r\n    'x-ratelimit-reset': '1599663514',\r\n    'x-ratelimit-used': '4',\r\n    'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset',\r\n    'access-control-allow-origin': '*',\r\n    'strict-transport-security': 'max-age=31536000; includeSubdomains; preload',\r\n    'x-frame-options': 'deny',\r\n    'x-content-type-options': 'nosniff',\r\n    'x-xss-protection': '1; mode=block',\r\n    'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin',\r\n    'content-security-policy': \"default-src 'none'\",\r\n    vary: 'Accept-Encoding, Accept, X-Requested-With',\r\n    'x-github-request-id': 'EAFF:10ED:1F60CF2:4BC4C34:5F58E7DA'\r\n  },\r\n  data: {\r\n    message: 'Bad credentials',\r\n    documentation_url: 'https://docs.github.com/rest'\r\n  }\r\n}\r\n```\r\n\r\nThere wasn't a path forward there, also searched around discord, GitHub and GitHub issues svelte and didn't find anyone else with the same issue.",
    "closedAt": "2020-10-15T11:32:46Z",
    "createdAt": "2020-09-09T15:38:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTg0MTMxNA==",
          "body": "I haven't used this feature locally, but at a minimum you probably have to set some properties in the `.env` file:\r\n```\r\nGITHUB_CLIENT_ID=\r\nGITHUB_CLIENT_SECRET=\r\n```",
          "createdAt": "2020-09-09T21:52:01Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTg1NjI0NQ==",
          "body": "I did it. I also checked that they were being loaded into the application\ncorrectly. It's creating token and going through the flow but ends with\nthat 401 unauthorized. :(\n\nOn Wed, Sep 9, 2020 at 5:52 PM Ben McCann <notifications@github.com> wrote:\n\n> I haven't used this feature locally, but at a minimum you probably have to\n> set some properties in the .env file:\n>\n> GITHUB_CLIENT_ID=\n> GITHUB_CLIENT_SECRET=\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5372#issuecomment-689841314>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AATDCI4BKKIWPZDS3HLX5PLSE72JBANCNFSM4RCSMZIQ>\n> .\n>\n\n\n-- \nBenjamin\n",
          "createdAt": "2020-09-09T22:29:53Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDE2NzcxOQ==",
          "body": "I can't reproduce this. Did you create the OAuth app with the appropriate Homepage URL and Authorization callback URL settings described in the site readme?\r\n\r\nHowever, I am then getting different errors which prevent the login from completing when the environment variables with the database credentials are not set. I'm poking around to see whether there's some sensible thing we can do if that's not available, but I'm not sure what makes the most sense to do here.\r\n\r\nWhat are you trying to do exactly? What's your goal in running the OAuth portion of the site locally?",
          "createdAt": "2020-09-10T11:13:58Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDE4NzQ5Mw==",
          "body": "<img width=\"783\" alt=\"Image 2020-09-10 at 7 21 56 AM\" src=\"https://user-images.githubusercontent.com/2502947/92722974-61a1d200-f336-11ea-8330-635afd848727.png\">\r\n\r\n\r\nYes, I followed the readme step-by-step.\r\n<img width=\"786\" alt=\"Image 2020-09-10 at 7 23 24 AM\" src=\"https://user-images.githubusercontent.com/2502947/92723087-8ac26280-f336-11ea-8016-52c7630e207d.png\">\r\n\r\nhttps://github.com/sveltejs/svelte/issues/4712\r\n\r\nI was working on a browser bug in Safari. Being able to have the integration so I don't have to constantly copy-paste the code that's causing the issue is the goal. ",
          "createdAt": "2020-09-10T11:27:10Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDM1NjEwNw==",
          "body": "I feel like I should be using Docker? There isn't any documentation or a\n`docker-compose` file. Also tried manually running the migrations without\nany luck.\n\nOn Thu, Sep 10, 2020 at 7:14 AM Conduitry <notifications@github.com> wrote:\n\n> I can't reproduce this. Did you create the OAuth app with the appropriate\n> Homepage URL and Authorization callback URL settings described in the site\n> readme?\n>\n> However, I am then getting different errors which prevent the login from\n> completing when the environment variables with the database credentials are\n> not set. I'm poking around to see whether there's some sensible thing we\n> can do if that's not available, but I'm not sure what makes the most sense\n> to do here.\n>\n> What are you trying to do exactly? What's your goal in running the OAuth\n> portion of the site locally?\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5372#issuecomment-690167719>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AATDCI53O66V3TX2A7F3KYTSFCYIPANCNFSM4RCSMZIQ>\n> .\n>\n\n\n-- \nBenjamin\n",
          "createdAt": "2020-09-10T15:11:37Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDM2ODM5Nw==",
          "body": "If you are running the site in development mode, requests to get specific saved REPLs are proxied to the real endpoints, so you have read-only access to all the same REPLs (using corresponding URLs) without having to sign in at all or have a local database. Alternatively, if you don't want to load it from the real REPL database and endpoints, you can manually edit any of the examples in `site/content/examples`.",
          "createdAt": "2020-09-10T15:30:59Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDU2MjMzNw==",
          "body": "This is super helpful. I'll update the site `readme.md` with this\ninformation.\n\nOn Thu, Sep 10, 2020 at 11:31 AM Conduitry <notifications@github.com> wrote:\n\n> If you are running the site in development mode, requests to get specific\n> saved REPLs are proxied to the real endpoints, so you have read-only access\n> to all the same REPLs (using corresponding URLs) without having to sign in\n> at all or have a local database. Alternatively, if you don't want to load\n> it from the real REPL database and endpoints, you can manually edit any of\n> the examples in site/content/examples.\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5372#issuecomment-690368397>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AATDCI7JMUYM57GUUJ7J2H3SFDWMNANCNFSM4RCSMZIQ>\n> .\n>\n\n\n-- \nBenjamin\n",
          "createdAt": "2020-09-10T17:43:17Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwOTMxODI1NQ==",
          "body": "This get fixed? ",
          "createdAt": "2020-10-15T13:17:47Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTY1NTk5MTc=",
    "body": "**Describe the bug**\r\nSvelte does not warn when there is an unused selector of the form `element > *` inside `<style>` tags. E.g.:\r\n\r\n```css\r\narticle > * {\r\n    font-size: 36px;\r\n}\r\n```\r\n\r\n**Logs**\r\n\r\nNo logs.\r\n\r\n**To Reproduce**\r\n\r\nREPL:\r\nhttps://svelte.dev/repl/6480b8f41e784418bdae55a163257e21?version=3.24.1\r\n\r\n* Confirm that `article > *` does not raise warnings.\r\n* Uncomment the `article *` selector to see the correctly raised warning.\r\n\r\n**Expected behavior**\r\nA warning should be raised.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- All browsers\r\n\r\n- Latest macOS\r\n\r\n- 3.24.1\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nIt took some time to realize this when trying to target elements that are inside the `@html` string. I then noticed that it is impossible in the first place without using `:global` but having a warning would be much much better.\r\n\r\n**Additional context**\r\nI can try fixing it myself.\r\n",
    "closedAt": "2020-09-15T12:32:56Z",
    "createdAt": "2020-09-09T08:00:20Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjcxODcyMg==",
          "body": "This is fixed in 3.25.1 - https://svelte.dev/repl/6480b8f41e784418bdae55a163257e21?version=3.25.1",
          "createdAt": "2020-09-15T13:35:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTY0NjUyMTk=",
    "body": "**Overview**\r\n\r\nSvelte generates classes that are able to reconcile changes to data. However, quite often I find myself knowing that the data will change completely when updated and that there is no UI that can store user state like form fields. In this case, the reconciliation may be largely unnecessary and we would do just as well to blast away what's there and start anew.\r\n\r\nAs an example, on the homepage of [hn.svelte.dev](https://hn.svelte.dev/), if I hit \"More...\" to go to the next page then there's probably not a need to compare the new data to the old data. I don't need to individually check if `item.domain`, `item.url`, `item.id`, `item.title`, `item.user`, `item.comments_count`, etc. changed. If I got a new item I'm fine assuming they all changed. That allows the component to be much smaller and dumber\r\n\r\n**Benefits**\r\n\r\nThis change would have two large benefits:\r\n* Smaller file size. E.g. 20% of lines in hn.svelte.dev's `[page].js` are the `p` methods and those could be removed. This would result in faster network transfer as well as reduced script parsing times.\r\n* Hydration could potentially be much cheaper. The main reason we do hydration is to make sure the client UI is in sync with the client's data state. However, if we don't store data state on the client for some components because we don't do reconciliation, then possibly we don't need to update the UI or even transfer the data to the client in the first place. This could be a cool way of doing incremental/partial hydration by allowing to basically skip hydration on a per component-basis. This might make the file size 10% smaller still not to mention the runtime improvements, which would be substantial\r\n\r\n**Drawback**\r\n\r\nIn terms of costs, there is likely some savings we get today by reusing the existing DOM structure that we would lose. However, most of any savings could be gained back by simply working on optimizing fragment creation (https://github.com/sveltejs/svelte/issues/3898). E.g. by creating a template and cloning it instead of recreating the DOM structure for each instance. \r\n\r\n**Implementation**\r\n\r\nI'm thinking this would be specified in `<svelte:options>`. Perhaps something like `<svelte:options reconcile=false />`. There may be cases where you would want to call a component in a reconciled fashion and non-reconciled fashion. In that case you would simply use the standard reconciled component everywhere. Once you are including that extra code in your app in one place, there's not much need to do something different elsewhere\r\n\r\nThough I wonder if there might be some other way to accomplish this as well. It almost feels like the combination of `immutable` and a keyed each block should give this to me\r\n\r\nI implemented this for the `page` component of the hn.svelte.dev example just by editing the output of the compiler as can be seen below. `create_fragment` initialized some values that I had to update in `p` by duplicating the initialization code and that could be refactored out into a separate function to reduce the duplication if desired.\r\n```\r\nm: function mount(target, anchor) {\r\n\tthis.target = target;\r\n\t...\r\n},\r\np: function update(ctx, [dirty]) {\r\n\tt0_value = /*item*/ ctx[0].title + \"\";\r\n\tif_block0 = /*item*/ ctx[0].domain && create_if_block_1(ctx);\r\n\tvar anchor = article.nextElementSibling;\r\n\tthis.d(true);\r\n\tthis.c();\r\n\tthis.m(this.target, anchor);\r\n},\r\n```\r\n\r\n**Unanswered questions**\r\n\r\n* What to call this?\r\n* I'm not that familiar with Svelte internals, so I'm sure there are things I'm overlooking that might be challenges. But this seems powerful enough that it'd be interesting to brainstorm if it can be made to work",
    "closedAt": "2020-09-16T20:46:59Z",
    "createdAt": "2020-09-09T06:19:51Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MzY1NjI0Mg==",
          "body": "Closing as duplicate of https://github.com/sveltejs/svelte/issues/4006",
          "createdAt": "2020-09-16T20:46:59Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTU4Njg5Mjg=",
    "body": "**Describe the bug**\r\nA wrapper component exposes a main slot. When providing it with content that itself includes a default slot on which it spreads `$$props`, those a not reactive.\r\n\r\n```js\r\n<Container>\r\n  <div class=\"input\">\r\n    <slot>\r\n      <input type=\"text\" {...$$props} />\t\r\n    </slot>\r\n  </div>\r\n</Container>\r\n```\r\n\r\n**Logs**\r\nNo particular logs\r\n\r\n**To Reproduce**\r\nSee [this REPL example](https://svelte.dev/repl/3760eaa9aec046d4976bcb35f42f2290?version=3.24.1)\r\n\r\n**Expected behavior**\r\nThe props passed to the wrapper component should be transferred to the default slot.\r\n\r\n**Information about your Svelte project:**\r\nNot specific to browser or OS. Reproduced using latest Svelte 3.24.1.\r\n\r\n**Severity**\r\nAnnoying, since I have to find a workaround or explicitely declare every prop that the default slot could get from its wrapper.\r\n\r\nThanks for considering this! I appreciate.\r\n",
    "closedAt": "2020-09-10T18:42:39Z",
    "createdAt": "2020-09-08T13:24:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDYyMTMwOA==",
          "body": "Thanks a lot!",
          "createdAt": "2020-09-10T18:55:48Z",
          "author": { "login": "davidsavoie1", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY5MDMzMA==",
          "body": "This has been fixed in 3.25.0 - https://svelte.dev/repl/3760eaa9aec046d4976bcb35f42f2290?version=3.25.0",
          "createdAt": "2020-09-10T20:08:48Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTU2MTM3MjE=",
    "body": "**Describe the bug**\r\nThe following repl gives a warning about the 'alt' attribute on the img.\r\nhttps://svelte.dev/repl/b9996b40855e4d73b835e066ae0a6557?version=3.24.1\r\n\r\nI think it is a unfair warning as there is no way to describe what this image is without the use of the word 'picture' without using too many unnecessary other words.\r\n\r\n**Logs**\r\nNone\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/b9996b40855e4d73b835e066ae0a6557?version=3.24.1\r\n\r\n**Expected behavior**\r\nI expect svelte to make exceptions in situations like a profile picture, an image that shows someone printing an image described as 'someone printing a picture or image', etc. I should not have to add a ignore warning for these cases. Not ever, really.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: unrelated\r\n- Your operating system: unrelated\r\n- Svelte version: the one used in the repl\r\n- Sappers default rollup template\r\n\r\n**Severity**\r\nIt is annoying and confusing to Svelte newbies like me.\r\n\r\n**Additional context**\r\nHere is my original issue I made about this over at https://github.com/sveltejs/language-tools/issues/524",
    "closedAt": "2020-09-08T12:37:07Z",
    "createdAt": "2020-09-08T07:07:24Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODgzNzg1OA==",
          "body": "Svelte's a11y warnings are based on those from eslint-plugin-jsx-a11y, and as far as I can tell, the [corresponding one for this warning](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/src/rules/img-redundant-alt.js) would also warn about this. The warning is slightly unfortunate in this case, but I don't think this is something we want to change or where we want to diverge from the original implementation. You can use [comments](https://svelte.dev/docs#Comments) to disable individual warnings.\r\n\r\nSeparately, I have no idea how the compiler would be able to make exceptions here without being able to understand English.",
          "createdAt": "2020-09-08T12:37:07Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODg4NjUxMA==",
          "body": "The compiler already knows I'm using the word 'image' or 'picture'. So in theory it could simply check for common combinations. There should never be a need for dampening warnings imo.\r\n\r\nIs svelte's implementation of the a11y linting entirely separate from `eslint-plugin-jsx-a11y`? \r\nCan we configure exceptions easily? ",
          "createdAt": "2020-09-08T13:47:38Z",
          "author": { "login": "UltraCakeBakery", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODg4ODIyNg==",
          "body": "I know it's unfortunate but I doubt we will change this. Opening the door to exceptions by checking for combinations opens the door to many more requests like this which would become unmaintainable at some point. And what about other languages? Adding the ignore comment is meant exactly for edge cases like this.",
          "createdAt": "2020-09-08T13:50:07Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODg5NDQ5MQ==",
          "body": "> I know it's unfortunate but I doubt we will change this. Opening the door to exceptions by checking for combinations opens the door to many more requests like this which would become unmaintainable at some point. And what about other languages? Adding the ignore comment is meant exactly for edge cases like this.\r\n\r\nFully agree with this. Still don't like the ignore comment. This is also not an ideal way to solve this issue.\r\nAre there any alternatives? Something like a a11y config?",
          "createdAt": "2020-09-08T13:59:05Z",
          "author": { "login": "UltraCakeBakery", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODk0Mzk5Mw==",
          "body": "No, we won’t be adding an a11y config. The ignore comments exist to solve this case already on a case by case basis. ",
          "createdAt": "2020-09-08T15:11:29Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTUzOTczNTM=",
    "body": "**Describe the bug**\r\n\r\nComponentA setting the value of a store (call it store1), which calls a function in ComponentB as it is dependent on this store. The function in componentB sets the value of another store (call it store2) and has a reactive declaration for store2 (just a console log, or anything else for that matter), the reactive declaration is NOT called. \r\n\r\nThis appears to be because the initial trigger is from ComponentA. If I update store2 from ComponentB, it calls the reactive declaration on store2.\r\n\r\n**To Reproduce**\r\n\r\nPlease click here:\r\n\r\nhttps://svelte.dev/repl/f51251e28e1a42d292de15b1a6079476?version=3.24.1\r\n\r\nTop.svelte sets setCategory (type the value in the text field and hit SetCat and it updates it). Annoying.svelte listens for this and calls on onSetCat, which console logs (to make sure it's running) and then sets setSearch, which should show an alert, but it does not (only shows on page load, when the value is set from stores.js. There is a button in Annoying.svelte, called try locally, and this DOES trigger the reactive declaration. I've included commented code for a traditional subscribe function, to show it does not work with this either.\r\n\r\n**Information about your Svelte project:**\r\n- Version 85.0.4183.83 (Official Build) (64-bit)\r\n\r\n- Windows 10\r\n\r\n- Reproduced on repl which I believe is the latest?\r\n\r\n**Severity**\r\n\r\nUmm going to be honest, I like this bug, because it actually makes my live search function work a bit better, but hey, I'm an honest guy.\r\n",
    "closedAt": null,
    "createdAt": "2020-09-07T21:25:21Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTc4NjE4Mw==",
          "body": "Though:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\r\n\r\nThis appears to imply that Svelte will wait for the next process?",
          "createdAt": "2020-09-09T19:56:46Z",
          "author": { "login": "lovetoast", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzA5MTMxNg==",
          "body": "A more visual [REPL](https://svelte.dev/repl/d9a7700549f14e6b8f0712964a2585ba?version=3.29.0) demonstrating the issue",
          "createdAt": "2020-10-03T11:52:03Z",
          "author": { "login": "bfanger", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTIzMTc4NQ==",
          "body": "The ordering inside the compiled `$$self.$$.update = () => {` function matters, a minimal example:\r\n\r\n```html\r\n<script>\r\n  let amount = 2\r\n  let price = 1.99;\r\n  let total = 0\r\n\r\n  $: formattedTotal = total.toFixed(2)\r\n  $: calculate(amount) // $: calculate doesn't work when placed below the $: formattedTotal\r\n\r\n  function calculate(n) {\r\n    total = price * n\r\n    console.log('calculated '+ total)\r\n  }\r\n </script>\r\n\r\n{price} x <input type=\"number\" bind:value={amount} /> = {formattedTotal}\r\n```\r\n\r\n[REPL](https://svelte.dev/repl/cbd9a4bb8c5f43c89fa61ffc2ace2e20?version=3.29.0)\r\n\r\nThis makes the reactivity system unreliable, i'll see if I can fix the issue or provide a meaningful warning message.\r\nIt's quite tricky as I don't want to allow circular dependencies.",
          "createdAt": "2020-10-07T22:43:50Z",
          "author": { "login": "bfanger", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTYxNjAwNg==",
          "body": "> The ordering inside the compiled `$$self.$$.update = () => {` function matters, a minimal example:\r\n> \r\n> ```\r\n> <script>\r\n>   let amount = 2\r\n>   let price = 1.99;\r\n>   let total = 0\r\n> \r\n>   $: formattedTotal = total.toFixed(2)\r\n>   $: calculate(amount) // $: calculate doesn't work when placed below the $: formattedTotal\r\n> \r\n>   function calculate(n) {\r\n>     total = price * n\r\n>     console.log('calculated '+ total)\r\n>   }\r\n>  </script>\r\n> \r\n> {price} x <input type=\"number\" bind:value={amount} /> = {formattedTotal}\r\n> ```\r\n> \r\n> [REPL](https://svelte.dev/repl/cbd9a4bb8c5f43c89fa61ffc2ace2e20?version=3.29.0)\r\n> \r\n> This makes the reactivity system unreliable, i'll see if I can fix the issue or provide a meaningful warning message.\r\n> It's quite tricky as I don't want to allow circular dependencies.\r\n\r\nHi Monsieur Bob, thanks for your reply, but, I may have been mistaken, is this not a bug at all and instead how svelte handles the micro-processes?\r\n\r\nPS I was just reading a stack-overflow answer on Svelte, from last month regarding #key and I was thinking this sounds weird but awesome, I'm hoping it was written by an authority, and hey, it was you!\r\n",
          "createdAt": "2020-10-08T14:38:44Z",
          "author": { "login": "lovetoast", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNTcyMzczNw==",
          "body": "Definitely a bug. when you write:\r\n `$: formattedTotal = total.toFixed(2)`\r\nit shouldn't matter if it's at the start or at the bottom of the script tag, that should just work.\r\n\r\nI do expect resistance to a solution. That will need some iterations to get right.",
          "createdAt": "2020-10-08T17:43:39Z",
          "author": { "login": "bfanger", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1ODcwMDkxMA==",
          "body": "Another repro in the REPL:\r\nhttps://svelte.dev/repl/8180d687add34e76b57d5b98508154b0?version=3.31.2\r\n\r\nAs you can see, the moment a function is defined reactive with a parameter, it does not trigger any subsequent reactive updates. While executing the function the moment the initial reactive variable is changed does trickle down all subsequent changes.",
          "createdAt": "2021-01-12T14:41:13Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTMzNzE5OA==",
          "body": "@bfanger Maybe change the title of this issue to reflect the actual bug?",
          "createdAt": "2021-01-13T09:54:06Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTM0MTg4Mg==",
          "body": "@guidobouman I did not report the issue, I did figure out why it happens and created an [RFC](https://github.com/sveltejs/rfcs/pull/40) which outlines a possible solution.",
          "createdAt": "2021-01-13T10:01:59Z",
          "author": { "login": "bfanger", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTM1NzQ2Ng==",
          "body": "Both the REPL by @guidobouman and the issue outlined in the RFC by @bfanger are actually expected behavior given how reactive statements currently work. The key is that the code is analyzed beforehand and only the values immediately part of the declaration are taken into account for ordering. This is explained in more detail in [this issue](https://github.com/sveltejs/svelte/issues/5848#issuecomment-753431840) and [this section of the community docs](https://svelte-recipes.netlify.app/language/#defining-dependencies). The latter also explains why this behavior actually is desirable for some people because you might want to hide specific values from reactivity tracking.",
          "createdAt": "2021-01-13T10:29:43Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTQ4MzYzMg==",
          "body": "@dummdidumm \r\nOkay, we can [shield a variable from reactive tracking with a function](https://svelte-recipes.netlify.app/language/#hiding-values-from-reactive-declarations). But what if, in a function, you edit a variable that is used by another reactive variable? Then the reactivity breaks when the order is not correct. The compiled code from my example showcases this: `$$invalidate()` is compiled into the function.\r\n\r\nThis does not seem like intended behavior. Especially when it starts working the moment you change the order of the reactive declarations.",
          "createdAt": "2021-01-13T14:27:30Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTUwMTIwNQ==",
          "body": "This at the moment is the intended behavior, because as described in the issue linked above, you hide the variable from the ordering algorithm because it's inside the function. You need to make it a direct dependency of the `$`-statement like `$: activeVideoKey = switchToIdle(targetState);`. The reactive algorithm does not look into functions referenced in `$` to determine the order.",
          "createdAt": "2021-01-13T14:55:27Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTUwMzAzOA==",
          "body": "For my understanding: Then where does the `$$invalidate` around the reactive var inside the function come from? 🤔 \r\n\r\nIf the compiler adds the `$$invalidate` method, then I would expect this part of the linked comment to also become true:\r\n> For example, if one block updates foo and another uses foo, the block that updates foo will end up before the other one in the compiled code, even if it were second in the component definition.",
          "createdAt": "2021-01-13T14:58:11Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc1OTUwNzY2Nw==",
          "body": "The `$$invalidate` and the ordering of the reactive statements are not related to each other. The sentence in the linked issue explains it: \"In your component, the compiler cannot tell that the second reactive block might cause changes that should cause the first block to be re-run, because the updates to activated (in your case activeVideoKey) are hidden in the activate() (in your case switchToIdle) function. So it defaults to keeping them in the order you wrote them\"",
          "createdAt": "2021-01-13T15:05:05Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjQxMzI4OA==",
          "body": "Okay, `$$invalidate` and the reactive statements sorting are different and unrelated. But can the dependencies not be tracked through the same mechanism that adds the `$$invalidate` calls? Maybe to influence the sorting or otherwise to improve the reactivity.\r\n\r\nI hoped that the `$$invalidate` call, that is wrapped around all reactive statements, could be used to make this work.\r\n\r\n---\r\n\r\nPS: The RFC explains the issue nicely:\r\n> Svelte reactivity system is invisible, even considered \"magic\", when it doesn't work as expected, it's very hard to debug.\r\n>\r\n> In the current implementation, reactive statements are not always run or are not run with the latest values, this depends on the ordering inside the generated code [...]",
          "createdAt": "2021-01-18T18:36:07Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MjgwMjI3Mg==",
          "body": "In issue #5905 the user wants to have the opposite, no reordering. If we would change the behavior as desired in this issue right here (also tracking stuff inside functions), the user in #5905 would have no possibility to write code in a way that does not get reordered.",
          "createdAt": "2021-01-19T12:10:58Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MzEzOTk4OQ==",
          "body": "Uhmm... It gets reordered anyhow, right? This would not change that.\r\n\r\nActually, I kinda agree with the request from #5905. But combined with deeper dependency tracking from this issue.\r\n\r\nThe one thing I want for in every platform / framework / codebase is predictability. How easy is it to explain it to a newcomer without resorting to caveats. Magic sorting is quite a caveat. Especially when it goes against the line by line execution known to nearly all programming languages, including JavaScript. If you build invisible reactivity, it needs to work in every case.\r\n\r\nIt seems reasonable to want to shield code from reactivity but still react on some variables. A function could still provide that. Could this maybe be achieved if you only track variables in functions that are referenced in the actual reactive statements?",
          "createdAt": "2021-01-19T21:03:58Z",
          "author": { "login": "guidobouman", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjI2MzI2Mw==",
          "body": "I also just ran in this \"bug\"... you can check an oversimplified REPL of my code (I use a custom  store in real code) :\r\n\r\n https://svelte.dev/repl/cb8853b5fe804b9a84417704ba85f6db?version=3.38.3\r\n \r\n I feel this is pretty unpredictable and create bugs that are hard to catch if the component is semi-complicated.\r\n \r\n In this case, I don't want to shield code from reactivity, I want to react when the value of a store changes, regardless of the order.",
          "createdAt": "2021-06-22T19:16:39Z",
          "author": { "login": "madupuis90", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NjYzODE2NA==",
          "body": "It works as expected if you replace `bar.set(!$foo);` with `$bar = !$foo` . Question is if that is consistent or not. On one hand it's consistent because the rule of reactive statements is \"every variable that is directly referenced is used to define the order, on the other hand it's confusing because the statements are semantically the same.",
          "createdAt": "2021-06-23T08:26:27Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTUyNjMyNDI=",
    "body": "**Describe the bug**\r\nIf I have:\r\n- a reactive statement that reads an exported object (which ISN'T changing/being reassigned)\r\n- a write-only variable inside that statement which is also bound to any property of an HTMLElement\r\n\r\nThen the reactive statement gets triggered whenever the write-only variable changes because of the bind, even though no other variable that is read by the statement has changed.\r\nThe same does NOT occur when the variable read by the reactive statement is not exported or is exported but is not an object (for example, a boolean).\r\n\r\n**To Reproduce**\r\nREPL: https://svelte.dev/repl/a24a5cb27a024f8898955d776df568ac?version=3.24.1\r\n\r\n**Expected behavior**\r\nI would expect that what happens with non-object or non-exported variables happened also for exported objects.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 85.0.4183.83, Firefox 80.0.1, Safari 13.1.2\r\n\r\n- Your operating system: PopOS 20.04, macOS 10.15.6\r\n\r\n- Svelte version: 3.24.1\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nThis bug is affecting a core functionality of Svelte which would really speed up the development of reactive components.\r\nAs an example I cannot swap the props passed to a component without risking unexpected behavior caused by reactive statements that get \"randomly\" called. I'm also forced to avoid reactive statements to prevent other weird behaviors.\r\n\r\n**Additional context**\r\nPossibly related issue:\r\nhttps://github.com/sveltejs/svelte/issues/4448\r\nIn this case a reactive statement gets fired even though it accesses an object property that does not change, probably because of the bind:value on the input element\r\n",
    "closedAt": null,
    "createdAt": "2020-09-07T16:30:37Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODQ5OTA2MQ==",
          "body": "I've come to think that reactivity on objects should be discouraged in docs and warned about in dev logs\r\nReactivity on objects ( including arrays ) in svelte is simple : it doesn't work and you shouldn't use them\r\nWith that said it's not necessarily a bad thing, it just forces you to keep your UI state as primitives living in the UI components while keeping the big picture inter-component stuff based in stores",
          "createdAt": "2020-09-07T20:22:20Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODUxMTE3Nw==",
          "body": "I can understand the limitation if it's too difficult to implement, but only if the compiler warns about it (or even throws an error at compile time considering that the output code is buggy).\r\n\r\nBut it's a really big limitation: removing reactivity on objects would prevent anyone from creating a reactive statement to an HTMLElement reference created using bind:this. Moreover it's often the case that in a single page one needs more input groups, each of them containing input elements which are bound to different values, and it's conceptually easier to think of the data of those groups as separate objects with bindings on their properties.\r\n\r\nAnother pretty common scenario is a reactive statement on a store, would reactive statements on stores that contain more than a number or a string also not be allowed anymore? I don't think it would be a good idea, it's too convenient to just use `$: if ($store)` instead of manually calling subscribe and remembering to unsubscribe on the `onDestroy` callback, let alone a simple `$: if ($store1 && $store2)` that would be translated in a lot of boilerplate with a derived store, and a subscription as the previous case.",
          "createdAt": "2020-09-07T21:07:25Z",
          "author": { "login": "cdellacqua", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODUxMjM3Ng==",
          "body": "> I've come to think that reactivity on objects should be discouraged in docs and warned about in dev logs\r\n> Reactivity on objects ( including arrays ) in svelte is simple : it doesn't work and you shouldn't use them\r\n> With that said it's not necessarily a bad thing, it just forces you to keep your UI state as primitives living in the UI components while keeping the big picture inter-component stuff based in stores\r\n\r\n@pushkine Hi, when you say reactivity for objects doesn't work, do mind clarifying what you mean please? ",
          "createdAt": "2020-09-07T21:12:43Z",
          "author": { "login": "lovetoast", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODUzOTA4OA==",
          "body": "> HTMLElement reference created using bind:this\r\n\r\nuse:action\r\n\r\n> each of them containing input elements which are bound to different values\r\n\r\ninput components\r\n\r\n> Another pretty common scenario is a reactive statement on a store\r\n\r\nstores provide a fine grained control as to when to trigger updates, the compiled behavior introduces no magic so there's no worry about using them in reactive statements\r\n\r\n> do mind clarifying what you mean \r\n\r\nI've spent a lot of time in the svelte source code and the logic behind reactivity tracking is by far the most valuable and complex part of it, unfortunately it's also the most chaotic and convoluted thing I've ever read, it's pretty much a black box to everyone but its writer\r\n\r\nReactivity on primitives or about any other feature has yet to fail me, and _from what I picked up_ it sounds like reactivity on objects actually used to work too, but edge cases started to pop up and Rich hasn't had time to rethink some things through in the past year, so he fell back to a \"fail safe\" solution whereby every single reactive thing related to an object gets reevaluated just so that it at least works despite adding a lot of unnecessary work to update cycles \r\nUnfortunately it turned out that besides being heavy on performance it also introduces this issue, as far as I'm concerned I haven't used reactivity on objects since I first reported that exact bug 6 months ago",
          "createdAt": "2020-09-07T23:25:32Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODU0MDc4OQ==",
          "body": "> > HTMLElement reference created using bind:this\r\n> \r\n> use:action\r\n> \r\n> > each of them containing input elements which are bound to different values\r\n> \r\n> input components\r\n> \r\n> > Another pretty common scenario is a reactive statement on a store\r\n> \r\n> stores provide a fine grained control as to when to trigger updates, the compiled behavior introduces no magic so there's no worry about using them in reactive statements\r\n> \r\n> > do mind clarifying what you mean\r\n> \r\n> I've spent a lot of time in the svelte source code and the logic behind reactivity tracking is by far the most valuable and complex part of it, unfortunately it's also the most chaotic and convoluted thing I've ever read, it's pretty much a black box to everyone but its writer\r\n> \r\n> From what I picked up, it sounds like reactivity and objects actually used to work great, but edge cases started to pop up and Rich hasn't had time to rethink some things through in the last year, so he fell back to a \"fail safe\" solution whereby every single reactive thing related to an object gets invalidated just so that it at least works despite adding a lot of unnecessary work to update cycles unfortunately it turns out that besides being heavy on performance it also introduced this kind of issue, as far as I'm concerned I haven't used reactivity on objects since I first reported that issue 6 months ago\r\n\r\nHi @pushkine \r\n\r\nFirstly, thanks for the in-depth answer! I have a store, that is an array of objects, and I have a reactive statement based on this object, which then renders information onto the page, I believe you and the OP are referring to more complex cases than mine, so I wonder if my use case is acceptable, but if not, can you recommend an alternative?",
          "createdAt": "2020-09-07T23:34:01Z",
          "author": { "login": "lovetoast", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODU0NzcyMg==",
          "body": "> I have a store, that is an array of objects, and I have a reactive statement based on this object\r\n\r\nAs long as objects are from stores it's fine, an array of objects might become problematic if there's a lot of data as the whole thing is reevaluated on each update or if you reassign the object to a local variable and mutate its properties individually",
          "createdAt": "2020-09-08T00:03:53Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODY3ODkwMA==",
          "body": "> object\r\n\r\nThanks @pushkine , would that be problematic because it's a lot of data to update, and thus it adds work to the update cycles?",
          "createdAt": "2020-09-08T07:32:54Z",
          "author": { "login": "lovetoast", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTUyNTk1MzQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nMore repos are now part of the Svelte org, like `svelte-preprocess` (cc @kaisermann ) or `language-tools`. Some of these repos - like the two mentioned - have extensive documentation which is not easily discoverable if you don't know what to search for. This makes it hard for beginners to get started when e.g. wanting to use preprocessors.\r\n\r\n**Describe the solution you'd like**\r\nAdd a new section \"Docs\" on the official Svelte site which contains the documentation of all official repos where it makes sense. A proposal:\r\n- `IDEs`: the docs of `language-tools` to know how to setup advanced configs when using the VSCode extension; and pointers to Svelte extensions in other IDEs\r\n- `Integrations`: The list of the integrations repo\r\n- `Preprocessing`: The docs of `svelte-preprocess`\r\n- `Build`: Docs on `rollup-plugin-svelte` and `svelte-loader`\r\n\r\nIt would be great to have some specific \"wrapper\"/introductionary docs for the site and other than that just copy over the docs of the existing repos through a script, if possible. Docs can be tidied up in the process.\r\n\r\n**How important is this feature to you?**\r\nImportant, as I think this will boost the onboarding experience and overall discoverability.",
    "closedAt": null,
    "createdAt": "2020-09-07T16:25:59Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODU4MDkzOQ==",
          "body": "Maybe it would be interesting to define a standardized way to write the documentation of these tools 🤔 . Possibly something similar to the one's already in svelte.dev? ",
          "createdAt": "2020-09-08T02:26:08Z",
          "author": { "login": "kaisermann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODYyMjc3NA==",
          "body": "Yes I think this makes sense. We would need to agree on some syntactic/semantic standard and then edit the docs accordingly. I also think this will be an iterative process.\r\nWhat I would like to avoid is moving the docs in the the main repo, so some script that copies stuff over and knows the locations of the docs by some conventention would be nice. An alternative would be some kind of JSON that lives at a defined position within the repo which tells the script where to get the docs from and how to assemble them.",
          "createdAt": "2020-09-08T05:14:28Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTQzNTg3NDU=",
    "body": "solved: pnpm installs version 2.0.2 of periscopic, which is causing the errors\r\n\r\n```\r\n$ find -L . -name package.json -exec grep -Hn '\"periscopic\":' '{}' \\; \r\n./package.json:87:    \"periscopic\": \"^2.0.1\",\r\n./node_modules.npm/code-red/package.json:37:    \"periscopic\": \"^2.0.1\",\r\n./node_modules.pnpm/code-red/package.json:40:    \"periscopic\": \"^2.0.1\",\r\n\r\n$ find -L . -path '*/periscopic/package.json' -exec grep -Hn '\"version\":' '{}' \\; \r\n./node_modules.npm/periscopic/package.json:74:  \"version\": \"2.0.1\"\r\n./node_modules.pnpm/periscopic/package.json:4:  \"version\": \"2.0.2\",\r\n                                                                ^\r\n                                                                here\r\n```\r\nis npm failing here?\r\nversion `^2.0.1` means `2.x.x >= 2.0.1` (latest minor version)\r\nso pnpm is right when installing 2.0.2\r\n\r\nwith `\"periscopic\": \"2.0.1\"` (no ^ caret)\r\nin [svelte/package.json](https://github.com/sveltejs/svelte/pull/5360) and [code-red/package.json](https://github.com/Rich-Harris/code-red/pull/49), it works with pnpm\r\n\r\n**Severity**\r\n\r\nvery small, rare edge case\r\n\r\n**Describe the bug**\r\n\r\nim using the node package manager [pnpm](https://github.com/pnpm/pnpm) to save bandwidth and diskspace\r\n\r\neverything works fine, until i run\r\n```\r\ncd svelte\r\npnpm run test\r\n```\r\nwhich throws the error\r\n```\r\nfailed to generate output: Cannot read property 'find_owner' of undefined\r\nTypeError: Cannot read property 'find_owner' of undefined\r\n```\r\naround 200 times, in total 556 tests are failing this way\r\n\r\n`undefined` in this case is the variable `state.scope` in the `code-red` library\r\n\r\nthe `pnpm run build` seems to pass (silently fails)\r\nbut the resulting `svelte/compiler.js` is broken\r\n\r\nto compare the two `compiler.js`\r\nlooks like the diff between periscopic@2.0.1 (working) and periscopic@2.0.2 (broken)\r\n\r\n<details>\r\n<summary>diff -u compiler.BROKEN.js compiler.WORKING.js</summary>\r\n\r\n```diff\r\n--- compiler.BROKEN.js\t2020-09-06 14:17:12.767439191 +0200\r\n+++ compiler.WORKING.js\t2020-09-06 14:16:16.053840005 +0200\r\n@@ -244,95 +244,72 @@\r\n \r\n function analyze(expression) {\r\n \tconst map = new WeakMap();\r\n-\tconst globals = new Map();\r\n-\tconst scope = new Scope(null, false);\r\n \r\n-\tconst references = [] ;\r\n-\tlet current_scope = scope;\r\n+\tlet scope = new Scope(null, false);\r\n \r\n \twalk(expression, {\r\n \t\tenter(node, parent) {\r\n-\t\t\tswitch (node.type) {\r\n-\t\t\t\tcase 'Identifier':\r\n-\t\t\t\t\tif (isReference(node, parent)) {\r\n-\t\t\t\t\t\treferences.push([current_scope, node]);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\tbreak;\r\n+\t\t\tif (node.type === 'ImportDeclaration') {\r\n+\t\t\t\tnode.specifiers.forEach((specifier) => {\r\n+\t\t\t\t\tscope.declarations.set(specifier.local.name, specifier);\r\n+\t\t\t\t});\r\n+\t\t\t} else if (/(Function(Declaration|Expression)|ArrowFunctionExpression)/.test(node.type)) {\r\n+\t\t\t\tif (node.type === 'FunctionDeclaration') {\r\n+\t\t\t\t\tscope.declarations.set(node.id.name, node);\r\n+\t\t\t\t\tmap.set(node, scope = new Scope(scope, false));\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tmap.set(node, scope = new Scope(scope, false));\r\n+\t\t\t\t\tif (node.type === 'FunctionExpression' && node.id) scope.declarations.set(node.id.name, node);\r\n+\t\t\t\t}\r\n \r\n-\t\t\t\tcase 'ImportDeclaration':\r\n-\t\t\t\t\tnode.specifiers.forEach((specifier) => {\r\n-\t\t\t\t\t\tcurrent_scope.declarations.set(specifier.local.name, specifier);\r\n+\t\t\t\tnode.params.forEach((param) => {\r\n+\t\t\t\t\textract_names(param).forEach(name => {\r\n+\t\t\t\t\t\tscope.declarations.set(name, node);\r\n \t\t\t\t\t});\r\n-\t\t\t\t\tbreak;\r\n-\r\n-\t\t\t\tcase 'FunctionExpression':\r\n-\t\t\t\tcase 'FunctionDeclaration':\r\n-\t\t\t\tcase 'ArrowFunctionExpression':\r\n-\t\t\t\t\tif (node.type === 'FunctionDeclaration') {\r\n-\t\t\t\t\t\tif (node.id) {\r\n-\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\r\n-\t\t\t\t\t\t}\r\n-\r\n-\t\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, false));\r\n-\t\t\t\t\t} else {\r\n-\t\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, false));\r\n-\r\n-\t\t\t\t\t\tif (node.type === 'FunctionExpression' && node.id) {\r\n-\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\r\n-\t\t\t\t\t\t}\r\n-\t\t\t\t\t}\r\n-\r\n-\t\t\t\t\tnode.params.forEach(param => {\r\n-\t\t\t\t\t\textract_names(param).forEach(name => {\r\n-\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node);\r\n-\t\t\t\t\t\t});\r\n+\t\t\t\t});\r\n+\t\t\t} else if (/For(?:In|Of)?Statement/.test(node.type)) {\r\n+\t\t\t\tmap.set(node, scope = new Scope(scope, true));\r\n+\t\t\t} else if (node.type === 'BlockStatement') {\r\n+\t\t\t\tmap.set(node, scope = new Scope(scope, true));\r\n+\t\t\t} else if (/(Class|Variable)Declaration/.test(node.type)) {\r\n+\t\t\t\tscope.add_declaration(node);\r\n+\t\t\t} else if (node.type === 'CatchClause') {\r\n+\t\t\t\tmap.set(node, scope = new Scope(scope, true));\r\n+\r\n+\t\t\t\tif (node.param) {\r\n+\t\t\t\t\textract_names(node.param).forEach(name => {\r\n+\t\t\t\t\t\tscope.declarations.set(name, node.param);\r\n \t\t\t\t\t});\r\n-\t\t\t\t\tbreak;\r\n-\r\n-\t\t\t\tcase 'ForInStatement':\r\n-\t\t\t\tcase 'ForOfStatement':\r\n-\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\r\n-\t\t\t\t\tbreak;\r\n-\r\n-\t\t\t\tcase 'BlockStatement':\r\n-\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\r\n-\t\t\t\t\tbreak;\r\n-\r\n-\t\t\t\tcase 'ClassDeclaration':\r\n-\t\t\t\tcase 'VariableDeclaration':\r\n-\t\t\t\t\tcurrent_scope.add_declaration(node);\r\n-\t\t\t\t\tbreak;\r\n-\r\n-\t\t\t\tcase 'CatchClause':\r\n-\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\r\n-\r\n-\t\t\t\t\tif (node.param) {\r\n-\t\t\t\t\t\textract_names(node.param).forEach(name => {\r\n-\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node.param);\r\n-\t\t\t\t\t\t});\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n \t\t\t}\r\n \t\t},\r\n \r\n \t\tleave(node) {\r\n \t\t\tif (map.has(node)) {\r\n-\t\t\t\tcurrent_scope = current_scope.parent ;\r\n+\t\t\t\tscope = scope.parent;\r\n \t\t\t}\r\n \t\t}\r\n \t});\r\n \r\n-\tfor (let i = references.length - 1; i >= 0; --i) {\r\n-\t\tconst [scope, reference] = references[i];\r\n+\tconst globals = new Map();\r\n+\r\n+\twalk(expression, {\r\n+\t\tenter(node, parent) {\r\n+\t\t\tif (map.has(node)) scope = map.get(node);\r\n \r\n-\t\tif (!scope.references.has(reference.name)) {\r\n-\t\t\tadd_reference(scope, reference.name);\r\n+\t\t\tif (node.type === 'Identifier' && isReference(node, parent)) {\r\n+\t\t\t\tconst owner = scope.find_owner(node.name);\r\n+\t\t\t\tif (!owner) globals.set(node.name, node);\r\n \r\n-\t\t\tif (!scope.find_owner(reference.name)) {\r\n-\t\t\t\tglobals.set(reference.name, reference);\r\n+\t\t\t\tadd_reference(scope, node.name);\r\n+\t\t\t}\r\n+\t\t},\r\n+\t\tleave(node) {\r\n+\t\t\tif (map.has(node)) {\r\n+\t\t\t\tscope = scope.parent;\r\n \t\t\t}\r\n \t\t}\r\n-\t}\r\n+\t});\r\n \r\n \treturn { map, scope, globals };\r\n }\r\n@@ -354,11 +331,12 @@\r\n \t\tthis.block = block;\r\n \t}\r\n \r\n+\r\n \tadd_declaration(node) {\r\n \t\tif (node.type === 'VariableDeclaration') {\r\n \t\t\tif (node.kind === 'var' && this.block && this.parent) {\r\n \t\t\t\tthis.parent.add_declaration(node);\r\n-\t\t\t} else {\r\n+\t\t\t} else if (node.type === 'VariableDeclaration') {\r\n \t\t\t\tnode.declarations.forEach((declarator) => {\r\n \t\t\t\t\textract_names(declarator.id).forEach(name => {\r\n \t\t\t\t\t\tthis.declarations.set(name, node);\r\n@@ -366,7 +344,7 @@\r\n \t\t\t\t\t});\r\n \t\t\t\t});\r\n \t\t\t}\r\n-\t\t} else if (node.id) {\r\n+\t\t} else {\r\n \t\t\tthis.declarations.set(node.id.name, node);\r\n \t\t}\r\n \t}\r\n@@ -378,7 +356,7 @@\r\n \r\n \thas(name) {\r\n \t\treturn (\r\n-\t\t\tthis.declarations.has(name) || (!!this.parent && this.parent.has(name))\r\n+\t\t\tthis.declarations.has(name) || (this.parent && this.parent.has(name))\r\n \t\t);\r\n \t}\r\n }\r\n@@ -387,45 +365,47 @@\r\n \treturn extract_identifiers(param).map(node => node.name);\r\n }\r\n \r\n-function extract_identifiers(param, nodes = [] ) {\r\n-\tswitch (param.type) {\r\n-\t\tcase 'Identifier':\r\n-\t\t\tnodes.push(param);\r\n-\t\t\tbreak;\r\n-\r\n-\t\tcase 'MemberExpression':\r\n-\t\t\tlet object = param;\r\n-\t\t\twhile (object.type === 'MemberExpression') object = object.object;\r\n-\t\t\tnodes.push(object);\r\n-\t\t\tbreak;\r\n-\r\n-\t\tcase 'ObjectPattern':\r\n-\t\t\tparam.properties.forEach((prop) => {\r\n-\t\t\t\tif (prop.type === 'RestElement') {\r\n-\t\t\t\t\textract_identifiers(prop.argument, nodes);\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\textract_identifiers(prop.value, nodes);\r\n-\t\t\t\t}\r\n-\t\t\t});\r\n-\t\t\tbreak;\r\n+function extract_identifiers(param) {\r\n+\tconst nodes = [];\r\n+\textractors[param.type] && extractors[param.type](nodes, param);\r\n+\treturn nodes;\r\n+}\r\n \r\n-\t\tcase 'ArrayPattern':\r\n-\t\t\tparam.elements.forEach((element) => {\r\n-\t\t\t\tif (element) extract_identifiers(element, nodes);\r\n-\t\t\t});\r\n-\t\t\tbreak;\r\n+const extractors = {\r\n+\tIdentifier(nodes, param) {\r\n+\t\tnodes.push(param);\r\n+\t},\r\n \r\n-\t\tcase 'RestElement':\r\n-\t\t\textract_identifiers(param.argument, nodes);\r\n-\t\t\tbreak;\r\n-\r\n-\t\tcase 'AssignmentPattern':\r\n-\t\t\textract_identifiers(param.left, nodes);\r\n-\t\t\tbreak;\r\n-\t}\r\n+\tMemberExpression(nodes, param) {\r\n+\t\tlet object = param;\r\n+\t\twhile (object.type === 'MemberExpression') object = object.object;\r\n+\t\tnodes.push(object);\r\n+\t},\r\n \r\n-\treturn nodes;\r\n-}\r\n+\tObjectPattern(nodes, param) {\r\n+\t\tparam.properties.forEach((prop) => {\r\n+\t\t\tif (prop.type === 'RestElement') {\r\n+\t\t\t\tnodes.push(prop.argument);\r\n+\t\t\t} else {\r\n+\t\t\t\textractors[prop.value.type](nodes, prop.value);\r\n+\t\t\t}\r\n+\t\t});\r\n+\t},\r\n+\r\n+\tArrayPattern(nodes, param) {\r\n+\t\tparam.elements.forEach((element) => {\r\n+\t\t\tif (element) extractors[element.type](nodes, element);\r\n+\t\t});\r\n+\t},\r\n+\r\n+\tRestElement(nodes, param) {\r\n+\t\textractors[param.argument.type](nodes, param.argument);\r\n+\t},\r\n+\r\n+\tAssignmentPattern(nodes, param) {\r\n+\t\textractors[param.left.type](nodes, param.left);\r\n+\t}\r\n+};\r\n \r\n var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n function encode(decoded) {\r\n@@ -1812,9 +1792,9 @@\r\n \t\tif (name[0] === '@') {\r\n \t\t\tname = state.getName(name.slice(1));\r\n \t\t} else if (node.name[0] === '#') {\r\n-      const owner = state.scope.find_owner(node.name);\r\n+\t\t\tconst owner = state.scope.find_owner(node.name);\r\n \r\n-      if (!owner) {\r\n+\t\t\tif (!owner) {\r\n \t\t\t\tthrow new Error(`Could not find owner for node`);\r\n \t\t\t}\r\n \r\n```\r\n</details>\r\n\r\n\r\n**Expected Behavior**\r\n\r\nwhen i use the `npm` package manager, all works fine\r\n\r\n**Logs**\r\n\r\nthe most common stack trace, printed 210 times:\r\n<details>\r\n<summary>stack trace</summary>\r\n\r\n```\r\nTypeError: Cannot read property 'find_owner' of undefined\r\nat Identifier (node_modules/code-red/dist/code-red.mjs:1339:1)\r\nat handle (node_modules/code-red/dist/code-red.mjs:70:1)\r\nat VariableDeclarator (node_modules/code-red/dist/code-red.mjs:597:1)\r\nat handle (node_modules/code-red/dist/code-red.mjs:70:1)\r\nat node_modules/code-red/dist/code-red.mjs:294:1\r\nat Array.map (<anonymous>)\r\nat handle_var_declaration (node_modules/code-red/dist/code-red.mjs:294:1)\r\nat node_modules/code-red/dist/code-red.mjs:506:1\r\nat node_modules/code-red/dist/code-red.mjs:227:1\r\nat handle (node_modules/code-red/dist/code-red.mjs:70:1)\r\nat node_modules/code-red/dist/code-red.mjs:249:1\r\nat Array.map (<anonymous>)\r\nat handle_body (node_modules/code-red/dist/code-red.mjs:248:1)\r\nat node_modules/code-red/dist/code-red.mjs:325:1\r\nat node_modules/code-red/dist/code-red.mjs:227:1\r\nat handle (node_modules/code-red/dist/code-red.mjs:70:1)\r\nat node_modules/code-red/dist/code-red.mjs:584:1\r\nat node_modules/code-red/dist/code-red.mjs:227:1\r\nat handle (node_modules/code-red/dist/code-red.mjs:70:1)\r\nat node_modules/code-red/dist/code-red.mjs:249:1\r\nat Array.map (<anonymous>)\r\nat handle_body (node_modules/code-red/dist/code-red.mjs:248:1)\r\nat Program (node_modules/code-red/dist/code-red.mjs:319:1)\r\nat handle (node_modules/code-red/dist/code-red.mjs:70:1)\r\nat print (node_modules/code-red/dist/code-red.mjs:1425:1)\r\nat Component.generate (src/compiler/compile/Component.ts:316:1)\r\nat compile (src/compiler/compile/index.ts:99:1)\r\nat Object.require.extensions..svelte (test/runtime/index.js:42:29)\r\nat Module.load (internal/modules/cjs/loader.js:1050:32)\r\nat Function.Module._load (internal/modules/cjs/loader.js:938:14)\r\nat Module.require (internal/modules/cjs/loader.js:1090:19)\r\nat require (internal/modules/cjs/helpers.js:75:18)\r\nat test/runtime/index.js:142:13\r\n```\r\n\r\n</details>\r\n\r\n**Environment**\r\n\r\n```\r\n$ uname -srm\r\nLinux 5.6.11-arch1-1 x86_64\r\n$ node --version\r\nv14.5.0\r\n$ pnpm --version\r\n5.5.11\r\n```\r\n\r\n**To Reproduce**\r\n\r\n<details>\r\n<summary>bash script: pnpm run test</summary>\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\n# install pnpm\r\npnpm --version || npm i -g pnpm\r\n\r\n# 3 MB download\r\ngit clone --depth=1 https://github.com/sveltejs/svelte.git\r\ncd svelte\r\n\r\n## 130 MB download with puppeteer\r\n#pnpm install\r\n\r\n# 30 MB download\r\npnpm rm puppeteer\r\n\r\n# install all except puppeteer\r\n# save around 100 MB download on every install\r\n# cos node_modules/puppeteer/.local-chromium\r\n# is not cached by pnpm\r\n# removing puppeteer does not cause the bug\r\n\r\n#pnpm run build\r\n#node test-compile.js\r\n# test script fails\r\n\r\n# remove puppeteer test\r\nrm -rf test/custom-elements\r\npnpm run test\r\n# 500 tests fail\r\n\r\n######################################\r\n\r\necho 'done pnpm test, now test npm'\r\necho -n 'hit enter to continue'\r\nread\r\n\r\n# undo changes\r\ngit checkout master --force\r\nmv node_modules node_modules.pnpm\r\n\r\n# use npm\r\nnpm rm puppeteer\r\n\r\n#npm run build\r\n#node test-compile.js\r\n# test script works\r\n\r\nrm -rf test/custom-elements\r\nnpm run test\r\n# all 3000 tests pass\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>java script: svelte.compile</summary>\r\n\r\n```js\r\n// test-compile.js\r\n\r\nconst svelte = require('./svelte/compiler.js');\r\n\r\nconst inputList = [\r\n\r\n  // test css spread\r\n  '<div {...props} />',\r\n\r\n  // test vars props\r\n  `{#each cats as cat}\r\n    {cat.name}\r\n  {/each}`,\r\n\r\n  // test runtime component-namespace\r\n  `{#each widgets as LazyWidget}\r\n    <LazyWidget.Tooltip />\r\n  {/each}`,\r\n\r\n  // test runtime animation-css\r\n  `{#each things as thing (thing.id)}\r\n    <div animate:flip>{thing.name}</div>\r\n  {/each}`,\r\n\r\n];\r\n\r\nconst input = inputList[0];\r\n\r\nconst dom = svelte.compile(input, { format: 'cjs' });\r\n```\r\n</details>\r\n\r\ncan anyone reproduce this error?\r\nor did i break my machine?\r\n\r\nalready tried to re-install pnpm and use an empty global-store, but no success\r\n",
    "closedAt": "2020-09-06T19:42:16Z",
    "createdAt": "2020-09-06T12:12:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4Nzg4MTc5MQ==",
          "body": "This isn't a bug. You're expected to use npm so that you get the same package versions as specified in package-lock.json. In the past there have been a lot of build failures when you install the latest versions matching package.json because of, for example, newer versions of TypeScript adding stricter typechecking rules. This may be a bug in periscopic, but not here.",
          "createdAt": "2020-09-06T19:42:16Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODM0MDQ4MA==",
          "body": "so package-lock.json is the single source of truth\r\ncos only there we can pin versions of sub-dependencies\r\n\r\nnow im using [`pnpm import`](https://pnpm.js.org/en/limitations)\r\n\r\n> pnpm import generates a pnpm-lock.yaml\r\n> from an npm package-lock.json (or npm-shrinkwrap.json) file.\r\n\r\nlooking good, tests are passing again - problem solved\r\n",
          "createdAt": "2020-09-07T13:52:26Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTM0MTcwNjU=",
    "body": "**Describe the bug**\r\nAs the titule say, I can't use  `$$slots` variable\r\n\r\n**Logs**\r\nThis shows the error in vscode, even if there is a definition for the `$$slots` variable\r\n\r\n```\r\nlet $$slots: Record<\"prefix\" | \"sufix\", boolean>\r\n$$slots is an illegal variable namesvelte(illegal-global)\r\n```\r\n\r\nThe error is also logged in the console\r\n\r\n```\r\n✗ client\r\nC:\\CLC\\VIDA\\Web\\Comun\\ypalma\\sapper-cms-template\\src\\components\\Input.svelte\r\n$$slots is an illegal variable name\r\n29:   }\r\n30: \r\n31:   $: console.log($$slots)\r\n                     ^\r\n32:   const id = label ? label.replace(/ +/g,'-').toLowerCase() : Math.random().toString(36).substring(7)\r\n33: \r\n✗ server\r\nC:\\CLC\\VIDA\\Web\\Comun\\ypalma\\sapper-cms-template\\src\\components\\Input.svelte\r\n$$slots is an illegal variable name\r\n29:   }\r\n30: \r\n31:   $: console.log($$slots)\r\n                     ^\r\n32:   const id = label ? label.replace(/ +/g,'-').toLowerCase() : Math.random().toString(36).substring(7)\r\n33: \r\n```\r\n\r\n**To Reproduce**\r\nI just tried to use the $$slots variable\r\n\r\n**Expected behavior**\r\nIt should have a representation of my component slots, as shown [here](https://github.com/sveltejs/svelte/blob/0ac341d2c6823114786788fb2d49bb324b372e4b/test/runtime/samples/%24%24slot/A.svelte)\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 85.0.4183.83 (64 bit)\r\n\r\n- Your operating system: Window 10\r\n\r\n- Svelte version: 3.24.1 \r\n\r\n- Using rollup\r\n",
    "closedAt": "2020-09-04T18:01:17Z",
    "createdAt": "2020-09-04T17:27:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NzI4NDQ3OQ==",
          "body": "The PR that added `$$slots` was #4602 and that hasn't been released yet according to the changelog.\r\n\r\nhttps://github.com/sveltejs/svelte/blob/8148a7a33444805320923e4c4e071f62dee3df6c/CHANGELOG.md",
          "createdAt": "2020-09-04T17:29:48Z",
          "author": { "login": "tivac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NzI5ODg0Ng==",
          "body": "Oh I see, thanks for your response.",
          "createdAt": "2020-09-04T18:01:17Z",
          "author": { "login": "YerkoPalma", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTI1NDk0NTY=",
    "body": "Hi Svelte Peeps! XD\r\n\r\nSo,\r\n\r\n...after using `Styled-Components` and `Emotion` in `React` I completely fell in love with detailed semantic meaning in the form of custom element names, not unlike the official `custom-elements` spec. Now I'm moving away from `React` for all the reasons and starting to fall for `Svelte`, but this is one thing I do still dearly miss from `React` and CSS-In-JS in general. I am aware that I can use CSS-In-JS in react, but I would much prefer something like this built into the language of `Svelte` and made as simple and terse as possible, in keeping with `Svelte` tradition :-)\r\n\r\n## Problem\r\n\r\nWhen writing css inside a single file component in `Svelte` I can avoid writing classes to a greater extent than with global, vanilla html, but they are still required in many instances, especially for useful and specific semantic meaning and when using multiple instances of the same html element, such as `<div`'s, like so:\r\n\r\n```html\r\n<div class='container'>\r\n  <div class=\"content-card\">\r\n    <div class=\"member-image\">\r\n      <div class=\"vertical-line\"/>\r\n      <img class=\"team-pic\" src={member.picture} alt={member.alt}/>\r\n      <div class=\"scrim\"></div>\r\n    </div>\r\n    <div class=\"member-text\">\r\n      <h1 class=\"name\">{member.name}</h1>\r\n      <h2 class=\"position\">{member.position}</h2>\r\n      <div class=\"horizontal-line\"/>\r\n      <p class=\"bio\">{member.bio}</p>\r\n      <button>Back</button>\r\n    </div><!--which div is this again?-->\r\n  </div><!--which div is this again?-->\r\n</div><!--which div is this again?-->\r\n```\r\n\r\n...which is 466 characters without spaces!\r\n\r\nWriting like this now is very very very very very...very frustrating, as I am used to doing something like this with `Styled-Components` and/or `Emotion` in `React`:\r\n\r\n```JSX\r\n<Container>\r\n  <ContentCard>\r\n    <MemberImage>\r\n      <VerticalLine/>\r\n      <TeamPic src={member.picture} alt={member.alt}/>\r\n      <Scrim/>\r\n    </MemberImage>\r\n    <MemberText>\r\n      <Name>{member.name}</Name>\r\n      <Position>{member.position}</Position>\r\n      <HorizontalLine/>\r\n      <Bio>{member.bio}</Bio>\r\n      <Button>Back</Button>\r\n    </MemberText>\r\n  </ContentCard>\r\n</Container>\r\n```\r\n\r\n...which is 296 characters without spaces. A roughly 36% reduction in characters! Woo hoo!\r\n\r\n...which I would argue is OBJECTIVELY better, not subjectively better, for a few reasons.\r\n\r\n### True semantic meaning in the markup...\r\n\r\nRather than the vague heuristics of general use html elements like `<div>`'s and `<span>`'s and `<p>`'s meaning can be clear and exact, like `<title>`, `<position>`, `<salary>`, `<hopes-and-dreams>` etc...which is far more meaningful to the content and are more specific...such a major win! Which is also why custom-elements exist, even though they have many long-standing issues...\r\n\r\n### No more hunting for a closing `<div>`'s partner...\r\n\r\nFinding the accompanying opening tag of a closing `<div>` tag when you are the bottom of a large stack of div's is literal madness, as evidenced by my comments in the first example. Trying to visually trace where a closing div comes from is an exercise in self loathing, and I would prefer to not have to do it ever again. If the name of the element is a custom name, then that problem disappears. This is not a problem when things are simple enough, but even in the simple example it can start to get confusing and potentially introduce bugs.\r\n\r\n### Less code, Less bugs, just...less...\r\n\r\nLess code, less characters, less confusion, less bugs...kind of one of the main reasons that `Svelte` exists, at least according to it's creator :-) Without having to co-opt the `class` attribute to name elements properly means less use of the `class` attribute to begin with, and more proper use of the `class` attribute when necessary, adding only actual classes, ala Tailwind, but also not using `class` at all when it's not needed. So much cleaner and easier and prettier to look at in general. The use of the word 'class' beyond naming `<div>`'s in html is most often to categorize a group of things by a SHARED attribute, trait, ancestor, similarity, etc., and it's a bit odd to use this concept for naming one thing once. Of course we can use `id`, but it introduces the same issue, simply with a different attribute, although one that does make more sense for the given task :-) 36% less characters is a big chunk less characters, all while conveying more meaning and being easier to read and more straightforward and cooler and sexier and, dare I say, svelter ;-)\r\n\r\n# Proposal\r\n\r\nI propose we add a feature to the language and compiler of svelte to allow users to create these custom element names easily using something like the following syntax in the `<style>` block using either `kabob-casing` and/or `CamelCasing`:\r\n\r\n```css\r\nh1 as CustomName {...styles...}\r\n```\r\n\r\n...or\r\n\r\n```css\r\nh1 = custom-name {...styles...}\r\n```\r\n\r\n...but then this would simply be compiled into an extra class name, ala `Styled-Components` and `Emotion`, like so:\r\n\r\n```html\r\n<h1 class=\"custom-name-svelte-8675309e9\">\r\n```\r\n\r\n...so it would not be adding any need for more functions or a runtime or anything along those lines, just a much nicer developer experience for the developer that still gets compiled to lean and mean css :-)\r\n\r\nComing from the future, where we write styled-components and get to really express our semantic selves and moving back into the past, where we have to waste our lives away writing class names where custom element names should be, this would be a very nice addition to svelte indeed! And of course it's completely optional, and nobody would have to use it if they do not want to...maybe it could even support `kabob-casing`, rather than only `CamelCasing`, which I generally think is just a mistake. That might look like this this:\r\n\r\n```html\r\n<container>\r\n  <content-card>\r\n    <member-image>\r\n      <vertical-line/>\r\n      <team-pic src={member.picture} alt={member.alt}/>\r\n      <scrim/>\r\n    </member-image>\r\n    <member-text>\r\n      <name>{member.name}</name>\r\n      <position>{member.position}</position>\r\n      <horizontal-line/>\r\n      <bio>{member.bio}</bio>\r\n      <button>Back</button>\r\n    </member-text>\r\n  </content-card>\r\n</container>\r\n```\r\n\r\n...but I will live with only the mistake that is `CamelCasing` if I must :-) And of course one can still import other svelte components that would then live side by side with these internal components. I can't imagine there would be any issues there, but i dunno...\r\n\r\nNow, I preface this feature request with the understanding that I understand absolutely nothing about the compiler or how it works, or if something like this would be even possible, but...\r\n\r\n...deng meng...\r\n\r\n...I would personally LOVE THIS, and all the people I work with who are non-technical that I have ran the idea past unanimously prefer it as well...which is like...6 people...So...yeah\r\n\r\nThanks for reading and I hope that made sense and was maybe even somewhat entertaining! XD\r\n\r\nCheers!\r\n\r\nRichard",
    "closedAt": null,
    "createdAt": "2020-09-04T00:42:32Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTI1Mzc3OTA=",
    "body": "I've had problems with loading components asyncronously using dynamic import and SSR on JAM-stack site. Consider a situation where locally stored JSON data dictates what component to load at build-time.\n\nThe workaround I've been using thus-far is loading all the components on build-time on module context and only needed components on client-side using render-blocking if-block. But that is ugly and might cause a race condition (although only on rare cases) since the component loading on build-time isn't awaited.\n\nWhat I would like to have is way to block build-time rendering (SSR) for the time of loading dynamically imported components.\n\nI tried to implement some kind of beforeMount lifetime hook, but it doesn't seem possible with the compiled code and template being tied together. Then I tried implementing top-level await for the script block but Acorn JavaScript parser started complaining just by thought of that.\n\nPotential feature that could solve it could be svelte:dependency tag. It could function as an await after script execution and before template rendering.\n\n```html\n<svelte:dependency await={promise} />\n```",
    "closedAt": "2020-09-10T10:43:48Z",
    "createdAt": "2020-09-04T00:21:24Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDE0NzkzNw==",
          "body": "This is essentially a duplicate of #958. If you have a more concrete proposal, please open an RFC at https://github.com/sveltejs/rfcs",
          "createdAt": "2020-09-10T10:43:48Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTE5MzQwNDc=",
    "body": "In the [Svelte Society (Amazing!) site](https://sveltesociety.dev) there is [a recipe](https://sveltesociety.dev/recipes/component-recipes/passing-attributes-to-component-dom-element) that shows how to pass attributes to component DOM element:\r\n\r\n```svelte\r\n<!-- Component.svelte -->\r\n<li {...$$restProps} ><slot></slot></li>\r\n\r\n<!-- App.svelte -->\r\n<Component class=\"li-item-class\">{name}</Component>\r\n```\r\n\r\nThis is the same info we can find in [Svelte Docs site](https://svelte.dev/docs#Attributes_and_props).\r\n\r\n### THE QUESTION / PROPOSAL\r\n\r\nIn Svelte Docs I can read:\r\n\r\n> $$props references all props that are passed to a component – including ones that are not declared with export. It is useful in rare cases, **but not generally recommended, as it is difficult for Svelte to optimise.**\r\n\r\nI cannot find the same warning for `$$restProps`.\r\n\r\nIs `$$restProps` recommended?\r\n\r\n**Can we use it without Svelte optimization problems like for its sibling `$$props`?**\r\n\r\n_Should we update the docs for this?_",
    "closedAt": "2020-10-01T18:00:16Z",
    "createdAt": "2020-09-03T12:38:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjU4MjM5OA==",
          "body": "It has the same optimization problems as `$$props` does. Like `$$props`, you should only use `$$restProps` when you do not know at compile time what props might be passed to your component. This should be reflected in some way in the docs.",
          "createdAt": "2020-09-03T15:47:03Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjI4NTE2Mw==",
          "body": "This issue seems to be resolved by #5368\r\n@Conduitry can it be marked as such to prevent contributor to \"loose\" time on it ?",
          "createdAt": "2020-10-01T17:28:17Z",
          "author": { "login": "ThomasFerro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMjMwMjgyNg==",
          "body": "Yep, this should have been closed when that was merged, thanks.",
          "createdAt": "2020-10-01T18:00:16Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTE2ODk0MjM=",
    "body": "I think the youtube channel [Svelte Master](https://www.youtube.com/channel/UCg6SQd5jnWo5Y70rZD9SQFA) deserves a spot in the \"Are there any video courses?\" section of the [faq](https://svelte.dev/faq)",
    "closedAt": "2020-10-20T15:40:25Z",
    "createdAt": "2020-09-03T06:41:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzE2MzE4MA==",
          "body": "Greetings I am looking to get going on a issue for hacktoberfest this seem like something in my ability, is it ok if I take this issue up?",
          "createdAt": "2020-10-03T20:51:32Z",
          "author": { "login": "rashadmad", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzE2NTAzMw==",
          "body": "There is one awaiting already #5490 do not spam again, please look for another issue.",
          "createdAt": "2020-10-03T21:08:48Z",
          "author": { "login": "peopledrivemecrazy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTE2MTc2MzM=",
    "body": "**Describe the bug**\r\nComments can alter code generation in a way that produces broken code.\r\nThis has been noticed specifically in functions\r\nwith comments that occur between the return keyword and the end of the returned statement.\r\n\r\n**Logs**\r\nNo errors reported\r\n\r\n**To Reproduce**\r\nHere is a [repl demonstrating the issue with comments between the null coalescing operator](https://svelte.dev/repl/fc38bf07ee5e4018a4af570bac30221f?version=3.24.1).\r\nA simpler example included below for brevity\r\n```ts\r\nlet a = undefined\r\n  // This comment is perfectly safe.\r\n  ?? 1\r\nlet b = (() => {\r\n  return undefined\r\n  // This comment breaks something in svelte's code generation\r\n  ?? 1\r\n})()\r\nconsole.log(a) // 1\r\nconsole.log(b) // undefined\r\n```\r\n\r\n**Expected behavior**\r\nAll functions should return 1.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 81.0b3\r\n\r\n- Svelte version: REPL 3.24.1\r\n\r\n**Severity**\r\nHigh. The fact that a **comment** can ***silently break code*** is a major issue for me on the level of ditching the framework entirely.\r\nThat said, I would say impact is between moderate and low. I have not checked and identified all cases in which this will be triggered, but so long as it is only triggered in the return statement, I cannot imagine it affecting too many projects.\r\n\r\nAs it occurs with at least the *null coalescing operator* and the *ternary operator *, I believe it is ok to assume some projects are potentially imparted by this in the wild. Depending on what other operations and expressions trigger this bug, it could have up to a moderate impact.\r\n\r\nSo long as this issue is only present in return statements, Impact probably isn't much higher than moderate (depending on what operations and expressions are affected, could be low). \r\nThat said, projects that are affected may not notice since the issue (as presently understood) only occurs when the operators should return their secondary/fallback values.\r\n\r\n**Additional context**\r\nOriginally was being used in a [sort operation](https://svelte.dev/repl/13570eb8a00747279a583a95f6d5b4f6?version=3.24.1) with the intent of being used for in a multi-select component.\r\n\r\n<details><summary>Rant</summary>\r\nThe number of silent bugs I have encountered are starting to pile up, so I may be leaving with this. Svelte is a very fun language to type, so I believe it can take over. But the DX, while improving daily, is still horrid imho for projects scripted with moderate complexity.\r\n\r\nIts hard to convince myself that I am hitting corner cases with the quantity I have had to work around in the last 3 weeks of play.\r\nAnd, unfortunately, I am not good enough of a developer to identify and work around compiler bugs in addition to analyzing and debugging the code I wrote this often. Mentally, I am marking svelte, the language, as beta(lots of things either needs more thorough docs or a better compiler, can't say which without reading rfcs, but assuming the latter) and svelte, the compiler, as an (mentally)unstable alpha.\r\n</details>",
    "closedAt": "2020-09-04T11:47:28Z",
    "createdAt": "2020-09-03T04:04:15Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjU4NTQ0NQ==",
          "body": "Probably the same as https://github.com/Rich-Harris/code-red/issues/36",
          "createdAt": "2020-09-03T15:52:03Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4Njg0MjE2Mg==",
          "body": "Apparently the issue in the REPL was not due to code-red, i've read through the output JS, it looks okay to me.\r\n\r\nSurprisingly this is a bug from rollup, see [Rollup repl](https://rollupjs.org/repl/?version=2.26.9&shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmZ1bmN0aW9uJTIwZm9vKCklMjAlN0IlNUNuJTVDdHJldHVybiUyMHVuZGVmaW5lZCUyMCUzRiUzRiUyMCUyRiUyRiUyMGNvbW1lbnQlNUNuJTVDdCU1Q3QxJTNCJTVDbiU3RCU1Q24lNUN0JTVDbndpbmRvdy5mb28lMjAlM0QlMjBmb28oKSUzQiUyMiUyQyUyMmlzRW50cnklMjIlM0F0cnVlJTdEJTVEJTJDJTIyb3B0aW9ucyUyMiUzQSU3QiUyMmZvcm1hdCUyMiUzQSUyMmVzJTIyJTJDJTIybmFtZSUyMiUzQSUyMm15QnVuZGxlJTIyJTJDJTIyYW1kJTIyJTNBJTdCJTIyaWQlMjIlM0ElMjIlMjIlN0QlMkMlMjJnbG9iYWxzJTIyJTNBJTdCJTdEJTdEJTJDJTIyZXhhbXBsZSUyMiUzQW51bGwlN0Q=)\r\n\r\nhttps://github.com/rollup/rollup/issues/3761",
          "createdAt": "2020-09-04T01:11:37Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTE0MTMyNTk=",
    "body": "**Describe the bug**\r\nWhen (1) Server-side rendering and (2) Browsing in firefox, Svelte fails to set bindings for values that are initialized to a value on page reload.\r\n\r\nFor instance, with code like\r\n\r\n```\r\n<audio ... bind:duration={myDuration} />\r\n```\r\n\r\nif `myDuration` is initialized to 0, then it will remain zero indefinitely.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\n\r\nA repo reproducing this issue is here: https://github.com/qstearns/audio-event-repro\r\n\r\nI used sapper to get SSR to work easily, but I suspect this is a svelte issue.\r\n\r\nTo run follow the readme or:\r\n\r\n1. npm i && npm run dev\r\n2. Navigate to localhost:3000 in Firefox\r\n3. Reload the page and observe the value is set to 0.\r\n\r\n**Expected behavior**\r\nI expected the value to be set to the value of the audio clip.\r\n\r\n**Stacktraces**\r\n\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 79.0\r\n\r\n- Your operating system: Manjaro Linux 20.1\r\n\r\n- Svelte version: 3.17.3\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nThis bug is just annoying because I can always initialize my values to undefined and adjust my application code, but a fix would make me happy.\r\n\r\n**Additional context**\r\n\r\nMay be related to #3524, which I have also noticed a regression on.\r\n",
    "closedAt": null,
    "createdAt": "2020-09-02T20:53:32Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjIyMjgwOQ==",
          "body": "Hi, I tried to reproduce the issue in the magnificent REPL (with svelte 3.17.3) but I couldn't:\r\n[sample](https://svelte.dev/repl/d46a97a2993441babd89a70113e79b27?version=3.17.3)\r\nI used Firefox 80 though. Does the issue happens in that REPL sample?",
          "createdAt": "2020-09-03T03:09:13Z",
          "author": { "login": "dmorganb", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjY2MDA4OA==",
          "body": "Hey! Thanks for having a look. Unfortunately, I believe this issue only occurs when Svelte is mounting a DOM from an SSR render, so I can't reliably reproduce in the REPL. I couldn't figure out a way to convince the REPL to hydrate before page load, but if that's possible I bet you could reproduce there.",
          "createdAt": "2020-09-03T18:06:11Z",
          "author": { "login": "qstearns", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjkzMzQzNA==",
          "body": "I tried to log the duration of the audio element using an action\r\n```svelte\r\n<script>\r\n\tconst action = (audio) => {\r\n\t\tconsole.log(audio.duration)\r\n\t}\r\n</script>\r\n<audio use:action>\r\n```\r\nit behaves differently on firefox and chrome. firefox always logs the actual duration on reload while chrome would log `NaN`. \r\nIt seems like firefox already loads the source of the audio element before hydration and before attaching the event handler for watch duration value.",
          "createdAt": "2020-09-04T06:10:16Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NzIyOTY1NA==",
          "body": "https://github.com/sveltejs/svelte/blob/c752ed3527a64a5705c3e005f9bc18862fa6ad3a/src/compiler/compile/render_dom/wrappers/Element/index.ts#L619\r\nI'm guessing it has something to do with the line. it would not check the value if the variable is already initialized. Maybe because these binding are readonly. \r\n\r\nOn Chrome, it's not an issue because the audio would be loaded after hydration, so event handler would update the value. Firefox won't load the audio source again after page reload. so it got stuck with the initial value.",
          "createdAt": "2020-09-04T15:44:45Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NzI0MDk0Mg==",
          "body": "That definitely checks out - I'm guessing that changing these undefined checks would potentially have some pretty undesirable consequences, so I might be out of luck. FWIW, I think the regression on #3524 is probably the bigger issue here\r\n\r\n",
          "createdAt": "2020-09-04T16:04:21Z",
          "author": { "login": "qstearns", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTEzOTQ5NDY=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nI was thinking about new ways to honor a user's request to have a [less frustrating experience with animations](https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html) and eventually wondered if this flag is something Svelte itself could (whether as default on or default off) \"respect.\"\r\n\r\n**Describe the solution you'd like**\r\nIf Svelte respected `prefers-reduced-motion` out of the box, it could opt-out of any transitions or animations automatically without extra effort on the developer's part. Alternatively, this could be a flag to the various animation features that signal whether they should skip an animation instruction if `prefers-reduced-motion` is on.\r\n\r\n**Describe alternatives you've considered**\r\nI've done this in the past manually (in `three.js`/WebGL land) so I think it's certainly doable by the developer if left to their own devices, and can be done today in Svelte without formal support from the library.\r\n\r\n**How important is this feature to you?**\r\nI've always appreciated how Svelte helps developers do the right thing, and tries to lessen the pain of the \"right thing\" if you were left to coding it yourself. If a user is making the request to not have gratuitous or potentially harmful animations, I believe we should do whatever we can to respect that. In my opinion, this feels like a prime candidate for Svelte to encourage and enable the humane choice of respecting the user's request.\r\n",
    "closedAt": null,
    "createdAt": "2020-09-02T20:24:17Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjI1MDIzOQ==",
          "body": "All animations/transitions in svelte are done through pure css, simply add the following to your global style sheet\r\n```css\r\n@media (prefers-reduced-motion: reduce) {\r\n  * {\r\n    animation-delay: 0ms !important;\r\n    animation-duration: 1ms !important;\r\n  }\r\n}\r\n```",
          "createdAt": "2020-09-03T04:48:29Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzA1NzE4Mg==",
          "body": "All animations/transitions in svelte are not done through pure css.\r\n\r\nTweening is VERY much not done though css. The entire motion package isn't CSS",
          "createdAt": "2020-10-03T06:49:37Z",
          "author": { "login": "blairn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMzA3NjIxMg==",
          "body": "`svelte/motion` is an extension of `svelte/store`, if you know for sure that setting your values instantly won't break your uses of `spring` and `tweened`, the apis are so similar you'll most likely be fine just re-exporting them as `writable`s\r\n\r\n```ts\r\nimport { spring as svelte_spring, tweened as svelte_tweened } from \"svelte/motion\";\r\nimport { writable } from \"svelte/store\";\r\n\r\nconst reduce_motion = matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\r\n\r\nexport const spring = reduce_motion ? writable : svelte_spring;\r\nexport const tweened = reduce_motion ? writable : svelte_tweened;\r\n```\r\n\r\nThat's honestly as far as you'll get in terms of support for that feature given the constrains set by the v3 design",
          "createdAt": "2020-10-03T09:34:09Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzM3MTc5MA==",
          "body": "I'm glad this was here - I was drafting a separate issue. \r\n# Svelte Transitions don't respect `prefers-reduced-motion` preferences - A11y\r\n**Describe the bug**\r\nSvelte transitions don't seem to respect `[prefers-reduced-motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion)` settings which could be an accessibility concern for users that struggle with movement on the screen.\r\n\r\n**To Reproduce**\r\nNavigate to the tutorial for animations (or create an example locally in Svelte). \r\nhttps://svelte.dev/tutorial/adding-parameters-to-transitions\r\n\r\nOpen up the browser dev tools and set `prefers-reduced-motion` emulation to `reduce`. \r\nhttps://developer.chrome.com/blog/new-in-devtools-79/#userpreferences\r\nIn Chrome for example, this is done in the **Rendering** panel which needs to be enabled.\r\n![image](https://user-images.githubusercontent.com/17771229/122433081-be2bc080-cf4a-11eb-9de1-17398c085604.png)\r\n\r\n**Expected behavior**\r\nThis is a bit difficult. I can't imagine a way that would solve this with no developer input. Perhaps reducing the max duration? An a11y expert in this area might be consulted to understand what about motion triggers people (for nausea, disorientation etc). While reducing max duration might help, it would be best to actually be able to choose a different animation for users who have their preferences set as such. For example, `fly` would be inappropriate in many cases for users who prefer reduced motion, whereas `fade` would be much more comfortable.\r\n\r\nI think it's important to note that animation is still a useful tool for understanding state change and removing it entirely would be taking away an intuitive user signal to a portion of the population. \r\n\r\n**I wonder if we could just fall back to `fade` with a short duration time** for all transitions when this setting is on? What would be the implications of this? \r\n\r\nIdeally though, developers would be able to add transition directives for these cases. Something like `reduceTransition`, `reduceIn`, and `reduceOut` if they wish to override the default a11y behaviour.",
          "createdAt": "2021-06-17T16:10:23Z",
          "author": { "login": "benaltair", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MzQ1NTUxMg==",
          "body": "This blog post was suggested [on Discord](https://discord.com/channels/457912077277855764/457912077277855766/855121039268511755) by @geoffrich. It has strategies (some similar to above) and also discusses the reasoning behind doing this. I know @Rich-Harris has spoken about the importance of supporting developers to do that right thing when it comes to a11y and I wonder if this is within that scope?\r\n\r\n### Blog Post\r\nhttps://geoffrich.net/posts/accessible-svelte-transitions/",
          "createdAt": "2021-06-17T18:12:35Z",
          "author": { "login": "benaltair", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTEwMTk3NDA=",
    "body": "When component has out transition and on playing out animation, the component does not receive props.\r\n\r\nIs this intentional ?\r\n\r\nIMHO, a removing state component should also receive props.\r\n\r\nExample: https://svelte.dev/repl/60f4eb74e5904aeaadb850cd0e2f54ac?version=3.24.1",
    "closedAt": null,
    "createdAt": "2020-09-02T13:24:51Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTc1MjA0OA==",
          "body": "related #4683",
          "createdAt": "2020-09-02T13:52:40Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODEwMTQ4NA==",
          "body": "This issue needs some debates.\r\n\r\nExample)\r\n```HTML\r\n<script>\r\nimport { fade } from 'svelte/transition';\r\nlet arr = [1, 2, 3];\r\nsetTimeout(() => {\r\n   arr = [1, 2];\r\n}, 1000);\r\n</script>\r\n\r\n{#each arr as item, i (item)}\r\n   <div transition:fade>\r\n      <Item item={arr[i]}/>\r\n   </div>\r\n{/each}\r\n```\r\nProblem: `arr[2]` is `undefined` on changed but `Item` should expect `3`",
          "createdAt": "2020-09-07T07:28:47Z",
          "author": { "login": "orange4glace", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTA4MTIwMDY=",
    "body": "This is a bit of a meta issue, not sure if it's the right spot for it, but I think there's some value in having it somewhere. Please move/delete if it's in the wrong place.\r\n\r\nI can see that we've finally have an Open Collective page for Svelte. Super great! Not sure how much it has been discussed but here are a few ideas on how we can get even more sponsors for the project:\r\n\r\n1. A section on the website of the sponsors (added when the contribution is higher than a certain number)\r\n2. A banner and/or some graphic that you can display on your own website (in my case Svelte School) that shows that I'm actually contributing/sponsoring.\r\n",
    "closedAt": null,
    "createdAt": "2020-09-02T08:06:44Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTYyNjU3Ng==",
          "body": "Who cares? it's useless.",
          "createdAt": "2020-09-02T11:02:58Z",
          "author": { "login": "babakfp", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTYzNzExOQ==",
          "body": "https://vuejs.org has a section on their page with a list of sponsors. We could add something similar?",
          "createdAt": "2020-09-02T11:10:17Z",
          "author": { "login": "furstenberg", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjMwNTU1MA==",
          "body": "It's worth noting that in many parts of the world sponsoring (by companies) require they get something in return for tax reasons. This would be, for example, a banner/logo on the website or on the GitHub page.",
          "createdAt": "2020-09-03T07:19:20Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjU2MzMwMw==",
          "body": "Wow, I'd never heard that before. Do you know of an example country where that's the case or have any more details on that?",
          "createdAt": "2020-09-03T15:17:16Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjcxMzExNg==",
          "body": "Sweden, and I'm sure most other Scandinavian countries. Probably the same for a lot of other EU ones as well.\r\n\r\nAt least in the case of Sweden, the case is that there must be a direct return of something tangible in the form of, for example, advertising placement. To be clear, it's not illegal to sponsor stuff, you just can't write it off as en expense. ",
          "createdAt": "2020-09-03T19:34:21Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTAzMjI4MDM=",
    "body": "another exotic bug report ....\r\n\r\nsvelte 3.24.1 fails to parse javascript lines longer than 255827 chars\r\nwhen these lines are generated by a preprocessor\r\n\r\nacorn parser throws errors messages like\r\n```txt\r\nParseError: Unterminated string constant\r\n```\r\n<details>\r\n<summary>stack trace</summary>\r\n\r\n```txt\r\nParseError: Unterminated string constant\r\nat error (node_modules/svelte/src/compiler/utils/error.ts:25:16)\r\nat Parser$1.error (node_modules/svelte/src/compiler/parse/index.ts:100:3)\r\nat Parser$1.acorn_error (node_modules/svelte/src/compiler/parse/index.ts:93:8)\r\nat Object.read_script [as read] (node_modules/svelte/src/compiler/parse/read/script.ts:49:10)\r\nat tag (node_modules/svelte/src/compiler/parse/state/tag.ts:203:27)\r\nat new Parser$1 (node_modules/svelte/src/compiler/parse/index.ts:52:12)\r\nat parse (node_modules/svelte/src/compiler/parse/index.ts:215:17)\r\nat compile (node_modules/svelte/src/compiler/compile/index.ts:79:14)\r\nat node_modules/rollup-plugin-svelte/index.js:243:22\r\nat ModuleLoader.addModuleSource (node_modules/rollup/dist/shared/rollup.js:18159:30)\r\n```\r\n\r\n</details>\r\n\r\nto svelte, the line looks like this (only start and end):\r\n\r\n> let testLongString = \"-chunk-0-0.011010001001111100000001101001110110110001110000111.len=62-..............-chunk-3399-0.0110011100100100000001011000110111001000001010001101.len=255743-chunk-3400-0.1001100001111000011101100101101011000\r\n\r\nthe end of line is missing, it should be `_END_OF_STRING\";` in this sample\r\n\r\nline length = `255743 + 'let testLongString = \"'.length + '.len=255743-chunk-3400-0.1001100001111000011101100101101011000'.length` = 255827\r\n\r\n\r\nto reproduce:\r\n```bash\r\nnpm i -D https://github.com/milahu/svelte-preval.git\r\nnpm i -D tosource\r\n```\r\n```js\r\n// rollup.config.js\r\nimport sveltePreval from 'svelte-preval';\r\n\r\nexport default {\r\n  plugins: [\r\n    svelte({\r\n      preprocess: [\r\n        sveltePreval(),\r\n      ],\r\n    }),\r\n  ],\r\n};\r\n```\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n  let testLongString = preval(function() {\r\n    // generate long string\r\n    const str = Array.from(Array(5000)).reduce(\r\n      (acc, _, idx) => {\r\n        acc += '-chunk-'+idx+'-'+ Math.random().toString(2);\r\n        acc += '.len=' + acc.length;\r\n        return acc;\r\n      },\r\n      ''\r\n    ) + '_END_OF_STRING';\r\n    return str;\r\n  });\r\n</script>\r\n```\r\na more realistic scenario is [inlining asset files into javascript code](https://github.com/milahu/svelte-preval#inline-asset-files)\r\nwhere base64-encoded strings can grow beyond 250k chars\r\n\r\nwithout a preprocessor, long lines are working fine\r\nsee this [useless repl](https://svelte.dev/repl/dc636797a98c48438b7ccaf52e39d736?version=3.24.1) with a line-length of 75k chars\r\n",
    "closedAt": "2020-09-02T16:40:59Z",
    "createdAt": "2020-09-01T17:32:55Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTg1ODEzOQ==",
          "body": "closing, this is a bug in ~~[magic-string](https://github.com/Rich-Harris/magic-string)~~ my own code\r\n```js\r\n// minify_res.code is the long string > 250k chars\r\nprocess.stdout.write(minify_res.code); // non blocking (async)\r\nprocess.exit(0); // kills script before write is done\r\n```\r\nnow im using\r\n```js\r\nprocess.stdout.write(minify_res.code);\r\nprocess.stdout.on('drain', function () {\r\n  // write is done\r\n  process.exit(0); // success\r\n});\r\n```\r\n\r\nand i had to increase maxBuffer in\r\n```js\r\nlet output = child_process.execSync(\r\n  'node myScript.js', {\r\n  input: input,\r\n  encoding: 'utf-8',\r\n  maxBuffer: Infinity,\r\n});\r\n```\r\n",
          "createdAt": "2020-09-02T16:40:59Z",
          "author": { "login": "milahu", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTAzMTY5ODE=",
    "body": "At the moment, personally, I don't see much use for the [`intro`](https://svelte.dev/docs#Client-side_component_API) parameter in my projects because I almost always need, for example, to have behavior in one component as `intro: false` and in another component as `intro: true`\r\n\r\nCurrently, intro can only be changed for the entire app, but if it becomes possible to change the intro parameter also in <svelte:options /> for each individual component, i think, there will be many new uses for it.",
    "closedAt": null,
    "createdAt": "2020-09-01T17:22:48Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTAxNTE3MA==",
          "body": "This was actually discussed when `intro: boolean` was implemented but I don't think there was ever an issue for it. This seems a like a reasonable enhancement.",
          "createdAt": "2020-09-01T17:24:35Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTM4ODY1OA==",
          "body": "As a workaround for now: If you would like to \"disable\" intro for a specific component and can afford to use `tick` instead of `css`, you could do something like this:\r\nhttps://codesandbox.io/s/busy-sara-2fds6?file=/App.svelte\r\n```javascript\r\n  let localIntro = false;\r\n  let introDone = false;\r\n\r\n  const tick = node => {\r\n    return {\r\n      duration: 500,\r\n      tick: p => {\r\n        if (p === 1 && !introDone) {\r\n          introDone = true;\r\n          return;\r\n        } else if (introDone === false && !localIntro) {\r\n          return;\r\n        }\r\n\r\n        node.style.width = p * clientWidth + \"px\";\r\n        node.style.height = p * clientHeight + \"px\";\r\n      }\r\n    };\r\n  };\r\n```",
          "createdAt": "2020-09-12T02:42:41Z",
          "author": { "login": "IgnusG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTM4OTY1Ng==",
          "body": "This looks like a duplicate of https://github.com/sveltejs/svelte/issues/2845 btw.",
          "createdAt": "2020-09-12T02:48:40Z",
          "author": { "login": "IgnusG", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2OTAyNjk1MjY=",
    "body": "I'm very new to Svelte and very impressed that it supports easy but powerful animation system.\r\n\r\nHowever, I've looked into the source code and I realize that every animations are generated and inserted as style tag when animations will be started. (except the same animation is on animating)\r\n\r\nDynamically Inserting / removing styles should impacts on performance in someway so if we can reduce how frequently styles are dynamically inserted/removed, there will be a performance improvement. We can use LRU cache to achieve that like caching at most 5 animation style tags so the animations used frequently do not need to be inserted every single time.",
    "closedAt": null,
    "createdAt": "2020-09-01T16:06:38Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODk4NjI5MzA=",
    "body": "### Proposal: remove deprecated nodejs feature\r\n\r\nI noticed that **'svelte/register'** uses `require.extensions[extension]` which is a **DEPRECATED** nodejs feature.\r\nhttps://nodejs.org/docs/latest-v12.x/api/modules.html#modules_require_extensions\r\n\r\nI am currently using [require-from-string](https://github.com/floatdrop/require-from-string) in my project to avoid future issues.\r\n\r\nI guess `require.extensions` is used to ensure that nodejs is able to resolve all the imports. Correct me if I am wrong.\r\n\r\n\r\n",
    "closedAt": "2020-09-03T16:08:35Z",
    "createdAt": "2020-09-01T06:36:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NjU5NjYxOQ==",
          "body": "`require.extensions` is deprecated, but extremely unlikely to ever be removed any time soon. There are better ways to structure your app so that compilation happens beforehand, but there isn't really a better way to compile on demand when the `require()` happens. We can't stop using this without removing a feature from Svelte, which would be a breaking change.\r\n\r\nAs a side note, we are currently using this feature as part of our unit tests, so if we ever hear about this going away, we'd have to sort this out then anyway.\r\n\r\nClosing. We don't want to encourage people to use this feature, but - like Node itself - we don't want to just outright remove it even though it's often not a good idea to use.",
          "createdAt": "2020-09-03T16:08:35Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODkzNDI2OTU=",
    "body": "**Describe the bug**\r\n`npm run dev` in the `site` directory no longer works for me since https://github.com/sveltejs/svelte/pull/4215. Tried running `npm run update` to solve, but that didn't work either.\r\n\r\n**Logs**\r\n`npm run dev` gives me:\r\n\r\n> Could not resolve '../_contributors.js' from src/routes/_components/Contributors.svelte\r\n\r\n`npm run update` gives me:\r\n\r\n> (node:31424) UnhandledPromiseRejectionWarning: FetchError: request to https://avatars3.githubusercontent.com/u/788001?v=4 failed, reason: connect ETIMEDOUT 151.101.188.133:443\r\n\r\n**To Reproduce**\r\n```\r\ncd site\r\nnpm install\r\n```\r\n\r\nThen run `npm run update` or `npm run dev`\r\n\r\n**Severity**\r\nBlocks contributing to the Svelte site\r\n\r\n**Additional context**\r\nPerhaps there was a user who contributed and then deleted their account and we don't handle that?",
    "closedAt": null,
    "createdAt": "2020-08-31T16:43:07Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NDEwODkyMg==",
          "body": "i have no problem running it on my machine..\r\nand the user you failed to get the avatar is https://github.com/leporo (from https://api.github.com/user/788001), and it seemed to be active",
          "createdAt": "2020-08-31T23:57:31Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NDEwOTcwMw==",
          "body": "Are you tethering ben.",
          "createdAt": "2020-09-01T00:00:10Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NDExMDAzMQ==",
          "body": "Do you have a weak wifi connection because you are stealing your neighbours wifi.",
          "createdAt": "2020-09-01T00:01:11Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NDExMTExNQ==",
          "body": "On a more serious note, I'm not sure why we require users to download all of these images when developing locally. Could we not just use a grey circle placeholder image 500 times or something to save the trouble? It takes forever to complete as well.",
          "createdAt": "2020-09-01T00:04:23Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTAwMTg3MA==",
          "body": "I went a little overboard and got a fiber optic connection and commercial-grade wifi at my house, so that's probably not it :smile: ",
          "createdAt": "2020-09-01T17:01:20Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4Njc4Mjc3MQ==",
          "body": "@pngwn another vote from me for using placekitten locally ;)\r\n\r\nI also opened https://github.com/sveltejs/svelte/pull/5262 which parallelises / caches the stuff we download, but honestly I wonder if it wouldn't be better if the caches were checked in, and simply refreshed on deployment.\r\n\r\nWith regards to this specific issue though, I'm also not having an issue with it. In the immortal words of `downforeveryoneorjustme.com`, \"it's just you.\"",
          "createdAt": "2020-09-03T21:52:23Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NDMwMTMwOA==",
          "body": "I also have this problem.",
          "createdAt": "2020-12-14T09:19:01Z",
          "author": { "login": "fangsmile", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODkzMTE3OTQ=",
    "body": "Hi.\r\n\r\nI have this small example written on top of the Svelte template:\r\n\r\nhttps://silvioprog.surge.sh\r\n\r\nit works fine in browsers like Chrome/Edge and Firefox, however, it fails on Internet Explorer 11, showing the error `SCRIPT1006: Expected ')' bundle.js (1,1135)`.\r\n\r\nMy `App.svelte` is just this:\r\n\r\n```js\r\n<script>\r\n  let count = 0\r\n\r\n  function handleClick() {\r\n    count += 1\r\n  }\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n  Clicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>\r\n```\r\n\r\nThe Internet Explorer version is:\r\n\r\n```\r\nVersion: 11.450.19041.0\r\nUpdate Version: 11.0.205 (KB4571687)\r\n```\r\n\r\nand the log is:\r\n\r\n```\r\nsilvioprog.surge.sh\r\nHTML1300: Navigation occurred.\r\nsilvioprog.surge.sh\r\nSCRIPT1006: Expected ')'\r\nbundle.js (1,1135)\r\n```",
    "closedAt": "2020-09-02T07:02:48Z",
    "createdAt": "2020-08-31T15:52:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4Mzg3NzIzMA==",
          "body": "Complementing. It does not work in two Sony TVs, which uses Opera (version 2015) as web browser.",
          "createdAt": "2020-08-31T16:11:10Z",
          "author": { "login": "silvioprog", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NDEwMjk1Mw==",
          "body": "You would need babel to support for IE: https://stackoverflow.com/a/44732117/1513547",
          "createdAt": "2020-08-31T23:36:58Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NDEwMzM0Mw==",
          "body": "You need to transpile it. Setup Babel for your bundler and be sure to transpile svelte runtime. ",
          "createdAt": "2020-08-31T23:38:21Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTAxMDc1Ng==",
          "body": "Thanks for answering guys!\r\n\r\nIs there any official Svelte template or any guide showing how to integrate Svelte + Babel?\r\n\r\nTIA",
          "createdAt": "2020-09-01T17:16:45Z",
          "author": { "login": "silvioprog", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTM4NzA3Ng==",
          "body": "Here's what I use for Sapper - https://github.com/antony/sapper-ie\r\n\r\nWe don't officially support IE11, but you can find support [in the Svelte discord](https://svelte.dev/chat) and from the Babel project.",
          "createdAt": "2020-09-02T07:02:48Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODkyMzEwMTA=",
    "body": "Hello:\r\n\r\nI am a newbie to svelte. As part of my componentisation I would like the compiled bundle.js to be sets of components. How do we achieve this? Thanks\r\n\r\n",
    "closedAt": "2020-09-02T07:03:51Z",
    "createdAt": "2020-08-31T13:59:59Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTM4ODc2OQ==",
          "body": "Hi There. We prefer to use github for bugs and feature requests as detailed in the issue template. You can find support for Svelte in the [discord](https://svelte.dev/chat)",
          "createdAt": "2020-09-02T07:03:51Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODg4OTMxODk=",
    "body": "Hello, I just notice that svelte dont has icon for vscode. Is there any guide to change icon file? ",
    "closedAt": "2020-08-31T08:22:19Z",
    "createdAt": "2020-08-31T04:46:47Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzYyNjQ2MQ==",
          "body": "There is an icon for it, do you see no icon at all or a html5 icon instead?",
          "createdAt": "2020-08-31T07:55:04Z",
          "author": { "login": "mhatvan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzYyNzUwMw==",
          "body": "no icon at all\r\n![image](https://user-images.githubusercontent.com/25275731/91696761-472f6200-eb9a-11ea-9e92-43e0fbdb08ad.png)\r\n",
          "createdAt": "2020-08-31T07:57:28Z",
          "author": { "login": "eisenhaus335", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzYyNzcyMw==",
          "body": "Do you have the `svelte.svelte-vscode` extension installed? ",
          "createdAt": "2020-08-31T07:57:54Z",
          "author": { "login": "mhatvan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzYyODg2NA==",
          "body": "![image](https://user-images.githubusercontent.com/25275731/91697040-ac835300-eb9a-11ea-8bb3-081ac8bcefaa.png)\r\nthis Svelte for VScode this? i suppose yeah\r\n\r\nThis are extension that i installed\r\n",
          "createdAt": "2020-08-31T08:00:28Z",
          "author": { "login": "eisenhaus335", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzYzNTQ1OQ==",
          "body": "I just double-checked, my bad, the Svelte VS Code extension is not responsible for setting the icons. \r\n\r\nYou need the `vscode-icons-team.vscode-icons` extension to see an icon ;)",
          "createdAt": "2020-08-31T08:13:36Z",
          "author": { "login": "mhatvan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzYzOTc0NA==",
          "body": "Nice, after the installation the icon works fine. Thanks :D\r\n\r\nwill close this issue ",
          "createdAt": "2020-08-31T08:22:19Z",
          "author": { "login": "eisenhaus335", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODg4NDYxMjk=",
    "body": "I have often encountered the need to execute a certain code after mounting the first or last component, which is processed inside {#each}\r\n\r\nFor example, let's take the case when we need to process all nodes added to {#each} after the last component is mounted.\r\n\r\nIn the basic version \"heavy computations\" will be executed in onMount of each component:\r\nhttps://svelte.dev/repl/1512ef512d7749f69b436a61fc939d79?version=3\r\n\r\nIf it's necessary to execute \"heavy computations\" only in the last component, I use a variant where I compare the component index and the length of the iterated array:\r\n\r\nhttps://svelte.dev/repl/cf2ac2fcebc44018b0be2bfff3510fdb?version=3.24.1\r\n\r\nIn this variant I do not like:\r\n\r\n1. An additional if condition for each component.\r\n2. If the function is big, I need to pass it to all components, although only the last one needs it.\r\n3. A lot of unneeded lines of code.\r\n\r\nI think it would be better if it was possible to add a \"flag\" (parameter?) for {#each}, which works only if {#each} has only a component on the first nesting level and which indicates the execution of a certain function after onMount of first or last component.\r\n\r\nRoughly speaking, it could look like this:\r\n\r\n```\r\n{#each array as arr, firstOnMount: someFunction()}\r\n  <Component {arr}/>\r\n{/each}\r\n\r\n```",
    "closedAt": "2020-08-31T02:18:37Z",
    "createdAt": "2020-08-31T02:04:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzUxNTY5MQ==",
          "body": "This sounds like a confusing syntax for something pretty niche that can already be easily done. If you don't like passing both `i` and `length` into the component, you can do that check in the parent component and then pass down a boolean.\r\n\r\nIf you feel strongly about this, please open an [RFC](https://github.com/sveltejs/rfcs), including some real-life examples that would benefit from this.",
          "createdAt": "2020-08-31T02:18:37Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzUyMjEwMQ==",
          "body": "> some real-life examples that would benefit from this.\r\n\r\nIn particular, I can give some examples i faced:\r\n\r\n1. Most of the animation libraries (I will now talk about GSAP as one of the biggest ones) use nodes as targets for animation. There is a common thing in GSAP called staggers, which animates nodes with a delay for each subsequent node.\r\n\r\nIn this variant, to implement this instead of 1 line, it is necessary to additionally call onMount, condition, add extra props, etc.\r\n\r\n2. If there is a large list (possibly even virtual) of components implemented in {#each} that have processing data on initialization and it is necessary to show to the user a message about the successful processing of the last component, to just change the \"success\" variable, you need to add onMount and other unneeded code.",
          "createdAt": "2020-08-31T02:49:00Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzUyMjQ3MQ==",
          "body": "The examples are small, but this functionality can be used in a fairly large number of tasks",
          "createdAt": "2020-08-31T02:50:53Z",
          "author": { "login": "MarkTanashchuk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODg2NjIzNzc=",
    "body": "<!--\r\nIf you'd like to propose an implementation for a large new feature or change then please create an RFC:\r\nhttps://github.com/sveltejs/rfcs\r\n-->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nIn order to install and work on Svelte locally, we have to use npm to install dependencies. Yarn is a stabler, faster, and more secure alternative to npm that Svelte's competition (React, Angular, Vue, etc.) already have baked in. We might want to consider migrating over to yarn for a better developer experience. \r\n\r\n**Describe the solution you'd like**\r\nReplace `package-lock.json` with `yarn.lock` with necessary versioning adjustments to ensure Svelte can be built and tested without error. The README should changed to reflect the move to yarn as well. \r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**How important is this feature to you?**\r\nIt's not a must have now, but a nice to have on the roadmap. \r\n",
    "closedAt": "2020-08-30T08:31:28Z",
    "createdAt": "2020-08-30T06:16:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzM5MjU1NQ==",
          "body": "I don't think I'd call the package manager used internally during Svelte's development it having 'support' for it, or it being 'baked in'. In any case, no thanks, if we switch to anything else, it would mostly likely be pnpm.",
          "createdAt": "2020-08-30T08:31:28Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODg2MzE4NjM=",
    "body": "I don't know whether this is a bug or a feature request, but I discovered today that you can't use `each` reliably within a `contenteditable` element.\r\n\r\nI fathomed a technique to add elements using 3 setTimeouts and momentarily emptying the list (`list = []`), then doing `innerHTML = \"\"`, and finally setting the list again (`list = someNewList`). Alas, for deleting an item there is no such workaround.\r\n\r\nTo explain this, suppose you have a `<div>` something like the following:\r\n\r\n```svelte\r\n<div contenteditable=\"true\">\r\n    {#each items as item}\r\n        <p>{item}</p>\r\n    {/each}\r\n</div>\r\n```\r\n\r\n1. When you press return in that div, it creates a `<p>` that svelte doesn't know about. I'm solving this with an action that dispatches an event when the contenteditable blurs.\r\n\r\n2. When you delete a line, it removes a `<p>` and if that was an original item i.e. inserted by svelte's `{#each}` then you get a `cannot read property 'removeChild' of null` when you re-set the list.\r\n\r\n---\r\n\r\nIt strikes me that making svelte more aware of `contenteditable` is not the appropriate route to resolve this. So that rules out feature request. \r\n\r\nInstead I'm left thinking, is this a bug? Should svelte disregard errors when removing elements that the user already removed - irrespective how they removed them?",
    "closedAt": null,
    "createdAt": "2020-08-30T01:11:59Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzM2NDU2Mg==",
          "body": "I've added a pull request that fixes the deletion/removal of element scenario.",
          "createdAt": "2020-08-30T01:38:48Z",
          "author": { "login": "benbenbenbenbenben", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODI5MTc1OA==",
          "body": "I had a similar problem when trying to implement a WYSIWYG editor in Svelte.\r\n\r\nHere is a REPL demonstrating the problem: https://svelte.dev/repl/a2edc54a9c3046c9b6b214ded94674b4?version=3.32.0\r\n\r\nAnother related REPL that I found:\r\nhttps://svelte.dev/repl/fa601199d8d345d3977bf48bdb8d14f4?version=3.24.1",
          "createdAt": "2021-01-27T13:39:55Z",
          "author": { "login": "nicolodavis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODMxNzE1NQ==",
          "body": "@benbenbenbenbenben What's the link to your PR?",
          "createdAt": "2021-01-27T14:20:40Z",
          "author": { "login": "nicolodavis", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODg2Mjk1NzU=",
    "body": "**Describe the bug**\r\nThe scrollbar on [svelte.dev](https://svelte.dev) is partially obscured. See the top right corner in this image.\r\n![obscured-scrollbar](https://user-images.githubusercontent.com/52362148/91648678-038e0880-ea73-11ea-9edc-912d1e081317.png)\r\n\r\n\r\n**Logs**\r\nNone\r\n\r\n**To Reproduce**\r\nVisit [svelte.dev](https://svelte.dev) with a Chromium browser (tested on Opera and Chrome).\r\n\r\n**Expected behavior**\r\nThe scrollbar should not be obscured.\r\n![visible-scrollbar](https://user-images.githubusercontent.com/52362148/91648695-359f6a80-ea73-11ea-90e4-e769104ce48d.png)\r\n\r\n\r\n**Stacktraces**\r\nNone\r\n\r\n**Severity**\r\nLow\r\n\r\n**Additional context**\r\nOn [svelte-community.netlify.app](https://svelte-community.netlify.app), a site that looks quite similar to [svelte.dev](https://svelte.dev), the problem does not exist. \r\n\r\nRemoving `overflow-x: hidden` from the `main` tag, seems to do the trick. This is defined in [sveltejs/svelte/blob/master/site/src/routes/_layout.svelte](https://github.com/sveltejs/svelte/blob/master/site/src/routes/_layout.svelte).\r\n",
    "closedAt": "2021-05-21T06:12:49Z",
    "createdAt": "2020-08-30T00:48:51Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTY2NzQ2OQ==",
          "body": "This can be closed as the PR that resolved it has been merged with @benmccann saying it's been resolved.",
          "createdAt": "2021-05-21T05:36:38Z",
          "author": { "login": "doamatto", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODg0ODg0Nzk=",
    "body": "Hi, this doesn't seem to be covered in the docs, but obviously you can set a store by (as stated in the docs)\r\n\r\nstoreName.set(value).\r\n\r\nIt also appears that (not included in the docs)\r\n\r\n$storeName = value, accomplishes the same thing but obviously, this does not react in the DOM. Should this be noted in the docs? It's quite useful. It also appears that the store can be passed by reference.",
    "closedAt": "2020-09-02T07:04:35Z",
    "createdAt": "2020-08-29T08:25:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzI1NzE1MA==",
          "body": "What do you mean it doesn't react in the DOM? Using `$store = something` just uses the `set` method under the hood.\r\n \r\nIt's in the documentation here: https://svelte.dev/docs#4_Prefix_stores_with_$_to_access_their_values - specifically in the example to the right.",
          "createdAt": "2020-08-29T08:28:25Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzI2MDY5Ng==",
          "body": "\r\n> What do you mean it doesn't react in the DOM? Using `$store = something` just uses the `set` method under the hood.\r\n> \r\n> It's in the documentation here: https://svelte.dev/docs#4_Prefix_stores_with_$_to_access_their_values - specifically in the example to the right.\r\n\r\nHi @kevmodrome , if I said sorry, would that excuse me neglecting to read that part of the docs? Woops, that's exactly what I was looking for!\r\n",
          "createdAt": "2020-08-29T08:57:35Z",
          "author": { "login": "lovetoast", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzI3ODAyMQ==",
          "body": "I was just wondering what you meant, you should probably close this issue if it's resolved :)",
          "createdAt": "2020-08-29T11:31:50Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzI4MTk1Ng==",
          "body": "> I was just wondering what you meant, you should probably close this issue if it's resolved :)\r\n\r\nOf course, thank you very much for your reply, it's been bugging me and I couldn't find it in the docs, because I was clearly being a bit dim.",
          "createdAt": "2020-08-29T12:09:09Z",
          "author": { "login": "lovetoast", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODg0NTY0NTc=",
    "body": "**Describe the bug**\r\nIf a component inside an `#await`'s `:then` is bound to a mutable object such as an array and the argument to `:then` is destructured, `:then` is called a second time with the destructured values being undefined.  If the return value of the promise is used at all, such as in a for-loop, a `TypeError` will be raised.  If you try to guard against it in the `#each` block, such as with a ternary `a ? a.concat(b) : []`, the included component doesn't get rendered at all.\r\n\r\n**Logs**\r\nSee stack trace below.\r\n\r\n**To Reproduce**\r\nRepro [here](https://svelte.dev/repl/230cca0e7fa847b484332490fbf95284?version=3.24.1).  Bring up the browser console.\r\n\r\n**Expected behavior**\r\nFewer raisins.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n  <pre>\r\nUncaught DOMException: The object could not be cloned. srcdoc:130\r\n    onerror about:srcdoc:130\r\n    (Async: OnErrorEventHandlerNonNull)\r\n    <anonymous> about:srcdoc:129\r\n    <anonymous> about:srcdoc:136\r\nUncaught DOMException: The object could not be cloned. srcdoc:134\r\n    <anonymous> about:srcdoc:134\r\n    (Async: EventListener.handleEvent)\r\n    <anonymous> about:srcdoc:133\r\n    <anonymous> about:srcdoc:136\r\nUncaught (in promise) TypeError: ctx[2] is undefined\r\n    update about:srcdoc line 86 > eval:637\r\n    update about:srcdoc line 86 > eval:545\r\n    update about:srcdoc line 86 > eval:813\r\n    update about:srcdoc line 86 > eval:131\r\n    flush about:srcdoc line 86 > eval:100\r\n    update about:srcdoc line 86 > eval:210\r\n    handle_promise about:srcdoc line 86 > eval:217\r\n    promise callback*handle_promise about:srcdoc line 86 > eval:215\r\n    create_if_block about:srcdoc line 86 > eval:525\r\n    create_fragment$1 about:srcdoc line 86 > eval:797\r\n    init about:srcdoc line 86 > eval:326\r\n    App about:srcdoc line 86 > eval:875\r\n    <anonymous> about:srcdoc line 86 > eval:908\r\n    handle_message about:srcdoc:86\r\n    EventListener.handleEvent* about:srcdoc:127\r\n    <anonymous> about:srcdoc:136\r\n  </pre>\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 80,  Chrome 85\r\n- Your operating system: macOS\r\n- Svelte version: 3.24.1\r\n- Whether your project uses Webpack or Rollup: n/a\r\n\r\n**Severity**\r\nI could probably work around it.",
    "closedAt": null,
    "createdAt": "2020-08-29T04:27:52Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTcwNDg5OQ==",
          "body": "```svelte\r\n{#await (async() => [0] )() then [i]}\r\n\t{#each [[0]][i] as _}\r\n\t\t<Component2 bind:foo />\r\n\t{/each}\r\n{/await}\r\n```\r\nThe parent block update function does not populate the indexes related to `each_value` when passing down the context in cases where `each_value` is computed dynamically from a destructed prop in `:then` & the child block updates a component binding\r\n```ts\r\n// parent\r\nconst child_ctx = ctx.slice();\r\nchild_ctx[3] = info.resolved;\r\ninfo.block.p(child_ctx, dirty);\r\n```\r\n```ts\r\n// info.block.p\r\nif (dirty & /*foo*/ 1) {\r\n    \teach_value = [[0]][/*i*/ ctx[2]];\r\n    \tvalidate_each_argument(each_value);\r\n    \t...\r\n}\r\n```\r\nhttps://github.com/sveltejs/svelte/blob/9a5733a26b2ad001ef20c90f5e8f1afd12f246e5/src/compiler/compile/render_dom/wrappers/AwaitBlock.ts#L271-L277 ",
          "createdAt": "2020-09-02T12:35:56Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODgwNDg2NjI=",
    "body": "**Describe the bug**\r\n\r\nIt is not possible to give a reactive statement a type.\r\n\r\n```\r\n$: host: HTMLElement = element?.parentNode.host;\r\n```\r\n\r\n**Logs**\r\n\r\n```\r\nWidget.svelte:34 Uncaught ReferenceError: host is not defined\r\n    at Object.$$self.$$.update (Widget.svelte:34)\r\n    at init (index.mjs:1447)\r\n    at new Widget (Widget.svelte:34)\r\n    at new App (App.ts:12)\r\n    at main.ts:6\r\n    at main.ts:6\r\n```\r\n\r\n**Expected behavior**\r\n\r\nShould be possible\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Svelte version: v3.24.1 \r\n- Rollup\r\n",
    "closedAt": "2020-08-28T12:48:03Z",
    "createdAt": "2020-08-28T12:43:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MjUxMjQzMg==",
          "body": "This is invalid syntax. You have to type it like this:\r\n\r\n```ts\r\nlet host: HTMLElement;\r\n$: host = element?...\r\n```\r\n\r\nSee https://github.com/sveltejs/language-tools/blob/master/docs/preprocessors/typescript.md#how-do-i-type-reactive-assignments--i-get-an-implicitly-has-type-any-error",
          "createdAt": "2020-08-28T12:48:02Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODgwMjM0NDE=",
    "body": "**README is only in English**\r\nFor non-english speakers, this can become anywhere from a minor inconvenience to a huge problem. This ultimatively hurts the democratisation of Svelte's use. (Being a Svelte fan, I obviously want as many people to be able to use it as possible)\r\n\r\n**A Solution**\r\nAn easy solution to this is to have links to different README language versions at the top of each README, like [this gh repo](https://github.com/tiimgreen/github-cheat-sheet) does\r\n\r\n**I would love to contribute to the initiative**\r\nI speak English, German, French and Danish fluently, (as well as Luxembourgish) which I'd like to put to use, although some of the dev-specific terms I might need to do a bit of research for. If you approve of the idea, let me know and I'll start working on it asap. (I'd prioritise German and French since more devs speak those)",
    "closedAt": "2020-09-09T21:23:13Z",
    "createdAt": "2020-08-28T11:57:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTA2OTA0Mw==",
          "body": "Hi all!\r\n\r\nI can volunteer to translate the docs in Spanish ✌ as suggested by @nico-bachner adding a README.es-es.md file sounds good!",
          "createdAt": "2020-09-08T18:50:51Z",
          "author": { "login": "alfdocimo", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTY2OTI2OQ==",
          "body": "I mentioned this in https://github.com/sveltejs/svelte/pull/5371, but will include it here so that others see the discussion as well. I have two hesitations about this. The first is how do we make sure that we can keep the readme updated in all languages. The other is does it do any good for just the readme to be translated? It seems like a user doesn't speak English that this is unlikely to be enough to really help them and we'd need to translate all the docs",
          "createdAt": "2020-09-09T16:18:59Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4OTgyOTQxMg==",
          "body": "Agreed, there's not much use in doing this without also i18ing the docs. I'll close the issue for now",
          "createdAt": "2020-09-09T21:23:13Z",
          "author": { "login": "nico-bachner", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODc4ODUwMjI=",
    "body": "**Describe the bug**\r\n\r\nUsing a regex in an expression lead to parsing error:\r\n\r\n```\r\nUnexpected block closing tag\r\n100:                   <div>{ /^[A-Za-z ]+$/.test('Some String value') ? 'foo' : 'bar' }</div>\r\n                                       ^\r\n```\r\n\r\nthat's because the parser treat `{ /` as the closing of the logic block, eg: `{/if}`.\r\n\r\nparsing the mustache as expression should have higher priority than parsing it as a closing logic block, eg: `{/if}`, `{/await}` or `{/each}`.\r\n\r\n**Severity**\r\n\r\nA workaround is to not start the expression with `/`, replace it with a variable if possible, for the example above a workaround would be:\r\n\r\n```svelte\r\n<script>\r\n   let regex = /^[A-Za-z ]+$/;\r\n</script>\r\n\r\n<div>{ regex.test('Some String value') ? 'foo' : 'bar' }</div>\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": null,
    "createdAt": "2020-08-28T07:54:31Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MzQzMDEyMw==",
          "body": "I don't really see an easy way around this, `{/if}/}` is a perfectly valid regex that would be virtually impossible to guard against unless we starting backtracking. Every time we came across a `{/` we would have to assume it _could_ be a child expression of the current branch before falling back to parsing it as a block end statement. This would be wasted work the majority of the time.\r\n\r\nYou can also solve this just by wrapping in parens, the following both work fine:\r\n\r\n```svelte\r\n<div>{ (/^[A-Za-z ]+$/.test('Some String value') ? 'foo' : 'bar') }</div>\r\n```\r\n\r\n```svelte\r\n<div>{ (/^[A-Za-z ]+$/).test('Some String value') ? 'foo' : 'bar' }</div>\r\n```",
          "createdAt": "2020-08-30T14:53:35Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDE1MDAyOA==",
          "body": "I'm labeling this as a docs issue, because I really don't think we want to try parsing this differently.\r\n\r\nThat said, I'm not actually sure where in the docs this should go, or whether it even makes sense to mention, as it seems to have a high ratio of expected-confusion-caused-by-reading-this-explanation to expected-confusion-caused-by-running-into-this-limitation.",
          "createdAt": "2020-09-10T10:46:36Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODcxMzg5MDk=",
    "body": "**Describe the bug**\r\n\r\nWhen building for production, `<img>` elements are emitted without the closing `/`. Note that this applies only to situations where the compiler chooses to insert them into the DOM using `innerHTML`.\r\n\r\n**Logs**\r\n\r\nChrome:\r\n\r\n> Uncaught (in promise) DOMException: Failed to set the 'innerHTML' property on 'Element': The provided markup is invalid XML, and therefore cannot be inserted into an XML document.\r\n\r\nSafari (far less useful):\r\n\r\n> Unhandled Promise Rejection: SyntaxError: The string did not match the expected pattern.\r\n\r\n**To Reproduce**\r\n\r\nFirst, you'll need to create a fresh Svelte project and adapt it to support XHTML. The easiest way I've found to do the latter is to convert your `public/index.html` file to valid XHTML:\r\n\r\n```xhtml\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n    <head>\r\n        <meta charset='utf-8'/>\r\n        <meta name='viewport' content='width=device-width,initial-scale=1'/>\r\n\r\n        <title>Repro</title>\r\n\r\n        <link rel='icon' type='image/png' href='./favicon.png'/>\r\n        <link rel='stylesheet' href='./global.css'/>\r\n        <link rel='stylesheet' href='./build/bundle.css'/>\r\n        <script defer src='/build/bundle.js'></script>\r\n    </head>\r\n    <body class=\"hbbtv-viewport\">\r\n    </body>\r\n</html>\r\n```\r\n\r\n... next, create a symlink named `public/index.xhtml` file that points to `public/index.html`:\r\n\r\n```sh\r\nln -s public/index.html public/index.xhtml\r\n```\r\n\r\nNow insert the following code into `src/App.svelte`:\r\n\r\n```html\r\n<div>\r\n    <img alt=\"Star\" width=\"100\" height=\"100\" src=\"http://mdn.mozillademos.org/files/12676/star.svg\" />\r\n</div>\r\n```\r\n\r\nYou'll find that although the development build is fine, the production build will minify it to something along the lines of this (when pretty-printed):\r\n\r\n```js\r\n(d = xa(\"div\")).innerHTML = '<img alt=\"Star\" width=\"100\" height=\"100\" src=\"http://mdn.mozillademos.org/files/12676/star.svg\">',\r\n```\r\n\r\nNote how the closing `/` is removed from the img element when setting the `innerHTML`. This is what causes the XHTML syntax error.\r\n\r\nIf you visit http://localhost:5000/index.xhtml, you will see the error reproduce.\r\n\r\n**Expected behavior**\r\n\r\nProduction builds should emit XHTML-valid components just like dev builds do. That is to say, the trailing `/` shouldn't be removed from the `<img>` component.\r\n\r\nIt would be acceptable to implement XHTML support as a configuration flag in Svelte, of course. Because it would increase build sizes for non-XHTML projects.\r\n\r\n**Stacktraces**\r\n\r\nSee \"logs\" section above for the important part of the stack trace.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Safari 13.1.2; Chrome 84.0.4147.135.\r\n\r\n- Your operating system: macOS 10.15.6\r\n\r\n- Svelte version 3.24.1\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\n\r\nIt took many hours to track down the cause of the error (Safari's error message did not indicate it was an XML issue at all), but it is not a total blocker, as a workaround is perfectly possible:\r\n\r\n```svelte\r\n<script>\r\n    const imgXHTMLHack = \"img/logo_trimmed.png\";\r\n</script>\r\n\r\n<div>\r\n    <img alt=\"Star\" width=\"100\" height=\"100\" src={imgXHTMLHack} />\r\n</div>\r\n```\r\n\r\nBy introducing a dependency on the `<script>` above, the compiler instead inserts the `<img>` element uses DOM operations like `document.createElement('img')` (which don't need to worry about XHTML validity) rather than setting `innerHTML` (which does require valid markup).\r\n\r\n**Additional context**\r\n\r\nFrom user **Rainlife** on the Svelte Discord (`#svelte`):\r\n\r\n> I think these lines https://github.com/sveltejs/svelte/blob/8adb47401e7f7b420ffabf9752a8236114aaecfc/src/compiler/utils/names.ts#L111 are to blame, they define which elements are 'void', this method is then used in `Element.ts` to render them differently or something. Can't think of any workaround there, but maybe if you post in `#internals`  or make a Github issue one of the maintainers can give a more comprehensive answer",
    "closedAt": "2020-09-10T19:28:23Z",
    "createdAt": "2020-08-27T10:43:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY5MDAxNQ==",
          "body": "The optimized `.innerHTML` code for this should now be using `/>` for self-closing tags in 3.25.0.",
          "createdAt": "2020-09-10T20:08:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODY5MTQ3NDU=",
    "body": "**Describe the bug**\r\nI get the following error when selecting a checkbox that's rendered from a derived store with a `bind:checked` property.\r\n\r\n```\r\nUncaught TypeError: checkboxes.set is not a function\r\n```\r\n\r\nI am not sure if I am using derived store, bind and subscriber correctly. Please advise.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/e77bdbacfd7d42d59bf8b350379d3e1a?version=3.24.1\r\n\r\n```svelte\r\n<script>\r\n\timport { writable, derived } from 'svelte/store';\r\n\t\r\n\tconst things = writable([]);\r\n\tthings.set([{\r\n\t\tdisplay: true\r\n\t}, {\r\n\t\tdisplay: false\r\n\t}])\r\n\tconst checkboxes = derived(things, ($things) => $things.filter(t => t.display))\r\n\t\r\n\tcheckboxes.subscribe($checkboxes => {\r\n\t\tconsole.log($checkboxes);\r\n\t})\r\n</script>\r\n\r\n{#each $checkboxes as cb}\r\n\t<label><input type=\"checkbox\" bind:checked={cb.selected} /> Checkbox</label>\r\n{/each}\r\n```\r\n\r\n**Expected behavior**\r\nIn the subscriber, an array of selected things should be console logged out.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n<pre>\r\ninput_change_handler about:srcdoc line 86 > eval:629\r\n    input_change_handler about:srcdoc line 86 > eval:486\r\n    listen about:srcdoc line 86 > eval:76\r\n    listen_dev about:srcdoc line 86 > eval:315\r\n    mount about:srcdoc line 86 > eval:505\r\n    mount about:srcdoc line 86 > eval:557\r\n    mount_component about:srcdoc line 86 > eval:176\r\n    init about:srcdoc line 86 > eval:265\r\n    App about:srcdoc line 86 > eval:646\r\n    <anonymous> about:srcdoc line 86 > eval:679\r\n    handle_message about:srcdoc:86\r\n<pre>\r\n</details>\r\n\r\nThe function that has the error is\r\n\r\n```js\r\n    \tfunction input_change_handler(each_value, cb_index) {\r\n    \t\teach_value[cb_index].selected = this.checked;\r\n    \t\tcheckboxes.set($checkboxes);\r\n    \t}\r\n```\r\n\r\n",
    "closedAt": "2020-08-27T07:23:26Z",
    "createdAt": "2020-08-27T03:45:16Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTM4NjYyNg==",
          "body": "Derived stores only take input from stores they are derived from\r\nIn other words derived stores are readonly and you can only bind values to writable ones\r\nHere's a workaround for your use case\r\n\r\n```svelte\r\n{#each $things as cb}\r\n\t{#if cb.display}\r\n\t\t<label><input type=\"checkbox\" bind:checked={cb.selected} /> Checkbox</label>\r\n\t{/if}\r\n{/each}\r\n```",
          "createdAt": "2020-08-27T04:22:38Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTY4MDM4Mw==",
          "body": "Thanks. I've missed that derived stores are readonly.",
          "createdAt": "2020-08-27T07:23:26Z",
          "author": { "login": "tnguyen14", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODY1ODgwODY=",
    "body": "The new `$$slots` feature (thanks to @tanhauhau) provides information if a slot is loaded/filled or empty.\r\nHowever this only works with \"static\" content. As soon as there is a condition `{#if}` or `{#await}` involved the\r\nthe output of `$$slots` is not really useful anymore or in case of a named slot a error is thrown.\r\n\r\nIn case of an unnamed slot in combination with `{#if}` the slot is considered *filled* and `$$slots.default` results to `true`\r\neven if the condition passed to the slot is false. Additionally the fallback wont be rendered.\r\n\r\nIn case of a named slot value inside a `{#if}`  (example below) the line `<div slot=\"a\">Content</div>` will throw\r\n`ValidationError: Element with a slot='...' attribute must be a child of a component or a descendant of a custom element`\r\n\r\nExample (tested with `commit 8adb47401e7f7b420ffabf9752a8236114aaecfc`)\r\n\r\n``` svelte\r\n// App.svelte\r\n\r\n<script>\r\n    import SlotWrapper from './SlotWrapper.svelte';\r\n    let show = false; \r\n</script>\r\n\r\n<SlotWrapper>\r\n    {#if show}\r\n        <div slot=\"a\">Content</div>  <!-- throws error -->\r\n    {/if}\r\n</SlotWrapper>\r\n\r\n<button on:click=\"{()=> show = !show}\">\r\n    { show ? 'Hide' : 'Show' }\r\n</button>\r\n\r\n```\r\n\r\n``` svelte \r\n// SlotWrapper.svelte\r\n\r\n<script>\r\n    $: console.log('slots', $$slots)    \r\n</script>\r\n\r\n<slot name=\"a\">Fallback Content</slot>\r\n\r\n```\r\n\r\n**The behaviors that I would expect, want and need are:**\r\n\r\n1. Properties of `$$slot` are only set to true if the content passed to a slot is renderable.  \r\n2. Conditionally pass content to named slots like in the example above. (but that one is not as important me as the first one)\r\n\r\n\r\n**Why would I want that?**\r\n\r\nOne usecase (besides many others) is implicitly setting the state of a component with a slot.\r\n\r\nExample: \r\nI have a Card component that displays data coming from a fetch request. The Card component should have a\r\n`loading` state while it is fetching and go to its `default` state if the data is fetched and rendered.\r\nAt the moment the only way i konw of is to explicitly create a `loading` variable, set it to `true` before fetching, set it to `false`\r\nafterwards and pass it down to the  `Card` component. \r\nThis is okay if you have to do it one or twice but not if you have many components with similar structure.\r\n\r\nWith a properly reactive `$$slots` property this could be much cleaner and could look something like this:\r\n\r\n```svelte\r\n\r\n// Card.svelte\r\n<script>\r\n  $: loading = !$$slots.default;\r\n</script>\r\n\r\n<div class=\"card\" class:loading>\r\n   <slot />\r\n</div>\r\n\r\n// App.svelte\r\n// ... script, imports. etc...\r\n<Card>\r\n  {#await fetch(url).then(responseToJSON) then data}\r\n  { data.name }\r\n  {/await}\r\n</Card>\r\n```\r\n\r\nThats it. \r\nThanks you for providing such an awesome tool. \r\n",
    "closedAt": null,
    "createdAt": "2020-08-26T20:14:19Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc5MjI5NTYzNg==",
          "body": "Hello everyone! \r\n\r\nI am writing a component library for mobile phones. This is an important function, is there any temporary solution at the moment?\r\n\r\nThis is my situation,the leader icon cannot be rendered correctly:\r\n```svelte\r\n<ListItem>\r\n  {#if item.active }\r\n    <Icon name=\"active_icon\" slot=\"leading\" />\r\n  {/if}\r\n  <h4>{ item.title }</h4>\r\n  <p>{ item.desc }</p>\r\n  <Icon slot=\"trailing\" name=\"more_vert\" />\r\n</ListItem>\r\n```\r\n\r\nThank you!\r\n\r\n----\r\n\r\nI currently convert the dom structure, but there is one more level of nesting:\r\n```svelte\r\n<div slot=\"leading\">\r\n  {#if item.active }\r\n    <Icon name=\"active_icon\" />\r\n  {/if}\r\n</div>\r\n```\r\n\r\n----\r\n\r\nUpdate, no extra nesting, but `$$slots.leading` not working\r\n```svelte\r\n<svelte:fragment slot=\"leading\">\r\n  {#if item.active }\r\n    <Icon name=\"active_icon\" />\r\n  {/if}\r\n</svelte:fragment>\r\n```",
          "createdAt": "2021-03-07T15:20:53Z",
          "author": { "login": "hungtcs", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNDEzMzM4Mw==",
          "body": "What about `$$slots`` containing the textContent of the slot?\r\n\r\nPros: \r\n - Ability to check precisely the content of a slot;\r\n - Ability to be reactive to to the content of a slot.\r\n - An empty slot can easily be checked with `$$slots.slotName === \"\"`\r\n\r\nCons:\r\n - Since the content of a slot can rapidly grow huge, it would have to be greatly optimized.\r\n - one-way binding: the `$$slots.slotName` would only be readable.",
          "createdAt": "2021-04-21T15:02:51Z",
          "author": { "login": "Marr11317", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyNjAxNDgxOQ==",
          "body": "What about having references to the passed objects in the `$$slots` variable?. For example, in\r\n```svelte\r\n<MyComponent>\r\n  <div id=\"my-div\" slot=\"slot1\">Some content</div>\r\n</MyComponent>\r\n```\r\n\r\n`$$slots.slot1` would contain the div object. The same as typing `document.getElementById(\"my-div\")`",
          "createdAt": "2021-04-24T01:44:08Z",
          "author": { "login": "Marr11317", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODY1MTA1MjE=",
    "body": "[REPL demonstrating the bug](https://svelte.dev/repl/52bec82940a0423b83d1f35661af3e2f?version=3.24.1)\r\n\r\nThis may seem like a weird use-case, but for me fixing this bug could mean that I can beautify a lot of ugly code I currently have in one of my projects.\r\n\r\nOther versions of this bug (#2014 and #2435) have already been fixed, so I think this is just the last forgotten edge-case.",
    "closedAt": "2020-08-26T19:20:26Z",
    "createdAt": "2020-08-26T17:58:20Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTA3NDkxMg==",
          "body": "No variables declared in the module script are reactive - this is intended and documented in https://svelte.dev/docs#script_context_module\r\n\r\nUpdating the _value contained in the store_ will be reactive, but reassigning an entirely new value (whether it's a store or not) will not be.",
          "createdAt": "2020-08-26T19:20:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODYzNTU0ODY=",
    "body": "(This is meta-problem mainly about the community, and might be better be discussed in a community space like Discord, but I don't have an account there. Also I see stuffs like #2067 so I think it safe to bring it up here.)\r\n\r\nCurrently Svelte projects are recognized as \"HTML\" projects (this is [outloudvi/starbuttons-next](https://github.com/outloudvi/starbuttons-next)):\r\n\r\n![image](https://user-images.githubusercontent.com/19144373/91311978-48513f80-e7e6-11ea-8d96-8ac8903d1d98.png)\r\n\r\nThis will be confusing for other developers. What's worse, it's bad for searching (since people cannot simply filter Svelte project by language) as well as the development of Svelte community. Therefore, I think it's important to get Svelte independently grouped as a language on GitHub like Vue does.\r\n\r\nWe see that GitHub can correctly highlight .svelte files (thanks for github/linguist#4504!), but Svelte has not been independently grouped. The reason seems to be [here](https://github.com/github/linguist/blob/9a6f1b61b218905cdf4c9a491373b5a03234a171/lib/linguist/languages.yml#L5368):\r\n\r\n``` yaml\r\nSvelte:\r\n #...\r\n  group: HTML\r\n #...\r\n```\r\n\r\nIt's grouped in HTML, and as said in `languages.yml`, \"Languages in a group are counted in the statistics as the parent language.\", it's a part of HTML.\r\n\r\nHow to fix this? The solution is to get it out of the HTML group, and to do so we need to give Svelte a color different from HTML. github/linguist#4894 was a great try, but GitHub currently disallow too similar colors on their language palette (the color from Svelte logo, `#ff3e00`, is too close to some color on the palette). So, currently I think we can find an alternative color to represent Svelte on GitHub. To help with finding a valid color, here are some useful tools:\r\n\r\n* https://github.com/Yardanico/random-stuff/blob/master/goodcolours2.png\r\n* https://lildude.github.io/linguist-free-colours/\r\n\r\n---\r\n\r\n(I personally think `#ee6600` can be one of the candidates, but there might be better choices!)",
    "closedAt": "2020-09-08T11:18:20Z",
    "createdAt": "2020-08-26T14:12:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDkwOTIzMg==",
          "body": "Absolutely agree that the group should be Svelte.\r\n\r\n@vedam any thoughts on colour?",
          "createdAt": "2020-08-26T14:18:44Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDkxMDA5Mw==",
          "body": "`#ff43d6` is available",
          "createdAt": "2020-08-26T14:20:08Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDkxNTAzMA==",
          "body": "That meta label is a nice shade of purple actually.",
          "createdAt": "2020-08-26T14:28:21Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDk2MDQyNw==",
          "body": "no",
          "createdAt": "2020-08-26T15:42:43Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDk2NzIzNw==",
          "body": "@pngwn heh, seems you're looking for a mdsvex-color. 😂\r\n@antony the first I found with the color-picker from above that comes close was: `#d14900`",
          "createdAt": "2020-08-26T15:54:18Z",
          "author": { "login": "vedam", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDk2NzY1Mw==",
          "body": "`#d14900`",
          "createdAt": "2020-08-26T15:55:03Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDk3OTA2OA==",
          "body": "I think `#ff163f` might be the closest I've found on the color picker\r\n\r\nHere are some others: `#a4005c` `#ff029e` `#ff063f` `#ff013e` `#e20060`",
          "createdAt": "2020-08-26T16:14:40Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTkxMDI0NQ==",
          "body": "I like the @outloudvi version. `#ff3e00` the current color of svelte.",
          "createdAt": "2020-09-02T18:15:02Z",
          "author": { "login": "vaheqelyan", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NzEwNzc4Ng==",
          "body": "Seems like there were [some changes](https://github.com/github/linguist/pull/4979) ([they removed the color restrictions](https://github.com/github/linguist/pull/4978)) in the linguist repo which made Svelte an independent language and even gave it the `#ff3e00` color. So I think we just have to wait a little more until this is live and then this has solved itself.",
          "createdAt": "2020-09-04T12:18:22Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4ODgwMjIxOA==",
          "body": "From https://github.com/sveltejs/community \r\n![image](https://user-images.githubusercontent.com/5968653/92469737-9fd3b000-f1d5-11ea-9e6d-83905bd4c53e.png)\r\nThe change is live now. For some repos it might not show it yet probably because indexing that takes time.",
          "createdAt": "2020-09-08T11:18:20Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODYxODE2Mjg=",
    "body": "im requesting an alternative for `{i + ' '}`\r\nto force a space sign after/before a variable\r\n\r\nthe syntax `{i}&#x20;` should be allowed\r\nin the context of an `{#each}` loop\r\n\r\n[repl](https://svelte.dev/repl/a902221f6885427e88c7000d9be1a48c?version=3.24.1)\r\n\r\ncode:\r\n```svelte\r\n{#each arr as i}\r\n  {i}&#x20;\r\n{/each}\r\n\r\n<script>\r\n  const index_max = 10;\r\n  const arr = Array.from(Array(index_max + 1)).map((_,i)=>i);\r\n</script>\r\n```\r\noutput:\r\n```\r\n012345678910\r\n```\r\nexptected output:\r\n```\r\n0 1 2 3 4 5 6 7 8 9 10\r\n```",
    "closedAt": "2020-08-26T16:32:26Z",
    "createdAt": "2020-08-26T09:50:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDk4OTM3Nw==",
          "body": "The `@html` directive should be used to render html entities directly\r\n\r\nhttps://svelte.dev/repl/b4bb0c4160d748b89a505611ec9d1f69?version=3.24.1",
          "createdAt": "2020-08-26T16:32:26Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODU5NzgyNzg=",
    "body": "**Describe the bug**\r\nWhen using `svelte:component` to create a dynamic component with `bind:property`, a warning is shown in the console.\r\n\r\nI am not sure if I am doing this correctly (i.e. the warning is expected or not). If I didn't use this right, please let me know. I've tried looking through the docs and searched the web for example of how this can be done.\r\n\r\n**Logs**\r\n```\r\n<Number> was created without expected prop 'value'\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/77e19d7cba0744e6912bd98cc9775081?version=3.24.1\r\n\r\nI'm also putting the code from the REPL above here, since it's pretty small, and might save someone some time\r\n\r\n```svelte\r\n// App.svelte\r\n<script>\r\n  import Number from './Number.svelte';\r\n  let value;\r\n</script>\r\n\r\n<svelte:component this={Number} bind:value={value} />\r\n\r\n// Number.svelte\r\n<script>\r\n  export let value;\r\n</script>\r\n\r\n<input type=\"number\" bind:value={value} />\r\n```\r\n\r\n**Expected behavior**\r\nNo warning shown\r\n\r\n\r\n",
    "closedAt": "2020-08-27T02:33:54Z",
    "createdAt": "2020-08-26T03:37:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDgxNTMyOA==",
          "body": "You get the warning because `value` is never initialized. In other words, you pass `undefined` as `value` which is the same as not passing anything.\r\n\r\nIf you want the option to explicitly not pass a value, just pass `null` rather than `undefined`.",
          "createdAt": "2020-08-26T11:12:46Z",
          "author": { "login": "ehrencrona", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTMwNzQ3OA==",
          "body": "Thanks @ehrencrona. It wasn't clear to me that `undefined` is not an acceptable default prop value. I've changed the component's default prop value to either `''` or `null`.",
          "createdAt": "2020-08-27T02:33:54Z",
          "author": { "login": "tnguyen14", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODU5MjU3MDk=",
    "body": "As the title says: I'm searching for a event that triggers when the slot changes from fallback to passed content and vice versa.\r\n\r\nhttps://svelte.dev/repl/d4c9910e42b045a6aabdd07eadbe8cb9?version=3.24.1\r\n\r\nSo I tried to build a hacky workaround (see link above) to pass a prop from a fallback component (onMount/dismount) to\r\nthe parent component with the slot. \r\nBut the problem with this script is that an `{#if}` block is seen as non-empty by the slot even though the condition is `false`\r\nand no output is passed to the slot.\r\n\r\nIs this by design or is this a bug?\r\n\r\nAnd is there a way to get a event and/or state of a slot? \r\n\r\nThanks :) \r\n",
    "closedAt": "2020-08-26T14:13:45Z",
    "createdAt": "2020-08-26T00:55:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDkwNjA5OA==",
          "body": "You should be able to use https://github.com/sveltejs/svelte/pull/4602 which is a recently added feature that we haven't gotten around to documenting yet.",
          "createdAt": "2020-08-26T14:13:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTEwMjIyNg==",
          "body": "Thank you for your response. This is in theory what I was looking for. \r\nHowever it lacks some important details for me. I illustrated the problem and feature request more in detail in #5312 ",
          "createdAt": "2020-08-26T20:19:32Z",
          "author": { "login": "icalvin102", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODUzNjMwMDk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThere should be some option to not bind the slot to any node:\r\n```html\r\n<div class='test'><slot name=\"test\" /></div>\r\n```\r\nand the input:\r\n```html\r\n<p slot=\"test\">Hello <b>World</b></p>\r\n```\r\nand the output is:\r\n```html\r\n<div class='test'><p slot='test'>Hello <b>World</b></p></div>\r\n```\r\n\r\nBut, there is no way to get something like this with using named slots:\r\n```html\r\n<div class='test'>Hello <b>World</b></div>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would prefer for something like this:\r\n```html\r\n<p slot=\"test\" slot:node={false}>Hello World</p>\r\n```\r\nSo the `p` element will not be added to the slot, but just the content.\r\n\r\n**How important is this feature to you?**\r\nImportant, as this causes many problems with component composition and flexbox.\r\n",
    "closedAt": "2020-08-25T19:09:10Z",
    "createdAt": "2020-08-25T10:19:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3OTkzOTc4Mw==",
          "body": "With this we can also do something like:\r\n```html\r\n<div slot=\"test\" slot:node={SvelteComponent}>\r\n  This will be wrapped in `SvelteComponent`\r\n</div>\r\n```",
          "createdAt": "2020-08-25T10:22:27Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3OTk1MjY0OQ==",
          "body": "There is [a rfc](https://github.com/sveltejs/rfcs/pull/18) and [a pr](https://github.com/sveltejs/svelte/pull/4556) that's waiting to be merged.",
          "createdAt": "2020-08-25T10:53:15Z",
          "author": { "login": "PatrickG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3OTk2NTM3Ng==",
          "body": "Does this mean the PR will be merged in the next minor version of svelte?",
          "createdAt": "2020-08-25T11:22:18Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDIxNjcwNQ==",
          "body": "No, but it means this is a duplicate of #2079.",
          "createdAt": "2020-08-25T19:09:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODQ2Njc1Mjg=",
    "body": "`c: function create()` uses lowercase while `l: function claim(nodes)` uses uppercase. These files are normally compressed when sent to the client and would compress better if they used consistent casing throughout",
    "closedAt": null,
    "createdAt": "2020-08-24T13:26:16Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MjIzNzMzNQ==",
          "body": "🤔  `l: function claim(nodes)` uses uppercase because [`element.nodeName`](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName) return in uppercase.\r\n\r\nI'm not sure is there any penalty of using uppercase tag name in `document.createElement`.",
          "createdAt": "2020-08-27T23:13:44Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MjI2MDExMw==",
          "body": "> 🤔 `l: function claim(nodes)` uses uppercase because [`element.nodeName`](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName) return in uppercase.\r\n> \r\n> I'm not sure is there any penalty of using uppercase tag name in `document.createElement`.\r\n\r\nSeems to me the compression would indeed be better, as the original post posits. It would be a very slight improvement, though. @benmccann you could test your theory if you want to better make your case.",
          "createdAt": "2020-08-28T00:37:32Z",
          "author": { "login": "RhettFF", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODQyOTA4NDU=",
    "body": "I think this rule needs more accuracy.\r\n\r\nAccording to w3 (https://www.w3.org/TR/html401/interact/forms.html#h-17.9.1), the code can be written this way:\r\n\r\n```html\r\n<label>\r\n  <span aria-label=\"First Name\">First Name</span>\r\n  <input type=\"text\" name=\"firstname\">\r\n</label>\r\n```\r\n\r\nThe way above solve A11y problem, right?",
    "closedAt": "2020-08-27T20:50:40Z",
    "createdAt": "2020-08-24T00:49:17Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDg2MjU3Mw==",
          "body": "I have the same problem. I'm using [this component](https://github.com/rob-balfre/svelte-select)\r\n\r\n```html\r\n<div class=\"form-group\">\r\n  <label id=\"country-selector\">Select country</label>\r\n  <Select {items} bind:selectedValue={country} id=\"country-selector\"/>\r\n</div>\r\n```",
          "createdAt": "2020-08-26T12:57:52Z",
          "author": { "login": "rikosage", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDg5OTE5Mw==",
          "body": "@rikosage \r\n\r\nYour code it's not right.\r\n\r\nReplace:\r\n```html\r\n<label id=\"country-selector\">Select country</label>\r\n```\r\n\r\nby:\r\n```html\r\n<label for=\"country-selector\">Select country</label>\r\n```\r\n\r\nAnd warning will disappear.",
          "createdAt": "2020-08-26T14:02:30Z",
          "author": { "login": "lagden", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MjE0NzcyNQ==",
          "body": "@lagden What more accuracy are you looking for? The code in your initial comment isn't giving me a warning from the compiler. Is there something that you think is giving an overzealous a11y warning?",
          "createdAt": "2020-08-27T19:30:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MjE4NDAyOQ==",
          "body": "Well!\r\n\r\nI made an example: https://svelte.dev/repl/1a5067144e26400097b0417f238dce80?version=3.24.1\r\n\r\nExist some properties conditions inside the component (`LabelAtom.svelte`).  \r\nSo, it would only be possible to say if it is associated after it has been compiled.\r\n\r\nAnyway, I think it is an overzealous on my part, because I did the test only in REPL.",
          "createdAt": "2020-08-27T20:50:40Z",
          "author": { "login": "lagden", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNzYyODYwNg==",
          "body": "Hi all,\r\n\r\nI fail to understand that this ticket is closed.\r\n\r\nThe original request was to make the compile time warning go away when it was wrongly saying that a label is not associated with an input in the case of having the input inside the label.\r\nThere is now a PR open (I don't know if it fixes it).\r\nWill the be considered to be fixed in a near future ?\r\n\r\nHave a nice day!\r\n",
          "createdAt": "2020-11-15T20:09:06Z",
          "author": { "login": "callmemagnus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODc2ODIzMA==",
          "body": "Does the input have to be a direct child of the label?\r\n\r\nThis works:\r\n```html\r\n<label>\r\n    <input type=\"text\">\r\n</label>\r\n```\r\n\r\nWhile this continues to throw the A11y warning:\r\n```html\r\n<label>\r\n    <div>\r\n        <input type=\"text\">\r\n    </div>\r\n</label>\r\n```",
          "createdAt": "2021-03-02T09:36:27Z",
          "author": { "login": "moritzebeling", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDU4MzAxMg==",
          "body": "Is it possible to add ignore warning attribute to the element? Maybe something like:\r\n\r\n```html\r\n<label @ignore=\"a11y\">\r\n</label>\r\n```",
          "createdAt": "2021-06-20T16:58:43Z",
          "author": { "login": "andirady", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2NDY4Nzg2MQ==",
          "body": "Take easy, folks!\r\nInsert in yours `rollup.config.js` the code below:\r\n\r\n```js\r\nconst ignoreWarnings = new Set([\r\n\t'a11y-no-onchange',\r\n\t'a11y-label-has-associated-control'\r\n])\r\n\r\n//...\r\nsvelte({\r\n\t//...\r\n\tonwarn(warning, handler) {\r\n\t\tif (ignoreWarnings.has(warning.code)) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\thandler(warning)\r\n\t}\r\n}),\r\n//...",
          "createdAt": "2021-06-21T03:02:07Z",
          "author": { "login": "lagden", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODQxNjY2ODM=",
    "body": "I don't know if this is an issue or not but something bothered me when i was trying to refactor my current svelte-router to ssr sapper.\r\n\r\ni had a image component in one of my router.\r\nIt basically looked like \r\n```html\r\n<img loading=\"lazy\" {src} {...$$restProps}>\r\n```\r\n\r\nThe problem was that all the images loaded either way. \r\nEither width/height was inherited from the parent or it was styled to take up a width & height. to make sure that all images wasn't inside the viewport\r\n\r\nI'm not sure if you create a image first (either by `new Image()` or `document.createElement('img')` - has the same result). But this is what i think is happening...\r\n\r\nYou see when you create a image without attaching it to the DOM\r\n```js\r\nvar img = new Image()\r\nimg.src = 'https://dummyimage.com/600x400/000/fff'\r\n```\r\n...The image will then be loaded.\r\n\r\nbut if you set the loading attribute first.\r\n```js\r\nvar img = new Image()\r\nimg.loading = 'lazy'\r\nimg.src = 'https://dummyimage.com/600x400/000/fff'\r\n```\r\nthen it won't preload.\r\n\r\nthe solution i came up with was basically to create an object with the `loading` property as the first key, and assign all props at once. (as object keys don't have any alphabetic order, instead it's ordered in which they were added)\r\n\r\n```html\r\n<script>\r\n  export let src\r\n\r\n  const props = {\r\n    loading: 'lazy',\r\n    src,\r\n    ...$$restProps\r\n  }\r\n</script>\r\n<img {...props}>\r\n```\r\n\r\nOne solution i would like to suggest is to first see if any of the attributes/props contains loading set the loading property first and then assign the rest of them to the element. The problem was easily reproducible if i just switched place on `loading` and `src` like so:\r\n```js\r\n  const props = {\r\n    src,\r\n    loading: 'lazy',\r\n    ...$$restProps\r\n  }\r\n```",
    "closedAt": null,
    "createdAt": "2020-08-23T11:37:12Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDc2Njc1Ng==",
          "body": "Guess this would apply to iframes also.",
          "createdAt": "2020-08-26T09:24:42Z",
          "author": { "login": "jimmywarting", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDc5NzMwOA==",
          "body": "Now when i think about it. (reading some in sveltejs/sapper#1435) a better approach would maybe be \r\n```diff\r\n- set loading before setting src when assigning props/attributes\r\n+ set `src` at the very last step when assigning props/attributes\r\n```\r\nthings like style, width, height are important information also for browser to know whether or not it's inside the viewport\r\n\r\n(This fit better for DOM changes)\r\n(otherwise it don't matter much when it's detached from the DOM and later appended)",
          "createdAt": "2020-08-26T10:29:20Z",
          "author": { "login": "jimmywarting", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODQxMDE1NDc=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nAccessing a list of all available components at runtime would make dynamic layouts easier to create. A somewhat common example is to dynamically generate the navigation bar of all possible pages. However, other use cases exist as well.\r\n\r\nCode example:\r\n```\r\n<nav>\r\n    {#each pages as page}\r\n        // render the links to all pages here\r\n        <a href=\"{page.url}\">\r\n              {page.title}\r\n        </a>\r\n\r\n        // render sub pages\r\n    {/each}\r\n</nav>\r\n```\r\n\r\n**Describe the solution you'd like**\r\nTo be able to access a list of all components at runtime, for example, by a global svelte object.\r\n\r\n```\r\nvar allAvailableComponents = svelte.getAllComponents();\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nAn alternative would be to have a JS file that imports all components and then adds them to a list. This JS file would have to be separately maintained. Another alternative would be to generate this JS file at compile time via some custom preprocessor.\r\n\r\n**How important is this feature to you?**\r\nI'd use this feature in a application, where each page in the application would be plain Svelte code. When someone would maintain this application and create new pages, the maintainer would not need to learn all the specifics of Svelte nor the application. Just adding some files in the correct folder would be enough. \r\n\r\n**Additional context**\r\nIn, for example, C# code one may inspect all available classes at runtime and instantiate them if needed. The Svelte component syntax already provides the instantiation. \r\n\r\n```\r\n<svelte:component this={someComponent}/>\r\n```\r\n",
    "closedAt": "2020-08-27T23:31:31Z",
    "createdAt": "2020-08-23T02:27:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MjI0MjQ1MQ==",
          "body": "The compiler only sees one component at a time, and the runtime doesn't keep track of all of defined components - and we don't want it to, either, because that would prevent any sort of treeshaking of unused components. If you want something like this, I believe there are bundler plugins that let you import all files in a directory using wildcards - or you could use a script to generate the central js file as you described. This isn't something that makes sense to have built into Svelte.",
          "createdAt": "2020-08-27T23:31:31Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODQwMzYzMzI=",
    "body": "**Describe the bug**\r\nWhen using a `label` tag with the `for` attribute, there seems to be some inconsistent behaviour when using several instances of a component.\r\n\r\n**To Reproduce**\r\n\r\nSee example:\r\n\r\nhttps://svelte.dev/repl/11e98357621d476488510831758bfcab?version=3.24.1\r\n\r\nClick the squares and upload an image file.\r\n\r\n**Expected behavior**\r\n\r\nI expect the image in the example to render in the corresponding component, instead of always showing up in the first component.\r\n\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Svelte version 3.24.1\r\n\r\n**Severity**\r\n\r\nNot extremely severe and not blocking, since I can get the expected behaviour by putting the `img` tag inside the `label` tag, and not use the `for` attribute. However, this caused a lot of confusion and I thought it should be reported as a bug.\r\n",
    "closedAt": "2020-08-22T18:15:07Z",
    "createdAt": "2020-08-22T17:48:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODY3MzkzMQ==",
          "body": "IDs are expected to be unique, and I believe this sort of behavior is exactly what would happen with regular HTML. Svelte doesn't scope the IDs for you.",
          "createdAt": "2020-08-22T18:15:01Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Mzc4NTM3NQ==",
          "body": "@Conduitry I've been looking for a solution for this same problem. The pain is that I'm encapsulating some html logic within a component, the `<label for=**id**>`+`<input id=**id**>` is classic. Apparently there is no way to uniquely identify a tag within a component, as every subsequent component would have the same id.",
          "createdAt": "2020-09-17T03:24:56Z",
          "author": { "login": "rodgco", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODM2MzIyMTY=",
    "body": "Example\r\n```ts\r\nfunction update() {\r\n\tlet i = 0;\r\n\tlet v;\r\n\tfor (v of el_tr) arr[i++] = v;\r\n\tarr.length = i;\r\n}\r\n```\r\n\r\nCompiled\r\n```ts\r\nfunction update() {\r\n\tlet i = 0;\r\n\tlet v;\r\n\tfor (v of el_tr) $$invalidate(1, arr[i++] = v, arr);\r\n\t$$invalidate(1, arr.length = i, arr);\r\n}\r\n```\r\n\r\nSvelte's reactivity system involves calling `$$invalidate` on every local var reassignment\r\ninjecting likely superfluous function calls in situations such as in for loops without raising user's awareness should be a huge concern\r\n\r\nI suggest adding an alternate component init function in dev mode whereby each superfluous `$$invalidate` call per update cycle is counted and reset `after_update` so as to warn the user when certain variables are invalidated hundreds of times in the span of a single tick",
    "closedAt": null,
    "createdAt": "2020-08-21T15:12:33Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODMwODg3ODk=",
    "body": "While using recently announced TypeScript support, I’m unable to import TypeScript interface.\r\n\r\nSteps to reproduce:\r\n* Create sample project from default Svelte template and upgrade to TypeScript\r\n* Add the following files:\r\n\r\n```ts\r\n// sample.ts\r\n\r\nexport function test(): SomeData {\r\n    return { title: 'test' };\r\n}\r\n\r\nexport interface SomeData {\r\n    title: string;\r\n}\r\n```\r\n\r\n```html\r\n<!-- Sample.svelte  -->\r\n<script lang=\"ts\">\r\nimport { test, SomeData } from './sample';\r\nexport let data: SomeData = test();\r\n</script>\r\nData is { data.title }\r\n```\r\n\r\nWhile VSCode extension works totally fine here, Rollup throws warning here:\r\n\r\n```\r\n(!) Import of non-existent export\r\nsrc/Sample.svelte\r\n1: <script lang=\"ts\">\r\n                     ^\r\n2: import { test, SomeData } from './sample';\r\n3: export let data: SomeData = test();\r\n```\r\n\r\nWhile it’s just a warning in Svelte, in Sapper it’s unable to compile project with the same error.\r\n\r\nRemoving `SomeData` import fixes problem.",
    "closedAt": "2020-08-20T21:33:57Z",
    "createdAt": "2020-08-20T20:52:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NzkxNzY4MA==",
          "body": "Duplicate of #5267. See https://svelte.dev/faq#what-about-typescript-support",
          "createdAt": "2020-08-20T21:33:57Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODI2MzIyMTg=",
    "body": "**Describe the bug**\r\n\r\n<details>\r\n  <summary>Code example throwing error</summary>\r\n\r\n```svelte\r\n<script>\r\n  import Image from 'svelte-image';\r\n  import Fa from 'svelte-fa';\r\n  import { faCheck } from '@fortawesome/free-solid-svg-icons';\r\n  import { faClock } from '@fortawesome/free-regular-svg-icons';\r\n\r\n  // adding types throws compiler error for some reason\r\n  export let readableSlug;\r\n\r\n  const programmingGoals = [\r\n    {\r\n      text: 'Learn Svelte',\r\n      reached: true,\r\n    }\r\n  ];\r\n\r\n  const lifestyleGoals = [\r\n    {\r\n      text: 'Participate in a 140km bike race',\r\n      reached: false,\r\n    },\r\n  ];\r\n\r\n  // adding types throws compiler error for some reason\r\n  let isProgrammingCategory: boolean;\r\n  let goals = [];\r\n\r\n  $: isProgrammingCategory = readableSlug === 'Programming';\r\n  $: goals = isProgrammingCategory ? programmingGoals : lifestyleGoals;\r\n</script>\r\n\r\n<div class=\"w-full md:w-2/4\">\r\n  <h1>{readableSlug}</h1>\r\n  <h2>Current goals</h2>\r\n\r\n  {#each goals as goal}\r\n    <div class=\"flex items-baseline italic\">\r\n      {#if goal.reached}\r\n        <Fa icon=\"{faCheck}\" class=\"mr-3 text-green-500\" />\r\n      {:else}\r\n        <Fa icon=\"{faClock}\" class=\"mr-3 text-gray-600\" />\r\n      {/if}\r\n      <p>{goal.text}</p>\r\n    </div>\r\n  {/each}\r\n</div>\r\n<div class=\"w-full md:w-2/4\">\r\n  {#if isProgrammingCategory}\r\n    <Image src=\"code-review.png\" alt=\"Man with code editor\" />\r\n  {:else}\r\n    <Image src=\"into-the-night.png\" alt=\"Man sitting next to campfire\" />\r\n  {/if}\r\n</div>\r\n```\r\n\r\n</details>\r\n\r\n\r\nIn the provided code example, `let isProgrammingCategory;` works, but as soon as you add a type to it like `let isProgrammingCategory: boolean;` the compile error occurs like attached below in the stacktrace.\r\n\r\nWhen you remove `<Image />` and the `svelte-image` import from the file, everything works again as expected also with type annotations.\r\n\r\nUnfortunately, I couldn't provide an example since Svelte REPL doesn't work with typescript yet.\r\n\r\nEncountered while running `sapper dev`.\r\n\r\n**Expected behavior**\r\nAble to add typescript annotations to any `.svelte` file\r\n\r\n**Stacktraces**\r\n\r\n<details>\r\n  <summary>Stacktrace</summary>\r\n\r\n```shell\r\nCompileError [ParseError]: Unexpected token\r\n    at error$1 (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:15595:20)\r\n    at Parser$1.error (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:15671:10)\r\n    at Parser$1.acorn_error (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:15665:15)\r\n    at Object.read_script [as read] (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:7377:17)\r\n    at tag (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:14737:34)\r\n    at new Parser$1 (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:15630:22)\r\n    at Object.parse$3 [as parse] (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:15761:21)\r\n    at replaceImages (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte-image/src/main.js:483:18)\r\n    at markup (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte-image/src/main.js:531:19)\r\n    at preprocess (/home/markus/Applications/Webdevelopment/mhatvan.github.io/node_modules/svelte/compiler.js:26987:34) {\r\n  code: 'parse-error',\r\n  start: { line: 25, column: 27, character: 584 },\r\n  end: { line: 25, column: 27, character: 584 },\r\n  pos: 584,\r\n  filename: undefined,\r\n  frame: '23: \\n' +\r\n    '24:   // adding types throws compiler error for some reason\\n' +\r\n    '25:   let isProgrammingCategory: boolean;\\n' +\r\n    '                               ^\\n' +\r\n    '26:   let goals = [];\\n' +\r\n    '27: '\r\n} Error parsing component content\r\n```\r\n\r\n</details>\r\n\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Brave v1.12.114\r\n\r\n- Your operating system: Ubuntu Linux 20.04\r\n\r\n- Svelte version: v3.24.1\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nModerate, having to stay off typescript annotations for that complete file.\r\n",
    "closedAt": "2020-08-20T11:27:10Z",
    "createdAt": "2020-08-20T11:16:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NzU1ODcyNg==",
          "body": "This sounds like #4141 - svelte-image needs to get to get a compilable version of the whole component but, since it's a `template` preprocessor, it runs before the `script` preprocessor that handles the TypeScript.",
          "createdAt": "2020-08-20T11:27:10Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NzYzNjE3Nw==",
          "body": "I see. \r\n\r\nAm I assuming correctly that this https://github.com/sveltejs/svelte/pull/4282 needs to be merged in order to avoid running into the compiler error?",
          "createdAt": "2020-08-20T12:31:11Z",
          "author": { "login": "mhatvan", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODIwNDc1MjU=",
    "body": "**Describe the bug**\r\nI have a component which generates a small bit of HTML which is injected into an `iframe`. The HTML contains a `style` section which the preprocessing tries to transform, yielding a parser error because there are interpolated values in it.\r\n\r\n(Accidentally opened this issue in `svelte-preprocess` first: https://github.com/sveltejs/svelte-preprocess/issues/225\r\nThe problem is in the code [wrapper code][code-ref] though.)\r\n\r\n**To Reproduce**\r\n\r\nA component like this will cause the error:\r\n\r\n```svelte\r\n<script>\r\n\tfunction getItemHtml(html)\r\n\t{\r\n\t\tconst style = window.getComputedStyle(document.documentElement);\r\n\r\n\t\tconst background = style.getPropertyValue('--background');\r\n\t\tconst foreground = style.getPropertyValue('--foreground');\r\n\r\n\t\treturn html + /*html*/`<style>\r\n\t\t\thtml\r\n\t\t\t{\r\n\t\t\t\tbackground: ${background};\r\n\t\t\t\tcolor: ${foreground};\r\n\t\t\t}\r\n\t\t</style>`;\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t:global(:root)\r\n\t{\r\n\t\t--background: #333;\r\n\t\t--foreground: #ddd;\r\n\t}\r\n</style>\r\n\r\n<div>\r\n\tHTML:\r\n\t<pre>\r\n\t\t{getItemHtml('Hello World')}\r\n\t</pre>\r\n</div>\r\n```\r\n\r\n[[Repository with Webpack config]](https://github.com/brunnerh/svelte-style-in-script-issue)\r\n\r\n**Expected behavior**\r\nNo attempted transform and thus no errors.\r\n\r\n**Stacktraces**\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n```\r\nERROR in ./src/app.svelte\r\nModule build failed (from ./node_modules/svelte-loader/index.js):\r\nCssSyntaxError: .\\src\\app.svelte:4:19: Unknown word\r\n    at Input.error (.\\node_modules\\postcss\\lib\\input.js:130:16)        \r\n    at Parser.unknownWord (.\\node_modules\\postcss\\lib\\parser.js:563:22)\r\n    at Parser.other (.\\node_modules\\postcss\\lib\\parser.js:168:12)      \r\n    at Parser.parse (.\\node_modules\\postcss\\lib\\parser.js:77:16)       \r\n    at parse (.\\node_modules\\postcss\\lib\\parse.js:17:12)\r\n    at new LazyResult (.\\node_modules\\postcss\\lib\\lazy-result.js:60:16)\r\n    at Processor.<anonymous> (.\\node_modules\\postcss\\lib\\processor.js:138:12)\r\n    at Processor.process (.\\node_modules\\postcss\\lib\\processor.js:117:23)\r\n    at transformer (.\\node_modules\\svelte-preprocess\\dist\\transformers\\globalStyle.js:55:67)\r\n    at Object.exports.runTransformer (.\\node_modules\\svelte-preprocess\\dist\\autoProcess.js:51:12)\r\n    at async style (.\\node_modules\\svelte-preprocess\\dist\\autoProcess.js:171:33)\r\n    at async .\\node_modules\\svelte\\compiler.js:27016:32\r\n    at async Promise.all (index 0)\r\n    at async replace_async (.\\node_modules\\svelte\\compiler.js:26971:52)\r\n    at async preprocess (.\\node_modules\\svelte\\compiler.js:27012:19)\r\n @ ./src/main.js 1:0-31 3:4-7\r\n @ multi ./src/main.js\r\n```\r\n\r\n</details>\r\n\r\n**Information about your project:**\r\n\r\n- Your browser and the version: -\r\n- Your operating system: Windows 10 64bit\r\n- `svelte` version: 3.24.1\r\n- Webpack\r\n\r\n**Severity**\r\n\r\nLow; workarounds exist.\r\n\r\n**Workaround**\r\n\r\nTrick the Regex looking for `<style>`, e.g.:\r\n```js\r\nreturn html + /*html*/`<${''}style>...`\r\n```\r\n\r\n[code-ref]: https://github.com/sveltejs/svelte/blob/master/src/compiler/preprocess/index.ts#L117",
    "closedAt": null,
    "createdAt": "2020-08-19T18:29:22Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NjY5NTM1MA==",
          "body": "Preprocessing happens before any parsing of the component, and is entirely regex based. I guess I'm ambivalent about how I think something like this ought to be handled. Do we want to start searching for a `<script>` or a `<style>` (whichever comes first), and then find its matching `</script>`/`</style>` and then start the search again _after that closed tag_ for the next `<script>` or `<style>`?",
          "createdAt": "2020-08-19T20:55:52Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2MTI3ODk5OA==",
          "body": "I think I just ran into this obscure bug, here's the code:\r\n\r\n```svelte\r\n<script type=\"text/typescript\">\r\n  function renderUserStyles(suppliedPalette) {\r\n    if (!suppliedPalette)\r\n      return \"\";\r\n\r\n    let palette = \"<style>:root {\";\r\n    let paletteCount = 0;\r\n\r\n    suppliedPalette.map(color => {\r\n      palette += `--user-color-${paletteCount++}: ${color};`;\r\n    });\r\n\r\n    palette += \"}</style>\";\r\n  }\r\n</script>\r\n\r\n<!-- / stuff /-->\r\n\r\n<svelte:head>\r\n  {@html renderUserStyles(thisUser.palette)}\r\n</svelte:head>\r\n```\r\n\r\nThe error I get is `[!] (plugin svelte) CssSyntaxError: ~/project/src/pages/[username]/status/[slug].svelte:1:8: Unknown word`. Here is the error in full:\r\n\r\n```error\r\nCssSyntaxError: ~/project/src/pages/[username]/status/[slug].svelte:1:8: Unknown word\r\n    at Input.error (~/project/node_modules/postcss/lib/input.js:82:16)\r\n    at Parser.unknownWord (~/project/node_modules/postcss/lib/parser.js:518:22)\r\n    at Parser.other (~/project/node_modules/postcss/lib/parser.js:149:12)\r\n    at Parser.parse (~/project/node_modules/postcss/lib/parser.js:59:16)\r\n    at parse (~/project/node_modules/postcss/lib/parse.js:11:12)\r\n    at new LazyResult (~/project/node_modules/postcss/lib/lazy-result.js:99:16)\r\n    at Processor.process (~/project/node_modules/postcss/lib/processor.js:33:12)\r\n    at transformer (~/project/node_modules/svelte-preprocess/dist/transformers/globalStyle.js:56:67)\r\n    at Object.exports.transform (~/project/node_modules/svelte-preprocess/dist/autoProcess.js:37:12)\r\n    at style (~/project/node_modules/svelte-preprocess/dist/autoProcess.js:161:33)\r\n```\r\n",
          "createdAt": "2021-01-16T00:58:09Z",
          "author": { "login": "NetOperatorWibby", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4Nzc0MzU3Mw==",
          "body": "Spent the morning today trying to figure out what's going on here. As a note for other victims of this bug, you can work around it by fooling the regex:\r\n\r\n```javascript\r\nconst styles = `<${''}style>:root { ${css} }</${''}style>`;\r\n```",
          "createdAt": "2021-03-01T08:05:06Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODE5NjQwNTg=",
    "body": "**The bug**\r\nNavigating from a specific page to another causes `Uncaught (in promise) TypeError: Cannot read property 'children' of null\r\n` and a blank page. It only occurs when navigation from [`/app`](https://github.com/useverto/verto/blob/dev/src/routes/app.svelte) to [`/app/all-transactions`](https://github.com/useverto/verto/blob/dev/src/routes/app/all-transactions.svelte) (repo below). Going to the route directly or reloading does not cause this issue\r\n\r\n**Logs**\r\n```\r\nVM9796:118 Uncaught (in promise) TypeError: Cannot read property 'children' of null\r\n    at removeNode (<anonymous>:118:31)\r\n    at Object.block.d (<anonymous>:280:11)\r\n    at destroy (LatestTransactions.svelte:136)\r\n    at updateProfile (<anonymous>:49:7)\r\n    at Object.block.d (<anonymous>:283:9)\r\n    at destroy_component (index.mjs:1396)\r\n    at destroy (app.svelte:28)\r\n    at updateProfile (<anonymous>:49:7)\r\n    at Object.block.d (<anonymous>:283:9)\r\n    at destroy_component (index.mjs:1396)\r\n```\r\n\r\n**To Reproduce**\r\nUse this repository: https://github.com/useverto/verto\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: `Brave 1.10.97 Chromium: 83.0.4103.116 (Official Build) (64-bit)`\r\n\r\n- Svelte version: latest (`\"^3.24.1\"`)\r\n\r\n- Rollup\r\n\r\n- Using Sapper (`\"^0.28.0\"`)\r\n",
    "closedAt": null,
    "createdAt": "2020-08-19T16:07:29Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NjUxOTA5MQ==",
          "body": "Tried updating all rollup/svelte dependencies and tried [this](https://github.com/sveltejs/svelte/issues/2086#issuecomment-507773541) comment from #2086 ",
          "createdAt": "2020-08-19T16:08:50Z",
          "author": { "login": "martonlederer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc2ODYzOA==",
          "body": "I'm encountering possibly the same bug:\r\n\r\n```\r\nUncaught TypeError: Cannot read property 'children' of undefined\r\n    at removeNode (<anonymous>:118:31)\r\n    at Object.block.d (<anonymous>:280:11)\r\n    at destroy_component (modules.js?hash=241e361d86eb4a5c7deb890962cfc97e6c02b251:9785)\r\n    at Confirm.$destroy (modules.js?hash=241e361d86eb4a5c7deb890962cfc97e6c02b251:9914)\r\n```\r\n\r\nHappens when I'm using a `Dialog` component that gets rendered as it's own \"app\" on the `document.body`, and then removed.",
          "createdAt": "2020-08-23T12:31:52Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc2OTU2MA==",
          "body": "I was puzzled why this specific bit of our app was suddenly broken - haven't touched it, haven't updated Svelte, haven't done nothing but vacationing for three weeks.\r\n\r\nI just tried to trigger the bug with Firefox, but I can't. It works. It also works on Safari. And Brave.\r\n\r\nSo, my suggestion is... Chrome pushed out a new release that broke Svelte? 😬\r\n\r\n",
          "createdAt": "2020-08-23T12:40:31Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc2OTkwOQ==",
          "body": "I think my guess was correct.\r\n\r\nThe previous version of Chrome on my laptop was `83.0.4103.116`.\r\n\r\nI now updated to `84.0.4147.135` and the error disappeared 🤷‍♂️ \r\n\r\n",
          "createdAt": "2020-08-23T12:44:11Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc3MDAyOA==",
          "body": "No idea. I'm using brave and it throws the error. Brave uses chromium",
          "createdAt": "2020-08-23T12:45:20Z",
          "author": { "login": "martonlederer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc3MDU3Ng==",
          "body": "> No idea. I'm using brave and it throws the error. Brave uses chromium\r\n\r\nHave you tried Firefox, Safari, Opera etc. to rule out the possibility that your Brave browser is using a version of Chromium that has the same (potential) bug that I (think I) had?",
          "createdAt": "2020-08-23T12:50:17Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc3MDcyMA==",
          "body": "I will make sure to do so",
          "createdAt": "2020-08-23T12:51:31Z",
          "author": { "login": "martonlederer", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTExMDI5OA==",
          "body": "Not sure what is the cause of the bug, but I have the same problem in the latest Chrome, latest Firefox (80.0.1) and latest Edge 85.0.564.51 (but that's Chromium as well). I don't think it is an issue with browsers.",
          "createdAt": "2020-09-11T13:56:15Z",
          "author": { "login": "Thijsrausch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTcxMjYwNA==",
          "body": "The answer to [this ](https://stackoverflow.com/questions/58768701/sapper-how-do-i-fix-parentnode-is-null-when-navigating-away-from-a-page-with) related stackoverflow question solved my problem, maybe it can help you guys as well.\r\n",
          "createdAt": "2020-09-13T19:17:55Z",
          "author": { "login": "Thijsrausch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5Mjc4MTY5NA==",
          "body": "Same issue here. I'm not using Sapper, just Svelte. I'm using `page` for routing, but even with plain `<a href=\"/somepath\" ...` it's not working... Only for specific routes though. I haven't been able to pinpoint the issue so far, any help is appreciated!",
          "createdAt": "2020-09-15T15:12:39Z",
          "author": { "login": "gijswobben", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczOTQ5NzQ4OQ==",
          "body": "I've been having this issue in various instances also, typically within `if` blocks (and font-awesome for example) or using `slots`. https://github.com/sveltejs/svelte/issues/5290#issuecomment-691712604 SO solution seems to work 🙏 but it's nay cool.",
          "createdAt": "2020-12-06T12:42:43Z",
          "author": { "login": "newtriks", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NTgxNTY5MQ==",
          "body": "I removed the Svelte Devtools and solved.",
          "createdAt": "2021-05-21T09:24:09Z",
          "author": { "login": "jiangfengming", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODEzOTY1OTI=",
    "body": "**Describe the bug**\r\nSvelte Site performance is very bad. Scrolling home page on Safari freezes rendering for 5 (!) seconds at times on a modern Mac.\r\n\r\n**To Reproduce**\r\n\r\n* Go to https://svelte.dev/ using Safari on macOS (other browsers somewhat better, but still bad).\r\n\r\n**Expected behavior**\r\nSilky smooth performance always above 60 fps.\r\n\r\n**Severity**\r\nI think this is a problem. The site is the first what people see when they try to learn about Svelte. This level of performance is immediately noticeable even for non-engineer eyes.\r\n\r\n**Additional context**\r\nHalf of the appeal of Svelte is better performance. The site should demonstrate that level of performance.",
    "closedAt": null,
    "createdAt": "2020-08-18T23:15:50Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTc2NTk0OA==",
          "body": "I'm pretty sure this is down to having 4 codemirror REPLs on the homepage. Without significantly decreasing the usefulness of the homepage, I think this might be a tough thing to do.\r\n\r\nOpen to ideas though.",
          "createdAt": "2020-08-18T23:19:44Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTc4MTk1Mg==",
          "body": "I’m not sure REPL is to blame, for example, here is API page (there is no REPL there) on iPhone 8:\n\nhttps://share.icloud.com/photos/061yVvtTPiIPClAE6umfpIwYg",
          "createdAt": "2020-08-19T00:21:13Z",
          "author": { "login": "andreiborisov", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTg1NTY1Mg==",
          "body": "Maybe we can try if [throttling](https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event#Scroll_event_throttling) the scroll event helps? Seen two scroll event handler in `Nav` and `Docs` component in [site-kit](https://github.com/sveltejs/site-kit/tree/master/components). I can't try it because I don't see any lags on my windows/android firefox.",
          "createdAt": "2020-08-19T05:13:50Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTg1NzM5Nw==",
          "body": "> \r\n> \r\n> I'm pretty sure this is down to having 4 codemirror REPLs on the homepage. Without significantly decreasing the usefulness of the homepage, I think this might be a tough thing to do.\r\n> \r\n> Open to ideas though.\r\n\r\nIf the REPL is to blame, what I think should happen is to remove any inactive REPL. My suggestion would be any that haven't been viewed / touched for 4 months should be purged.",
          "createdAt": "2020-08-19T05:20:20Z",
          "author": { "login": "Bradley-H", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTk4OTk5NA==",
          "body": "> If the REPL is to blame, what I think should happen is to remove any inactive REPL. My suggestion would be any that haven't been viewed / touched for 4 months should be purged.\r\n\r\nPretty sure you misunderstood. @antony meant the REPLs showing as part of the landing page at https://svelte.dev/\r\n\r\nI can't really confirm 5 seconds rendering freezes (Macbook Pro 2017, Safari 13.1.1). It stutters a tiny little bit reaching the contributors section, but other than that it seems smooth. ",
          "createdAt": "2020-08-19T09:03:50Z",
          "author": { "login": "laeckerv", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NjA3NDE0Ng==",
          "body": "Yes, @laeckerv is correct - there are four codemirror instances sitting on the homepage to demonstrate concepts.\r\n\r\nIt's a bit jerky for me but nothing too serious, and I expect jerkiness on a page when I see a fully interactive REPL.\r\n\r\nWe *might* be able to lazy-load the REPLs using IntersectionObserver when they are fully on the page, and just add a placeholder image otherwise, but it sounds like a lot of effort for something that doesn't really seem to be too much of an issue.",
          "createdAt": "2020-08-19T10:05:45Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NjE5NzYxOA==",
          "body": "@jasonlyu123 yep, some brief profiling on iPhone seems to point to scrolling events too. It seems they definitely should be throttled, especially, since there is no sidebar visible on iPhone.\r\n\r\nOn the other note, parallax scrolling on API page seems to be broken anyway, it doesn't trigger on any of my browsers, although I distinctly remember it working some time ago... What is more interesting, [Sapper analogous page](https://sapper.svelte.dev/docs) has parallax scrolling working and scrolls without a hitch on iPhone.\r\n",
          "createdAt": "2020-08-19T11:35:45Z",
          "author": { "login": "andreiborisov", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODYxNjk0NA==",
          "body": "![Screenshot_20200822_102840](https://user-images.githubusercontent.com/34193243/90952261-6b849380-e462-11ea-8afa-2a42bbeef4b7.png)\r\nhttps://web.dev/uses-passive-event-listeners/\r\n\r\nWhat browsers are we looking at to support? I'd say give `{passive: true}` a shot? Otherwise as mentioned perhaps try this. https://davidwalsh.name/javascript-debounce-function\r\n\r\nHad a look at `https://svelte.dev/client/index.eea181dc.js`. Would someone kindly someone give me a swift overview of what this section does?\r\n\r\n```javascript\r\nfunction V(t, n) {\r\n  \"static\" === getComputedStyle(t).position && (t.style.position = \"relative\");\r\n  const e = document.createElement(\"object\");\r\n  let o;\r\n  return (\r\n    e.setAttribute(\r\n      \"style\",\r\n      \"display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;\"\r\n    ),\r\n    (e.type = \"text/html\"),\r\n    (e.tabIndex = -1),\r\n    (e.onload = () => {\r\n      (o = e.contentDocument.defaultView).addEventListener(\"resize\", n);\r\n    }),\r\n    /Trident/.test(navigator.userAgent)\r\n      ? (t.appendChild(e), (e.data = \"about:blank\"))\r\n      : ((e.data = \"about:blank\"), t.appendChild(e)),\r\n    {\r\n      cancel: () => {\r\n        o && o.removeEventListener && o.removeEventListener(\"resize\", n),\r\n          t.removeChild(e);\r\n      },\r\n    }\r\n  );\r\n}\r\n```\r\n\r\nFrom what I understand this\r\n- gets the computed styles for a static element with position relative\r\n- creates an `object` element\r\n- adds style attributes to it and those change the position among others\r\n- and then we have an onload that checks for a viewport resize\r\n- ensuing a userAgent check\r\n- finally removing the listener\r\n\r\nIs this needed and what part of the page is this for?\r\n\r\n![Screenshot_20200822_105744](https://user-images.githubusercontent.com/34193243/90952729-590c5900-e466-11ea-98fd-121d35028302.png)\r\n\r\nAdditionally to make things faster the REPL CSS could be inlined in the `head` and async loaded before the end of `body`? https://www.filamentgroup.com/lab/async-css.html https://caniuse.com/#search=preload\r\n\r\nChecked the page in BrowserStack IOS iPhone 11 Pro Safari and even there a bit of a hiccup is felt when scrolling down and coming to the REPL section. However that might also be due to BrowserStack, could not test on a real device.",
          "createdAt": "2020-08-22T09:09:28Z",
          "author": { "login": "robots4life", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzY3NTM2Nw==",
          "body": "@robots4life: It's an [`add_resize_listener`](https://github.com/sveltejs/svelte/blob/9745b61aab0a623384b27c0cbbf7f91d929a8bd5/src/runtime/internal/dom.ts#L262-L305) probably due to a [`bind:clientWidth`](https://github.com/sveltejs/svelte/blob/9745b61aab0a623384b27c0cbbf7f91d929a8bd5/site/src/components/Repl/ReplWidget.svelte#L117) in the ReplWidget which is used on the page, and that `elementresize`(?) that triggers the creation of a resize listener?",
          "createdAt": "2020-11-08T22:29:54Z",
          "author": { "login": "bwbroersma", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODEzMzM0NTQ=",
    "body": "**Describe the bug**\r\nBinding to a property of an #each block item does not initiate a re-render when the property is updated, if the list being looped over is within a store. The same logic using a value outside of a store works as expected.\r\n\r\n**To Reproduce**\r\nExample in [REPL](https://svelte.dev/repl/9f9b65e8d0e6442e9ad559e7eaecfd0d?version=3.24.1)\r\n\r\n**Expected behavior**\r\nI would expect the store version to mimic the behaviour of the non-store version.\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Firefox 78.0.1\r\n- Svelte 3.24.1\r\n- Rollup\r\n\r\n**Severity**\r\nCan be worked around easily in most scenarios, once you understand that reactivity works as expected if you do not use a store value.",
    "closedAt": "2020-08-27T23:25:34Z",
    "createdAt": "2020-08-18T20:49:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4OTc1MQ==",
          "body": "This is fixed in 3.25.0 - https://svelte.dev/repl/9f9b65e8d0e6442e9ad559e7eaecfd0d?version=3.25.0",
          "createdAt": "2020-09-10T20:07:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODEwMTEwNzE=",
    "body": "**Describe the bug**\r\nWhen binding an empty (`undefined` or `null`) value to an input `:invalid` style state is triggered on initial load in Firefox. It looks like this was fixed in https://github.com/sveltejs/svelte/issues/1233 but seems to be broken again. \r\n\r\n**To Reproduce**\r\nWorks in version 3.9.0 [REPL](https://svelte.dev/repl/dbc0e7ba492d48a8b1b66b8e3fd5b9c5?version=3.9.0)\r\nBut not in latest version [REPL](https://svelte.dev/repl/dbc0e7ba492d48a8b1b66b8e3fd5b9c5?version=3.24.1)\r\n\r\n**Information about your Svelte project:**\r\nFirefox 78.0.2\r\n\r\n**Severity**\r\nIt's a little annoying, I can work around it by not using the required field or simply accepting the red border for now though.\r\n",
    "closedAt": null,
    "createdAt": "2020-08-18T12:42:15Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODQ5MDk0Nw==",
          "body": "also running into this! although I'm getting it when hydrating with undefined props from SSR.",
          "createdAt": "2020-12-19T15:51:07Z",
          "author": { "login": "Glench", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODE2MzkyMw==",
          "body": "Still happening on Firefox 86 and Svelte 3.34.0.  I've been working around this for a while by resetting the form after mount, as seen in this [REPL](https://svelte.dev/repl/8583e2e32f2c48508e0ffa6799888243?version=3.34.0)\r\n\r\nNote: this doesn't help with forms that are initially populated on some inputs as the reset will clear the data\r\n\r\nSeems to be related to #3569, #4849, etc with commits 081f7cd878a4624cf5c74570ad281193f2434f43 and d8fb0bb62c27d2cbb4097ca25953258813c158a7",
          "createdAt": "2021-03-01T18:19:55Z",
          "author": { "login": "danphil", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODA2MzI3OTA=",
    "body": "**Describe the bug**\r\nWhen compiled with `immutable={true}`, Svelte's two way binding more or less stops working on object properties.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/e90982f29d364bdab8f83187c054c629?version=3.24.1\r\n\r\n**Expected behavior**\r\nI would expect one of two things:\r\n\r\n1) This is explicitly not supported and results in compiler warnings.\r\n2) Svelte updates the object, instead of just the key.\r\n\r\nThat second one is definitely my preferred outcome.",
    "closedAt": null,
    "createdAt": "2020-08-18T02:05:19Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2ODA2MDEwMDg=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI'm trying to port some code that uses React hooks to Svelte. React has `useEffect`, which can be used to run some code when its dependencies change. I think the Svelte equivalent would be reactive statements (`$: { doStuff() }`).\r\n\r\nWhen using `useEffect` you can return a function, and that function will be called when dependencies change, or when the component using the `useEffect` is unmounted. I do not see an equivalent in Svelte.\r\n\r\nHere are the relevant docs for `useEffect`: https://reactjs.org/docs/hooks-reference.html#cleaning-up-an-effect\r\n\r\n**Describe the solution you'd like**\r\n\r\nI think it might be beneficial for Svelte to allow for returning cleanup functions in reactive statements.\r\nIn order to allow for returning though I think it would need to be possible to give a function as a reactive statement. Not sure, I'm hoping something like this could be possible though.\r\n\r\n```js\r\n// A prop. Some kind of track object that can have listeners.\r\nexport let track\r\n\r\n// We want to stop all tracks when our stop event listener is called.\r\n// When the track prop is changed to a different track, or when the component is unmounted\r\n// we want to remove the listener.\r\n// This must be a function so we can use a return statement. The function should be called as if it was a statement in the same place.\r\n$: () => {\r\n  let onStop = () => track.stopAllTracks()\r\n  track.on('stop', onStop)\r\n  return () => {\r\n    track.off('stop', onStop)\r\n  }\r\n}\r\n```\r\n\r\nFor reference in React this would look like:\r\n\r\n```js\r\nuseEffect(() => {\r\n  let onStop = () => track.stopAllTracks()\r\n  track.on('stop', onStop)\r\n  return () => {\r\n    track.off('stop', onStop)\r\n  }\r\n}, [track])\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nThe closest I could come up with is this:\r\n\r\n```js\r\nimport { onDestroy } from 'svelte'\r\n    \r\nexport let track\r\n    \r\nlet cleanup\r\n    \r\n$: {\r\n  if (cleanup) {\r\n    cleanup()\r\n  }\r\n  const onStop = () => track.stopAllTracks()\r\n  track.on('stop', onStop)\r\n  cleanup = () => track.off('stop', onStop)\r\n}\r\n    \r\nonDestroy(() => {\r\n  if (cleanup) {\r\n    cleanup()\r\n  }\r\n})\r\n```\r\n\r\nThis is verbose compared to how `useEffect` works. As a React user this seems like a step backwards, feeling more like `class` components, lifecycle methods, instance variables, instead of clean like the hooks version.\r\n\r\nThis could be cleaned up a bit by initializing `cleanup`:\r\n\r\n```js\r\nimport { onDestroy } from 'svelte'\r\n    \r\nexport let track\r\n    \r\nlet cleanup = () => {}\r\n$: {\r\n  cleanup()\r\n  const onStop = () => track.stopAllTracks()\r\n  track.on('stop', onStop)\r\n  cleanup = () => track.off('stop', onStop)\r\n}\r\nonDestroy(cleanup)\r\n```\r\n\r\n**How important is this feature to you?**\r\n\r\nIt's important to me because I'm trying to convert React code to Svelte code and there doesn't seem to be a clean translation of this common React feature (`useEffect` + cleanup function).\r\n\r\nI believe many other users may come from the React ecosystem and encounter this issue.",
    "closedAt": "2020-08-23T09:38:04Z",
    "createdAt": "2020-08-18T00:19:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTM0NzcwOA==",
          "body": "There is a library which attempts to shim react hooks, maybe you can just use that\r\nhttps://github.com/devongovett/svelte-hooks \r\n\r\nThe fact this library exists means it's possible to do something similar without having to add new features to the core IMO.",
          "createdAt": "2020-08-18T08:45:24Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTM1NjgyNA==",
          "body": "@dummdidumm Thanks for adding the link. I did take a look at that repo, but it doesn't look like it implements calling cleanup functions. I [tried out the code with the REPL](https://svelte.dev/repl/d25651ab37ea4687bec69c1924234e59?version=3.24.1) and it seems they are not supported.",
          "createdAt": "2020-08-18T09:03:11Z",
          "author": { "login": "DylanVann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTM1NzYyMg==",
          "body": "I suspect that there is an easier way to do this in Svelte that might not be immediately obvious if you're coming from React. A custom store or an action might work well here.",
          "createdAt": "2020-08-18T09:04:31Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTM2MDM5MQ==",
          "body": "@kevmodrome I actually had a similar hook that I was trying to convert to Svelte and using a store creating function in a reactive declaration worked perfectly.\r\n\r\n**React:**\r\n```js\r\nimport { useState, useEffect } from 'react';\r\nimport { LocalAudioTrack, LocalVideoTrack, RemoteAudioTrack, RemoteVideoTrack } from 'twilio-video';\r\n\r\ntype TrackType = LocalAudioTrack | undefined;\r\n\r\nexport default function useIsTrackEnabled(track: TrackType) {\r\n  const [isEnabled, setIsEnabled] = useState(track ? track.isEnabled : false);\r\n\r\n  useEffect(() => {\r\n    setIsEnabled(track ? track.isEnabled : false);\r\n\r\n    if (track) {\r\n      const setEnabled = () => setIsEnabled(true);\r\n      const setDisabled = () => setIsEnabled(false);\r\n      track.on('enabled', setEnabled);\r\n      track.on('disabled', setDisabled);\r\n      return () => {\r\n        track.off('enabled', setEnabled);\r\n        track.off('disabled', setDisabled);\r\n      };\r\n    }\r\n  }, [track]);\r\n\r\n  return isEnabled;\r\n}\r\n```\r\n\r\n**Svelte:**\r\n```js\r\nimport type { LocalAudioTrack } from 'twilio-video'\r\n\r\ntype TrackType = LocalAudioTrack | undefined\r\n\r\nexport const useIsTrackEnabled = (track: TrackType) => ({\r\n  subscribe: (onChange: (v: boolean) => void) => {\r\n    onChange(track ? track.isEnabled : false)\r\n    if (track) {\r\n      const onEnabled = () => onChange(true)\r\n      const onDisabled = () => onChange(false)\r\n      track.on('enabled', onEnabled)\r\n      track.on('disabled', onDisabled)\r\n      return () => {\r\n        track.off('enabled', onEnabled)\r\n        track.off('disabled', onDisabled)\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n**Usage in Svelte:**\r\n\r\n```js\r\n  export let track\r\n\r\n  // We get a new store when track is changed, cleanup is handled by store auto subscription when the isTrackEnabled store is used.\r\n  $: isTrackEnabled = useIsTrackEnabled(track)\r\n```\r\n\r\nFor cases where data is not being derived though, and we're using a reactive statement for side effects, this doesn't seem to work well. I would have to render something invisible to get auto subscription / auto unsubscription working.",
          "createdAt": "2020-08-18T09:09:43Z",
          "author": { "login": "DylanVann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTM2OTc5MA==",
          "body": "> @dummdidumm Thanks for adding the link. I did take a look at that repo, but it doesn't look like it implements calling cleanup functions. I [tried out the code with the REPL](https://svelte.dev/repl/d25651ab37ea4687bec69c1924234e59?version=3.24.1) and it seems they are not supported.\r\n\r\nMaybe this is just not implemented yet and can be added.",
          "createdAt": "2020-08-18T09:28:19Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NzMzMzMwNQ==",
          "body": "One thing I considered was abusing a custom store for this kind of thing. I figured I would have to do something like render an invisible element, but just using a reactive statement with `$` is enough. That actually does seem to work alright:\r\n\r\n```js\r\n// Store is reactive because it should re-evaluate when track is changed.\r\nlet store\r\n$: store = {\r\n    // We're not trying to get a value out of this, so onChange is never called.\r\n    subscribe(onChange) {\r\n        const onStop = () => track.stopAll()\r\n        track.on('stop', onStop)\r\n        return () => {\r\n            track.off('stop', onStop)\r\n        }\r\n    }\r\n}\r\n\r\n// This reactive statement is just used to have the store automatically subscribed and unsubscribed.\r\n$: $store\r\n```\r\n\r\nAlternatively:\r\n\r\n```js\r\nconst useEffect = (subscribe) => ({ subscribe })\r\n\r\nlet effect\r\n$: effect = useEffect(() => {\r\n  const onStop = () => track.stopAll()\r\n  track.on('stop', onStop)\r\n  return () => {\r\n    track.off('stop', onStop)\r\n  }\r\n})\r\n$: $effect\r\n```",
          "createdAt": "2020-08-20T06:44:26Z",
          "author": { "login": "DylanVann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc1MDE0Ng==",
          "body": "I've been thinking more about this. I think Svelte has some things to learn from React hooks.\r\n\r\nSvelte right now has a lot of opportunities to have component state become out of sync with props. The most basic example I can think of is a label like this:\r\n\r\n```svelte\r\n<script>\r\n\timport { onMount } from 'svelte'\r\n\t\r\n\texport let text\r\n\t\r\n\tlet element\r\n\t\r\n\tonMount(() => {\r\n\t\tconsole.log(text)\r\n\t\telement.innerText = text\r\n\t})\r\n</script>\r\n\r\n<h1>\r\n\t{text}\r\n</h1>\r\n\r\n<h1 bind:this={element} > </h1>\r\n```\r\n\r\nWhen the `text` prop is changed the `onMount` function will not be run again, so the state of the DOM will not be synchronized with props, which is probably not what a user of this component would expect. The new text will also not be logged.\r\n\r\nSolving this sort of issue is an advantage of React hooks. This is discussed in [React as a UI Runtime](https://overreacted.io/react-as-a-ui-runtime/), you can search for \"For example, this code is buggy:\". It's explaining that if the dependency array is not correct and the effect is not re-run then it becomes out of sync.\r\n\r\nIf Svelte came up with some kind of hooks like API maybe it could solve both these issues at once.",
          "createdAt": "2020-08-23T09:16:10Z",
          "author": { "login": "DylanVann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc1MjE4Mg==",
          "body": "Just use `onDestroy` to cleanup when a component dismounts? Your most recent example is expected to cause this issue, it isn't a bug; it is how it is designed to work.\r\n\r\nI'm not sure I understand the problem, everything you are describing is already possible. If you want to perform some cleanup everytime a reactive declaration runs then add that cleanup before your side effect. If you want to cleanup when a component dismounts, use `onDestroy`. If you want to abstract all of this into a reusable thing, use a combination of stores and `onDestroy`. Svelte doesn't re-render, so you need to respond to component mount/dismount and prop changes separately as they are distinct concepts and never tied together, unlike in React.\r\n\r\nWhile react hooks were one of the catalysts for v3 we don't agree with with the APIs or the model and won't be emulating it.",
          "createdAt": "2020-08-23T09:38:04Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODc1OTMwNQ==",
          "body": "Cleanup is also required when dependencies (props in the example) change. As things are I think there will be many cases where components do not reflect their props in Svelte code if people are just using the lifecycle methods for these kinds of things.\r\n\r\n> Svelte doesn't re-render, so you need to respond to component mount/dismount and prop changes separately as they are distinct concepts and never tied together, unlike in React.\r\n\r\nI'm suggesting this is a problem generally. Users will not think of being out of sync with props when writing `onMount`. Often this might not be a big deal, but I don't think it's optimal.\r\n\r\nI'm not suggesting that Svelte should re-render like React does, or have dependency arrays, I'm suggesting there should be a way to write lifecycle related code that also responds to changing props, like how `useEffect` works. I think how React handles this could be a good source of inspiration.\r\n\r\nI think Svelte's automatic/compiled reactivity is great. I think it just needs a few changes, possibly non-breaking additions, to be as powerful as hooks, when it comes to abstracting lifecycle related logic, and making it easy to keep effects in sync with props.\r\n\r\nThis actually does almost exactly what I want, and could almost be used to replace `onMount`:\r\n\r\n```js\r\nlet effect\r\n$: effect = useEffect(() => {\r\n  const onStop = () => track.stopAll()\r\n  track.on('stop', onStop)\r\n  return () => {\r\n    track.off('stop', onStop)\r\n  }\r\n})\r\n$: $effect\r\n```\r\n\r\nIf there was a version of that that waited for actual mounting, behaved exactly the same, but was slightly less verbose, that would be perfect, while working the same way as the rest of Svelte (no needless re-rendering, no dependency arrays).\r\n\r\n[React version of the last REPL](https://codesandbox.io/s/react-responds-to-prop-changes-in-effects-if2ok?file=/src/Label.js), for comparison.",
          "createdAt": "2020-08-23T10:55:28Z",
          "author": { "login": "DylanVann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjI2ODE1OA==",
          "body": "I agree with @DylanVann. Svelte should implement an official way to take advantage of hooks.\r\nThere are some cases where having a react style hooks is actually pretty useful and allow more code reusability cross components",
          "createdAt": "2020-09-14T19:34:12Z",
          "author": { "login": "raythurnevoid", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNzQ0MzUxMQ==",
          "body": "I came across this (via https://dylanvann.com/svelte-version-of-useeffect) while looking for a way to do cleanup (unsubscribe and resubscribe) in reaction to a changes to props in Svelte.\r\n\r\n---\r\n\r\n> Maybe this is just not implemented yet and can be added.\r\n\r\n@dummdidumm, @DylanVann: Indeed, it looks like svelte-hooks _did_ add support for clean-up functions to their `useEffect` in https://github.com/devongovett/svelte-hooks/commit/1d39d959f3e151031335775b9e02c85fd45c7a90! ... which is great, though @DylanVann's much simpler and zero-dependency version is even better in some ways.\r\n\r\n@DylanVann, I updated your [Svelte Hooks Testing Cleanup REPL](https://svelte.dev/repl/cb289b4c8ba94d56ac0d13241524c3da?version=3.29.0) to use that latest version and the clean-up seems to work now (let me know if not; I don't _completely_ understand your example).\r\n\r\nI also created a [more minimal example REPL](https://svelte.dev/repl/5afabb598d0a4be29a8e6f4ba883f120?version=3.29.0) based on your [React sandbox](https://codesandbox.io/s/reactivity-react-responds-to-changing-props-forked-d2j44?file=/src/Label.js).\r\n\r\nI guess the workarounds kinda work, but I would rather see first-class support for this. The workarounds so far are too verbose and ugly, and (like @DylanVann [says](https://dylanvann.com/svelte-components-are-not-resilient)) don't feel like idiomatic Svelte.\r\n\r\nThings that _users_ of a framework should be doing (like reacting to changes in props) should be encouraged by the framework by providing first-class support for them and making them super easy.\r\n\r\n(BTW, being able to subscribe to an _expression_ like one of the ideas in #4079 could make this a _little_ more concise (eliminate 2 lines of boilerplate): `$: $(useEffect(...))` ... though I kind of doubt that will get added.)\r\n\r\n---\r\n\r\nPersonally, I think the solution @DylanVann suggested (allowing reactive statements to optionally providing a cleanup function) seems pretty reasonable:\r\n\r\n```js\r\n$: () => {\r\n  const onStop = () => track.stopAll()\r\n  track.on('stop', onStop)\r\n  return () => {\r\n    track.off('stop', onStop)\r\n  }\r\n}\r\n```\r\n\r\nIt would be pretty backwards compatible since most/all existing reactive statements _don't_ currently look (to the parser) like a function, since a function by itself (without invoking it or assigning it to a variable) would have no effect (no pun intended).\r\n",
          "createdAt": "2020-10-13T02:22:03Z",
          "author": { "login": "TylerRick", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzk4MTYzMDY=",
    "body": "What's the official policy for logo use in my own svelte related project.\r\nAnd the legality of the trademark",
    "closedAt": "2020-08-17T13:13:57Z",
    "createdAt": "2020-08-16T20:00:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDU3MTI5MA==",
          "body": "Here's some info: https://github.com/sveltejs/branding. Does that clarify it?",
          "createdAt": "2020-08-16T20:03:35Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDYzODE5NA==",
          "body": "As an ex-lawyer and for the secret project I am working on, the conditions weren't really clear enough.\r\n\r\nI've taken the liberty to make it a bit more tight and less ambiguous. Please adjust it as you see fit: https://github.com/sveltejs/branding/pull/5",
          "createdAt": "2020-08-17T03:35:38Z",
          "author": { "login": "pjebs", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzk3NzU5MzE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nOver at the [language-tools](https://github.com/sveltejs/language-tools) repo we get bug reports that people cannot disable warnings. Most can be disabled, but some apparently can't. This is the most recent issue where someone asks how to disable the warnings for unused selectors: https://github.com/sveltejs/language-tools/issues/457 .\r\nAccording to [this PR](https://github.com/sveltejs/svelte/pull/3351) it should be possible to silence errors / prevent the compiler from returning them by adding a `svelte-ignore` comment above it, for example `<!-- svelte-ignore some-a11y-warning-code -->`.\r\n\r\n**Describe the solution you'd like**\r\nI would like the compiler to add a property like `canIgnore: false` to the warning, if the warning cannot be disabled. We could use that so that a quickfix to add the `svelte-ignore` comment no longer appears. We then could also add additional text to the message in the IDE (\"this warning cannot be ignored through a comment\").\r\n\r\n**Describe alternatives you've considered**\r\nGradually add things to a blacklist without knowing if that's really correct.\r\n\r\n**How important is this feature to you?**\r\nNice to have, would clean up confusion.\r\n\r\n**Additional context**\r\nIn order to implement this, I propose to move out all warnings into a separate, common file, where they are listed in a concise manner. People could get a nice overview of all warnings that are possible. Rich also pointed out that this would be good [in the PR](https://github.com/sveltejs/svelte/pull/3351#issuecomment-518012895) which implemented the `svelte-ignore`-comments.\r\n",
    "closedAt": null,
    "createdAt": "2020-08-16T15:40:24Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3ODgwNDU3Nw==",
          "body": "Maybe it's also a bug because every warning should be ignorable? Not sure.",
          "createdAt": "2020-08-23T17:55:27Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzk3NTAyNTQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm storing a collection of players and need to build them with each blocks:\r\n```javascript\r\n// player-store\r\nimport { writable } from 'svelte/store';\r\nconst playerCollection = [\r\n  { name: 'Zuko', avatar: '🔥', id: '521aedaf-f75e-4241-97e2-7ef0d9a15c83' },\r\n  …\r\n]\r\n\r\nexport const players = writeable(playerCollection);\r\n```\r\n```svelte\r\n<script>\r\n  import { players } from './player-store';\r\n  import Player from './Player.svelte';\r\n</script>\r\n\r\n{#each $players as {...player}\r\n  <Player {...player} />\r\n{/each}\r\n```\r\n\r\n1. Building the each block is repetitive/boilerplatey\r\n2. Destructuring the object to pass it through is weird (maybe I'm doing something wrong)\r\n3. With all the productivity features Svelte has, I was surprised to see this doesn't exist!\r\n\r\n**Describe the solution you'd like**\r\nInstead of above, I'd like my Svelte file to look like:\r\n```svelte\r\n<script>\r\n  import { players } from './player-store';\r\n  import Player from './Player.svelte';\r\n</script>\r\n\r\n<svelte:component this={Player} each={$players as { id, name, avatar }} />\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nAs far as I can tell each blocks is the only way to do this, but I'm new to Svelte.\r\n\r\n**How important is this feature to you?**\r\nI'm new to Svelte and only using it in side projects so far. And there's a workaround, so not super important. I was surprised it didn't already exist considering so many of the great Svelte features (like :class, $: , contexts, stores, etc.).\r\n\r\n**Additional context**\r\nI come from a Rails background, so this feature request feels very much like:\r\n```ruby\r\n# automatically render the collection of objects along with its partial.\r\n# No attributes necessary because they can be inferred\r\n# This is essentially what I'd like to get in Svelte\r\n= render @players\r\n\r\n# the alternative, which is like the current each block\r\n- @players.each do |player|\r\n  = render partial: player.to_partial_path, locals: { id: player.id, avatar: player.avatar, name: player.name }\r\n```",
    "closedAt": "2020-08-16T13:26:17Z",
    "createdAt": "2020-08-16T12:56:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDUyNjUzMg==",
          "body": "Aside from the fact that this would be a breaking change which means the `each` prop would have to be a directive, this also introduces differences between looping dynamic components and other constructs. If we implemented it for `svelte:component`, we would have to implement it for regular components and elements.\r\n\r\nThis is very similar to Vue's `if` directives. We like having control flow as distinct blocks because they are easier to spot, making the component more scannable. You spend more time reading code than writing and so we optimise for that: the verbosity and distinct syntax is a feature. \r\n\r\nThe directive-based syntax is also more limiting because it requires either a single element to be looped or a root element with children, the current block syntax does not have these limitations.\r\n\r\nAdditionally, we do not like having multiple ways of doing the same thing, so I'm afraid this feature isn't something that we would be interested in implementing.",
          "createdAt": "2020-08-16T13:26:17Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzk3MzE0OTQ=",
    "body": "**Is your feature request related to a problem? Please describe.**\nThere is a need to start and stop animation in the middle of animation cycle. Also speed of animation should be adjustable. \nTypical problem: \nA mobile device user swipes from one screen to another. Screen movement is animated and animation follows a touch movement. When user moves screen in some position and releases touch, the screen will move back to starting position or to the next position. To animate this movement I need to know playhead position and then run the rest of animation. \n\n**Describe the solution you'd like**\nI need an animation system where I can get and set the playhead position and playback speed. \n\nBasically I need a master animation runner with t-value, which I can set and get. Then I need to set the total duration and playback speed. Finally there should be a function that returns a modified t-value for my subanimations. Function takes in a delay and a duration and returns a value, which is 0 for delay, 0->1 for duration and 1 for the rest of the master animation.\n\n**Describe alternatives you've considered**\nHere is a REPL I have made with current system:\nhttps://svelte.dev/repl/13fdcc40a57a421f92391c8e67c581a2?version=3.24.1\n\n**How important is this feature to you?**\nI found this need, when I was trying to make a webapp for mobile devices and my goal was to replicate native app as good as possible.",
    "closedAt": null,
    "createdAt": "2020-08-16T10:41:11Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU3MTAyOTI4MDA=",
    "body": "![image](https://user-images.githubusercontent.com/4729968/90322168-bf512300-df1e-11ea-8a76-aa8b4697edbe.png)\r\n\r\nEventSource is a browser API for Server-Side-Events (one way socket connections): https://developer.mozilla.org/en-US/docs/Web/API/EventSource\r\n\r\ndoes svelte-loader have a way to declare global variables, or is there some kind of file that needs a PR?",
    "closedAt": "2020-09-29T14:58:01Z",
    "createdAt": "2020-08-15T21:49:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDAyNzY5Ng==",
          "body": "Transferring this to the `svelte` repo. The proposal here is presumably to add `EventSource` as a known global in `src/compiler/utils/names.ts`.",
          "createdAt": "2020-09-28T14:02:52Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwMDk3MTgwNg==",
          "body": "`EventSource` is now recognized as a known global and doesn't trigger the warning.",
          "createdAt": "2020-09-29T20:35:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzk1NTIzODU=",
    "body": "**Describe the bug**\r\nAfter running \"npm run dev\" the browser cannot open connection to server. There are no open socket to connect to.\r\n\r\n**Logs**\r\n$ node -v\r\nv12.18.3\r\n$ npm run dev\r\nrollup v1.32.1\r\nbundles src/runtime/index.ts → index.mjs, index.js...\r\ncreated index.mjs, index.js in 17ms\r\nbundles src/runtime/animate/index.ts → animate/index.mjs, animate/index.js...\r\ncreated animate/index.mjs, animate/index.js in 16ms\r\nbundles src/runtime/easing/index.ts → easing/index.mjs, easing/index.js...\r\ncreated easing/index.mjs, easing/index.js in 31ms\r\nbundles src/runtime/internal/index.ts → internal/index.mjs, internal/index.js...\r\ncreated internal/index.mjs, internal/index.js in 225ms\r\nbundles src/runtime/motion/index.ts → motion/index.mjs, motion/index.js...\r\ncreated motion/index.mjs, motion/index.js in 31ms\r\nbundles src/runtime/store/index.ts → store/index.mjs, store/index.js...\r\ncreated store/index.mjs, store/index.js in 13ms\r\nbundles src/runtime/transition/index.ts → transition/index.mjs, transition/index.js...\r\ncreated transition/index.mjs, transition/index.js in 19ms\r\nbundles src/compiler/index.ts → compiler.js, compiler.mjs...\r\n(!) Circular dependencies\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/AwaitBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/EachBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/Element/index.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\n...and 14 more\r\ncreated compiler.js, compiler.mjs in 1.3s\r\n\r\n[2020-08-15 14:44:02] waiting for changes...\r\n\r\n**To Reproduce**\r\ngit clone https://github.com/sveltejs/svelte.git\r\ncd svelte\r\nnpm install\r\nnpm run build\r\nnpm run dev\r\n\r\n**Expected behavior**\r\nServer can be connected into and svelte pages are served.\r\n\r\n**Stacktraces**\r\nn/a\r\n\r\n**Information about your Svelte project:**\r\n- Your operating system: (e.x. OS X 10.15.4)\r\n\r\n**Severity**\r\nProbably the issue is just on my box setup but I cannot find the reason.\r\n\r\n**Additional context**\r\nI can start other svelte examples in, e.g. https://svelte.dev/blog/the-easiest-way-to-get-started but I am interested in to learn how the interactive compiler works.",
    "closedAt": "2020-08-15T13:32:18Z",
    "createdAt": "2020-08-15T11:57:13Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDM5Njg5Nw==",
          "body": "`npm run dev` in this repo doesn't start a server, it bundles the compiler and watches for changes to its source.",
          "createdAt": "2020-08-15T13:32:18Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDQwMTkxNQ==",
          "body": "Of course! Now it makes perfect sense. The website can be run from site directory 👍  ",
          "createdAt": "2020-08-15T13:57:58Z",
          "author": { "login": "mudyc", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzk1MzM3NDE=",
    "body": "**Describe the bug**\r\nIf you have html nodes inside `contenteditable` block, which are wrapped with `{#if}{/if}` — removing that nodes will throw an error after update.\r\n\r\n**Logs**\r\n`Uncaught (in promise) TypeError: Cannot read property 'removeChild' of null\r\n    at detach\r\n    at Array.forEach\r\n    at HtmlTag.d\r\n    at HtmlTag.p\r\n    at Object.update [as p]\r\n    at Object.update [as p]\r\n    at update\r\n    at flush`\r\n\r\n**To Reproduce**\r\nThat behavior is reproducible, here is REPL https://svelte.dev/repl/fa601199d8d345d3977bf48bdb8d14f4?version=3.24.1",
    "closedAt": null,
    "createdAt": "2020-08-15T09:28:49Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDgxODg5OA==",
          "body": "This is a duplicate of #4978",
          "createdAt": "2020-08-26T11:20:59Z",
          "author": { "login": "ehrencrona", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDg1MDUyMQ==",
          "body": "Thanks for pointing that out.\r\nMay be it would be nice to add remarks in https://svelte.dev/docs about that, or show warning, when there is dynamic code inside contenteditable.\r\nAt this time tutorial (https://svelte.dev/tutorial/contenteditable-bindings) and docs look like there will be no problems with using contenteditable in any way.",
          "createdAt": "2020-08-26T12:32:33Z",
          "author": { "login": "boatincow", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2ODkzMDI3Nw==",
          "body": "Related: https://github.com/sveltejs/svelte/issues/5326\r\n\r\nI also second the idea of adding a warning in the docs.  It sounds like having nested tags inside a contenteditable is not supported by Svelte, but a user reading the docs seeing that `bind:innerHTML` is supported would never guess that.\r\n\r\nQuite separately, it's actually quite easy to support this use case with a bit of defensive code (see https://github.com/sveltejs/svelte/issues/5326).  I understand that there might be concerns about shipping this code to users that won't need it, but perhaps it's possible to do something clever when a contenteditable is involved specifically?\r\n\r\nSomeone with knowledge of Svelte internals might be able to shed more light on this.",
          "createdAt": "2021-01-28T09:44:03Z",
          "author": { "login": "nicolodavis", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzkzNzE2Mjk=",
    "body": "**Describe the bug**\r\nThe writable store produces an error if the last unsubscriber function is called more than once. \r\n\r\nThis does not happen if there are remaining subscriptions. \r\n\r\n**Logs**\r\n![image](https://user-images.githubusercontent.com/1445333/90286567-65bffa00-de33-11ea-886f-60c03af37a82.png)\r\n\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/b206e7d6347e4c759ab365e727081953?version=3.24.1\r\n\r\n**Expected behavior**\r\nI would expect that calling the last unsubscriber multiple times would do nothing after the first call\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: \r\nVersion 84.0.4147.105 (Official Build) (64-bit)\r\n\r\n- Your operating system:\r\n OSX 10.15.6\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n3.24.0\r\n- Whether your project uses Webpack or Rollup: \r\nWebpack\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\nAnnoying, but can work around it by ensuring we don't call the unsubscriber more than once\r\n\r\n\r\n**Additional context**\r\nThis appears to be the line the error points to: https://github.com/sveltejs/svelte/blob/master/src/runtime/store/index.ts#L106\r\n",
    "closedAt": "2020-08-14T20:14:13Z",
    "createdAt": "2020-08-14T19:54:53Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDI1MzkwMw==",
          "body": "Duplicate of #4931.",
          "createdAt": "2020-08-14T20:14:13Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzkzMDI3MzM=",
    "body": "**Describe the bug**\r\nWhen I try to create a new Array object using the Array's constructor, it does not create an array with the given length if that length is supplied by a prop. However it will work if that value is supplied by a prop's default value.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/95a73c082e4d4a7fb759cec8701e2ef9?version=3.24.1\r\n\r\n**Expected behavior**\r\nThe output should be:\r\n\r\n```\r\nArray 1 has length 6\r\nArray 2 has length 3\r\n```\r\n\r\nThe actual output is:\r\n```\r\nArray 1 has length 1\r\nArray 2 has length 3\r\n```\r\n\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 84.0.4147.105\r\n- Your operating system: Ubuntu Linux 20.04\r\n- Svelte version 3.24.1\r\n\r\n**Severity**\r\nMinor\r\n\r\n**Additional context**\r\nI would like to be able to iterate over a range of values. Most languages seem to have syntax for this but svelte does not. It would be nice of for example I could do this:\r\n\r\n```\r\n{#each i in range(100, 100 + numButtons) }\r\n    <td>Button {i}</td>\r\n{/each}\r\n```\r\n\r\nBut instead I have to do this:\r\n\r\n```\r\n{#each Array(numButtons) as _, i}\r\n    <button>Button {i + 100}</button>\r\n{/each}\r\n```\r\n\r\nbut then I fall foul of the issue above.",
    "closedAt": "2020-08-14T17:48:43Z",
    "createdAt": "2020-08-14T17:37:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDE4OTk5Mg==",
          "body": "Actually I have found out that passing a prop like this will allow the compiler to treat the value as a numeric value rather than a string. I think this is an acceptable solution so I will close the issue:\r\n\r\n```\r\n<ButtonGrid numButtons={6}></ButtonGrid>\r\n```",
          "createdAt": "2020-08-14T17:48:43Z",
          "author": { "login": "alexspurling", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzkyODAxNzk=",
    "body": "**Describe the bug**\r\nI'm not sure if this can be called a bug necessarily but CSS and Svelte treat easing on transitions differently. As someone with animation background, I would consider CSS's way to be the intuitive one:\r\n\r\nAn ease out curve in CSS  eases the end of the animation when you're hiding and showing something as opposed to Svelte's ease out curve, which eases the end of the animation when a DOM element is rendered, and eases the start of the animation when a DOM element stops being rendered.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/4b84a1a947204377b4c59e514e4e706a?version=3.24.1\r\n\r\n**Expected behavior**\r\nI expect Svelte's transition easing curves to act like CSS ones.\r\n\r\n**Severity**\r\nNot severe at all. I'm not even sure if it is a mistake/bug to begin with. Might be something intentional, or out of necessity.\r\n",
    "closedAt": null,
    "createdAt": "2020-08-14T16:51:30Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxODkxOTIyNA==",
          "body": "If set easing option and comment out `const eased = cubicOut(t)` Svelte works as CSS:\r\nhttps://svelte.dev/repl/29783f88e2e24701b505c0fd0186db64?version=3.24.1",
          "createdAt": "2020-10-29T17:50:50Z",
          "author": { "login": "zamanruhy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTc0NjQwMQ==",
          "body": "> If set easing option and comment out `const eased = cubicOut(t)` Svelte works as CSS:\r\n> https://svelte.dev/repl/29783f88e2e24701b505c0fd0186db64?version=3.24.1\r\n\r\nThanks for the info, maybe this was intentional after all.",
          "createdAt": "2020-10-30T19:15:06Z",
          "author": { "login": "yekta", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzkyNTk2MTc=",
    "body": "**Describe the bug**\r\n\r\nInsert dynamically an input item without a value before an existing item with a value, it transmits the value from the old component position to the new.\r\nBut only when spreading restProps at the input-element.\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/58e9ba4d7977448b8511575f408c80ed?version=3.24.1\r\n\r\nClick the button and it inserts at position 1 (between the 2 inputs) a new input.\r\nThis input did not has a value, so it should display `undefined`, but it shows the value of the previous input. (same happens with checkbox, ...)\r\n\r\nWhen you remove `{...$$restProps}` form `Input.svelte` it is ok.",
    "closedAt": "2020-08-27T21:17:45Z",
    "createdAt": "2020-08-14T16:12:37Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4OTUzMg==",
          "body": "This is fixed in 3.25.0 - https://svelte.dev/repl/58e9ba4d7977448b8511575f408c80ed?version=3.25.0",
          "createdAt": "2020-09-10T20:07:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzg1MzU0MTg=",
    "body": "**Describe the bug**\r\n\r\nComponents are not destroyed when they are removed from their parent node while that node is currently running its exit transition.\r\n\r\nExample: I have a component in a div that has a fade transition, and I remove the component while that div is fading out. The component is not destroyed correctly. It is gone from the DOM, but still \"alive\" (store subscriptions not closed, onDestroy not called, etc).\r\n\r\n**To Reproduce**\r\n\r\nI have created a small REPL example that reproduces the issue.\r\n\r\nNote how the console only logs the onDestroy call for the Outer component, but NOT the inner component when you click on the \"Close\" button.\r\nIf you remove \"transition:fade\" in App.svelte:9 then everything works correctly.\r\n\r\nhttps://svelte.dev/repl/eff9e77c7d5c41059616211e46f3f021?version=3.24.1\r\n\r\nThe example is a bit artificial of course. In our actual application we have a lot of stores subscribed to realtime updates via websocket. It can frequently happen that you switch/navigate between different content (using transitions) and an update just happens to arrive for the \"old\" content while the transition is active.\r\n\r\n**Expected behavior**\r\nonDestroy should be called / component should be destroyed when using transitions.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 84.0.4147.125 (Official Build) (64-bit)\r\n\r\n- Your operating system: OSX 10.15.5\r\n\r\n- Svelte version: 3.24.1 \r\n\r\n**Severity**\r\n\r\nNow that I managed to trace down the cause of this issue it is not that severe, as it's easy to work around; it just blocks us from using transitions / some third party components that rely on them.\r\nHowever before I managed to isolate it was extremely frustrating as it appeared as seemingly \"random\" behaviour with some components not unmounting / resulting in dangling store subscriptions and associated weirdness.\r\n\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-08-13T15:37:56Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzU1ODQ1Nw==",
          "body": "It seems like the bug is not only triggered if the transition is on the parent; it's enough if the parent is waiting for some child to finish its exit transition.\r\nSee another REPL here: https://svelte.dev/repl/9ac8610241a643ec81432f72f3427baa?version=3.24.1\r\nAgain, if you remove the transition from the div it works.",
          "createdAt": "2020-08-13T15:51:45Z",
          "author": { "login": "Tharit", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NDUwODk0MQ==",
          "body": "+1",
          "createdAt": "2020-08-16T10:26:18Z",
          "author": { "login": "vsych", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3NTE5NTM2OA==",
          "body": "I hvn't wrap my head around a fix on this, but from what I observe is that, if the parent starts to be unmount first, then the Inner onDestroy did not get called.\r\n\r\na workaround would be moving the `on:close` after `on:close={() => mode='B'}`\r\n\r\n```svelte\r\n<Inner on:close={() => mode='B'} on:close ></Inner>\r\n```\r\n\r\nhttps://svelte.dev/repl/808a7d0e9f704941abf1ba084b846d74?version=3.24.1",
          "createdAt": "2020-08-18T01:20:47Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MDcyOTk3Ng==",
          "body": "think i've been fighting with this same bug for a few days now.  I'm including a screenshot that shows the hide variable being logged as true, then the action running (timer should've been destroyed on true), then the hide variable being set back to undefined, yet the carousel doesn't re-render. The last part doesn't happen consistently, but it happens enough to be troublesome.\r\n\r\n![Screenshot_2020-08-26 Svelte REPL](https://user-images.githubusercontent.com/52777069/91278369-c1e72000-e749-11ea-9164-115e2b8fa96c.png)\r\n\r\nhttps://svelte.dev/repl/ab82d572c40d482c92cc211affbc290d?version=3.24.1",
          "createdAt": "2020-08-26T08:11:44Z",
          "author": { "login": "M1sf3t", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTQxNjUxNg==",
          "body": "updated that repl so that the carousel actually worked after the first slide. when i moved the \"slide\" declaration outside of the set interval, the destroy method for the action broke it 🤦‍♂️.  \r\n\r\nThe general problem is still not solved tho, neither the onDestroy method nor the actions destroy method seem to have any affect on the delay timer when the component is hidden with if.  To see the latter in the repl, remove comments, slide declr. & onDestroy method and  declare slide inside of interval.\r\n\r\nI think I've managed a workaround using svelte component instead of the if statement, so far it seems to be working, tho at the moment there's occasionally a jump when it renders.  you can see the workaround here --> https://svelte.dev/repl/40741fc76d52405688e8705ec26c254c?version=3.24.1",
          "createdAt": "2020-08-27T04:39:19Z",
          "author": { "login": "M1sf3t", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTY5MzI2OA==",
          "body": "duplicate of #4696 and #4064, kinda explained but not fixed in #4699\r\n\r\nThe internal function `transition_out` is used in two ways, one is to start outro, the other is to start outro _and_ schedule a destroy after the transition group has outroed\r\nhttps://github.com/sveltejs/svelte/blob/8adb47401e7f7b420ffabf9752a8236114aaecfc/src/runtime/internal/transitions.ts#L56-L62\r\n\r\nCalling `transition_out` on a block adds it to a Set, so further `transition_out` calls on the same block are ignored https://github.com/sveltejs/svelte/blob/8adb47401e7f7b420ffabf9752a8236114aaecfc/src/runtime/internal/transitions.ts#L51-L53\r\n\r\nFrom there you can deduce that any `transition_out` used in the first way makes it so that any destroy scheduled through the second way gets ignored, that is what happens in all of the above when an `if_block` is outroed by its parent's `.o()` then outro & destroy scheduled by its parent's `.p()`\r\n\r\n",
          "createdAt": "2020-08-27T07:31:55Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MjMyMjk5Ng==",
          "body": "that makes sense but why does it work differently with keyed each and svelte:component?  in the last repl I posted, the transition continues to fade out but toggling the svelte component to rerender the carousel at the right moment doesn't break the carousel like it did with the if in the first repl.  At least I haven't been able to break it so far anyway.  \r\n\r\nSame with each, when i first started on the carousel I felt like keyed each would be too much for just one image so I went with if and found that when not timed correctly (using interval/onMount rather than use/timeout at that point, needed to be somewhat around one second after the out ended) the same image would just reappear over and over again.  \r\n\r\nThe latter may not be the exact situation, but it felt like it was a similar issue.  Easy enough to fix when it was just that, but as I got to playing with different ways to load the images and swap them out with my spinner, it created more and more problems so I finally just swapped the if out with the keyed each and moved on.",
          "createdAt": "2020-08-28T04:49:24Z",
          "author": { "login": "M1sf3t", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzNTg2MzAwMg==",
          "body": "Not sure if it's the same thing, but `onDestroy` isn't firing for me when I use custom `in`/`out` transitions. This may be by design, and if that's the case, it may be helpful if the example is updated to call that out.\r\n\r\nprops:\r\n```js\r\nin:toggleDialog=\"{{ dir: 'in', start: 70 }}\"\r\nout:toggleDialog=\"{{ start: 50 }}\"\r\n```\r\n\r\nWhat I ended up doing within `toggleDialog`\r\n```js\r\nif (dir !== 'in' && t === 0 && onClose) onClose();\r\n```\r\n\r\n---\r\n\r\n**Edit**: I discovered that while working with some stores, that the above didn't actually work. I didn't fully understand what was actually occurring when a custom transition function was called (it builds out a static CSS animation); I was thinking it was calling that method during the animation steps, lesson learned.\r\n\r\nHere's the current solution I'm using:\r\n\r\nprops\r\n```js\r\nin:toggleDialog=\"{{ dir: 'in', start: 70 }}\"\r\nout:toggleDialog=\"{{ start: 50 }}\"\r\non:outroend={handleCloseEnd}\r\n```\r\n\r\nhandler\r\n```js\r\nfunction handleCloseEnd() {\r\n  dialogOpen.set(false); // global store to ensure multiple dialogs aren't open\r\n}\r\n```",
          "createdAt": "2021-05-09T18:52:43Z",
          "author": { "login": "the0neWhoKnocks", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0NjIzMTM0MQ==",
          "body": "<details><summary>old comment</summary>\r\nI currently have a project with lots of transitions and noticed this bug randomly occurs when navigating between pages.  There will randomly be invisible dom nodes stacking up on pages, pushing the current page content way down.  It more or less renders the website unusable.\r\n\r\nWhat is the recommended fix currently?  I noticed @tanhauhau and @the0neWhoKnocks's fixes might help.  Considering the amount of elements, it will be non-trivial to wrap every single component in it's own `{#if}` block and trigger it `on:outroend` (if I understand the fix correctly).  But if that's the best way, so be it.  Project deadline is coming up 😅\r\n\r\nI think this issue should get the `bug` label, because it's pretty devastating to large projects with transitions.\r\n\r\nPS:  I found myself in the situation when we had to introduce an extra store to handle state on page transitions- which I assume is what caused all elements with transitions in the project to start showing this bug.\r\n</details>\r\nEdit: It appears my issue was actually caused by the uncaught error mentioned in #6037.\r\n\r\nIt's a bit early to know for sure, but changing line 203 in `svelte/internal/index.js` as mentioned in that issue seems to have fixed things.\r\n```js\r\n- node.parentNode.removeChild(node);\r\n+ if (node.parentNode) node.parentNode.removeChild(node);\r\n```",
          "createdAt": "2021-05-21T20:20:35Z",
          "author": { "login": "FractalHQ", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzg1MDA0ODk=",
    "body": "**Describe the bug**\r\nCan't use interfaces in .svelte files.\r\n\r\n**To Reproduce**\r\nCreate a file with a TypeScript interface and import it in a .svelte file.\r\n\r\n**Expected behavior**\r\nShould work\r\n\r\n**Stacktraces**\r\n```\r\n[!] Error: 'default' is not exported by src/MyInterface.ts, imported by src/App.svelte\r\nhttps://rollupjs.org/guide/en/#error-name-is-not-exported-by-module\r\n```\r\n\r\n**Information about your project:**\r\n- Your browser and the version: newest Safari\r\n\r\n- Your operating system: macOS 10.15\r\n\r\n- `svelte-preprocess` latest\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n",
    "closedAt": "2020-08-13T14:57:40Z",
    "createdAt": "2020-08-13T14:51:57Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzUyODU1Ng==",
          "body": "See the note about interfaces in the FAQ - https://svelte.dev/faq#what-about-typescript-support",
          "createdAt": "2020-08-13T14:57:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzg0OTA5MjE=",
    "body": "As of #4602, `$$slots` as an object of `true`s for which slots are being passed into a component now exists, and needs to be documented.\r\n\r\nI would suggest that we should specifically document this as containing _truthy_values (rather than literal `true`s) to allow us to expand the information contained in it at a later date without requiring a breaking change.",
    "closedAt": "2020-10-29T20:24:40Z",
    "createdAt": "2020-08-13T14:39:09Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzg0ODg2MTI=",
    "body": "Is it possible to pass events to dynamic components?\r\nE.g. pass `on:click` as props and recieve the click event.\r\n\r\nMade a full exmaple: https://svelte.dev/repl/a16dd36f0265408a9c42409986b44acd?version=3.24.1\r\n\r\nShort Version:\r\n\r\nExample.svelte\r\n```svelte\r\n<script>\r\n  export let component\r\n  export let props\r\n</script>\r\n\r\n<svelte:component\r\n  this={component}\r\n  {...props}\r\n></svelte:component>\r\n```\r\n\r\nExample call\r\n```svelte\r\n<script>\r\nimport Example from './Example.svelte'\r\nconst component = ... // some svelte component e.g. a Button\r\nconst props = {\r\n  'on:click' = (e) => console.log('THIS SHOULD BE CALLED')\r\n}\r\n</script>\r\n\r\n<Example {component} {props}></Example>\r\n```\r\n\r\nThe `on:click` will not be triggered, only if i wrote it like this\r\n\r\n```svelte\r\n<Example {component} {props} on:click={(e) => props['on:click'](e)}></Example>\r\n```\r\nBut in this case i have to call the click targets manually.",
    "closedAt": "2020-08-13T14:51:54Z",
    "createdAt": "2020-08-13T14:36:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzUyNTIyNg==",
          "body": "Directives (like `on:foo={bar}`) aren't the same as props. Spreads on components only set props. If you need to be able to customize this at runtime, you can write the child component to accept props which are callbacks instead of having it dispatch events.",
          "createdAt": "2020-08-13T14:51:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzUzMjg2OA==",
          "body": "Thats what i currently do, write callbacks and dispatchers, very uncomfortable. I dont know which directives the passed components have.\r\n\r\nThe question is then how can i pass directives dynamically to components? Or why it is not possible to pass them this way?\r\n\r\nSvelte creates bindings when you write it like this\r\n```svelte\r\n<MyComponent on:click={doSomething}></MyComponent>\r\n```\r\n\r\nIt would be nice if we can have access to set the bindings via a function, e.g.\r\n```svelte\r\n<script>\r\n  let myComponent\r\n\r\n  myComponent.addListener('click', doSomething)\r\n</script>\r\n\r\n<MyComponent bind:this={myComponent]></MyComponent>\r\n```\r\nInternally svelte does the same.",
          "createdAt": "2020-08-13T15:05:21Z",
          "author": { "login": "rottmann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Nzg0MzI2MzI=",
    "body": "**Describe the bug**\r\nValues in an outro (`out:`) transition are sometimes determined at render time, rather than at transition time. More specifically, this happens when the the outro is on elements in an `#each` block. I have determined that this is indeed the case by putting logs in the svelte transition code.\r\n\r\n**To Reproduce**\r\nA REPL of the bug can be found here:\r\nhttps://svelte.dev/repl/1ad9b6b4883e4b92bb679418a529ea00?version=3.24.1\r\n\r\nWhile normal behavior can be found here:\r\nhttps://svelte.dev/repl/ad9931c0bfb1420aadec3180202bf6bd?version=3.24.1\r\n\r\n**Expected behavior**\r\nIn the bug repl, the outro transition should always match the `outX` variable, which is set to a negative value when \"next\" is clicked, and a positive value when \"prev\" is clicked. This would be similar to the behavior in the second repl (demonstrating normal behavior), where the outro always matches the value of `y`.\r\nInstead, the outro always matches the previous value of `outX`, resulting in the outros occasionally moving in the wrong direction.\r\n\r\n**Severity**\r\nThis bug causes problems trying to make a carousel component. It is not blocking me personally, but it was reported on discord.\r\n\r\n**Additional context**\r\nThis bug was originally reported by @levyadams on discord.",
    "closedAt": null,
    "createdAt": "2020-08-13T13:21:45Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzczOTE2ODA=",
    "body": "**Describe the bug**\r\nIf `svelte:component` is used inside a `:catch` block, updating the class on a surrounding wrapper element causes error/`svelte:component` to disappear.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/a0047276119343d6a7c0298532bbdcb2?version=3.24.1\r\nClick the \"Dismiss\" button\r\n\r\n**Expected behavior**\r\nIn the above REPL, I would expect the \"Dismiss\" button to still be on the screen and inside of a red box.\r\n\r\n**Severity**\r\nPrevents lazy loading error handling pages.  Easy to work around, just increases bundle size.",
    "closedAt": "2020-08-12T21:24:20Z",
    "createdAt": "2020-08-12T05:17:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4OTMyOQ==",
          "body": "This is fixed in 3.25.0 - https://svelte.dev/repl/a0047276119343d6a7c0298532bbdcb2?version=3.25.0",
          "createdAt": "2020-09-10T20:06:52Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzYzMjQzNDI=",
    "body": "**This is going to be a big one, with lots of requests and questions, so I would like to start by appreciation of the contributors work, and an apology in advance if this was not the right place to have this discussion.**\r\n\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nI want to build a comprehensive UI library that is framework agnostic - like [ant](https://ant.design/) for example. Of course the best tool to do that is svelte. It's a compiler, and it builds both js and web components. When I tried to build some basic components I had some difficulties, where I wasn't able to do what I want with the current APIs of svelte. I admit that I'm a newbie, and there's a possibility that at least some of those difficulties are a result of my lack of knowledge, so any suggestion or guidance will be much appreciated.\r\n\r\n\r\n|**Note:** The examples below switch between web components syntax and Svelte components syntax whether the issue effects Svelte users or not.\r\n\r\n\r\nThe conditions that I want to meet - and are related to this discussion - are:\r\n\r\n1. The users must be able to use it in the same manner they use html. i.e class and style attributes should work as expected, composition of elements like <lib-select> and <lib-option> should work as expected, so are event listeners\r\n2. It must be well documented with autocomplete and run time validation whenever possible - thanks for ts btw - with no restrictions on the users tooling or build system\r\n3. It must be highly configurable and adaptable. For example both of these examples will render correctly - regardless of order of nested components\r\n  ```Svelte\r\n  <!-- userland -->\r\n  <lib-layout>\r\n    <lib-sider>...</lib-sider>\r\n    <lib-content>...</lib-content>\r\n    <lib-header cover-sider=\"false\">...</lib-header>\r\n  </lib-layout>\r\n  ```\r\n  ```Svelte\r\n  <!-- userland -->\r\n  <lib-layout>\r\n    <lib-content>...</lib-content>\r\n    <lib-footer>...</lib-footer>\r\n  </lib-layout>\r\n  ```\r\n4- Svelte users can use it in their projects with the best DX possible.\r\n\r\n---\r\n\r\n**Describe the solution you'd like**\r\nHere I'll describe the difficulties I faced, with suggested solutions for each one - again, if I'm doing something wrong, guidance will be appreciated.\r\n\r\n1. **Problem:** Passing class to an underlying HTML element.\r\n  - **Suggestion:** The ability to enable class directive on a component. I opened an issue #5236 , but I added the point for completeness.\r\n  - **Alternative:**\r\n    ```Svelte\r\n      <!-- lib component -->\r\n      <script lang=\"ts\">\r\n        let className: string = '';\r\n        export {className as class};\r\n      </script>\r\n      <div class={`my-class ${className}`} />\r\n    ```\r\n      but Svelte users will have handle conditional classes manually.\r\n2. **Problem:** Passing event to underlying HTML\r\n  - **Suggestion:** The ability to forward all event listeners attached using `on` directive to an underlying HTML element.\r\n  - **Alternative:**\r\n    ```Svelte\r\n      <!-- lib component -->\r\n      <input\r\n        type=\"text\"\r\n        on:blur\r\n        // forward every possible event\r\n      />\r\n    ```\r\n      Doable, but a lot of work.\r\n3. **Problem:** Passing actions to underlying HTML (I didn't actually need this, but I imagine that I will need it for the library to really comprehensive)\r\n  - **Suggestion:** The ability to forward all actions attached using `use` directive to an underlying HTML element.\r\n  - **Alternative:**\r\n    ```Svelte\r\n      <!-- lib component -->\r\n      <script lang=\"ts\">\r\n        import {onMount, onDestroy, SvelteAction} from 'svelte';\r\n        export let actions: SvelteAction[] = []; // don't know if this type exists\r\n\r\n        let htmlInstance\r\n\r\n        onMount(() => {\r\n          // attach the action to htmlInstance programmatically, but I don't know how because honestly\r\n          // I didn't even do my research for this topic\r\n        })\r\n\r\n      </script>\r\n    ```\r\n4. **Problem:** Component composition\r\n- **Suggestion:** There are 3 possible ways:\r\n    *Named slots* (most preferred) I need the ability to pass `slot` attribute to Svelte components, and to detect whether a `slot` is used or not - the width of the `content` slot differs with the usage of the `sider` slot\r\n    ```Svelte\r\n      <!-- userland -->\r\n      <LibLayout>\r\n        <UserDefinedHeader slot=\"header\" />\r\n        <UserDefinedSider slot=\"sider\" align=\"left\" />\r\n        <UserDefinedContent slot=\"content\" />\r\n      </LibLayout>\r\n    ```\r\n    *Predefined components* I need the ability to access components passed in the default slot, to validate whether the right components were used or not - may be even using typescript\r\n    ```Svelte\r\n      <!-- userland -->\r\n      <LibLayout>\r\n        <LibHeader>...</LibHeader>\r\n        <LibSider align=\"left\">...</LibSider>\r\n        <LibContent>...</LibContent>\r\n      </LibLayout>\r\n    ```\r\n    *Props* (least preferred) Doable, but can't imagine how this would work for web components, and this is probably not the svelte-y way\r\n    ```Svelte\r\n      <!-- userland -->\r\n      <LibLayout\r\n        header={<UserDefinedHeader />}\r\n        siderLeft={<UserDefinedSider />}\r\n        content={<UserDefinedContent />}\r\n      />\r\n    ```\r\n    **\\*\\*or\\*\\***\r\n    ```Svelte\r\n      <!-- userland -->\r\n      <LibLayout\r\n        headerComponent={UserDefinedHeader}\r\n        headerProps={{someUserDefinedProp: 'value'}}\r\n        siderLeft={UserDefinedSider}\r\n        content={UserDefinedContent}\r\n      />\r\n    ```\r\n- **Alternative:** Use props\r\n  ```Svelte\r\n  <!-- lib component -->\r\n  <script lang=\"ts\">\r\n    export let headerComponent: typeof SvelteComponent;\r\n    export let headerProps: {[k: string]: value} = {};\r\n    // ...so on\r\n  </script>\r\n\r\n  <div class=\"layout\">\r\n    {#if headerComponent}\r\n      <svelte:component this={headerComponent} {...headerProps} />\r\n    {/if}\r\n  </div>\r\n  ```\r\n5. **Problem:** I want to at least use TS, and a css preprocessor. But I want to enable Svelte users to use the components without any changes in their build setup.\r\n- **Suggestion:** The ability to build Svelte components using some preprocessors, and output a Svelte component that uses vanilla JS and CSS. I know this is more related to svelte-preprocess, but adding it for suggestions and/or guidance.\r\n- **Alternatives:** Implement a rollup plugin and use it.\r\n\r\n**How important is this feature to you?**\r\nCreating the library will help me convince my colleagues and the managers in the company I work for to use Svelte as our main FE framework. I also think that creating this library will be of huge benefit for any one who wants to use Svelte in large applications. \r\n\r\n**Additional context**\r\nNone.",
    "closedAt": "2020-08-10T18:54:23Z",
    "createdAt": "2020-08-10T18:17:20Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTUyODI2MA==",
          "body": "> Passing class to an underlying HTML element.\r\n\r\nThis has been discussed endlessly and is not going to happen.\r\n\r\n> Passing event to underlying HTML\r\n\r\nThere is an issue which would address this problem: https://github.com/sveltejs/svelte/issues/2837 \r\n\r\n> Passing actions to underlying HTML (I didn't actually need this, but I imagine that I will need it for the library to really comprehensive)\r\n\r\nThis can be solved with props. The framework certainly doesn't know where it should put those actions, that would be down to the library author to decide, that is exactly what props are for.\r\n\r\n> Component composition\r\n\r\nThere is an issue regarding working out whether or not slot content has been passed: https://github.com/sveltejs/svelte/issues/2106.\r\n\r\nWorking out _which_ component has been passed as a slot, is already possible with the context API _assuming_ you authored both components and can form a contract between the two. This kind of validation for deeply composed components is already possible and I do it regularly.\r\n\r\n> I want to at least use TS, and a css preprocessor. But I want to enable Svelte users to use the components without any changes in their build setup.\r\n\r\nThis isn't something svelte can really help with, you just need to preprocess the raw svelte components _without_ compiling them, and you will have this outcome. Typescript definitions will ensure users have an excellent experience inside their editor.",
          "createdAt": "2020-08-10T18:54:23Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzM1NjM0Mw==",
          "body": "Thanks for your time",
          "createdAt": "2020-08-13T09:00:40Z",
          "author": { "login": "AhmedSayed77", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzU5NDk3MzE=",
    "body": "**Describe the bug**\r\n\r\nI would expect this to work, but it did not.\r\n\r\n```svelte\r\n<script>\r\n\tlet component = import('./Lazy.svelte');\r\n</script>\r\n\r\n{#await component then Foo}\r\n\t<Foo.default />\r\n{/await}\r\n```\r\n\r\n**Logs**\r\nIt gets compiled into `new Foo.default({})` instead of `new ctx[1].default({})`.\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n\r\n* If you can demonstrate the bug using https://svelte.dev/repl, please do.\r\n* If that's not possible, we recommend creating a small repo that illustrates the problem.\r\n* Reproductions should be small, self-contained, correct examples – http://sscce.org.\r\n\r\nOccasionally, this won't be possible, and that's fine – we still appreciate you raising the issue. But please understand that Svelte is run by unpaid volunteers in their free time, and issues that follow these instructions will get fixed faster.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2020-08-12T20:20:53Z",
    "createdAt": "2020-08-10T08:09:08Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4ODkyOA==",
          "body": "This should now be working in 3.25.0.",
          "createdAt": "2020-09-10T20:06:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzU1MjA1MzA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThe css-unused-selector warning message does not contain the name of the unused selector. Adding this would help in scenarios like `svelte-check` where people do not see the code but only get a list of warnings/errors.\r\n\r\n**Describe the solution you'd like**\r\nEnhancing the message like this: `Unused CSS selector \".bla\"`\r\n\r\n**Describe alternatives you've considered**\r\nInfer the name from `start` / `end`, but this does not map back to original code in a good way (if people are using preprocessors like less/scss)\r\n\r\n**How important is this feature to you?**\r\nNice to have, not super important but I think it's implemented quickly since you already have the `start`/`end` position.\r\n\r\n**Additional context**\r\nRelated ticket in language-tools: https://github.com/sveltejs/language-tools/issues/434\r\n",
    "closedAt": "2020-08-12T20:57:05Z",
    "createdAt": "2020-08-08T12:47:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4ODY0Mw==",
          "body": "In 3.25.0, the warning message now also tells you what the selector is.",
          "createdAt": "2020-09-10T20:05:35Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzUyOTk4MDA=",
    "body": "After having read all of https://github.com/sveltejs/svelte/issues/4744 and after having asked https://github.com/svelte-society/recipes-mvp/issues/60 as well, I thought that perhaps this is a situation that has not yet been resolved.\r\n\r\n_Forgive me if it is already open elsewhere: I could not find it._\r\n\r\n---\r\n\r\n**REPL**: https://svelte.dev/repl/7aca36569aea49bba38e5fb8b1b0835b?version=3.24.1\r\n\r\nI can use `bind:value={rows[id].qty}` or `rows=rows` but it seems hacky to me.\r\n\r\n**Expected behavior**\r\n\r\nIs there a way to use something like: `bind:value={row.qty}` and still correctly update `rows` array?\r\n",
    "closedAt": "2020-08-08T06:08:19Z",
    "createdAt": "2020-08-07T21:28:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDgzMDMzNA==",
          "body": "In the example REPL, I believe what you need is\r\n\r\n```svelte\r\n<Row bind:row={row} />\r\n```\r\n\r\nAlso, GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-08-08T06:08:16Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzUyMjk4MjA=",
    "body": "**Describe the bug**\r\nIf a reactive declaration is an assignment, Svelte automatically replaces `$:` with `let` in SSR mode if the variable on the left hand side hasn't been declared. It does this even if the left hand side is a member expression:\r\n\r\n```svelte\r\n<script>\r\n  $: user = {};\r\n  $: user.name = 'world';\r\n</script>\r\n\r\n<h1>Hello {user.name}!</h1>\r\n```\r\n\r\n```js\r\nconst App = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {\r\n  let user = {};\r\n  let user.name = \"world\";\r\n  return `<h1>Hello ${escape(user.name)}!</h1>`;\r\n});\r\n```\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/b8f185ca9b104f4c8d08f2e5846cfaf0?version=3.24.1\r\n\r\n**Expected behavior**\r\nOnly the `$: user = ...` declaration should have a `let` prepended.\r\n\r\n**Severity**\r\nCan be worked around (e.g. `$: true && (user.name = 'world');`) but it's a bit annoying. Relatively infrequent occurrence though.",
    "closedAt": "2020-08-12T18:53:19Z",
    "createdAt": "2020-08-07T19:29:44Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4ODA0OQ==",
          "body": "In 3.25.0, the SSR output for this situation now only declares the variable once.",
          "createdAt": "2020-09-10T20:04:24Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzUwMDMwNjg=",
    "body": "I made a small test app using svelte [Link here](http://142.93.138.100:8484/fiber-manager/). \r\nWhen when i open the developer tools in chrome in can see the .svelte files source code . \r\nbut I did build and deployed app using webpack . \r\n\r\nso my question is is that be happening ? How to protect my source code in svelte ?\r\n",
    "closedAt": "2020-08-07T13:08:15Z",
    "createdAt": "2020-08-07T13:05:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDUwNzUxMQ==",
          "body": "You need to disable sourcemaps. GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-08-07T13:08:15Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDUxMDM1OA==",
          "body": "thanks !",
          "createdAt": "2020-08-07T13:14:33Z",
          "author": { "login": "abhijitgujar86", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzQ4NzUzNjU=",
    "body": "Hello,\r\n\r\nIs it possible to import svelte component using dynamic path like this :\r\n\r\nhttps://svelte.dev/repl/10e44f4140e4483e87f30ef163ba2164?version=3.24.1\r\n\r\ni'm not sure if it's even possible with ES6, or maybe it depends on rollup/webpack config ?\r\ni've tried same thing using sapper with no luck\r\n(the idea behind is to make a custom \"storybookjs\" using Figma API 👍 \r\n\r\nThx for your help !",
    "closedAt": "2020-08-07T10:32:49Z",
    "createdAt": "2020-08-07T09:05:14Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDQxNjI5NQ==",
          "body": "I think this is better asked in the discord or stack overflow",
          "createdAt": "2020-08-07T09:07:50Z",
          "author": { "login": "slimboyfats", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDQyMzY1NA==",
          "body": "@slimboyfats did it but answers could not help me ;)",
          "createdAt": "2020-08-07T09:24:15Z",
          "author": { "login": "julienchazal", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDQ1MDk5Ng==",
          "body": "@julienchazal it doesn't mean it should be a github issue, sorry. Please try rephrasing your question and persisting with discord, asking on stackoverflow, or otherwise.",
          "createdAt": "2020-08-07T10:32:49Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDQ1MjkwMA==",
          "body": "@antony i chose \"Question/help\" when creating this issue but anyway... ok i'm on discord ;) ",
          "createdAt": "2020-08-07T10:38:03Z",
          "author": { "login": "julienchazal", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDQ1MzYzNQ==",
          "body": "@julienchazal the question/help template says \"don't ask support questions on github!\"",
          "createdAt": "2020-08-07T10:40:05Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NzQwNzQ4MQ==",
          "body": "Thanks to the discord channel I was able to address this by using the `@rollup/plugin-dynamic-import-vars` npm package and eventually the solutions pointed out in this answer: https://github.com/kaisermann/svelte-i18n/issues/80#issuecomment-664713175\r\n\r\nI wanted to document those findings in this issue because this is the only mention of this kind of problem that I could find; nothing related came up on Google or SO. A search in this repos issue's ended up leading me down the right path so hopefully it can save someone else as well.",
          "createdAt": "2021-02-28T07:10:31Z",
          "author": { "login": "nathanblair", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzQzMjIwNTc=",
    "body": "**Describe the bug**\r\nBased on the Svelte tutorial, I expected that if I specify a transition like `out:fly=\"{{ x: $shift_right*800 }}` (where `$shift_right` is either +1 or -1), and I call `shift_right.set(-1)` before the out transition is triggered, I should be able to change the direction that the element flies out.\r\n\r\n**To Reproduce**\r\nTake a look at this REPL: https://svelte.dev/repl/d1dbcb82b61f4e92b80a49aa215d43fe?version=3.24.1\r\n\r\nUse the arrows to shift left and right. If you press a particular direction repeatedly (e.g., right/right/right) it works as expected. But when you alternate between right and left (e.g., right/left/right/left), the direction of motion for the old element fly out and the new element fly in transitions are different.\r\n\r\n**Expected behavior**\r\nAs I shift left and right using the buttons, I expect that the previous content will fly out in the same direction as the new content is flying in, because both of these should be set by `$shift_right` (which is either +1 or -1). Instead, the direction (sign of the x parameter) for the fly animation for existing content is not updated when the store value changes. I thought that `await tick()` might solve this, but it did not.\r\n\r\n**Information about your Svelte project:**\r\n- Chrome Version 84.0.4147.105 (Official Build) (64-bit)\r\n- macOS 10.15.6\r\n- Svelte 3.24.1\r\n- rollup (using the routify-starter template)\r\n\r\n**Severity**\r\nI'm not sure how to work around this. I found this behavior quite unexpected, so if this is the intended behavior, it would be great to have this clarified in the docs/tutorial. I'm new to Svelte, so if there's a better/more elegant way to do what I'm trying to do, would very much appreciate guidance on that point!\r\n\r\nThere also appears to be a separate issue that fly in from the left does not animate smoothly (whereas fly in from the right does). To see this, if you shift repeatedly left (e.g., click the left arrow repeatedly), everything animates smoothly. But if you shift repeatedly right, the fly in animation isn't smooth.\r\n",
    "closedAt": "2020-09-15T12:49:36Z",
    "createdAt": "2020-08-06T13:39:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2OTkzNDMxMg==",
          "body": "~~I haven't looked closely, but it sounds like this might be a duplicate of #3633.~~ Never mind, probably, that was about two-way transitions.",
          "createdAt": "2020-08-06T13:42:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDI0OTY5MQ==",
          "body": "I tried to narrow it down and believe the problem is caused by 'out:fly'. In [this REPL](https://svelte.dev/repl/f7afe1e080974a64b265f8d67a13bc65?version=3.24.1) when we use only 'in:fly' the animation follows the parametrized store value. However, if you change 'in:fly' to 'out:fly' the animation does not behave as per the parametrized store value \r\n\r\nIt takes extra button clicks until the animation switches directions based on the parametrized value.\r\n\r\nAlso, I think you mean to initialize shift_right to -1 in store.js since you start at set:0 - doing this fixes the initial janky animation.",
          "createdAt": "2020-08-07T00:04:36Z",
          "author": { "login": "NasirKhalid24", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTYxNzczMg==",
          "body": "Similar situation here, see this [REPL](https://svelte.dev/repl/1aa3608458f84a4fb4d93b10b47ae3f1?version=3.25.0). It seems that the behavior only happens inside an each block. \r\n\r\nThis [REPL ](https://svelte.dev/repl/61d774c051d24eb79070066835cbf7db?version=3.25.0)is the same thing without the each block just a series of tedious if blocks and it works great.\r\n\r\nEdit: Here's a [REPL ](https://svelte.dev/repl/eb47ab82f9f348e39062c5d4815bdea2?version=3.25.0) of a  truly hideous workaround I found for my situation where I put the transition outside the each block and flip between 2 identical each blocks... I feel dirty but this is the only way it works for me currently.",
          "createdAt": "2020-09-13T05:37:52Z",
          "author": { "login": "JHethDev", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTYzNzk2Ng==",
          "body": "One workaround is to change `fly`-function to your own custom `myFly`-function and call the `fly` from it:\r\n\t`const myFly=(el)=> fly(el,{ x: -$shift_right*800, duration: 750, easing: circIn, opacity: 1 })`\r\n\r\nAnd in `div`:\r\n\r\n`<div\r\nin:fly=”{{x: $shift_right*800}}”\r\nout:myFly>`\r\n",
          "createdAt": "2020-09-13T08:48:14Z",
          "author": { "login": "grohjy", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MjcxODQ5MQ==",
          "body": "This is fixed in 3.25.1. - https://svelte.dev/repl/d1dbcb82b61f4e92b80a49aa215d43fe?version=3.25.1",
          "createdAt": "2020-09-15T13:34:59Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzM0Mjk3NTQ=",
    "body": "**Describe the bug**\r\nIn order to calculate dynamic resize, Svelte uses an iframe and adds inline style properties on it. \r\nAmong those, a calculated z-index, that gets the iframe on top of every other items inside the binded dom element.\r\n\r\n---\r\n\r\nif binded element has a computed z-index, iframe will be set to [that z-index - 1 ](https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/dom.ts#L264)\r\n(I'm not sure why is that - I am probably missing something ^^)\r\n\r\nThis seems weird to have a correlation between parent and children z-indexes.\r\nIn the end we have something like this :\r\n\r\nholder : `z-index: 3`\r\n|- element : `z-index: auto`\r\n|- element : `z-index: auto`\r\n|- iframe : `z-index: 2`\r\n\r\nNo matter what z-index is on the holder, a positive z-index on the iframe will always be above `auto` ones\r\n\r\nNote that among those added inline styles, there is also a `pointer-events` set to `none`, which prevent problems when iframe comes on top, but it seems ios12 and below doesn't support `pointer-events` on iframes.\r\n\r\n**Logs**\r\nHappens everywhere but really is problematic on chrome/safari ios12\r\n\r\n**To Reproduce**\r\nVisible on this repl :\r\nhttps://svelte.dev/repl/7e5a4ca7dccc498fa067300d7ed9fff0?version=3.24.0\r\n\r\n**Expected behavior**\r\nIframe not above anything. \r\nMaybe a fix `z-index: -1` would do it - that's how it was fixed on the project I'm working on\r\n\r\n**Information about your Svelte project:**\r\n- Svelte version 3.24.0 / Webpacked\r\n\r\n**Severity**\r\nBlocking ios12 and below users (3 to 5% here)\r\n\r\n",
    "closedAt": "2020-12-04T11:31:18Z",
    "createdAt": "2020-08-05T10:24:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODQ4NjIwNA==",
          "body": "Can we verify if this is the same issue as https://github.com/sveltejs/svelte/issues/5448 ?",
          "createdAt": "2020-12-04T01:12:41Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDczODczNDE5OA==",
          "body": "It is. I close this one.",
          "createdAt": "2020-12-04T11:31:18Z",
          "author": { "login": "crotru", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzMxOTk3MTA=",
    "body": "```\r\nnpx degit sveltejs/template my-svelte-project\r\n# or download and extract \r\ncd my-svelte-project\r\n\r\nnpm install\r\nnpm run dev\r\n```\r\n\r\n`npm run dev` not work!",
    "closedAt": "2020-08-05T02:38:32Z",
    "createdAt": "2020-08-05T02:16:05Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2ODk0Mjg3OA==",
          "body": "This is not a helpful bug report, nor one I can reproduce.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-08-05T02:38:32Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzMxMTgyNzU=",
    "body": "**Describe the bug**\r\n`const my_var = \"</script>\"` breaks Svelte and returns the error `ParseError: Unterminated string constant`\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/985b350b319d41db961954b98f0f4db0?version=3.24.0\r\n\r\n**Severity**\r\nIrritating, but easy to work around by putting string templates in a .js file and importing them into the component.",
    "closedAt": "2020-08-04T22:27:04Z",
    "createdAt": "2020-08-04T22:16:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2ODg1NTQ3Mw==",
          "body": "This is a duplicate of  #5024, #3039, #3840, #4406, #4996.\r\n\r\nThis is not a bug, this is how closing script tags are parsed in HTML. You can escape the closing slash if you need to.",
          "createdAt": "2020-08-04T22:27:04Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzI1NDQ3Njc=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSvelte components have the look and feel of vanilla html. Feature requests like [#3852](https://github.com/sveltejs/svelte/issues/3852) - I'm assuming - supports the argument that svelte developers wants to keep components' props as close to html attributes as possible. Having class directives working with components in the same way they work with html elements would be a nice feature to have for component libraries' developers.\r\n\r\n**Describe the solution you'd like**\r\n```\r\n<MyComponent class:first class=\"second\" class={condition ? classVar : ''} />\r\n```\r\nand may be access the compiled prop through `$$class // \"first second valueOfClassVar\"`  - may be even exclude it from $$restProp?\r\n\r\n**Describe alternatives you've considered**\r\npassing the calculated string to a custom prop (className for example), and let the user handle the logic to calculate the end result of the string.\r\n\r\n**How important is this feature to you?**\r\nNot very important, but I think it would be nice to have it.\r\n\r\n**Additional context**\r\nNone",
    "closedAt": null,
    "createdAt": "2020-08-04T06:38:58Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2ODU2MzQxNQ==",
          "body": "See also #4749.",
          "createdAt": "2020-08-04T12:22:50Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzI0NTQ3MTA=",
    "body": "**Describe the bug**\r\n<img width=\"302\" alt=\"Image 2020-08-03 at 8 46 09 PM\" src=\"https://user-images.githubusercontent.com/2502947/89245416-c307b000-d5d6-11ea-9b73-0ad04133b02b.png\">\r\n\r\nExtra padding on Chrome through out the Repl and project.\r\n\r\n**Logs**\r\nChrome\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n- https://svelte.dev/repl\r\n- add <input type=\"range\" /> to the input section.\r\n\r\n\r\n\r\n**Expected behavior**\r\n<img width=\"875\" alt=\"Image 2020-08-03 at 10 12 52 PM\" src=\"https://user-images.githubusercontent.com/2502947/89245550-0a8e3c00-d5d7-11ea-8d8a-354e89c777c8.png\">\r\n\r\n\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 52.1\r\n\r\n- Your operating system: OS X 10\r\n\r\n- Svelte version: latest\r\n\r\n- Rollup\r\n\r\n**Severity**\r\nVisual defect\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\nfix here: https://github.com/sveltejs/template/pull/158",
    "closedAt": "2020-08-07T17:46:07Z",
    "createdAt": "2020-08-04T02:19:08Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzI0MzU4NDY=",
    "body": "hello and sorry for my english\r\n\r\n**Describe the bug**\r\n\r\nWhen i try to import css style i get the error i'm using noty\r\n\r\nThe error appears when i add this line:\r\n\r\n`import 'noty/lib/noty.css';`\r\n\r\n**Logs**\r\n\r\n```\r\n[!] Error: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\nnode_modules\\noty\\lib\\noty.css (1:0)\r\n1: .noty_layout_mixin, #noty_layout__top, #noty_layout__topLeft, #noty_layout__topCenter, #noty_layout__topRight, #noty_layout__bottom, #noty_layout__bottomLeft, #noty_layout__bottomCenter, #noty_layout__bottomRight, #noty_layout__center, #noty_layout__centerLeft, #noty_layout__centerRight {\r\n   ^\r\n2:   position: fixed;\r\n3:   margin: 0;\r\nError: Unexpected token (Note that you need plugins to import files that are not JavaScript)\r\n    at error (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:5174:30)\r\n    at Module.error (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:9627:16)\r\n    at tryParse (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:9541:23)\r\n    at Module.setSource (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:9930:30)\r\n    at ModuleLoader.addModuleSource (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:17808:20)\r\n    at ModuleLoader.fetchModule (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:17862:9)\r\n    at async Promise.all (index 3)\r\n    at ModuleLoader.fetchStaticDependencies (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:17886:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (C:\\Users\\nerve\\Diego\\Programacion\\Ejercicios_Javascript\\Svelte\\simple-crud\\node_modules\\rollup\\dist\\shared\\rollup.js:17863:9)\r\n```\r\n\r\n**To Reproduce**\r\nInstall packages:\r\n\r\n`npm install noty uuid`\r\n\r\nThis is the source file:\r\n\r\n<!--Aqui podemos escribir codigo de javascript-->\r\n\r\n```\r\n<script>\r\n\r\n\t//Importamos la libreria para generar el 'id' automaticamente\r\n\timport { v4 } from 'uuid';\r\n\r\n\t//Importamos una libreria para notificaciones\r\n\t//Opcional\r\n\timport Noty from 'noty';\r\n\t//Esta parte puede causar errores pero se pueden ignorar\r\n\timport 'noty/lib/noty.css';\r\n\t  \r\n</script>\r\n\r\n<!--Aqui podemos escribir codigo html-->\r\n<main>\r\n\t\r\n</main>\r\n```\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nAccording this repo:\r\n\r\nhttps://github.com/FaztWeb/svelte-crud/blob/master/src/App.svelte\r\n\r\nIt should work\r\n\r\n**Stacktraces**\r\nIf you have a stack trace to include, we recommend putting inside a `<details>` block for the sake of the thread's readability:\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n  Stack trace goes here...\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome\r\n\r\n- Your operating system: Windows 10\r\n\r\n- Svelte version: 3.0.0\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\n**Severity**\r\n\r\nIt can compile the application and start the dev server\r\n\r\n**Additional context**\r\n\r\nAdd any other context about the problem here.\r\n",
    "closedAt": "2020-08-04T02:20:19Z",
    "createdAt": "2020-08-04T01:19:47Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2ODM0MDkyMQ==",
          "body": "You need to use a Rollup plugin to allow importing CSS, as the error indicates.\r\n\r\nGitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-08-04T02:20:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzE3MTIxNjI=",
    "body": "Have automated releases been considered for svelte and sveltejs/*? It could potentially save developers a lot of time tracking down issues for which there's already been a merged, but not released, fix.",
    "closedAt": "2020-08-03T10:53:14Z",
    "createdAt": "2020-08-02T23:34:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzk1NTM4OA==",
          "body": "Hi @dnl-brnr\r\n\r\nThis seems like something you should ask in [discord](https://svelte.dev/chat) rather than as a github issue.\r\n\r\nWe have a changelog file which is dilligently updated. I'm not sure how automated releases will help this, but please feel free to come and discuss on discord.",
          "createdAt": "2020-08-03T10:53:14Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzE3MTA0OTE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIn normal TS, you can write stuff like:\r\n```ts\r\nfunction foo(value: number | string) {\r\n  if (typeof value == 'number') {\r\n    // Type checks successfully because this block would be unreachable if the value was a string.\r\n    let foo: number = value;\r\n  }\r\n}\r\n```\r\nIt's called refinements because it refines the type to a more precise one as you observe it.\r\n\r\nIn `{#if}` blocks, this does not appear to be supported. Say I have this type:\r\n```ts\r\ntype Thing = {\r\n  type: \"success\";\r\n  value: number;\r\n} | {\r\n  type: \"failure\";\r\n  error: string;\r\n};\r\n```\r\nI try to use `{#if}` to render differently depending on the value:\r\n```html\r\n{#if thing.type == \"success\"}\r\n  <p>Success! {thing.value}</p>\r\n{/if}\r\n```\r\nInstead of working like it would for a normal if statement, it gives this error instead:\r\n```\r\nProperty 'value' does not exist on type 'Thing'.\r\n  Property 'value' does not exist on type '{ type: \"success\"; value: number; } | { type: \"failure\"; error: string; }'.ts(2\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI'd like if `{#if}` could somehow replicate the behavior of TS if statements.\r\n\r\n**Describe alternatives you've considered**\r\nI guess I can work around it somehow. Not sure how though, other than to disable typescript for most of my components or ignore all the errors. `npm run dev` still lets the code run despite the errors.\r\n\r\n**How important is this feature to you?**\r\nMy code is full of errors and I don't know if what I'm writing is full of bugs.\r\n\r\n**Additional context**\r\n![image](https://user-images.githubusercontent.com/1254344/89134701-f285c200-d4db-11ea-8922-06233cd2bb49.png)\r\n\r\n",
    "closedAt": "2020-08-02T23:39:03Z",
    "createdAt": "2020-08-02T23:23:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzczOTMzNQ==",
          "body": "I think I messed something up on my end because I tried to make a minimal test case and it's not reproducing the issue.",
          "createdAt": "2020-08-02T23:32:16Z",
          "author": { "login": "tiffany352", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzc0MjEyOA==",
          "body": "Oh, I think I figured it out. It's when you nest {#if} like in my screenshot.\r\n\r\nI flattened out my {#if} and that fixed it. It looks like I can pretty consistently reproduce what's happening now, although it's not the same as what I described.\r\n\r\nErrors:\r\n```svelte\r\n<script lang=\"typescript\">\r\n  interface Success {\r\n    type: \"success\";\r\n    value: number | null;\r\n  }\r\n\r\n  interface Failure {\r\n    type: \"failure\";\r\n  }\r\n\r\n  type Thing = Success | Failure;\r\n\r\n  export let thing: Thing;\r\n</script>\r\n\r\n{#if thing.type == 'success'}\r\n  {#if thing.value != null} // Property 'value' does not exist on type 'Thing'. Property 'value' does not exist on type 'Failure'.\r\n    <p>Success! {thing.value}</p> // Property 'value' does not exist on type 'Thing'. Property 'value' does not exist on type 'Failure'.\r\n  {:else}\r\n    <p>Success!</p>\r\n  {/if}\r\n{/if}\r\n```\r\n\r\nWorks:\r\n```svelte\r\n{#if thing.type == 'success' && thing.value != null}\r\n  <p>Success! {thing.value}</p>\r\n{:else if thing.type == 'success'}\r\n  <p>Success!</p>\r\n{/if}\r\n```",
          "createdAt": "2020-08-02T23:59:27Z",
          "author": { "login": "tiffany352", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTMzNzg2Nw==",
          "body": "Hello @tiffany352  , I encounter the same problem and it is not always possible to flatten the condition statement. So, could you reopen the issue as it is not working as intended? Than you veyr much.",
          "createdAt": "2020-10-30T07:18:44Z",
          "author": { "login": "gbouteiller", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTM2NDkwOA==",
          "body": "@gbouteiller this should be a language-tools issue, tracked here https://github.com/sveltejs/language-tools/issues/619",
          "createdAt": "2020-10-30T07:47:45Z",
          "author": { "login": "jasonlyu123", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTQ0NjgzNg==",
          "body": "@jasonlyu123 perfect, i'll subscribe to it. Thank you.",
          "createdAt": "2020-10-30T09:33:37Z",
          "author": { "login": "gbouteiller", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzE3MDg0NjE=",
    "body": "Example that works (not using store)\r\n```\r\n<script>\r\n  let menuTabVisible = false\r\n</script>\r\n<div id=\"menu-tab\" class=\"menuTab\" class:menuTabVisible>\t\r\n```\r\n\r\nExample that NOT works (using store)\r\n```\r\n<script>\r\n  import { menuTabVisible } from \"../stores/someStore.js\";\r\n</script>\r\n<div id=\"menu-tab\" class=\"menuTab\" class:$menuTabVisible>\t\r\n```\r\n\r\nAbove code run but not correct\r\n\r\nIs this a bug or there's certain syntac for class:XXX using store ?\r\n\r\nSorry if this is not a bug, BTW Svelte is really great",
    "closedAt": "2020-08-02T23:43:42Z",
    "createdAt": "2020-08-02T23:11:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzc0MDQ4Nw==",
          "body": "Duplicate of #4104. The `class:` shorthand only works if the variable name (including the `$`) is the same as the class name.",
          "createdAt": "2020-08-02T23:43:42Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzE2MzMwMjY=",
    "body": "The tutorial is difficult to grasp https://svelte.dev/tutorial/keyed-each-blocks\r\n\r\nIn the description the content `It's easier to show why than to explain.` I completely agree.\r\n\r\nI rebuilt the functionality with react because I'm more familiar with their mental model and found it much easier to understand in svelte after relating it to something I already know (and probably most developers looking at this tutorial know too).\r\n\r\nhttps://codesandbox.io/s/sleepy-lovelace-x3fdw\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-08-02T15:08:17Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzE1OTEyMjc=",
    "body": "**Describe the bug**\r\nI have this code:\r\n\r\n```svelte\r\n<script>\r\n  let value = \"0\";\r\n\r\n  function set() {\r\n    value = \"\";\r\n  }\r\n</script>\r\n\r\n<div>\r\n  <input {value} on:input={set} />\r\n</div>\r\n```\r\n\r\nIt's supposed to clear input each time when user tries to type something. It actually clears input for the first time, but then it stops clearing and user becomes able to type everything he wants.\r\n\r\n**Logs**\r\nNo logs were emitted :smile:\r\n\r\n**To Reproduce**\r\nREPL: https://svelte.dev/repl/7ae87bbae9c6470cabab36112f7fc706?version=3.24.0\r\n\r\n**Expected behavior**\r\nInput must be cleared each time user types something.\r\n\r\n**Severity**\r\nIt's kinda annoying. :smile: ",
    "closedAt": "2020-08-03T10:59:12Z",
    "createdAt": "2020-08-02T10:24:48Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzY1OTk5Nw==",
          "body": "It feels like ctx should be in sync with node value... :thinking: ",
          "createdAt": "2020-08-02T11:08:01Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzY5MzUxMQ==",
          "body": "Until now I don't know the exact reason. But if you still want to do that, Try using `setTimeout` & `bind:value` instead `value`: (*this works*)\r\n\r\n**Example:**\r\n```js\r\n<script>\t\r\n  let value = \"0\";\r\n\r\n  function set() {\t\t\r\n     setTimeout(()=>{\r\n        value = \"\";\r\n     })\r\n  }\r\n</script>\r\n\r\n<div>\r\n  <input on:input={set} bind:value={value}/>\r\n</div>\r\n```\r\n\r\n**REPL**: https://svelte.dev/repl/e58f02bf4392460f8f8e0a17469f5388?version=3.24.0",
          "createdAt": "2020-08-02T16:13:16Z",
          "author": { "login": "lamualfa", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzcxNTM4NQ==",
          "body": "It is related only to the fact that `ctx` is not synced with `node value`.\r\nSvelte updates DOM only when `value !== ctx`.\r\nFirst time, when `value` is `\"0\"` and `ctx` is `\"0\"`, changing `value` from `\"0\"` to `\"\"` works because `value !== ctx`, but the second time `value` and `ctx` are equal and Svelte doesn't know that representation has changed, so it doesn't update the DOM.\r\n\r\nIf `ctx` was synced to the `node value` without need to bind, we could prevent entering some characters. We would have `e.target.value` and `value` to compare. And then we could choose should we revert the DOM change by writing `value = value`, or update value with `e.target.value` if check was passed instead of using replace with regexp.\r\n\r\nPut 1 and then press space. Every time `value` is different from `ctx` and `node value` changes too.\r\n\r\n```svelte\r\n<script>\r\n  let value = 0;\r\n\r\n  function set(e) {\r\n    value = +e.target.value * 2;\r\n  }\r\n</script>\r\n\r\n<input {value} on:input={set} />\r\n```",
          "createdAt": "2020-08-02T19:33:32Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzczNjM5MQ==",
          "body": "Just add example @non25.\r\n\r\n**Example with `e.target.value`:**\r\n\r\n```js\r\n<script>\t\r\n  let value = \"0\";\r\n\r\n  function set(e) {\t\t\r\n     e.target.value= \"\"\r\n  }\r\n</script>\r\n\r\n<div>\r\n  <input on:input={set} {value}/>\r\n</div>\r\n```\r\n\r\n**REPL:** https://svelte.dev/repl/7b9f7ec289a24d61a591696248f4f7d3?version=3.24.0",
          "createdAt": "2020-08-02T23:07:24Z",
          "author": { "login": "lamualfa", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzk1Nzc5OQ==",
          "body": "So to clarify. The `set` is working without issue. You can see this by `console.log`ing the actual value.\r\nThe view value of a field should be controlled using javascript, as is done above. This also updates the reactive binding so can be used to control both actual value and view value.\r\n\r\nThis isn't a bug, this is a known feature of how view values work - I know because I raised it myself before :)",
          "createdAt": "2020-08-03T10:59:12Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzk2MjE3Mg==",
          "body": "Can you elaborate on why `ctx` should be out of sync with `node value` ?\r\nIt feels wrong to me, that there is a way to be confused with reactive values without patching DOM manually through innerHTML and others.",
          "createdAt": "2020-08-03T11:09:41Z",
          "author": { "login": "non25", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NzA4NTU0NDU=",
    "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n<img width=\"449\" alt=\"Image 2020-08-01 at 9 02 41 AM\" src=\"https://user-images.githubusercontent.com/2502947/89102306-d39d0800-d3d5-11ea-9f19-94ec0cb51a58.png\">\r\n\r\nShould Look more centered like this\r\n\r\n<img width=\"397\" alt=\"Image 2020-08-01 at 9 01 52 AM\" src=\"https://user-images.githubusercontent.com/2502947/89102309-ddbf0680-d3d5-11ea-92c5-61f240e80f79.png\">\r\n\r\n\r\n**Logs**\r\nChrome\r\n\r\n**To Reproduce**\r\nGo To the documentation page:\r\n\r\n-Chrome 52.1\r\n\r\n- OS X 10\r\n\r\nLow - Visual regression in the documentation.\r\n",
    "closedAt": "2020-08-11T03:14:30Z",
    "createdAt": "2020-08-01T13:05:34Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Njk3MjA2MDI=",
    "body": "I want to create a web component using svelte. To create a web component it's necessary to include the svelte tag option\r\n\r\n`<svelte:options tag=\"{\"my-custom-component}\"></svelte:options>`\r\n\r\nIt creates a custom component with that name but doesn't work properly because we have to provide this tag for all the child components as well! I added it to all the child components but it still doesn't work, turns out I use third party libraries and I don't know any way to have that option there!\r\n\r\nIs there a way to create custom component with svelte which includes third party libraries?\r\n",
    "closedAt": "2020-07-31T21:22:18Z",
    "createdAt": "2020-07-31T11:32:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzM2Mjg4OA==",
          "body": "Hi @Manzurkds \r\n\r\nPlease use [discord](https://svelte.dev/chat) for support questions.",
          "createdAt": "2020-07-31T21:22:18Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2Njk2OTgzMjI=",
    "body": "**Describe the bug**\r\nWhen loading the svelte.dev site i get welcomed by an 500 error\r\n\r\n**Logs**\r\n```\r\nSCRIPT1028: SCRIPT1028: Expected identifier, string or number\r\n5258fa1b-3a9e-41ac-bc74-186716ab20e3 (1,64086)\r\n\r\n0: Unable to get property 'R' of undefined or null reference \r\napp.bbeb5782.js (1,21620)\r\n```\r\n\r\n**To Reproduce**\r\nfirst time load, constantly happening; no idea how to reproduce\r\n\r\n**Expected behavior**\r\nthe site loads successfully\r\n\r\n**system Information**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\nMicrosoft Edge 44.19041.1.0\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\nWindows 10 v2004\r\n\r\n**Severity**\r\nWas going to check out svelte for the first time and then cant even get on the site\r\n",
    "closedAt": "2020-07-31T11:10:39Z",
    "createdAt": "2020-07-31T11:04:38Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzA2Nzg4MQ==",
          "body": "You're using an out of date, unmaintained/unsupported version of Edge which we don't support (as the site is not transpiled). Please try an alternate browser such as Chrome, or a more recent version of Edge.",
          "createdAt": "2020-07-31T11:10:39Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzE3MjI4Ng==",
          "body": "yeah my mistake, reset my pc and assumed that the new edge was default but apparently not",
          "createdAt": "2020-07-31T15:12:42Z",
          "author": { "login": "teknsl", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjkyNTAxNjU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI cannot augment third-party components with actions because components in Svelte do not have an implicit host/root element at runtime. The most simple example I can think of is a button component from a library that does not support tooltips, but I would like to add a tooltip to the button.\r\n\r\n```Svelte\r\n<script>\r\n    import MatButton from \"svelte-material\";\r\n    import myTooltip from \"../actions/tooltip\";\r\n</script>\r\n\r\n<!-- Obviously, tooltips are not as relevant for text buttons but I am simplifying the example -->\r\n<MatButton use:myTooltip={\"Click me!\"}>\r\n    Login\r\n</MatButton>\r\n```\r\n\r\nThe above code does not compile because there is no host element at runtime for the `MatButton` so there is no target for the action. Thus, the `MatButton` component must support a `tooltip` property or I'm out of luck.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI would like components to be able to optionally designate an element in their markup as the root/host element so that actions used on instances of the component get forwarded to that element. In my example, `MatButton.svelte` might look something like this:\r\n\r\n```Svelte\r\n<script>\r\n    // (omitted)\r\n</script>\r\n\r\n<!-- Notice this button is marked as the host -->\r\n<button svelte:host>\r\n    <slot/>\r\n    <div class=\"ripple\"></div>\r\n</button>\r\n```\r\n\r\nBecause the `MatButton` component gets replaced by a single `button` element, I think it is very intuitive for users of the library to think of the `MatButton` and the `button` element it gets replaced by as one and the same.\r\n\r\nAt first, I thought the smartest solution would be to automatically allow actions on a component provided its markup has exactly one root element. However, I realized there might be situations where a component has multiple root elements but only one is visible at runtime and is the 'primary' element while the others are there for intercepting focus or some other shenanigans, etc. Besides, it's probably better for component authors to be explicit about whether or not their component maps to a specific runtime element. Thus, I arrived at the `svelte:host` marker attribute.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n1. Implicitly creating a runtime host element for every component at runtime and injecting components' markup into their host elements. **Just kidding!** I think Svelte's approach where it replaces component instances with the component markup is vastly superior to Angular and the other frameworks. It gives the developer more control over what the DOM structure looks like at runtime—which means better performance and fewer CSS headaches, and also allows the developer to create [very powerful recursive components](https://svelte.dev/repl/347b37e18b5d4a65bbacfd097536db02?version=3.24.0). Fun Fact: Angular ended up having to work around this madness via attribute components (like `<button mat-button>` instead of `<mat-button>`) so that the resulting DOM could be less convoluted and more semantic.\r\n\r\n2. For my simple tooltip example, I could create a `TooltipHitbox` component with a `<slot/>` inside a `<div use:myTooltip={tooltipProp}>` and then wrap `MatButton` instances with that component. This would create unnecessary wrapper elements at runtime, potentially causing issues with styling, and is also needlessly verbose and obnoxious.\r\n\r\n**How important is this feature to you?**\r\n\r\nThis feature is not a dealbreaker for me as I feel it is the only bad tradeoff to Svelte's replace-with-markup approach for components. That said, it does make third-party components less extensible because you cannot use actions on them and you cannot forward stuff to their internal markup within your own templates. This means you either have to use a jank workaround (see my first alternative solution) or you end up writing your own version of a library component just because you need to apply an action to the rendered element.\r\n",
    "closedAt": null,
    "createdAt": "2020-07-30T22:29:23Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzk1OTA4MA==",
          "body": "If I understand this correctly - if you control the markup of the child component, you can easily add an action to it which is passed as a prop, so this doesn't really change anything other than adding API surface for something which, should the author of the child/third-party component wish, they could expose an API for anyway.",
          "createdAt": "2020-08-03T11:02:13Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2ODIwMTIyNQ==",
          "body": "@antony Yes, I understand that. The point of the feature is to not rely on the third-party author of the child component to add a prop for every action under the sun. Rather, they could just mark a recipient for actions on the component (assuming there is a viable target element), and then consumers of the library could extend the component using whatever actions they desire.\r\n\r\nRelying on the component author to implement a prop for every desired action is not decentralized at all as it means they must bake every feature directly into the library. This has already forced me to forgo Svelte Material because I would like to add some actions to their components but I cannot and it does not make sense for them to cater to my specific use-case by baking random stuff into the library used by everyone.",
          "createdAt": "2020-08-03T19:29:01Z",
          "author": { "login": "samclaus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2ODIwNzc3MA==",
          "body": "They don't need to add a prop for every action. The action itself can be passed in as a prop.\r\n\r\n```svelte\r\n<script>\r\n  export let action;\r\n</script>\r\n\r\n<div use:action>whatever</div>\r\n```\r\n\r\nThe argument for the action can be another prop or can be part of the same prop.",
          "createdAt": "2020-08-03T19:44:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2ODI4MjgwMA==",
          "body": "Okay, that is interesting. It makes sense since an action is just a function that could be passed as a value anywhere. So let's say I want to apply multiple actions. I could (presumably) write the following:\r\n\r\n**multi-action.action.ts**\r\n\r\n```TypeScript\r\ntype ActionFn = (target: HTMLElement, opts?: any) => undefined | ActionCallbacks;\r\n\r\ninterface ActionCallbacks {\r\n    update?: (opts?: any) => void;\r\n    destroy?: () => void;\r\n}\r\n\r\n/**\r\n * Simple action which runs multiple actions on an element.\r\n */\r\nexport default function multiAction(actions: [ActionFn, any][]): ActionFn {\r\n    return function(target: HTMLElement): ActionCallbacks {\r\n        const handles = actions.map(([fn, opts]) => fn(target, opts));\r\n\r\n        return {\r\n            destroy(): void {\r\n                for (const handle of handles) {\r\n                    handle?.destroy?.()\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n**MatButton.svelte** (from third-party library)\r\n\r\n```Svelte\r\n<script>\r\n    export let action;\r\n</script>\r\n\r\n<button use:action>\r\n    <slot/>\r\n</button>\r\n```\r\n\r\n**MyComponent.svelte**\r\n\r\n```Svelte\r\n<script>\r\n    import MatButton from \"@smui/button\";\r\n    import multiAction from \"../actions/multi-action.action.ts\";\r\n    import myTooltip from \"../actions/tooltip.action.ts\";\r\n    import readOnHover from \"../actions/read-on-hover.action.ts\";\r\n</script>\r\n\r\n<!-- Where readOnHoverOpts is some options object which might change reactively (not shown here) -->\r\n<MatButton action={multiAction([[myTooltip, \"Click me!\"], [readOnHover, readOnHoverOpts]])}>\r\n    I'm a cool looking button\r\n</MatButton>\r\n```\r\n\r\nI'm assuming the above would be less than ideal performance-wise. If my intuition is correct, whenever `readOnHoverOpts` changes in `MyComponent.svelte`, Svelte will re-evaluate the `multiAction(...)` call and pass the new result to the `action` prop of `MatButton.svelte`. This will cause the previous `multiAction` instance to be destroyed and the new one to be executed with the `<button>` element.\r\n\r\nI have read through the API docs and nowhere did I see a mention of a way to apply an array of actions to an element. Thus, `MatButton.svelte` _could_ provide `action1`, `action2`, etc. props but that is not really a solution. So with `MatButton.svelte` providing only an `action` prop, I am forced to use my `multiAction` function which does not support updating action parameters without destroying the existing set of actions and recreating them completely (once again, assuming my intuition is correct).\r\n\r\nI also don't like that this solution is not really visible to the Svelte compiler whatsoever and maybe misses out on some optimizations? Like if the Svelte compiler knew you were applying 3 particular actions it could generate code to apply and update each of those actions individually vs. just having a runtime loop over an array of actions and having to check if any of the actions in the array were changed to a different function entirely.\r\n\r\nThe more I think about it the more I recognize this is a hard problem. It just seems like a proper method to apply actions to a component's internal markup from another component's markup would be much more optimizable and hygienic from an app-developer standpoint. That said, I don't know much about the Svelte compiler implementation and my tingly feelings tell me this would be a lot of work to implement. I am very grateful for Svelte as it is now so I am really just looking for people's thoughts on this particular problem. Maybe forwarding an `action` prop (in combination with something like `multiAction` if multiple are needed) is by far the sanest approach. Please let me know your opinion given my concrete examples.",
          "createdAt": "2020-08-03T23:05:43Z",
          "author": { "login": "samclaus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODczMTk5MQ==",
          "body": "I don't think we necessary _need_ to be able to specify a root element(s). I'm not necessarily opposed to the idea; just wanted to point out the possibility that it _could_ still be useful to have actions that work for components even if the action function only had a reference to the component and not to any root element(s) (see use case below).\r\n\r\n(The main reason I _would_ want the ability to specify root element(s) would be for easily applying CSS classes to the root element(s) of child components (this would address https://github.com/sveltejs/svelte/pull/2888#issuecomment-554681896, https://github.com/sveltejs/svelte/pull/2888#issuecomment-554758932, etc.) )\r\n\r\n1. If we _did_ add that ability, I'd want to be able to specify multiple \"root elements\" and have the specified actions automatically applied to _each_ of them.\r\n\r\n2. Don't forget that there could also be 0 root elements (like if the child component's template had nothing but a `<slot />`).\r\n\r\n3. **I really do wish there was a way to make actions that could apply to components.**\r\n\r\nI realize that the current definition of an [action](https://svelte.dev/docs#use_action) is in terms of an _element_, but I think it could be changed to work for components too.\r\n\r\nThis would let you do things like:\r\n- attach event handlers (`on:whatever`) to the _component_ (from the action function), and have it work exactly the same as if you had passed `on:whatever={handler}` directly to the component that is the _subject_ of this action/trait/enhancer/smoosher.\r\n- define other things to happen on component lifecycle events (`onMount`, `onUpdate`) (I don't have any examples of what I'd use this for; just brainstorming)\r\n\r\nIn particular, what I want to do is something like [this (a `use:attachEvents={eventProps}` action)](https://svelte.dev/repl/f4b5f661bb7b40b7bd1272c1f58d2efc?version=3.24.1) — but for components. I just don't know if there's a programmatic way to attach event handlers to (there must be one internally, but probably not one that's exposed currently). In other words, if all we had a reference to is the component instance, how would you translate/adapt this:\r\n```js\r\nnode.addEventListener(e, f)\r\n```\r\nto programmatically (with JS rather than via the template syntax) add an event listener to a _component_?\r\n\r\n---\r\n\r\n> They don't need to add a prop for every action. The action itself can be passed in as a prop.\r\n\r\nThat's awesome that you can do that (I didn't realize that), but the main problem with that approach is that **_it only works if you own the component_** that you want to add your behavior/action to. How do you add an action to a component if you _don't_ own the component that you want to add a behavior/action to (that is, if you import it from a library)? (Attaching event handlers is the main use case I have for this.)\r\n\r\nThere needs to be a way to affect child components _without their cooperation_ (as @syntheticore aply [put it](https://github.com/sveltejs/rfcs/pull/13#issuecomment-590504295)). Well, you already _can_ attach those event handlers to a child component without their cooperation if you explicitly list them out every time (so it's not like I'm proposing some new way to break encapsulation and give you more control over something _inside_ your child component). This is more about bundling some behavior together into a reusable function, letting you create reusable behaviors/hooks/actions and _avoid duplicating the code_ that provides that behavior/pattern (by explicitly listing out the same list of event handlers every time you want to reuse this pattern).\r\n\r\nThis is an area where React really has an abundant supply of features/abstractions to allow reusability (HOCs, hooks, spreading props that may include event handlers (since they are simply props (`onChange`) like any other prop)) and Svelte feels like it is lacking... **I want  React hooks — in Svelte.** (To clarify: React doesn't actually provide a way to apply hooks to _child_ components (you use hooks in your _own_ component), so that's kind of a bad example/analogy, but they do provide a nice way to bundle reusable behavior into a function, kind of like Svelte actions, so they're still the closest analogue I can think of to Svelte actions in React. My point is I do somehow feel like that powerful feeling that you can extract literally just about _anything_ from your specific component into some generic reusable construct — be it a component (which is the main solution to reusability that Svelte provides), or a hook (this seems missing in Svelte), or a HOC (which _might_ eventually be possible in Svelte through [inline components](https://github.com/sveltejs/rfcs/blob/inline-components/text/0000-inline-components.md), though probably not since they will probably only be possible from within a .svelte template and not from within a function in any old .js file) — is somehow missing, coming to Svelte from React...)\r\n\r\nSorry, I should probably start a new issue/proposal for this (since the OP's issue/proposal is specifically about applying actions to a component's root _element_(s))...",
          "createdAt": "2020-09-25T05:42:26Z",
          "author": { "login": "TylerRick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyOTYyNDcxMQ==",
          "body": "I could see that access to an elements attributes/properties etc could be considered a corollary to the notion of a slot.\r\nWhere a slot allows IOC for element contents, similar IOC systems could make sense for the elements attributes/properties/actions etc\r\n\r\nSimilar to slots, it would make sense to have both named and unnamed \"element\" slots.\r\n\r\nSome imagined use cases for this is in complex elements such as input's where there are myriad properties and implementing logic for all of them in a component would have a large overhead but little benefit.\r\nIf instead the components input control had an \"element\" slot, the component user could easily extend the functionality in a meaningful and relatively safe way.\r\n\r\n",
          "createdAt": "2020-11-18T11:41:31Z",
          "author": { "login": "intelcentre", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NDk2NTE0MQ==",
          "body": "@intelcentre I like the way you're putting it.\r\n\r\n@TylerRick I half-agree with what you're saying but I would also like the Svelte team to feature-gate very strictly because an influx of features is a surefire way to end up with another React or Angular and I am NOT saying that with a positive connotation.\r\n\r\n@Conduitry I have been working on a large Angular frontend for years now, and the more I work with component libraries like Angular Material and watch them try to add every feature under the sun to accommodate the myriad use cases developers, the less I like the library because I don't need any of that junk and it just adds overhead both in terms of bundle size and documentation. Thus, I have come to the conclusion that because user interfaces are so diverse, the best answer is often to just reinvent the wheel and make your own components from scratch which tailor to your own use case--and I believe Rich Harris mentioned the same belief in one of his talks. That said, rewriting components which are 90% similar all the time is a very pessimistic, conservative approach. Does the Svelte team have any ideas about how to make components more extensible without bloating Svelte?\r\n\r\nThe only way I could think of is a built-in method to expose the root elements of a component to library users, but I now realize I could already do this by binding internal component elements to exported variables and then component users can bind the component instance and access those variables.\r\n\r\nPlease offer your thoughts and close this issue if it is a dead-end. 😃 ",
          "createdAt": "2021-01-21T21:52:41Z",
          "author": { "login": "samclaus", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjgwNDgwMTY=",
    "body": "REPL is throwing an Error when trying to destroy components rendered via {#each}-block.\r\n\r\n**Logs**\r\n```\r\nError:\r\nmessage: \"Uncaught (in promise): Cannot read property 'c' of undefined\"\r\n```\r\n\r\n**To Reproduce**\r\nsee https://svelte.dev/repl/d19ba50bf67541bf833ac8f051f57d06?version=3.24.0\r\n\r\nIncreasing the number of 3d-objects via slider is ok, but trying to decrease it throws an error.\r\n\r\n**Expected behavior**\r\nComponents get destroyed. \r\n\r\n**Stacktraces**\r\n```\r\nstack: TypeError: Cannot read property 'c' of undefined\r\nat transition_out$1 (eval at handle_message (about:srcdoc:13:8), <anonymous>:429:4328)\r\nat Object.o (eval at handle_message (about:srcdoc:13:8), <anonymous>:429:953100)\r\nat transition_out (eval at handle_message (about:srcdoc:13:8), <anonymous>:221:19)\r\nat Object.outro [as o] (eval at handle_message (about:srcdoc:13:8), <anonymous>:6438:8)\r\nat transition_out (eval at handle_message (about:srcdoc:13:8), <anonymous>:221:19)\r\nat out (eval at handle_message (about:srcdoc:13:8), <anonymous>:6496:23)\r\nat Object.update [as p] (eval at handle_message (about:srcdoc:13:8), <anonymous>:6563:10)\r\nat update_slot (eval at handle_message (about:srcdoc:13:8), <anonymous>:429:1545)\r\nat Object.p (eval at handle_message (about:srcdoc:13:8), <anonymous>:429:983748)\r\nat update$1 (eval at handle_message (about:srcdoc:13:8), <anonymous>:429:3852)\r\n```\r\n\r\n**Information about your Svelte project:**\r\n- svelte.dev REPL\r\n- Svelte compiler version 3.24.0\r\n- Chrome 84.0.4147.89 (64-Bit)\r\n- Windows 10\r\n\r\n**Severity**\r\nNot severe.\r\n\r\n**Additional Comments**\r\nThe same project works locally (means not in a REPL environment).\r\n\r\nThank you!\r\n",
    "closedAt": "2020-07-29T19:42:42Z",
    "createdAt": "2020-07-29T18:25:16Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NTg2NDE4NQ==",
          "body": "I created a new simplified REPL and it works as expected, no errors:\r\nhttps://svelte.dev/repl/c8eea1d624af4195ad1a35f7e091f909?version=3.24.0\r\n\r\nso the failure must be somewhere else. Sorry! 😬",
          "createdAt": "2020-07-29T19:42:26Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjcyNzU2OTI=",
    "body": "**Describe the bug**\r\nThe code below produces the following error:\r\n\r\n`\r\nParseError: Unexpected block closing tag\r\n`\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\nParseError: Unexpected block closing tag\r\n    at error (c:\\path\\to\\project\\node_modules\\svelte\\src\\compiler\\utils\\error.ts:25:16)\r\n    at Parser$1.error (c:\\path\\to\\project\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:93:3)\r\n    at mustache (c:\\path\\to\\project\\node_modules\\svelte\\src\\compiler\\parse\\state\\mustache.ts:67:11)\r\n    at new Parser$1 (c:\\path\\to\\project\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:45:12)\r\n    at parse (c:\\path\\to\\project\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:208:17)\r\n    at compile (c:\\path\\to\\project\\node_modules\\svelte\\src\\compiler\\compile\\index.ts:79:14)\r\n    at c:\\path\\to\\project\\node_modules\\rollup-plugin-svelte\\index.js:252:22\r\n    at async Promise.all (index 17)\r\n    at async Promise.all (index 0)\r\n    at async Promise.all (index 0)\r\n\r\n</details>\r\n\r\n```html\r\n\r\n<script>\r\n\r\nlet fullScreen = true;\r\n\r\n</script>\r\n\r\n{#if fullScreen}\r\n\r\n<FullScreenContainer>\r\n\r\n{/if}\r\n\r\n    <div>a lot of content</div>\r\n\r\n{#if fullScreen}\r\n\r\n</FullScreenContainer>\r\n\r\n{/if}\r\n```\r\nA possible solution is to use an if and else but this will cause the content to be repeated, increasing the size and making maintenance difficult, eg:\r\n\r\n```html\r\n{#if fullScreen}\r\n\r\n<FullScreenContainer>\r\n\r\n    <div>a lot of content</div>\r\n\r\n</FullScreenContainer>\r\n\r\n{:else}\r\n\r\n    <div>a lot of content repeated</div>\r\n\r\n{/if}\r\n```\r\n\r\nThanks.",
    "closedAt": "2020-07-28T18:44:06Z",
    "createdAt": "2020-07-28T18:20:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NTIxMTcyNg==",
          "body": "This is by design, and isn't something we're interested in supporting, and it's not clear what supporting this would mean. The component needs to be able to get parsed into a tree, and a lone `<Component>` or `</Component>` doesn't mean anything.",
          "createdAt": "2020-07-28T18:44:05Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjY3NzM0OTQ=",
    "body": "I would like to apply animations and transitions as a component so that, it would apply to all the pages with similar UI based elements. \r\n\r\nInstead of applying them individually to the page or to the elements, I would like to create animations and transitions on the base of a CSS class. Thus, this would apply to cross all classes on all the pages.\r\n\r\nThanks,\r\nAtilla",
    "closedAt": "2020-07-28T14:23:50Z",
    "createdAt": "2020-07-28T05:09:55Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NTA3MTMzNQ==",
          "body": "Because you haven't followed our issue / proposal / enhancement template, it's almost impossible to understand what this is, what you're suggesting, or what problem you are encountering.",
          "createdAt": "2020-07-28T14:23:50Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjY2MTE2NTA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nA weakness of most XML-like syntaxes is that they don't support a good way to comment out attributes. This problem affects Svelte too. It can be frustrating when you quickly want to toggle some code off while debugging. It also makes it slightly more inconvenient to document what attributes do, although that's probably a secondary concern as it's easier to give such comments a legal placement.\r\n\r\n**Describe the solution you'd like**\r\nI would like Svelte to support comments in the body of start tags. The specific syntax doesn't matter so much, but I would probably expect JS-like comments:\r\n\r\n```html\r\n<div\r\n  // style=\"color: pink\"\r\n  /* style=\"\r\n    color: magenta;\r\n  \" */\r\n  style=\"color: purple\"\r\n>...</div>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nThere are no convenient workarounds that I can think of. Someone suggested prefixing the attribute name with an underscore. That works OK for plain HTML, but is not a practical solution in Svelte, as Svelte will still include potentially invalid JavaScript expressions in the attribute value, and try to set the whole thing as an attribute.\r\n\r\nYou can wrap the comment in a spread so the comment ends up inside JS expression, but that's very clunky:\r\n\r\n```html\r\n<div\r\n  {...{/* style=\"\r\n    color: magenta;\r\n  \" */}}\r\n>...</div>\r\n```\r\n\r\n**How important is this feature to you?**\r\nNot hugely, but it would be convenient.\r\n\r\n**Additional context**\r\nOne potential counter-argument is that Svelte should stick to what HTML does natively here; I'm not sure I agree since Svelte already has plenty of custom syntax around attributes.",
    "closedAt": "2020-07-27T22:43:40Z",
    "createdAt": "2020-07-27T22:01:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDY3NTU2OA==",
          "body": "This has come up before, although it looks like only in chat and not in an issue - https://discord.com/channels/457912077277855764/507200834837151754/650023325988290560 - I'm not going to copy and paste the whole huge discussion here, but there are a few reasons we don't want to do this.",
          "createdAt": "2020-07-27T22:43:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjYyMzAyNzg=",
    "body": "**Describe the bug**\r\nWhen running `npm run build` I'm getting this error:\r\n\r\n`[!] (plugin terser) SyntaxError: Unexpected token: operator (=)`\r\n\r\nThis is my package.json (I tried updating rollup-plugin-terser, it was already up-to-date).\r\n\r\n```json\r\n\"devDependencies\": {\r\n    \"@rollup/plugin-commonjs\": \"^12.0.0\",\r\n    \"@rollup/plugin-node-resolve\": \"^8.0.0\",\r\n    \"rollup\": \"^2.3.4\",\r\n    \"rollup-plugin-livereload\": \"^1.0.0\",\r\n    \"rollup-plugin-svelte\": \"^5.0.3\",\r\n    \"rollup-plugin-terser\": \"^5.1.2\",\r\n    \"svelte\": \"^3.24.0\"\r\n  },\r\n```\r\n\r\n**Logs**\r\n\r\n\r\n**To Reproduce**\r\nI'm trying to build a release, so just `npm run build`\r\n\r\nOS: Linux (amd 64bit)\r\nNode: 12.16.3\r\nNPM: 6.14.4\r\n\r\n**Expected behavior**\r\nThe production bundle.js would be generated.\r\n\r\n**Stacktraces**\r\n\r\n\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n```\r\n[!] (plugin terser) SyntaxError: Unexpected token: operator (=)\r\nSyntaxError: Unexpected token: operator (=)\r\n    at ee (/.../node_modules/terser/dist/bundle.min.js:1:19541)\r\n    at c (/.../node_modules/terser/dist/bundle.min.js:1:28244)\r\n    at l (/.../node_modules/terser/dist/bundle.min.js:1:28335)\r\n    at f (/.../node_modules/terser/dist/bundle.min.js:1:28388)\r\n    at Q (/.../node_modules/terser/dist/bundle.min.js:1:46240)\r\n    at $ (/.../node_modules/terser/dist/bundle.min.js:1:44804)\r\n    at q (/.../node_modules/terser/dist/bundle.min.js:1:44080)\r\n    at /.../node_modules/terser/dist/bundle.min.js:1:32175\r\n    at /.../node_modules/terser/dist/bundle.min.js:1:28976\r\n    at N (/.../node_modules/terser/dist/bundle.min.js:1:38503)\r\n```\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Arch Linux\r\n- Svelte 3.24.0\r\n- Rollup\r\n\r\n**Severity**\r\nAnnoying coming from Elm where build and dependencies are just not an issue ever.\r\n\r\n",
    "closedAt": "2020-07-27T15:38:19Z",
    "createdAt": "2020-07-27T11:44:40Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDM5MTE1Mw==",
          "body": "We need a reproduction, but presumably if you're getting a syntax error from Terser, you're using some syntax it doesn't support, and that's not something Svelte can do anything about.",
          "createdAt": "2020-07-27T13:18:38Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDM5NzA5Mg==",
          "body": "@Conduitry I cannot really have my code available. Any tips on how one should proceed to find what's this Terser might not like that the dev mode is not complaining about?\r\n\r\nThere's no meaningful error message, I suppose there might be a `=>` that's not supported somewhere, this is kind of a road block though having such a huge difference in dev / production compilation result.",
          "createdAt": "2020-07-27T13:29:27Z",
          "author": { "login": "dstpierre", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDQzNTIwNA==",
          "body": "@dstpierre a reproduction is a small, purpose built reproduction of your issue. You create it by trying to find out what the root cause of the error is (examine the indicated line in your bundled output) and trying to recreate just that part in a small app. We absolutely don't want to go digging through your source code, there isn't enough time :)\r\n\r\nLike Conduitry says, this is almost guaranteed to be a terser error, there are a few bits of more modern JS syntax that it hasn't yet caught up with, I ran into one the other day.\r\n\r\nI would suggest looking at your build output for `=` (yeah, it's going to be a wild ride) and seeing if you can spot any unusual syntax which might be tripping terser up.\r\n\r\nI might also suggest reviewing terser issues, to see if anybody else ran into this. Here's the one I raised: https://github.com/terser/terser/issues/761",
          "createdAt": "2020-07-27T14:36:40Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDQzOTU1OQ==",
          "body": "> this is kind of a road block though having such a huge difference in dev / production compilation result.\r\n\r\nThere is only a difference because your rollup config creates one, that has nothing to with Svelte. If you would like your development build to fail as well, then minify with terser in dev mode.\r\n\r\nAs Antony said, this is a terser error so there is little we can do about it, but without a reproduction we cannot even propose a solution.",
          "createdAt": "2020-07-27T14:43:27Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDQ3MTA2Mw==",
          "body": "Closing this as, without a reproduction, this is impossible to diagnose. And in any case, it is extremely unlikely that the Svelte compiler is producing invalid JS which Rollup inexplicably accepts and Terser rightfully balks at.",
          "createdAt": "2020-07-27T15:38:18Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjU3MTQ0OTE=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'd like to have typesafe event handlers, for this the type of the event has to be known beforehand.\r\n\r\n**Describe the solution you'd like**\r\nThe `createEventDispatcher` function being extended with a generic and a parameter. The parameter would restrict the handler to only handle one kind of event, where the `detail` field's type would be determined by the type of the generic.\r\n\r\nThe new type signature of `createEventDispatcher` would look like this:\r\n\r\n```ts\r\nexport declare function createEventDispatcher(): (type: string, detail?: any) => void;\r\nexport declare function createEventDispatcher<T>(type: string): (detail?: T) => void;\r\n```\r\n\r\n**Example usage**\r\n\r\nchild.svelte\r\n```svelte\r\n<script lang=\"ts\">\r\n  const fooDispatcher = createEventDispatcher<{ foo: string }>('foo');\r\n  fooDispatcher({ foo: 'hello' });\r\n</script>\r\n```\r\n\r\napp.svelte\r\n```svelte\r\n<script lang=\"ts\">\r\n  import Child from './child.svelte';\r\n\r\n  function fooHandler(foo: { foo: string }) {}\r\n  function barHandler(bar: { bar: string }) {}\r\n\r\n</script>\r\n<Child on:foo={fooHandler} />\r\n<Child on:foo={barHandler} /> <!-- Error, type mismatch! -->\r\n<Child on:foo={(foo) => console.log(foo.foo)} /> <!-- Inferred type, intellisense -->\r\n```\r\n\r\n**Possible problems**\r\n\r\nThe svelte compiler has to be sure that only one `createEventDispatcher` have been defined for any given `type`, to prevent redefing the dispatcher with a different type. (This is easier if eventDispatchers are only allowed to be created on the top level and as `const`, but this would be a breaking change)\r\n\r\nTypeScript can't protect against something like dispatching a malformed event through a regular `eventDispatcher`. To solve this either the untyped `createEventDispatcher()` would need to be deprecated, or the svelte compiler has to forbid the mixed usage of these.\r\n\r\n> Currently there is no way to export type definitions from components, so they have to be defined elsewhere and `import type`-d into the component. It's a different topic but would increase usability if the type of events could be imported from the component directly.\r\n\r\n**How important is this feature to you?**\r\nIt's important to provide type safety where it's possible.\r\n",
    "closedAt": "2020-09-02T12:17:07Z",
    "createdAt": "2020-07-26T05:48:58Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MjcxMTQ4OA==",
          "body": "I propose a different typing which would only change the typing but keep the implementation the same:\r\n\r\n```ts\r\nexport declare function createEventDispatcher<EventMap extends {} = any>()\r\n   : <EventKey extends Extract<keyof EventMap, string>>(type: EventKey, detail?: EventMap[EventKey]) => void;\r\n\r\n\r\nconst bla = createEventDispatcher();\r\nbla('anythingAllowedSinceNoEventMapTypingGiven', true);\r\n\r\nconst bla2 = createEventDispatcher<{click: boolean}>();\r\nbla2('qwd', true); // <-- error, \"qwd\" not assignable to type \"click\"\r\nbla2('click', ''); // <-- error, string not assignable to type boolean\r\n```",
          "createdAt": "2020-08-12T08:05:47Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzI5MDE0Mw==",
          "body": "But does this ensure in other components that when I listen to `click` I get a boolean? In **other components** the return type of the click event handlers has to be `boolean`? ",
          "createdAt": "2020-08-13T06:32:21Z",
          "author": { "login": "AlexAegis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzI5OTQ4OA==",
          "body": "This is an issue for the `language-tools` repo, this will not be type-checked if we don't add support for that in the `language-tools` repo. This also applies to your proposal.",
          "createdAt": "2020-08-13T06:58:47Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4NTY5Mzk4NA==",
          "body": "Closing since the intent of this issue was to get type-safe event-handling. Dispatching in a type safe way within the component was added with the enhanced typings. Getting IDE support for typed event dispatchers on _other components_ will be work to do in the language-tools.",
          "createdAt": "2020-09-02T12:17:07Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4NzI2NQ==",
          "body": "Svelte 3.25.0 now has `createEventDispatcher` with the types @dummdidumm mentioned above.",
          "createdAt": "2020-09-10T20:02:59Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTIyODM4MQ==",
          "body": "Could you reopen this? This is not what I described in this issue. The issue's title states \"Typed event dispatcher **and** event handlers\", not just event dispatchers\r\n\r\nThese new typings only restrict the events that have to be dispatched. \r\n\r\nTake a look at what I described in the `Example usage` section of the issue, the important part is that on the recieving end I know what type of event can come out so the **event handler is correct**. Right now on `3.25.0` it's still `CustomEvent<any>`. In the example I denoted that `barHandler` in that case should cause an error, that is not happening right now.\r\n\r\nAlthough I like the idea that you can define the types of the events per event in one type, I think my suggestion is needed for of the second part and thats why this issue is opened in this repository. The reason being that even if I were to bring the type of the event handler myself to the recieving end I can't extract correct types from this. **Unless I define it explicitly, but inference is preferred.**\r\n\r\n```ts\r\n\tconst eh = createEventDispatcher<{ hello: { world: number }, foo: {bar: string} }>();\r\n\teh('hello', { world: 12 });\r\n\teh('foo', { bar: '12' });\r\n\r\n\tfunction handle(a: Parameters<typeof eh>[1]) {\r\n\t\t//a: {\r\n\t\t//\tworld: number;\r\n\t\t//} | {\r\n\t\t//\tbar: string;\r\n\t\t//} | undefined\r\n\t}\r\n```\r\n\r\nEven if I could define multiple event dispatchers (Technically I think I can) that defeats the purpose of being able to define the types of multiple events at once.\r\n",
          "createdAt": "2020-09-11T17:44:53Z",
          "author": { "login": "AlexAegis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTIzMDQ5MA==",
          "body": "I stated above that this is something that needs to be handled in language tools. We will add support for it soon. That work can be tracked here https://github.com/sveltejs/language-tools/issues/424 .",
          "createdAt": "2020-09-11T17:49:39Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MTIzMzk0MQ==",
          "body": "I think it can work out with this kind of event dispatcher generics if it's possible in typescript to union the generics of all event dispatchers defined (In the case of svelte)",
          "createdAt": "2020-09-11T17:57:15Z",
          "author": { "login": "AlexAegis", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg2MDA3ODI1NA==",
          "body": "Here are some more details for people searching how to use the new createEventDispatcher:\r\n\r\n- Event with no details:\r\ncreateEventDispatcher<{click:void}>()\r\n\r\n- Consuming events with typed details:\r\ncreateEventDispatcher<{click:number}>()\r\non:click={(event:CompleteEvent<number>)=> { console.log(event.detail) } } //event.detail is typed to number here.\r\n\r\n",
          "createdAt": "2021-06-12T16:43:22Z",
          "author": { "login": "doom-goober", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjU2MzE2NTg=",
    "body": "The recent blog post, [Svelte <3 TypeScript](https://svelte.dev/blog/svelte-and-typescript), breaks the RSS feed because the `<` isn't sanitised, it produces this:\r\n\r\n    <title>Svelte<3 TypeScript</title>\r\n\r\nThe offending lines are here, it looks like the `<description>` tag needs sanitising as well:\r\n\r\nhttps://github.com/sveltejs/v2.svelte.dev/blob/b21e7b90ad7f2d62556eba660314e7238a22ce4a/src/routes/blog/rss.xml.js#L25-L27",
    "closedAt": "2020-07-28T18:48:17Z",
    "createdAt": "2020-07-25T17:46:50Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg4NTUyNQ==",
          "body": "Moving this over to the main Svelte repo, where the current site lives.\r\n\r\nThe relevant code is at https://github.com/sveltejs/svelte/blob/999b1f4cdb37f7d529d71a9f35de44b3fb90bfb4/site/src/routes/blog/rss.xml.js - each of these strings we're using here need to be escaped for HTML.",
          "createdAt": "2020-07-25T18:20:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjU2MTk4NTI=",
    "body": "**Describe the bug**\r\nActions appear to behave differently when in an #each block that is hidden/shown based on a wrapping #if block\r\n\r\n**Logs**\r\nNull is not an object\r\n\r\n**To Reproduce**\r\nOn this repl clicking toggle yields a console.log with 2 nulls\r\nhttps://svelte.dev/repl/ffa3f17f7ee34218954482b2f03a62ae?version=3.24.0\r\n\r\nIf i replace the #each with direct array access then clicking the toggle logs 2 elements which is correct behaviour\r\nhttps://svelte.dev/repl/8c93c86f47894866b28a5ac806c63c27?version=3.24.0\r\n\r\n**Expected behavior**\r\nI would expect both repls to function the same way\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Safari 13.1, Chrome 84\r\n\r\n- Your operating system: macOS 10.15.6\r\n\r\n- Svelte version: 3.24.0\r\n\r\n- Whether your project uses Webpack or Rollup: Rollup\r\n\r\n**Severity**\r\nShort term it's simply annoying but longer term (few weeks) it's going to be much more of an issue as the array data is pulled from an API in my project and currently i need to code the array access.\r\n\r\nNote: the more honest and specific you are here the more we will take you seriously.\r\n\r\n**Additional context**\r\nThanks for reading!\r\n",
    "closedAt": "2020-07-28T14:34:42Z",
    "createdAt": "2020-07-25T17:02:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzk1MTQxMw==",
          "body": "I don't think this has anything to do with being inside an `#each` loop.\r\n\r\nThe reason null is logged is because the code from the action runs before the element is inserted into the dom, so the element doesn't exist at the point you try to query it. I do notice that [the docs](https://svelte.dev/docs#use_action) state that the code runs *after* the node has been mounted in the dom, it's possible that there may need to be a docs improvement here?\r\n\r\nTo demonstrate, adding a 1ms delay to the loop before your query fixes it.\r\n\r\nhttps://svelte.dev/repl/a731a7cfcded441fa3ff676af7874b58?version=3.24.0\r\n\r\nIf you want to reactively act upon the value of the store changing, you should use `update` as per the docs. https://svelte.dev/docs#use_action\r\n\r\nHowever, and it might just be that your example is contrived, but the `node` parameter passed to the action is the element you're trying to query via `querySelector` - you don't need to pass an ID in as a parameter:\r\n\r\nhttps://svelte.dev/repl/47229f7c515c4356ae21e05824635abb?version=3.24.0",
          "createdAt": "2020-07-26T07:29:05Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzk4MDc3Mw==",
          "body": "Thanks for the quick response.\r\n\r\nIt sounds like what i have run into is an edge case where i'm trying to log an element that has yet to be rendered (as it exists further down the page).\r\n\r\nI've gone with putting it in the update function without watching anything which seems to work. (setTimeout works too)\r\n\r\nMy example is slightly contrived yes, but it's worth noting it's not the same element, it's an element further down the page. In my real project it's a modal the opens with anchored sections (not sure if that helps understand what i was doing to run into this)\r\n\r\nThanks for your help @antony !",
          "createdAt": "2020-07-26T12:16:54Z",
          "author": { "login": "matt3224", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjU2MDYyMDU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI'd like to be able to import the transition interfaces defined in https://github.com/sveltejs/svelte/blob/master/src/runtime/transition/index.ts\r\n\r\nThis would be useful, in my case, for creating transitions which use the same parameters as one of the existing transitions.\r\n\r\nI was creating a new sliding animation which happened to use the same parameters defined in the [existing SlideParams interface](https://github.com/sveltejs/svelte/blob/master/src/runtime/transition/index.ts#L97). My solution was to simply re-define this interface in my source, which is inelegant:\r\n\r\n```ts\r\nimport { cubicOut } from \"svelte/easing\";\r\nimport { TransitionConfig } from \"svelte/types/runtime/transition\";\r\n\r\ntype EasingFunction = (time: number) => number;\r\n\r\ninterface SlideParams {\r\n    delay?: number;\r\n    duration?: number;\r\n    easing?: EasingFunction;\r\n}\r\n\r\nexport function my_custom_sliding_transition(\r\n    node: Element,\r\n    { delay = 0, duration = 400, easing = cubicOut }: SlideParams,\r\n): TransitionConfig {\r\n    //...\r\n}\r\n```\r\n\r\nIdeal:\r\n\r\n```ts\r\nimport { cubicOut } from \"svelte/easing\";\r\nimport {\r\n    TransitionConfig,\r\n    SlideParams,\r\n    EasingFunction\r\n} from \"svelte/types/runtime/transition\";\r\n\r\nexport function my_custom_sliding_transition(\r\n    node: Element,\r\n    { delay = 0, duration = 400, easing = cubicOut }: SlideParams,\r\n): TransitionConfig {\r\n    //...\r\n}\r\n```\r\n\r\n\r\n**Describe the solution you'd like**\r\nA isolution would be to simply prefix the existing interfaces with `export`.\r\n\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**How important is this feature to you?**\r\nIt has no functional purpose so it is not very important, it would simply make code more elegant, and avoid dupplicating code.\r\n\r\n**Additional context**\r\nI can create the merge request myself, but I'd rather wait too see if I missed something stupid, which solves my problem, before creating it.\r\n\r\n\r\n",
    "closedAt": "2021-03-24T14:51:24Z",
    "createdAt": "2020-07-25T15:39:11Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzE1ODc1OA==",
          "body": "I've needed this once too. Had to look at the source code to figure out types. I'm making a PR to change this.",
          "createdAt": "2020-07-31T14:49:03Z",
          "author": { "login": "umanghome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzE2MzEyOA==",
          "body": "Perfect!",
          "createdAt": "2020-07-31T14:56:37Z",
          "author": { "login": "Kruhlmann", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjU2MDUzMTk=",
    "body": "When using RxJS observables with the `await` block the first block and the error block never renders.\r\nIt renders: `undefined` -> `0` -> `1` -> `2`\r\n\r\nUsing [`svelte-observable`](https://github.com/timhall/svelte-observable) it works as expected\r\nand renders: `Loading...` -> `0` -> `1` -> `2` -> `Error`\r\n\r\napp.svelte\r\n```svelte\r\n<script>\r\n\timport { interval, Subject } from 'rxjs';\r\n\timport { tap } from 'rxjs/operators';\r\n\timport { onMount } from 'svelte';\r\n\timport { observe } from 'svelte-observable';\r\n\r\n\tconst subject = new Subject();\r\n\tconst o1$ = subject.pipe(\r\n\t\ttap((i) => {\r\n\t\t\tif (i > 2) {\r\n\t\t\t\tthrow new Error('O Error');\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n\tconst o2$ = observe(o1$);\r\n\r\n\tconst p1 = new Promise((res) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tres('Promise 1');\r\n\t\t}, 500);\r\n\t});\r\n\r\n\tconst p2 = new Promise((res, rej) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\trej('Promise 2 error');\r\n\t\t}, 700);\r\n\t});\r\n\r\n\tonMount(() => {\r\n\t\tinterval(500).subscribe((i) => {\r\n\t\t\tsubject.next(i);\r\n\t\t})\r\n\t});\r\n</script>\r\n\r\n<h3>Observable, should emit thrice then error</h3>\r\n{#await $o1$}\r\n\tO1 Loading...\r\n{:then v}\r\n\tO1 Value: {v}\r\n{:catch e}\r\n\tO1 Error: {e}\r\n{/await}\r\n\r\n<h3>Observable using svelte-observable, will emit thrice then error</h3>\r\n{#await $o2$}\r\n\tO2 Loading...\r\n{:then v}\r\n\tO2 Value: {v}\r\n{:catch e}\r\n\tO2 Error: {e}\r\n{/await}\r\n\r\n<h3>Promise 1, will emit</h3>\r\n\r\n{#await p1}\r\n\tP1 Loading...\r\n{:then v}\r\n\tP1 Value: {v}\r\n{:catch e}\r\n\tP1 Error: {e}\r\n{/await}\r\n\r\n<h3>Promise 2, will error out</h3>\r\n{#await p2}\r\n\tP2 Loading...\r\n{:then v}\r\n\tP2 Value: {v}\r\n{:catch e}\r\n\tP2 Error: {e}\r\n{/await}\r\n```\r\n\r\nNode 14\r\nChrome 84\r\n\r\n```json\r\n\t\"dependencies\": {\r\n\t\t\"rxjs\": \"6.6.0\",\r\n\t\t\"svelte\": \"3.24.0\",\r\n\t\t\"svelte-observable\": \"0.4.0\"\r\n\t},\r\n\t\"devDependencies\": {\r\n\t\t\"rollup\": \"2.23.0\",\r\n\t},\r\n```",
    "closedAt": "2020-08-03T00:01:56Z",
    "createdAt": "2020-07-25T15:33:36Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzk1MTQwNA==",
          "body": "That you never see the catch block is \"works as designed\" I think. Technically you can `await` anything but only if it's a promise, you will get the `catch` behavior. Showing \"loading\" while undefined and `then` should work though.",
          "createdAt": "2020-07-26T07:28:58Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzc0MjUwNg==",
          "body": "I believe `{#await}` wraps its argument in `Promise.resolve()` so that it also works with regular values, but yeah by design it doesn't work with whatever interface RxJS exposes. Only store autosubscription interfaces with that, and in a limited way. If there's something `svelte-observable` ought to be doing differently, you can open an issue in the project, as it's not an official library.",
          "createdAt": "2020-08-03T00:01:56Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjU1NjEyMjU=",
    "body": "**Describe the bug**\r\nSvelte tries to optimize `style` attributes to use `node.style.setProperty(...)` instead of `node.setAttribute(\"style\", ...)` in certain circumstances. The syntax makes it look like string interpolation, so you would expect it to always have the same result as interpolating the string and setting it as a regular attribute. But the optimization relies on some undocumented assumptions about how you would use these dynamic values, and breaks in some cases.\r\n\r\n**To Reproduce**\r\nHere is an example of some cases that breaks when using Svelte's curly brace syntax, but works with the corresponding JS string interpolation:\r\nhttps://svelte.dev/repl/9d64d75662a04f049b7724cfe38bca73?version=3.24.0\r\n\r\n**Expected behavior**\r\nGiven the lack of documentation or warnings, I simply expect the styles not to break, regardless of how I do the string interpolation.\r\n\r\nAs an acceptable alternative, the behavior could be documented, and compiling in `dev` mode could warn when the optimization fails.\r\n\r\n**Severity**\r\nIt's probably a niche case, and there are a variety of workarounds. Still, the current behavior could be very confusing and should probably documented.",
    "closedAt": null,
    "createdAt": "2020-07-25T10:32:22Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg0MjI0MQ==",
          "body": "Another option would be to make the optimization more explicit by introducing a `style:` directive, following the pattern of the `class:` directive:\r\n\r\n```\r\n<h1 style:border={string}>...</h1>\r\n```\r\n",
          "createdAt": "2020-07-25T11:01:18Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg1MTAwNA==",
          "body": "Something like this issue did come up in the discussion on #455 but it was deemed not worth the worry, and this optimization has been in place for nearly three years (via #810), and I think this is the first time I've heard about anyone saying they were trying to do something like this, so it does indeed seem pretty niche, and I think the \"don't worry about it\" decision has been more or less borne out.\r\n\r\nI'm going to label this as a documentation issue. We've been pushing people for a long time to use the `style=\"\"` syntax, since it's optimized, so we don't want to suddenly stop optimizing it (and make everyone's compiled code slower) and implement a new syntax solely for the purpose of regaining that optimization.",
          "createdAt": "2020-07-25T12:38:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg1MTI5OA==",
          "body": "Just to jump on this, do you think it would be possible to apply the same optimisation to:\r\n\r\n```\r\n<div style=\"{prop}: {value}\" />\r\n```\r\n\r\nIt is definitely possible at runtime to use (`set_style(div, prop, value)`) and it _feels_ like this is parsable if we add the same constraints for the name as for the value.\r\n\r\nThoughts?",
          "createdAt": "2020-07-25T12:41:45Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg1MTM1OQ==",
          "body": "I raise this due to the inconsistency more than anything, if we double down on this we could optimise further.\r\n\r\nEdit: I also appreciate that this is a different issue.",
          "createdAt": "2020-07-25T12:42:28Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg1ODE5MA==",
          "body": "> We've been pushing people for a long time to use the `style=\"\"` syntax, since it's optimized, so we don't want to suddenly stop optimizing it (and make everyone's compiled code slower) and implement a new syntax solely for the purpose of regaining that optimization.\r\n\r\nI briefly looked through the documentation to see where `style` might have been pushed as optimized, and the main thing I found was some examples of `tweened` stores used to animate a CSS property.\r\n\r\nI can see how it would be unfortunate if the performance there was lost for existing code, but I would still argue that the current API is flawed, and that there would be merit to making `style` consistent with `class`. Existing code would continue to work with reduced performance, and would usually be trivial to refactor:\r\n\r\n```diff\r\n   <div\r\n-   style=\"transform: translate(0,{-y * layer / (layers.length - 1)}px)\"\r\n+   style:transform=\"translate(0,{-y * layer / (layers.length - 1)}px)\"\r\n   >\r\n```\r\n\r\nI'm not going to die on this hill, but another problem I've run into with the current syntax is that styles are always deoptimized if you try to mix blocks of CSS with individual values. This can be very useful to compose dynamic styles, and is a common pattern in CSS-in-JS. As a [slightly fictitious example](https://svelte.dev/repl/9e616177c80046b5aed9055160fbc716?version=3.24.0):\r\n\r\n```html\r\n<script>\r\n  import {tweened} from 'svelte/motion';\r\n  import {buttonThemeStore} from './theme-stores.js';\r\n\r\n  const width = tweened(50);\r\n</script>\r\n\r\n<button\r\n  style=\"\r\n    {$buttonThemeStore};\r\n    width: {$width}px;\r\n  \"\r\n>\r\n  ...\r\n</button>\r\n```\r\n\r\nThe width is not optimized to use `.style.setProperty` here, and as far as I can see there's no way to make that happen. With a style directive that wouldn't be a problem:\r\n\r\n```diff\r\n  <button\r\n    style=\"\r\n      {$buttonThemeStore};\r\n-     width: {$width}px;\r\n    \"\r\n+   style:width=\"{$width}px\"\r\n  >\r\n```",
          "createdAt": "2020-07-25T13:55:04Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjU1MzY3Mjc=",
    "body": "Recently, I tried to add types to the function `get_store_value` since, I often use it outside of svelte components in .ts files. During implementation, I ran in to a circular dependency issue as explained here: https://github.com/sveltejs/svelte/pull/5194#issuecomment-663761923\r\nThe author also describes a proper way of solving this:\r\n\r\n> One way to go around this could be reordering the declarations within /store:\r\n>\r\n>   1. Move all the types and interfaces to a file store/types.ts\r\n>   2. Move all the functions to store/functions.ts\r\n>   3. Edit store/index.ts to preserve the same public API.\r\n\r\nI would like to discuss this though before starting an implementation since this seems to be a rather big change.",
    "closedAt": "2020-07-25T07:36:25Z",
    "createdAt": "2020-07-25T07:35:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzgyMzQ1MA==",
          "body": "Sorry, I accidentally hit the create button :sweat_smile: ",
          "createdAt": "2020-07-25T07:36:57Z",
          "author": { "login": "sphinxc0re", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzgyNDEwNQ==",
          "body": "@antony could you please reopen?",
          "createdAt": "2020-07-25T07:44:09Z",
          "author": { "login": "sphinxc0re", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzgyNTE3OA==",
          "body": "Heya,\n\nGithub issues isn't the ideal place for a discussion. Come and chat to us on #internals about implementation if you need some guidance.",
          "createdAt": "2020-07-25T07:55:51Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjUzOTIzNzU=",
    "body": "I cannot find any offical guidelines on using the Svelte logo as well as forking and publishing the svelte.dev website.\r\nAre there any?\r\n\r\nWhy I'm asking:\r\n\r\nI have recently published [svelthree](https://www.npmjs.com/package/), a Svelte components library utilizing three.js. I've forked svelte.dev for [svelthree.dev](https://svelthree.dev), so it does look pretty similar to svelte.dev, even though I've made some changes.\r\n\r\n### The Logo\r\n\r\n![svelthree-logo_too_similar_deprecated](https://user-images.githubusercontent.com/3778969/88434702-05740480-ce01-11ea-89b2-5bc09c5c21d5.png)\r\n\r\nI took the official Svelte logo, inverted the colors and added a black outline which should kind of associate the link to three.js, which actually has no official logo, but they do use the black triangle on Twitter, it just doesn't seem to be very offical. Beside that I used the three.js font for the logotype, so I have something from Svelte and something from three.js covered.\r\n\r\n\r\nMy questions: \r\n1. Is Svelte logo usage generally allowed?\r\n2. Are there some official guidelines concerning Logo-usage? Here [sveltejs/branding](https://github.com/sveltejs/branding) it's just stated: \"Logos etc for Svelte and related projects\" and I'm not sure what this exactly means. Does \"related projects\" mean only official Svelte projects or also third party Svelte related projects?\r\n3. Am I allowed to use the Svelte logo the way I did it? (which would of course be \"no\" if 1. is \"no\")\r\n\r\nIf you wonder why I didn't just design a completely different logo:\r\n1. I like the Svelte logo and identify svelthree to at least 50% with the technology itself.\r\n2. I don't see svelthree qualified enough for a visually completely detached branding (but may be wrong on this). If you look deeper what svelthree does, I should actually put both logos next to each other (if three.js had an official one).\r\n\r\n    Svelthree doesn't really invent something new:\r\n\r\n    \"_Svelthree is a  components library for declarative construction of reactive and reusable  scene graphs utilizing three.js source in a slightly modified version._\"\r\n\r\n    It's basically Svelte + three.js or three.js + Svelte + \"a bit\" a of my custom logic on top. That's why I personally don't have any issues with not being \"more special\", although I'm generally a creative person with a strong impulse to be original.\r\n3. Good logo design is not easy and takes a lot of time and I've invested that time in developing the library instead.\r\n\r\n\r\n### The Website Design\r\n\r\n![svelthree_too_similar](https://user-images.githubusercontent.com/3778969/88434274-2720bc00-ce00-11ea-81d4-b66ff3c91591.png)\r\n\r\n\r\nI like the [svelte.dev](svelte.dev) website, especially it's reduced, not distracting design and of course REPL. I actually need a website just like that, where I can publish interactive usage examples and let people do some experiments or just try svelthree before starting a project. I was sure the svelte.dev website was open source, but I'm not sure anymore (?):\r\n\r\n1. Is the svelte.dev website really open source?\r\n    - The \"svelte\" sub folder doesn't contain a LICENCE only the parent \"svelte\" folder\r\n    - The README.md file describes running the website locally, but not deploying it, nevertheless there's all you need to deploy it by yourself. Everything I did / changed is public and MIT:\r\n[svelthree-website](https://github.com/vatro/svelthree-website)\r\n[svelthree-site-kit](https://github.com/vatro/svelthree-site-kit)\r\n\r\n### Svelte discord feedback\r\n\r\nI've asked for some feedback in the Svelte discord concerning the looks of svelthree.dev and after a while got a pretty clear answer that several (many? most? all?) maintainers don't like this being done like I did, and that the website doesn't differentiate enough from svelte.dev, so **I've decided to asap change the logo, further customize the layout, the fonts and the colors** in hope it'll then be different enough. Good that I've first asked! 😬\r\n\r\n\r\n### Proposal (if no guidelines yet exist)\r\n\r\n1. Adding clear official guidelines concerning Svelte logo usage.\r\n2. Adding clear official guidelines (licence?) concerning forking the svelte.dev website. If it is allowed to fork it, especially concerning the design of the website and the extent of visual modifications that have to be applied on the fork before publishing.\r\n\r\nThank you!",
    "closedAt": "2020-07-28T14:35:53Z",
    "createdAt": "2020-07-24T20:12:41Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzcyODc1OQ==",
          "body": "I think the overarching principle here is that any site should look visually distinctive enough from the Svelte site that it won't confuse people into thinking that it's an official Svelte project run by the Svelte maintainers.\r\n\r\nIf I went to your site before having read this ticket I could very well find myself thinking that it was an official Svelte project due to the substantial similarities between the sites.\r\n\r\nOpen source licenses generally give the right to utilize code without facing claims for copyright infringement. They do not grant the usage of trademarks. E.g. I can copy every line of code of the Kubernetes project, but can only use their logo in accordance with their branding guidelines which state:\r\n\r\n> the use of these marks must avoid confusion regarding The Linux Foundation’s association with the product. The use of the mark cannot imply that The Linux Foundation or its projects are sponsoring or endorsing the product\r\n\r\nSvelte should probably provide similar guidelines on https://github.com/sveltejs/branding as you've suggested\r\n\r\nI think a similar principle would apply here. You can copy all the site's code and no one will mind copy/pasted blocks of code, but that's separate issue from trademark, where the site license doesn't apply.\r\n\r\nWhen it comes to issues of trademark, there's no hard and fast rule such as some exact number of pixels need to be different, but there's a general set of principles that inform:\r\n\r\n* Degree of similarity between designs\r\n* Similarity of the goods and services\r\n* Evidence of actual confusion\r\n* User sophistication\r\n\r\nHere there's substantial similarity between designs, both sites are promoting Svelte libraries, multiple people have indicated that they would be confused, and some users may be new to the Svelte ecosystem and unfamiliar with which projects are official. That's probably enough to say that the sites are too similar in this case\r\n\r\nDisclaimer: While I've spent a great many hours of my life I'd like to get back talking to lawyers about these issues, I am not a lawyer and this is not legal advice :wink: ",
          "createdAt": "2020-07-24T20:50:56Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzc0MDI5NQ==",
          "body": "I sent a PR to the branding repo to clarify things as you suggested. I'm not a maintainer, so don't speak for the project, btw, so I can't say if the guidelines I've proposed will be accepted. But I've invested a lot of time in trying to understand these issues in the past and thought I'd try to share what I know in this area\r\n\r\nI'm sure it's frustrating to have invested the time and now go back and update the site, but thanks for asking about it and agreeing to put in some changes based on the feedback!",
          "createdAt": "2020-07-24T21:23:41Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzc1MjM2NQ==",
          "body": "Very cool. Thank you!\r\n\r\nActually, being also a graphics designer, I think I changed the logo / logotype far enough. I should have deleted the S in the background which is very prominent and most connecting visual element and should have been deleted anyway. So I was maybe a bit too early with showing the website to the community. 😕\r\n\r\nI would still like to keep the logo as it really connects the two technologies I'm using in svelthree: Svelte with the S and three.js through the black Roboto Mono font. It's not about the project being endorsed, I just think it's really ok like that and it cannot be easily confused with the official logo, associated yes, but that's intended. Especially if I would only use it together with the logotype or just the logotype alone.\r\n\r\nI'm on designing something else already, which will also be cool, but it's visually not so closely bound to Svelte or three.js, and I feel that's a pitty, it even makes me a bit sad to be honest. When you invest so much time into mastering two different technologies and finally bring them together, you do identify yourself and \"the product\" with them.",
          "createdAt": "2020-07-24T22:04:09Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg2OTQ3Ng==",
          "body": "Yeah, it's a balance but I think finding a more unique design is the right call here. \r\n\r\nThe sapper site is a good example of the svelte design brand being used for secondary sites, https://sapper.svelte.dev - I don't think it'd be obvious to someone looking at your site as designed that it didn't come form the svelte team. \r\n\r\nIt's a cool project, you should have a cool 3d project as the background!",
          "createdAt": "2020-07-25T15:43:45Z",
          "author": { "login": "orta", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDAyMjA1NQ==",
          "body": "> It's a cool project, you should have a cool 3d project as the background!\r\n\r\nThank you! :)\r\n\r\nThe initial disappointment about not being allowed to use the Svelte \"S\" logo is meanwhile gone because I think the new logo visualizes even better what svelthree is doing (wrapping / overriding three.js, powering it with Svelte, but also leaving it as it is).\r\n\r\nI also understand the website was too lookalike, maybe if I initially removed the \"S\" in the background it wouldn't have caused the maintainers to be that negative about it. But I hope it's all cool now. Myself and several other people I asked think the new logo is good and it suites the project even better, because it has more visual linkage to three.js than the old one.",
          "createdAt": "2020-07-26T18:11:34Z",
          "author": { "login": "vatro", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NTA3ODUxMQ==",
          "body": "Thanks @benmccann for your fix via https://github.com/sveltejs/branding/pull/4",
          "createdAt": "2020-07-28T14:36:23Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjUxODE2OTM=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nLooks like the `<title>` element is [barred from having any attributes] (https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/nodes/Title.ts). [According to MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title#Attributes), it can host any global attribute. It was a bit of a surprise that it had special treatment.\r\n\r\nThis prevents adding to it an `aria-live` attribute that would allow its announcement by assistive technology (provided it's unhidden from the accessibility tree, see experiment there: https://romaricpascal.is/posts/title-element-aria-live/).\r\n\r\n**Describe the solution you'd like**\r\nAt the moment, it looks like the attribute can be set through an `onMount()` call:\r\n\r\n```js\r\n  onMount(() => {\r\n    document.head.querySelector('title').setAttribute('aria-live', 'assertive');\r\n  });\r\n```\r\n\r\nbut it'd be great to just be able to do:\r\n\r\n```html\r\n<svelte:head>\r\n  <title aria-live=\"assertive\">{$title}</title>\r\n</svelte:head>\r\n```\r\n\r\nThis would also make updating whether the title should be announced lighter, especially if the value comes from a store:\r\n\r\n```html\r\n<svelte:head>\r\n  <title aria-live={$live}>{$title}</title>\r\n</svelte:head>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nUsing `onMount` provides a workable workaround. There's just a bit of logistics if attributes need to come from a store or multiple attributes need setting (but in my use-case, that would only be `aria-live`).\r\n\r\n**How important is this feature to you?**\r\nIt's not a dealbreaker that it's not there. It just feels less idiomatic to have all that boilerplate around. It was also confusing to have that specific tag not work as a regular tag (maybe it's a matter of documentation, though).",
    "closedAt": null,
    "createdAt": "2020-07-24T13:48:47Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzc1MDA3MA==",
          "body": "I've never seen such a pattern before but, as you point out, it seems to be valid HTML. That change was introduced in [this PR](https://github.com/sveltejs/svelte/commit/9031c1690588f7dfe6633b876d025814d94ad6c9#diff-c9908ba4565df074928a36b53be55786) but there's no apparent reason as to why. I can open a PR removing that but I'm afraid I'm missing something here.",
          "createdAt": "2020-07-24T21:56:21Z",
          "author": { "login": "caroso1222", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzM4MjY4Nw==",
          "body": "It makes sense to remove the validation since the spec allows global attributes. https://html.spec.whatwg.org/#the-title-element",
          "createdAt": "2020-07-31T21:35:18Z",
          "author": { "login": "umanghome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzUxMzIzMw==",
          "body": "I talked about this on Discord and it seems like the maintainers are not willing to remove the validation. The argument being that the article posted by op is an experiment more than good practice. I too consider the validation to be irrelevant given that it should be allowed, according to the spec.",
          "createdAt": "2020-08-01T10:55:40Z",
          "author": { "login": "caroso1222", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjUxNDQwMDQ=",
    "body": "**Describe the bug**\r\nThe conditional attribute functionality seems to be broken for buttons when it comes to the value attribute.\r\n\r\nButton elements render with a value attribute even if the value is null or undefined.\r\n\r\n**To Reproduce**\r\nPlease consider the following example:\r\nhttps://svelte.dev/repl/dc5009fbb5a242b583de400e0df3c99b?version=3.24.0\r\n\r\nPlease inspect the first button and notice that it contains a value attribute and the attribute is set to `null`\r\n\r\n**Expected behavior**\r\nThe button should not have a value attribute because its value is `null`. The same should go for `undefined`.\r\n\r\nThis does not match the conditional functionality as explained by Conduitry in the following comment:  \r\nhttps://github.com/sveltejs/svelte/issues/259#issuecomment-582112526\r\n\r\n**Information about your Svelte project:**\r\n- Svelte version (3.24.0 REPL)\r\n\r\n**Severity**\r\nAnnoying\r\n\r\n**Additional context**\r\nIt is my understanding that the conditional behaviour only applies to valid html element attributes. Value is a valid attribute, so I suspect this is a simple oversight:\r\n\r\nhttps://html.spec.whatwg.org/multipage/form-elements.html#the-button-element\r\n",
    "closedAt": null,
    "createdAt": "2020-07-24T12:44:57Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzYyODY4OQ==",
          "body": "Seems related to #4467",
          "createdAt": "2020-07-24T16:41:33Z",
          "author": { "login": "mindrones", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjUxMjI1MTk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nShort of being able to have OO-inheritence or classes in components, I'm curious about an approach to sharing default props across components. At the moment I do something like:\r\n\r\n```\r\n// DefaultProps.js\r\n\r\nexport default = {\r\n    width: \"auto\",\r\n    height: \"auto\",\r\n    name: \"Default\"\r\n}\r\n```\r\n\r\n```\r\n// Example.svelte\r\n\r\nimport DefaultProps from 'DefaultProps.js'\r\nexport let props = {\r\n    name: \"Example\",\r\n    foo: \"bar\"\r\n};\r\nprops = { ...DefaultProps, ...props}\r\n\r\n```\r\n\r\nWhich visually is not so nice, ie:\r\n\r\n```\r\n<Example props={ { name: \"A Different Name\", width: \"100px\" } } /> \r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nSomething akin to:\r\n\r\n```\r\nexport { ... DefaultProps, { name: \"Example\", foo: \"bar\" } };\r\n```\r\n\r\nAlthough I understand this might break with the compiler.\r\n\r\n**How important is this feature to you?**\r\n\r\nI want my code to be purdy.\r\n",
    "closedAt": "2020-07-24T20:25:47Z",
    "createdAt": "2020-07-24T12:02:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzU2ODc5OA==",
          "body": "Hi, I'm not sure I understand the proposed solution. What do you mean with:\r\n\r\n```\r\nexport { ... DefaultProps, { name: \"Example\", foo: \"bar\" } };\r\n```\r\n?",
          "createdAt": "2020-07-24T14:33:21Z",
          "author": { "login": "mindrones", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzcxOTUzNQ==",
          "body": "We need to work within the syntactical restrictions of JavaScript, and `export { ... DefaultProps, { name: \"Example\", foo: \"bar\" } };` is not valid syntax.\r\n\r\nIf this is a general question about how to achieve this sort of thing in Svelte today, GitHub isn't the correct venue for that. If you have a concrete and viable suggestion for how you'd like this to work, please open an RFC at https://github.com/sveltejs/rfcs",
          "createdAt": "2020-07-24T20:25:47Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzcyMDE3MA==",
          "body": "Yikes, sorry for asking.",
          "createdAt": "2020-07-24T20:27:26Z",
          "author": { "login": "autr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzcyMjU5Ng==",
          "body": "> Hi, I'm not sure I understand the proposed solution. What do you mean with:\r\n> \r\n> ```\r\n> export { ... DefaultProps, { name: \"Example\", foo: \"bar\" } };\r\n> ```\r\n> \r\n> ?\r\n\r\nThis is a typo:\r\n\r\n```\r\nexport { ... DefaultProps, name: \"Example\", foo: \"bar\"  }\r\n```\r\n\r\nAnd an example of the type of pattern that could be helpful. \r\n\r\nI know it's not valid ES5. So illustrative only.  ✨💩✨",
          "createdAt": "2020-07-24T20:33:50Z",
          "author": { "login": "autr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzg1NDUyNA==",
          "body": "I just don't think it's is very clear where that code would live, in a component as a way to declare props? If so, it wouldn't seem very intuitive to read the component props to me. Especially having them defined in another module would be confusing and probably error-prone. I guess a proper RFC to describe how default values would work would be useful.",
          "createdAt": "2020-07-25T13:16:42Z",
          "author": { "login": "mindrones", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjUwMDEyODY=",
    "body": "Hello!\r\n\r\nIt seems svelte is being compiled with some settings that eventually are not compatible to CSP rules and throw unsafe-eval and unsafe-inline when loaded in the browser using `script-src 'self' csp policy.\r\n\r\nChanging webpack/babel configurations doesn't seem to effect the generation of Function constructors. \r\n\r\nWe have created [a ticket on our side](https://github.com/SAP/luigi/issues/1449) to track this issue, some information on our investigations can be found there (and in the two linked tickets).\r\n\r\nThe csp setting we are using is: \r\n`<meta\r\n\thttp-equiv=\"Content-Security-Policy\"\r\n\tcontent=\"default-src 'self' ;\r\n\tscript-src 'self' ;\r\n\tstyle-src 'self' 'unsafe-inline' ;\r\n\tfont-src 'self' data:; object-src 'none'; img-src * data:; child-src *\r\n\tblob:; worker-src 'self' blob:;\" />`",
    "closedAt": "2020-07-31T11:39:01Z",
    "createdAt": "2020-07-24T08:23:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mzc3MjYxNA==",
          "body": "It seems to me like this is related to Webpack using that try/catch-eval shim for globals. I tried to build a hello-world with Svelte+webpack but I couldn't get either eval or those function constructors.\r\n\r\nAre you able to isolate the problem and tell whether these conflicts arise for eval or inline-styles? can you provide a small repro?",
          "createdAt": "2020-07-24T23:29:49Z",
          "author": { "login": "caroso1222", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NjQ4NDk5Ng==",
          "body": "I stripped our repo down to the bare minimum, at the end I only added the main.js and App.html which were in the hello world example. We are not using rollup, but webpack and svelte-loader. \r\n\r\nhttps://github.com/maxmarkus/debug-svelte-csp\r\nAdded a readme how to run this testcase.",
          "createdAt": "2020-07-30T15:57:06Z",
          "author": { "login": "maxmarkus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NjcyMTczOQ==",
          "body": "I checked this out and can confirm this is not related to Svelte. You're using `live-server` to serve your app and it adds an inline script block to your page which is not allowed by the CSP `\"script-src 'self' \"` policy.\r\n\r\n<img width=\"1107\" alt=\"Teampaper Snap_2020-07-30 16-38-10@2x\" src=\"https://user-images.githubusercontent.com/3689856/88977213-1e5a3b00-d283-11ea-8ec6-f847611480f9.png\">\r\n\r\nYou can verify people having the same problems with `live-server` [here](https://github.com/ritwickdey/vscode-live-server/issues/452#issuecomment-622237971) and [here](https://github.com/ritwickdey/vscode-live-server/issues/205).\r\n\r\nTry switching to `webpack-dev-server`, it might work better for your use case.\r\n",
          "createdAt": "2020-07-30T21:41:13Z",
          "author": { "login": "caroso1222", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NzA3NzcyOA==",
          "body": "Thanks for the hint, I refactored to `webpack-dev-server`.\r\n\r\nOur production build also has the issues, but I have seen that the debug I created did not fulfill what it should do - since it did not do the webpack post processing, which is in our case the babel and terser. \r\nAfter quite some tests it brought me to the conclusion that this issue is not on svelte side, but it is on our since it appears as soon as we run our codebase through babel. \r\n\r\nThe original build coming out of webpack/svelte-loader is not throwing any csp errors, but they appear after `node_modules/.bin/babel public/main.js --out-file public/main.js --presets=@babel/preset-env --root . --root-mode upward --source-maps inline`.\r\n\r\nI apologize for occupying your time and close this issue, since it is not svelte, but babel related.",
          "createdAt": "2020-07-31T11:39:01Z",
          "author": { "login": "maxmarkus", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjQ4MDYzNTk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIf you want to define a simple action like `const focusOnInit = (node) => node.focus()` you have to issue the following: `const focusOnInit = (node) => { node.focus(); return {} }`, otherwise the following error is raised\r\n\r\n```\r\nconst focusOnInit: (node: HTMLControl) => void\r\nArgument of type '(node: HTMLControl) => void' is not assignable to parameter of type 'SvelteAction<[]>'.\r\n  Type 'void' is not assignable to type '{ update?: () => void; destroy?: () => void; }'.ts(2345)\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nThe SvelteAction type should also allow that the function returns void, thus assigning a defult value `{}` to make it easier to do this simple actions\r\n\r\n**Describe alternatives you've considered**\r\n\r\n`const focusOnInit = (node) => { node.focus(); return {} }`\r\n\r\n**How important is this feature to you?**\r\nNot that much, as there's an easy, althouh a bit annoying, workaround\r\n\r\n",
    "closedAt": "2020-07-27T15:52:30Z",
    "createdAt": "2020-07-23T22:35:19Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDIwMDMzMw==",
          "body": "This is a typing issue, fixed in language-tools, can be closed.",
          "createdAt": "2020-07-27T08:30:45Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDQ3NzI5Mg==",
          "body": "Great news!\r\n\r\nDo you know how can I use it? Do I have to wait for the next vscode plugin version and update it?",
          "createdAt": "2020-07-27T15:49:06Z",
          "author": { "login": "opensas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NDQ5NDgxMw==",
          "body": "Yes, you have to wait for the next release. Will be in 1-2 days.",
          "createdAt": "2020-07-27T16:16:59Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjQ3OTg0NTA=",
    "body": "**Describe the bug**\r\nIf button has type \"reset\" and \"on:click\" handler, the form is not reset. Only the click event handler is executed.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/9eb70177f2d94afa82d47bf0a96f5f81?version=3.24.0\r\n\r\n**Expected behavior**\r\nThe form is reset and the onclick event is triggered calling the defined function\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 84\r\n- Your operating system: OSX 10.15.5\r\n- Svelte version Svelte v3.24.0\r\n- Whether your project uses Webpack or Rollup -> Rollup\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-07-23T22:15:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzI2NjAyMw==",
          "body": "Not sure why you're trying this in a version of Svelte that is a year old, but, the issue is reproducible in the current version, so I've updated the issue for you.",
          "createdAt": "2020-07-23T22:38:03Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzI3NzA5Nw==",
          "body": "Why is the button disabled?\r\n\r\nI enabled it and there was no bug.",
          "createdAt": "2020-07-23T23:16:14Z",
          "author": { "login": "mustafa0x", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzI5MTEzMQ==",
          "body": "I see the described behavior on Chrome but not on Firefox.",
          "createdAt": "2020-07-24T00:07:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzMxMjMxNQ==",
          "body": "Race condition. The handler disables it, so it can't reset the form.",
          "createdAt": "2020-07-24T01:43:17Z",
          "author": { "login": "mustafa0x", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzMyMDA2Mg==",
          "body": "https://svelte.dev/repl/3b3dc88ecc6a420d845f85eb8e9f4fb6?version=3.24.0",
          "createdAt": "2020-07-24T02:24:53Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzM4NjM0NA==",
          "body": "Thanks @mustafa0x @afaur - this does indeed look like a race condition. I'm unsure what to do about it though, since it looks like either Firefox or Chrome is following the spec, but not both.",
          "createdAt": "2020-07-24T07:30:53Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjQ2NzIzMTU=",
    "body": "**Describe the bug**\r\n\r\nIf I define a transitive dependency using two reactive statements, like this:\r\n\r\n```javascript\r\n  $: sum_2 = parseInt(sum_1) + 1\t\t// ok, no matter the order! -> first command\r\n  $: sum_1 = parseInt(sum_0) + 1\t\t// ok, no matter the order! -> second command\r\n```\r\n\r\n(sum_1 depends on sum_0, and sum_2 depends on sum_1)\r\n\r\nIt works ok, no matter in which order I define them \r\n\r\nBut if I do the same calling functions, the order DOES matter, and the sum_2 variable is NOT updated:\r\n\r\n```javascript\r\n  const update_sum_1 = () => sum_1 = parseInt(sum_0) + 1\r\n  const update_sum_2 = () => sum_2 = parseInt(sum_1) + 1\r\n\r\n  $: update_sum_2(sum_1) // FAILS -> first command\r\n  $: update_sum_1(sum_0) // FAILS -> second command\r\n```\r\n\r\nIf I switch the reactive statements it works ok\r\n\r\n**To Reproduce**\r\nREPL with the example: https://svelte.dev/repl/eb389d5c5e4b4721af15d45e2df353f2?version=3.24.0\r\n\r\n**Expected behavior**\r\n\r\nIt should update dependencies as expected regarless the order in which reactive statements are introduced in the code, like what happens with updated in the reactive statement.\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox 78.0.2\r\n\r\n- Your operating system: Ubuntu 18.04\r\n\r\n- Svelte version 3.24.0\r\n\r\n- Whether your project uses Webpack or Rollup: rollup (or whatever is used by the repl)\r\n\r\n**Severity**\r\nIt's a bug affecting the reactivity system, I guess it's rather serious\r\n\r\n**Additional context**\r\n\r\nOrder matters defining transitive dependencies using reactive statement using functions\r\n\r\nREPL with the example: https://svelte.dev/repl/eb389d5c5e4b4721af15d45e2df353f2?version=3.24.0\r\n\r\nIf I define a transitive dependency using two reactive statements, like this:\r\n\r\n```javascript\r\n  $: sum_2 = parseInt(sum_1) + 1\t\t// ok, no matter the order! -> first command\r\n  $: sum_1 = parseInt(sum_0) + 1\t\t// ok, no matter the order! -> second command\r\n```\r\n\r\n(sum_1 depends on sum_0, and sum_2 depends on sum_1)\r\n\r\nIt works ok, no matter in which order I define them \r\n\r\nBut if I do the same calling functions, the order DOES matter, and the sum_2 variable is NOT updated:\r\n\r\n```javascript\r\n  const update_sum_1 = () => sum_1 = parseInt(sum_0) + 1\r\n  const update_sum_2 = () => sum_2 = parseInt(sum_1) + 1\r\n\r\n  $: update_sum_2(sum_1) // FAILS -> first command\r\n  $: update_sum_1(sum_0) // FAILS -> second command\r\n```\r\n\r\nSwitching the statements work ok:\r\n\r\n```javascript\r\n  const update_sum_1 = () => sum_1 = parseInt(sum_0) + 1\r\n  const update_sum_2 = () => sum_2 = parseInt(sum_1) + 1\r\n\r\n  $: update_sum_1(sum_0) // in this order this works OK\r\n  $: update_sum_2(sum_1) // FAILS -> first command\r\n```\r\n\r\nIn fact, the following also fails\r\n\r\n```javascript\r\n  const update_sum_1 = () => sum_1 = parseInt(sum_0) + 1\r\n\r\n  $: sum_2 = parseInt(sum_1) + 1\t\t// ok, no matter the order! -> first command\r\n  $: update_sum_1(sum_0) // FAILS -> second command\r\n```\r\n\r\nThis is the generated code for the working example (modifying variable from reactive statement)\r\n\r\n```javascript\r\nfunction instance($$self, $$props, $$invalidate) {\r\n\tlet sum_0 = 0;\r\n\tlet sum_1;\r\n\tlet sum_2;\r\n\r\n\tfunction input_input_handler() {\r\n\t\tsum_0 = this.value;\r\n\t\t$$invalidate(0, sum_0);\r\n\t}\r\n\r\n\t$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty & /*sum_0*/ 1) {\r\n\t\t\t$: $$invalidate(1, sum_1 = parseInt(sum_0) + 1); // ok, no matter the order! -> second command\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty & /*sum_1*/ 2) {\r\n\t\t\t$: $$invalidate(2, sum_2 = parseInt(sum_1) + 1); // ok, no matter the order! -> first command\r\n\t\t}\r\n\t};\r\n\r\n\treturn [sum_0, sum_1, sum_2, input_input_handler];\r\n}\r\n```\r\n\r\nAnd this is the generated code for the failing example (calling functions from the reactive statement):\r\n\r\n```javascript\r\nfunction instance($$self, $$props, $$invalidate) {\r\n\tlet sum_0 = 0;\r\n\tlet sum_1;\r\n\tlet sum_2;\r\n\tconst update_sum_1 = () => $$invalidate(1, sum_1 = parseInt(sum_0) + 1);\r\n\tconst update_sum_2 = () => $$invalidate(2, sum_2 = parseInt(sum_1) + 1);\r\n\r\n\tfunction input_input_handler() {\r\n\t\tsum_0 = this.value;\r\n\t\t$$invalidate(0, sum_0);\r\n\t}\r\n\r\n\t$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty & /*sum_1*/ 2) {\r\n\t\t\t$: update_sum_2(sum_1); // FAILS -> first command\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty & /*sum_0*/ 1) {\r\n\t\t\t$: update_sum_1(sum_0); // FAILS -> second command\r\n\t\t}\r\n\t};\r\n\r\n\treturn [sum_0, sum_1, sum_2, input_input_handler];\r\n}\r\n```\r\n\r\nIn the working example the compiler can order the statements according to dependencies (sum_1 depends on **sum_0**, and then sum_2 depends on **sum_1**). So it first checks the SECOND statement and then the FIRST. Ir reordered the statements according to the dependency graph.\r\n\r\nIn the failing example the statements appear in the order introduced in the code.\r\n\r\nSeems like the compiler can correctly track dependencies in the reactive statement, but it can not do the same when calling a function. Some how it should recursively track every dependency on every function call and build the dependency tree from ther\r\n\r\n> Note/question: this is a different case, but I'm not sure what would be the correct behaviour.\r\n\r\nWhat happens If I have something like:\r\n\r\n```javascript\r\n$: {\r\n  sum_2 = parseInt(sum_1) + 1\r\n  sum_1 = parseInt(sum_0) + 1\r\n}\r\n```\r\n\r\nShouldn't this function run twice when sum_0 is modified? On the first run it will invalidate sum_1, and that should trigger the second run it would update sum_1. Am I right?\r\n\r\nRight now, it just runs once, sum_2 is not updated, and then, on the next update of sum_0, sum_2 is updated with the value of sum_1 and then sum_1 is modified. sum_2 is always left behind with the value it shoud have had in the previous sum_0 update.\r\n\r\nShouldn't the `$$self.$$.update = () =>` function be executed in some kind of loop, running until there is no more $$self.$.dirty elements?\r\n",
    "closedAt": "2021-01-19T11:08:26Z",
    "createdAt": "2020-07-23T18:12:55Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjk2NTIwMw==",
          "body": "I ran into a similar issue ... which I almost created a new issue for, but then found this issue, which I _think_ is the same issue but see if you think it's the same:\r\n\r\nhttps://svelte.dev/repl/4bb5f4b484154f6ca4c29e89240646b3?version=3.29.4\r\n\r\nI was pretty surprised that I had to change the order of my reactive statements in order for it to work correctly.\r\n\r\nI thought the point of reactive statements was that it lets you define variables declaritively (so that the dependency tree is all resolved for you and you don't even have to _think_ about what order of operations would be needed to reactively calculate a value based on another value) rather than imperatively.\r\n\r\nThe strange thing is that this _only_ happens when you extract the code that was in a reactive statement (and working just fine there) into a _function_. I made sure to pass the dependencies into the function (`$: resetIfNeeded(value)`), so I would have _expected_ it to be reactive in exactly the same way and behave exactly the same after extracting the function as before.\r\n\r\n@Conduitry, you mentioned in https://github.com/sveltejs/svelte/issues/2956#issuecomment-499044614:\r\n> if you _do_ want to use separate functions and have your dependencies still counted, you can make all of the relevant dependencies be arguments to those functions, so the compiler can see them in the reactive block.\r\n\r\nShouldn't that apply in this case too? What am I missing?\r\n\r\nWhy does this:\r\n```js\r\n\tconst resetIfNeeded = (val) => {\r\n\t\tif (val !== 'err' && error) {\r\n\t\t\t// This doesn't trigger the reactive statement above. Why not?\r\n\t\t\terror = undefined\r\n\t\t\tconsole.log('resetting error:', error)\r\n\t\t}\r\n\t}\r\n\t$: resetIfNeeded(value)\r\n```\r\nwork any differently from this?:\r\n```js\r\n\t$: if (value !== 'err' && error) {\r\n\t\terror = undefined\r\n\t\tconsole.log('resetting error:', error)\r\n\t}\r\n```\r\n\r\nOr to put it another way, why does the order not seem to matter when it's in a \"bare\" reactive statement, but does matter when  the same code is moved to a function?\r\n\r\nCan you confirm whether this is a bug?\r\n",
          "createdAt": "2020-10-27T04:02:54Z",
          "author": { "login": "TylerRick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzYwMzQyMQ==",
          "body": "@opensas I just re-read your issue description in more detail. Wow, very good and thorough explanation (and nice minimal repro)!! There's not much that I could add to that...\r\n\r\nI guess the bottom line is that we have to be more careful about ordering reactive statements if any of them call functions. (At least until this gets fixed.)\r\n\r\nBut it can be hard to notice all the places where you may have an implicit ordering dependency. Sometimes you don't notice it until after it has introduced a _bug_ caused by a variable not reactively updating like you thought it was going to / was supposed to.\r\n\r\n## Workarounds?\r\n\r\nI wonder if there are any workarounds one could use to \"trick\" Svelte into seeing the same dependencies for a function call as it would see if you inlined the function call. (In case you don't want to manually reorder your reactive statements, or you don't know in exactly which order they _should_ be in, and you want to make sure it is \"safe\" (predictable/maintainable/not going to bite you later when you refactor things and move your code around) by explicitly listing your dependencies.)\r\n\r\nI tried a few more things (in this [fork of your REPL](https://svelte.dev/repl/1d216a27797844bdb3c49ea76c2282e4?version=3.29.4)) and found one workaround that seems to work (pretty obvious now, but wasn't at first):\r\n\r\nSince we know that `update_sum_1` updates `sum_1`, we can give the compiler an explicit \"hint\" about that, like this:\r\n```js\r\n\t$: { update_sum_2(sum_1) }\r\n\t$: { update_sum_1(sum_0); sum_1 = sum_1 }\r\n```\r\n\r\n(or if you want to be neatly symmetrical and consistent—although not technically needed—this works too :smile: :\r\n```js\r\n\t$: { update_sum_2(sum_1); sum_2 = sum_2 }\r\n\t$: { update_sum_1(sum_0); sum_1 = sum_1 }\r\n```\r\n)\r\n\r\nEven though calling `update_sum_1` correctly invalidates `sum_1`:\r\n```js\r\n\tconst update_sum_1 = () => $$invalidate(1, sum_1 = parseInt(sum_0) + 1);\r\n```\r\n, that actually has no useful effect in the `$$.update` because (without the automatic reordering that the non-function does for us) it invalidates `sum_1` _**too late**_ to do any good — _**after**_ `sum_2` has already been \"updated\" from a stale `sum_1` value.\r\n\r\nIn a way, this workaround is analogous to the infamous [assignment workaround](https://svelte.dev/tutorial/updating-arrays-and-objects) we all know and love (to trigger reactivity after an in-place mutation of an object or array). But on the other hand, it's not the same, because in this case the \"workaround assignment\" is more separated (by more lines of code, and possibly even in another file?) from the \"real update\". A developer should not have to look at the implementation of every function, and explicitly reassign any assignments made inside the function, when the compiler is perfectly capable of doing that for us.... :smile: \r\n\r\nIt also seems similar to how \"read\" dependencies referenced from functions are hidden to the Svelte compiler (#2956) ([REPL](https://svelte.dev/repl/e25f45c039a04c10880914ceba6d5812?version=3.29.4)):\r\n```js\r\n\tlet count = 5;\r\n\t$: value = f();\r\n\t\r\n\tfunction f()\r\n\t{\r\n\t\treturn count;\r\n\t}\r\n```\r\n\r\nand you have to do this ([REPL](https://svelte.dev/repl/bc90d88eaf6d4816b66e1c905fadbfc4?version=3.29.4)) to trick Svelte into seeing those \"hidden\" variable references:\r\n\r\n```js\r\n\tlet count = 0;\r\n\t$: value = f(count);\r\n\t\r\n\tfunction f(_dont_need_to_use_this_arg_) {\r\n\t\treturn count;\r\n\t}\r\n```\r\n\r\nEven though the argument itself is unused, by referencing (reading from) `count` directly from the `$:`, it forces the compiler to add `count` to its list of \"read\" dependencies (the `$$.dirty` conditions that are checked to see if this statement should get re-run) for this `$:` statement.\r\n\r\nPerhaps a \"purer\" way to explicitly list the dependencies would be as an array (kind of like the list of dependencies passed to a `useEffect` hook in React), like this:\r\n\r\n```js\r\n\t$: { value = f(); [count] }\r\n\t\r\n\tfunction f() {\r\n\t\treturn count;\r\n\t}\r\n```\r\nThis way the reader doesn't mistakenly assume that the parameter will/needs to actually be used in the function (since we can simply use the top-level variable directly from the closure instead).\r\n\r\nSo these two are kind of analogous:\r\n```\r\n\t$: { value = f(); [count] }\r\n\t$: { update_sum_1(sum_0); [sum_1 = sum_1] }\r\n```\r\n\r\nMy proposed workaround is to \"write\" dependencies (the variables that need to get invalidated as a result of the assignment) what the #2956 workaround is to \"read\" dependencies.\r\n\r\n(We can even wrap it in brackets to make it clearer that it is just a _hint_ (redundant) and not a part of the main logic that you're supposed to read.)\r\n\r\nMust we really repeat ourselves like that?\r\n\r\n## Actual solution\r\n\r\nLike you said:\r\n> Seems like the compiler can correctly track dependencies in the reactive statement, but it cannot [or at least _does not_ currently] do the same when calling a function. Somehow it should recursively track every dependency on every function call and build the dependency tree from there.\r\n\r\nand/or:\r\n\r\n> Shouldn't the `$$self.$$.update = () =>` function be executed in some kind of loop, running until there is no more $$self.$.dirty elements?\r\n",
          "createdAt": "2020-10-27T23:38:07Z",
          "author": { "login": "TylerRick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNzYwNzQyOA==",
          "body": "Great work @TylerRick, the explicit 'hint' seems to be a fine workaround, and honestly, in spite being a workaround, it doesn't look so ugly.\r\n\r\nI think this issue should really be taken into account. Specially when the logic for tracking transitive dependencies is already in place, being used in the case of transitive reactive statements. Same logic should be aplied when dealing with transtive reacive statements calling functions.\r\n\r\nI'm pretty much surprised that so few people stumbled upon it, it's not so difficult to fall into it, and it's really hard to find out about it.\r\n\r\nUnfortunately I'm not so comfortable with svelte source code to fix it myself, I tried to do my best to document and explain as much as I could understand about it.\r\n\r\nI hope svelte devs find some time (I know they do a marvellous job creating this great piece of technology for free, in their spare time!) to finnaly solve this. It's a shame to have this flaw in the reactivity system, wich I think is one of svelte's strongest selling points.",
          "createdAt": "2020-10-27T23:51:14Z",
          "author": { "login": "opensas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2Mjc3MjQzMw==",
          "body": "There would be far too many edge cases in trying to trace dependencies through functions that are called in reactive blocks. It's much better to have a set of simple, dumber rules than to have a complicated but still leaky abstraction. If we don't have a simple rule, how do we decide which things are bugs? It may not be documented yet outside of comments in the issue tracker, but the current behavior is the intended one. See also https://github.com/sveltejs/svelte/issues/5848#issuecomment-753431840\r\n\r\nMore practically, we have been all along encouraging people to use function calls to specifically hide certain reactive dependencies from the compiler, and so any change to this would be breaking for them.",
          "createdAt": "2021-01-19T11:08:26Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjQ1OTQ4Mjc=",
    "body": "Hi you all, first I would like to congratulate the team for the amazing work of adding typescript support it looks amazing, I am just having the following issue not sure if I am missing something or if this behavior is expected\r\n\r\n**Describe the issue**\r\nType Inference seems to work fine when using regular let declarations \r\n```\r\n<script lang=\"ts\">\r\n    let name = 'Hello'\r\n    let upperCaseName = name.toUpperCase()\r\n    $: reactiveUpperCaseName = name.toUpperCase()\r\n</script>\r\n```\r\n`upperCaseName` and `name` have the type of `string` but `reactiveUpperCaseName` have an implicit type of `any`, I could not find a solution  to add a type to `reactiveUpperCaseName`\r\n\r\n\r\n**Logs**\r\nThis is the output from svelte-check\r\n```\r\nWarn: Variable 'reactiveUpperCaseName' implicitly has an 'any' type, but a better type may be inferred from usage. (ts)\r\nCase()\r\n    $: reacti\r\n```\r\nIf I try to add a type to the property\r\n```\r\n$: reactiveUpperCaseName: string = name.toUpperCase()\r\n```\r\n```\r\n $: reactiveUpperCaseName: string =\r\n\r\nApp.svelte:4:31\r\nError: 'string' only refers to a type, but is being used as a value here. (ts)\r\nCaseName: string = name.to\r\n```\r\n\r\n**To Reproduce**\r\nrun a `svelte-check` in a project using typescript With the code snippet that I share at the top of the project.\r\nIf you are using the VScode svelte extension, hover in the `reactiveUpperCaseName` value and it will show that has an `any` type\r\n\r\n**Expected behavior**\r\n`reactiveUpperCaseName` should have a type of string or at least there should be a way to add the type\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: N/A\r\n\r\n- Your operating system:  MacOs Catalina  10.15.5\r\n\r\n- Svelte version: The one from the official template at the moment \r\n\r\n- The project uses Rollup from the official template and I run the script to transform the project to typescript\r\n\r\n- tsConfig \r\n```json\r\n{\r\n  \"extends\": \"@tsconfig/svelte/tsconfig.json\",\r\n  \"include\": [\"src/**/*\"],\r\n  \"exclude\": [\"node_modules/*\", \"__sapper__/*\", \"public/*\"],\r\n}\r\n```\r\n\r\n**Severity**\r\nI think it is important to have type inference in reactive declarations since are one of the nicest and more used features of svelte along with typescript. \r\n\r\n**Additional context**\r\nN/A\r\n",
    "closedAt": "2020-07-23T17:50:41Z",
    "createdAt": "2020-07-23T16:00:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzExNzI4MA==",
          "body": "See https://svelte.dev/faq#what-about-typescript-support",
          "createdAt": "2020-07-23T16:53:59Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzEyMTYxMQ==",
          "body": "I see . thanks @benmccann this worked\r\n```\r\n<script lang=\"ts\">\r\n    let name = 'Hello'\r\n    let upperCaseName = name.toUpperCase()\r\n    let reactiveUpperCaseName: string\r\n    $: reactiveUpperCaseName = name.toUpperCase()\r\n</script>\r\n```\r\nBut we still don't have [type inference](https://www.typescriptlang.org/docs/handbook/type-inference.html) right ?",
          "createdAt": "2020-07-23T17:02:33Z",
          "author": { "login": "3stbn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzEyNzI1OQ==",
          "body": "I'm not sure about the type inference part. \r\n\r\n> If you are using the VScode svelte extension, hover in the reactiveUpperCaseName value and it will show that has an any type\r\n\r\nIt sounds like this issue should be filed over in https://github.com/sveltejs/language-tools",
          "createdAt": "2020-07-23T17:13:42Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzEzNzk4MQ==",
          "body": "Oh, I was thinking it will be nice that we don't have to explicitly add the type for reactive declarations.\r\n\r\n>     If you are using the VScode svelte extension, hover in the reactiveUpperCaseName value and it will show that has an any type\r\n> \r\n> It sounds like this issue should be filed over in https://github.com/sveltejs/language-tools\r\n> \r\nThe vscode extension works as expected by adding the type before the reactive declaration, it shows the correct string type. ",
          "createdAt": "2020-07-23T17:35:35Z",
          "author": { "login": "3stbn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzE0NTAyMA==",
          "body": "> I was thinking it will be nice that we don't have to explicitly add the type for reactive declarations.\r\n\r\nIf there's any bug or missing feature here then it's something that would be handled by language-tools. This repo is the svelte compiler and doesn't handle anything related to Typescript support",
          "createdAt": "2020-07-23T17:49:52Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzE0NTQwMQ==",
          "body": "Ok thanks for the help I will close this issue ",
          "createdAt": "2020-07-23T17:50:41Z",
          "author": { "login": "3stbn", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjQ1MTUwMTA=",
    "body": "**Describe the bug**\r\nThe toggle for input/output in the Svelte REPL doesn't look pixel perfect on iOS (13).\r\n\r\n**To Reproduce**\r\nVisit svelte.dev/repl and scroll down, look at the toggle.\r\n\r\n**Expected behavior**\r\nLook better.\r\n\r\n**Additional context**\r\n\r\nScreenshot.\r\n\r\n<img width=\"384\" alt=\"Screenshot 2020-07-23 at 16 20 52\" src=\"https://user-images.githubusercontent.com/12690/88297787-a4650780-cd00-11ea-95f0-e2e1913d0be5.png\">\r\n\r\nPSA I am logging this bug but will be working on a fix myself.",
    "closedAt": "2020-07-23T14:32:40Z",
    "createdAt": "2020-07-23T14:22:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzA0MTY5MQ==",
          "body": "I found out I can fix this by adding `border: none` to the checkbox CSS, but this checkbox CSS is contained in site-kit. I will reopen this issue in the [site-kit repo](https://github.com/sveltejs/site-kit).",
          "createdAt": "2020-07-23T14:32:40Z",
          "author": { "login": "Wolfr", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjQzMzgzNTU=",
    "body": "hello teams i wanna ask about import class or interface typescript in svelte, if you want do that must to add keyword \"type\", example ```import type MyInterface from './my-interface';```\r\n\r\n1- File interface ts\r\n```\r\nexport default MyInterface {\r\n  name: string;\r\n  city: string;\r\n}\r\n```\r\n\r\n2- File svelte\r\n\r\n```\r\n<script lang=\"ts\">\r\n    import type MyInterface from \"./my-interface\";\r\n    const user: MyInterface = {\r\n        name: 'kamal'\r\n    }\r\n    console.log('user', user)\r\n</script>\r\n```\r\n\r\nthis code should not working because must to add city attribute, but svelte accept and code work fine !! \r\nSo we need to run svelte-check with command \"npm run validate\" every time manually !!\r\nI try to update package.json to ```\"dev\": \"svelte-check && rollup -c -w\",```  but re-check files not working after each update of the code svelte",
    "closedAt": "2020-07-23T10:51:41Z",
    "createdAt": "2020-07-23T09:47:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mjk0MDcyNQ==",
          "body": "Hi @kamalkech - please ask support questions in discord, not in github issues.",
          "createdAt": "2020-07-23T10:51:41Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mjk0Mzk2NA==",
          "body": "on discord is disabled, we cannot post any thing on salon #support\r\nsecondly i post the question here because on the repo there is section question\r\ncheck please captures before close any issue\r\n![discord-support-svelte](https://user-images.githubusercontent.com/1313428/88279502-1545f880-ccdc-11ea-938b-058d93b1317a.png)\r\n![New-Issue-·-sveltejs-svelte](https://user-images.githubusercontent.com/1313428/88279505-16772580-ccdc-11ea-8f47-e7465ff0191f.png)\r\n",
          "createdAt": "2020-07-23T11:00:38Z",
          "author": { "login": "kamalkech", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mjk3NDA0OQ==",
          "body": "@kamalkech I told you to ask in the #language-tools channel in discord, rather than the closed channel #support which has a notice about it's closure.\r\n\r\nIf you read the template when you click \"Questions and help\", it says \"go to discord for support\".",
          "createdAt": "2020-07-23T12:18:07Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjQwNzUwOTE=",
    "body": "I'm not sure if this is a bug or an unsupported pattern. I'm trying to use `svelte/register` to do server-side rendering of a Svelte component. Here are the files. Basically I'm importing a Svelte component via `.mjs` file that exports it. These files are also up at this [reproduction repo](https://github.com/mhkeller/lc-ssr-test).\r\n\r\n```js\r\n// index.js\r\nrequire('svelte/register');\r\nconst App = require(\"./src/App.svelte\").default;\r\n\r\nconst data = App.render({});\r\n\r\nconsole.log(data);\r\n```\r\n\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n  import { Test } from './components/test.mjs';\r\n</script>\r\n\r\n<Test/>\r\n```\r\n\r\n```js\r\n// ./components/test.mjs\r\nexport { default as Test } from './Test.svelte';\r\n```\r\n\r\n```html\r\n<!-- ./components/Test.svelte -->\r\nTest\r\n```\r\n\r\nWhen running `node index.js` I get the following error:\r\n\r\n```\r\n> node index.js\r\n\r\ninternal/modules/cjs/loader.js:1038\r\n    throw new ERR_REQUIRE_ESM(filename);\r\n    ^\r\n\r\nError [ERR_REQUIRE_ESM]: Must use import to load ES Module: path/to/project/lc-ssr-test/src/components/test.mjs\r\n    at Module.load (internal/modules/cjs/loader.js:1038:11)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:929:14)\r\n    at Module.require (internal/modules/cjs/loader.js:1080:19)\r\n    at require (internal/modules/cjs/helpers.js:72:18)\r\n    at Object.<anonymous> (path/to/project/lc-ssr-test/src/App.svelte:5:18)\r\n    at Module._compile (internal/modules/cjs/loader.js:1176:30)\r\n    at Object.require.extensions.<computed> [as .svelte] (path/to/project/lc-ssr-test/node_modules/svelte/register.js:49:17)\r\n    at Module.load (internal/modules/cjs/loader.js:1040:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:929:14)\r\n    at Module.require (internal/modules/cjs/loader.js:1080:19) {\r\n  code: 'ERR_REQUIRE_ESM'\r\n}\r\n```\r\n\r\nI also tried running it with `node -r esm index.js` but that doesn't fix it. When I run this code in dev mode, however, the components load fine. Is this a limitation of svelte/register or do I have to do bring in some other third-party solution to smooth over the esm import? I would think that if the normal dev mode can handle it, there would be parity in server-side mode.\r\n\r\nThanks for taking a look.",
    "closedAt": "2020-08-27T02:47:34Z",
    "createdAt": "2020-07-22T21:58:13Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Mjk5Njc0Ng==",
          "body": "I think this is not related to svelte.\r\nYou need to opt-in to the `esm` (previous `@std/esm`) loader by making it a dep or by adding its options object to the package.json.\r\nSo after doing `npm i --save esm`, try adding \r\n`\r\n\"esm\": {\r\n  \"cjs\":true\r\n}\r\n` to your package.json\r\n\r\nPlease tell me if it helped.\r\n",
          "createdAt": "2020-07-23T13:08:57Z",
          "author": { "login": "katalonne", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzA5MjEzNQ==",
          "body": "Thanks. If I run `node index.js` or `node -r esm index.js` after adding that to package.json, I get the same errors. I pushed that configuration to the [esm branch](https://github.com/mhkeller/lc-ssr-test/tree/esm) of the reproduction repo. I agree this isn't exactly svelte but it seems like something svelte/register should be able to handle since this kind of file structure works when compiled normally. Or adding some info to the docs about what kind of extra tooling is required would also be a good solution.\r\n",
          "createdAt": "2020-07-23T16:03:47Z",
          "author": { "login": "mhkeller", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzExOTU2MQ==",
          "body": "hmm... I'll try doing some research on this.",
          "createdAt": "2020-07-23T16:58:29Z",
          "author": { "login": "katalonne", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzE5MDQyMw==",
          "body": "Here's the same example working in the REPL: https://svelte.dev/repl/47e73637efe44b3e87962343b08adf77?version=3.24.0",
          "createdAt": "2020-07-23T19:27:55Z",
          "author": { "login": "mhkeller", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzU3OTc3MA==",
          "body": "Same issue with some discussion: https://github.com/Rich-Harris/pancake/issues/7",
          "createdAt": "2020-07-24T14:55:58Z",
          "author": { "login": "mhkeller", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzU4NzU0MQ==",
          "body": "Well, `svelte/register` uses [`require.extension`](https://nodejs.org/api/modules.html#modules_require_extensions) which is not supported in ES Module. See https://nodejs.org/api/esm.html#esm_no_require_extensions",
          "createdAt": "2020-07-24T15:11:48Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzY0NDAzMA==",
          "body": "Yeah it sounds like there's not a corresponding feature in Node's ESM support yet, which would be required for this.",
          "createdAt": "2020-07-24T17:17:56Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzY0NzcyMw==",
          "body": "@Conduitry thanks for taking a look. Do you think there is any build remedy (either through some combination of using the `esm` package or adding any other files to `package.json`)? Or, for the moment, is the best workaround to bypass the `index.mjs` file and import the svelte components directly?",
          "createdAt": "2020-07-24T17:26:56Z",
          "author": { "login": "mhkeller", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2NTM2OTM2Nw==",
          "body": "@Rich-Harris put together a solution for this involving bundling into CommonJS. Linking it here: https://github.com/mhkeller/lc-ssr-test/pull/1",
          "createdAt": "2020-07-29T00:57:22Z",
          "author": { "login": "mhkeller", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Nzg1NjM0OQ==",
          "body": "@mhkeller  For this case i've used `@babel/plugin-transform-modules-commonjs` inside the `svelte/register` \r\n```\r\nfunction compileES6(code) {\r\n\ttry {\r\n\t\treturn require(\"@babel/core\").transform(code, {\r\n\t\t\tplugins: [\"@babel/plugin-transform-modules-commonjs\"],\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log(`error compiling esm file ${error}`);\r\n\t}\r\n}\r\n```\r\nRegistering the extension , all ES6 modules should follow this convention\r\n```\r\nrequire.extensions[\".mjs\"] = function (module, filename) {\r\n\ttry {\r\n\t\tlet code = compileES6(fs.readFileSync(filename, \"utf-8\")).code;\r\n\t\treturn module._compile(code, filename);\r\n\t} catch (error) {\r\n\t\tconsole.log(`error ${error}`);\r\n\t}\r\n};\r\n```\r\nAlso a dirty one here to just make it work : \r\n```\r\nfunction validate_component(component, name) {\r\n\tif (component.default) component = component.default;\r\n\t...\r\n\treturn component;\r\n}\r\n```\r\nMy case was simple and it solved all the problems i had with svelte/register.\r\nfinal `register.js` [register.js gist](https://gist.github.com/asvsfs/f2f91a9e8419ce7913fbd1ae7bcec6d8)",
          "createdAt": "2020-08-03T07:27:24Z",
          "author": { "login": "asvsfs", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTE5NjcwNA==",
          "body": "My problem with this was solved by compiling it ahead of time per the above link. @Conduitry unless you think this should be handled inside of svelte/register, feel free to close this issue.",
          "createdAt": "2020-08-27T00:45:12Z",
          "author": { "login": "mhkeller", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4MTMxMTIxMQ==",
          "body": "If/When Node's ESM implementation adds the loader hooks mentioned in their docs, maybe we can revisit this, but for now it doesn't seem like there's anything for Svelte to do here,",
          "createdAt": "2020-08-27T02:47:34Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMjYzMjg2NQ==",
          "body": "@Conduitry looks like it is possible now:\r\nhttps://nodejs.org/api/esm.html#esm_transpiler_loader",
          "createdAt": "2021-05-05T12:02:59Z",
          "author": { "login": "gamelaster", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMjYzNDY3Mg==",
          "body": "It's in stage 1 (experimental), so nothing that can be relied on I'd say",
          "createdAt": "2021-05-05T12:06:14Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMjY0MDc1NA==",
          "body": "There's a note on the page you linked to which explicitly says that the API will change, so no, we don't want to use that.",
          "createdAt": "2021-05-05T12:16:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMjY0NDI3MQ==",
          "body": "Yes, just I wanted to point out, that the feature will be probably available to be used soon (after experimental stage). For now, we need just wait.",
          "createdAt": "2021-05-05T12:23:04Z",
          "author": { "login": "gamelaster", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjM5NzgxMzY=",
    "body": "**Describe the bug**\r\nHeuristics used to determine whether a custom element's property or attribute should be set doesn't support properties with mixed case names.\r\n\r\nExample:\r\n\r\n```\r\n<my-element myProperty={obj} other={obj} />\r\n```\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/f39a2c0f7f4443a48fab079db1884fa3?version=3.24.0\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nExpected output to include plain element with no attributes set:\r\n\r\n```html\r\n<my-element />\r\n```\r\n\r\nAnd with properties set for `myProperty` and `other`.\r\n\r\n**Actual behavior**\r\n\r\n```html\r\n<my-element myproperty=\"[object Object]\" />\r\n```\r\n\r\nBecause no property exists on the element with lowercase property, it gets added as the attribute `myproperty` and the `obj` is coerced to `string`.\r\n\r\n**Stacktraces**\r\nNot available\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Chrome 84.0\r\n\r\n- Your operating system: macOS Catalina\r\n\r\n- Svelte version: 3.24.0\r\n\r\n- Whether your project uses Webpack or Rollup: REPL\r\n\r\n**Severity**\r\nI'm in the early stages of evaluating Svelte and not being able to set properties on custom elements will is preventing it from being used.\r\n\r\n**Additional context**\r\nN/A",
    "closedAt": null,
    "createdAt": "2020-07-22T18:56:38Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjM5MTg0ODg=",
    "body": "**Describe the bug**\r\nThere's no way currently to define a property as required in typescript.\r\n\r\n**Logs**\r\nN/A\r\n\r\n**To Reproduce**\r\n\r\nTest.svelte\r\n```\r\n<script lang=\"ts\">\r\n  export let reqName: string;\r\n  export let optName: string | undefined;\r\n</script>\r\n\r\n<h1>Hello {reqName} {optName || \"Doe\"}!</h1>\r\n```\r\n\r\nApp.svelte\r\n```ts\r\n<script lang=\"ts\">\r\n  import Test from \"./Test.svelte\";\r\n</script>\r\n\r\n<main>\r\n  <Test /> <!-- this should complain that reqName is missing -->\r\n</main>\r\n```\r\n\r\n**Expected behavior**\r\nThe compiler should complain that <Test> is missing \"reqName\", since `undefined` is not a valid value for the exported property.\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\nWindow 10, latest svelte, rollup\r\n\r\n**Severity**\r\nI think not being able to separate required properties from optional ones impacts the ability to do safe refactors. Also, since this would be a breaking change and the official TS support just got released I think it is better to tackle this soon rather than later (or else hide the breaking behaviour under a flag).\r\n",
    "closedAt": null,
    "createdAt": "2020-07-22T17:10:41Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjU3OTAzNA==",
          "body": "Can you try running https://www.npmjs.com/package/svelte-check if you haven't already?\r\n\r\nIf it still doesn't give you a warning or error then I think I'd file a bug about `svelte-check` over at https://github.com/sveltejs/language-tools since it should be responsible for TypeScript issues. It'd be helpful to share you `tsconfig.json` while doing so",
          "createdAt": "2020-07-22T17:17:16Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjU5NTAwNA==",
          "body": "This could be that you need to turn on strict mode in TypeScript",
          "createdAt": "2020-07-22T17:49:16Z",
          "author": { "login": "orta", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjU5OTMzNg==",
          "body": "Thanks for the tip, adding this to tsconfig.json:\r\n```\r\n  \"compilerOptions\": {\r\n    \"strict\": true\r\n  },\r\n```\r\n\r\nand this to Test.svelte\r\n```\r\n  export let reqName: string;\r\n  export let optName: string | undefined = undefined;\r\n```\r\n\r\nSeems to make it work ok :)\r\n\r\nJust wondering, is there a way to specify the type of more complex properties? E.g.\r\n```ts\r\ntype P = { kind: \"A\"; foo: boolean } | { kind: \"B\"; bar: string }\r\n```\r\n\r\nThe closest would be this, but is not quite the same:\r\n```\r\nexport let kind: \"A\" | \"B\";\r\nexport let foo: boolean | undefined = undefined;\r\nexport let bar: string | undefined = undefined;\r\n```",
          "createdAt": "2020-07-22T17:58:08Z",
          "author": { "login": "xaviergonz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjYwMDM2Mg==",
          "body": "```ts\r\ntype P = { kind: \"A\"; foo: boolean } | { kind: \"B\"; bar: string }\r\nexport let optName: P = { kind: \"A\", foo: true };\r\n\r\n```\r\nshould work",
          "createdAt": "2020-07-22T18:00:15Z",
          "author": { "login": "orta", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjYwMDg5NA==",
          "body": "Sorry, I meant distributed across all properties, not as an object inside a single property",
          "createdAt": "2020-07-22T18:01:19Z",
          "author": { "login": "xaviergonz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjYwMTAxNg==",
          "body": "The closest I got would be this, but is not quite the same:\r\n\r\nexport let kind: \"A\" | \"B\";\r\nexport let foo: boolean | undefined = undefined;\r\nexport let bar: string | undefined = undefined;",
          "createdAt": "2020-07-22T18:01:32Z",
          "author": { "login": "xaviergonz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjYxMzMzOA==",
          "body": "I don't think that's possible. Closest would be some sort of discriminated union but won't be applicable at the top level of the component. ",
          "createdAt": "2020-07-22T18:26:57Z",
          "author": { "login": "caroso1222", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjYxNTk2MA==",
          "body": "Ah shame, it would be cool if svelte supported an alternate props syntax for these cases. Something like:\r\n\r\n```\r\n<script lang=\"ts\">\r\n  // whenever the \"keyword\" props is used assume the props in the object are distributed (react-like)\r\n  export let props: { kind: \"A\"; foo: boolean } | { kind: \"B\"; bar: string };\r\n</script>\r\n\r\n<h1>{props.kind === \"A\" ? props.foo : props.bar}</h1>\r\n```\r\n\r\n```\r\n<Test kind=\"A\" foo=\"x\" />\r\n```\r\n\r\nor:\r\n\r\n```\r\n<script lang=\"ts\">\r\n  export let props: { reqName: string; optName?: string }\r\n</script>\r\n\r\n<h1>Hello {props.reqName} {props.optName || \"Doe\"}!</h1>\r\n```\r\n\r\n```\r\n <Test reqName=\"John\" />\r\n```",
          "createdAt": "2020-07-22T18:32:24Z",
          "author": { "login": "xaviergonz", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzkwMDU4Ng==",
          "body": "Optional props: language-tools issue, see https://github.com/sveltejs/language-tools/issues/319 . We are thinking about changing it so it is marked as required in non-strict-mode, too.\r\n\r\nDependencies between props (and slots): currently not supported yet, see https://github.com/sveltejs/language-tools/issues/273 ",
          "createdAt": "2020-07-25T20:06:43Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcwNjE4NDAyMw==",
          "body": "I second some of the above. I'm new to Svelte, and coming from React where I can give components generic props and use clever combinations of types and allsorts to define said props, I find myself missing this level of type safety here.\r\n\r\nExposing an \"advanced\" syntax which lets you define the type of props using the full power of TypeScript would be lovely. Most of the time the \"simple\" syntax of typing exports is probably good enough, but every now and then we can go advanced and define complex types for our props.",
          "createdAt": "2020-10-09T13:34:46Z",
          "author": { "login": "jsdw", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0MjExNjE1OQ==",
          "body": "I agree with the above, not just for my own sake, but also to build easier to use component libraries for others to use.\r\n\r\nWhen you have a complex component that requires specific props and has some optional props, it would be nice if as soon as you start typing a component it would tell you which props it expects.",
          "createdAt": "2020-12-09T22:57:43Z",
          "author": { "login": "zimmah", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjM3MzYzNDk=",
    "body": "**Describe the bug**\r\nWhen using typescript within .svelte files, the generated source map references the wrong line number, it is too low.\r\n\r\n**To Reproduce**\r\n\r\n * Checkout the template and install libraries:\r\n```\r\nnpx degit sveltejs/template svelte-typescript-app\r\ncd svelte-typescript-app\r\nnpm install\r\n```\r\n\r\n * Modify the script in `src/App.svelte` like this:\r\n```js\r\n<script>\r\n    export let name;\r\n\r\n    // test comment\r\n    console.error(\"error logged from line five in App.svelte\")\r\n</script>\r\n```\r\n\r\n * Run the app and visit it in a browser, the following message is in the JavaScript console:\r\n```\r\nerror logged from line five in App.svelte     App.svelte:5\r\n```\r\n\r\n * Now add TypeScript support according to the instructions in the blog:\r\n```\r\nnode scripts/setupTypeScript.js\r\nnpm install\r\n```\r\n\r\n * Mark the script in `src/App.svelte` as TypeScript:\r\n```js\r\n<script lang=\"ts\">\r\n    export let name;\r\n\r\n    // test comment\r\n    console.error(\"error logged from line five in App.svelte\")\r\n</script>\r\n```\r\n\r\n * Run the app, visit it again, find the following message in the browser console:\r\n```\r\nerror logged from line five in App.svelte      App.svelte:3 \r\n```\r\n\r\n * Clicking on the file name takes me to line 3 of `App.svelte`:\r\n![svelte-error](https://user-images.githubusercontent.com/123276/88177708-9c866400-cc29-11ea-8765-0cf0ee2f5497.png)\r\n\r\nI've published a reproduction repo here: https://github.com/fd0/svelte-bug-typescript-sourcemap (including `package-lock.json`).\r\n\r\n**Expected behavior**\r\n\r\nThe error message should refer to the correct line in the source code (line 5 instead of line 3).\r\n\r\n**Information about your Svelte project:**\r\n * Chrome 83.0.4103.116\r\n * Debian Buster\r\n * Svelte 3.24.0\r\n * Rollup 2.22.2\r\n\r\n**Severity**\r\n\r\nIt's very annoying, but does not block me (or anybody else). Debugging takes much longer.\r\n\r\n**Additional context**\r\n\r\nThank you very much for adding TypeScript to Svelte, I love it!",
    "closedAt": "2020-11-19T18:39:05Z",
    "createdAt": "2020-07-22T12:49:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjQzNjcwNA==",
          "body": "Thanks for the issue report and help in reproducing this. If this only happens when using TypeScript you probably will get a better response filing this issue in the corresponding subproject. Though I'm not entirely sure whether that's https://github.com/sveltejs/svelte-preprocess or https://github.com/sveltejs/language-tools (if this is an issue in `svelte2tsx`) - you might want to ask in the #language-tools channel on Discord",
          "createdAt": "2020-07-22T12:56:39Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjQzOTM2MQ==",
          "body": "This is probably just because preprocessors don’t support sourcemaps. There is a PR for this somewhere. ",
          "createdAt": "2020-07-22T13:02:02Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjQ0MzgzOA==",
          "body": "https://github.com/sveltejs/svelte-preprocess/pull/171 says \"Added general `sourceMap: boolean` prop to set source maps for all preprocessors.\" and the reproduction repo uses svelte-preprocess v4. I'm not quite sure from the description if that is set by default or not. Perhaps you could try adding that option to the rollup config to see if it changes anything?",
          "createdAt": "2020-07-22T13:10:46Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjQ0NjQ5OQ==",
          "body": "Setting the `sourceMap` config to either `true` or `false` doesn't change anything:\r\n```\r\n            preprocess: sveltePreprocess({\r\n                sourceMap: true,\r\n            }),\r\n```\r\n\r\nSource maps are generated and reference the wrong line. Hm.",
          "createdAt": "2020-07-22T13:15:50Z",
          "author": { "login": "fd0", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjUzNDUwNQ==",
          "body": "Any sourcemaps generated by svelte-preprocess (and I don't know that it is generating any) currently won't do anything because the main compiler doesn't handle inputting sourcemaps - and so the sourcemaps in the compiled components will point to lines in the already-preprocessed versions of the components. Support for this will need to be added in Svelte (there is a PR for this somewhere that hasn't been reviewed yet), and the bundler plugins will need to be updated to pass the sourcemaps from the preprocessor to the compiler, and also the preprocessor will need to actually return sourcemaps.",
          "createdAt": "2020-07-22T15:53:50Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjU0MDE4OQ==",
          "body": "Ah, thanks for the clarification. And here's the PR for reference: https://github.com/sveltejs/svelte/pull/5015",
          "createdAt": "2020-07-22T16:03:36Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxNjA0Nzc4OA==",
          "body": "I tried to check status on this, but gets lost in github refs. Are we close to a solution? ",
          "createdAt": "2020-10-24T20:02:18Z",
          "author": { "login": "Baxterboom", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNDIxNTc2Nw==",
          "body": "> \r\n> \r\n> I tried to check status on this, but gets lost in github refs. Are we close to a solution?\r\n\r\nThis PR with the bulk of the work, as far as I can see, is approved and waiting to be merged: https://github.com/sveltejs/svelte/pull/5584\r\n\r\nSo I believe the answer is yes we are close.",
          "createdAt": "2020-11-09T19:08:21Z",
          "author": { "login": "samal-rasmussen", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjM1NTA5MDc=",
    "body": "hi all I'm new to svelte and don't know how which way is the best to handle loading and errors.\r\ncan you help me with https://svelte.dev/examples#hacker-news ?",
    "closedAt": "2020-07-22T10:00:25Z",
    "createdAt": "2020-07-22T07:47:00Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjMyNTg2Mw==",
          "body": "Try asking on the [Svelte Discord](https://svelte.dev/chat) channel. There are a bunch of people there who will be glad to help you out.",
          "createdAt": "2020-07-22T08:42:22Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjMwNDY3MzA=",
    "body": "After updating to Svelte 3.23.0 and above, even 3.24.0, our app is breaking with error `Cannot read property 'nodeName' of undefined`. The error is thrown if one of our components includes an SVG icon using `{@html }`.\r\n\r\nRelevant, compiled, Svelte code:\r\n\r\n```js\r\nclass HtmlTag {\r\n  constructor() {\r\n    let anchor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\r\n    this.a = anchor;\r\n    this.e = this.n = null;\r\n  }\r\n\r\n  m(html, target) {\r\n    let anchor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\r\n\r\n    if (!this.e) {\r\n      this.e = element(target.nodeName); // <--- !!!!!!! target is undefined\r\n      this.t = target;\r\n      this.h(html);\r\n    }\r\n\r\n    this.i(anchor);\r\n  }\r\n```\r\n\r\n**To Reproduce**\r\n\r\nI tried to reproduce this in the REPL with poor success so far. I'll keep trying.\r\nHowever, I can pinpoint the version that introduced the bug to `v3.23.0`. Reverting back to `v3.22.2`, everything works fine.\r\n\r\n\r\n**Expected behavior**\r\n\r\nI'd expect `{@html }` to work.\r\n\r\n**Stacktraces**\r\n\r\n<details>\r\n<summary>Stacktrace</summary>\r\n\r\n```\r\nTypeError: Cannot read property 'nodeName' of undefined\r\n    at HtmlTag.m (modules.js?hash=8fb578af72f24a88b5d38ae9d12839c62eba2d6d:5353)\r\n    at Object.mount [as m] (AttendanceIndicator.svelte:20)\r\n    at mount_component (modules.js?hash=8fb578af72f24a88b5d38ae9d12839c62eba2d6d:6398)\r\n    at Object.mount [as m] (GuestItem.svelte:21)\r\n    at Object.mount [as m] (GuestItem.svelte:16)\r\n    at mount_component (modules.js?hash=8fb578af72f24a88b5d38ae9d12839c62eba2d6d:6398)\r\n    at Object.mount [as m] (Card.svelte:110)\r\n    at Object.mount [as m] (Card.svelte:108)\r\n    at Object.mount [as m] (Card.svelte:68)\r\n    at mount_component (modules.js?hash=8fb578af72f24a88b5d38ae9d12839c62eba2d6d:6398)\r\n```\r\n\r\n</details>\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Latest Chrome, Mac OS Mojave\r\n\r\n- Svelte version: 3.23.0 - 3.24.0\r\n\r\n**Severity**\r\n\r\nSevere, app breaks.\r\n",
    "closedAt": "2020-07-21T17:58:23Z",
    "createdAt": "2020-07-21T14:11:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjAxNTk1Ng==",
          "body": "It was some sort of caching issue of the bundler used. I nuked the environment, set it up from scratch and now the same code works again. I'm sorry.",
          "createdAt": "2020-07-21T17:58:22Z",
          "author": { "login": "arggh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjI4NzIyODI=",
    "body": "**Describe the bug**\r\nEach loop register multiple values in `bind:group`, adding key expression doesn't help, but adding index strangely solves the problem.\r\n\r\n**To Reproduce**\r\nBuggy: https://svelte.dev/repl/6ee5960e75ac442bb0f8577f98941501?version=3.24.0\r\nFixed: https://svelte.dev/repl/5738295d14a6406a9f4a1a0b73f403d0?version=3.24.0\r\n\r\nFixed version works without the keys `(key)`\r\n\r\n**Expected behavior**\r\nExpected that key expression was the one to give each element unique id to bind the group\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Firefox Developer 79.0b9\r\n- Your operating system: Windows 10\r\n- Svelte version: 3.24.0\r\n- Uses Rollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nAnnoying, time wasting",
    "closedAt": "2020-07-24T19:48:30Z",
    "createdAt": "2020-07-21T10:48:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjMzNDUzMQ==",
          "body": "Actually it looks like adding the index variable to the #each expression (i.e. `day, d` instead of `day`) is what makes the difference, even if the index isn't used at all.\r\n\r\nWith the `day, d` version, we see that the compiled code uses `ctx[8]` for the index value:\r\n\r\n```js\r\nfunction get_each_context(ctx, list, i) {\r\n\tconst child_ctx = ctx.slice();\r\n\tchild_ctx[6] = list[i];\r\n\tchild_ctx[8] = i;\r\n\treturn child_ctx;\r\n}\r\n```\r\n\r\nAnd then in the inner each loop, it uses `ctx[8]` to index into the binding groups:\r\n```js\r\n/*$$binding_groups*/ ctx[5][0][/*d*/ ctx[8]].push(input);\r\n```\r\n\r\nWithout the explicit index, Svelte is still generating an index internally and linking the bind group to it as before:\r\n```js\r\n/*$$binding_groups*/ ctx[5][0][/*day_index*/ ctx[8]].push(input);\r\n```\r\n\r\nBut `ctx[8]` is not actually initialized anymore, so I think all the inputs ends up sharing the same binding group, or something like that.\r\n\r\n```js\r\nfunction get_each_context(ctx, list, i) {\r\n\tconst child_ctx = ctx.slice();\r\n\tchild_ctx[6] = list[i];\r\n\treturn child_ctx;\r\n}\r\n```\r\n\r\nLooks to me like this line needs to add a condition that checks if there is an implicit index.\r\nhttps://github.com/sveltejs/svelte/blob/38de3b2e9f46925be12ce43f55c424b49ddfb0af/src/compiler/compile/render_dom/wrappers/EachBlock.ts#L204 \r\n\r\nI haven't yet found the flag that indicates if it that implicit index exists or not. If nobody else gets to it first, I'll try to get a fix in later this week.\r\n\r\n",
          "createdAt": "2020-07-22T09:00:43Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2OTMwMTQ5OA==",
          "body": "This is fixed in 3.24.1 - https://svelte.dev/repl/6ee5960e75ac442bb0f8577f98941501?version=3.24.1",
          "createdAt": "2020-08-05T16:39:40Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjI3MzkwNDY=",
    "body": "**Describe the bug**\r\nWhen you pass a list of parameters to an action, only the last parameter in the list is being received by the function. What's more, the parameter is being \"moved\" to the first position.\r\n\r\n```\r\n<script>\t\r\n\tfunction test (node, el1, el2, el3) {\r\n\t\tconsole.log(el1, el2, el3) // logs `third undefined undefined`, instead of `first second third`\r\n\t}\r\n</script>\r\n\r\n<h1 use:test={'first', 'second', 'third'}>Hello!</h1>\r\n```\r\n\r\nThis used to work in [3.12.1](https://svelte.dev/repl/b8669663db134d41aec07019285ffab4?version=3.12.1) but it doesn't work in [3.24.0](https://svelte.dev/repl/b8669663db134d41aec07019285ffab4?version=3.24.0)\r\n\r\n**To Reproduce**\r\nOpen the [this REPL](https://svelte.dev/repl/b8669663db134d41aec07019285ffab4?version=3.24.0) and see the logs. Compare the logs with [that one](https://svelte.dev/repl/b8669663db134d41aec07019285ffab4?version=3.12.1).\r\n\r\n**Expected behavior**\r\nParameters should be passed correctly.\r\n",
    "closedAt": "2020-07-21T14:16:28Z",
    "createdAt": "2020-07-21T08:23:46Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTcxNDYwMQ==",
          "body": "Actions only support a single parameter, which can be an object if you want to pass multiple things see [the docs](https://svelte.dev/docs#use_action)",
          "createdAt": "2020-07-21T08:28:40Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTcxNjA0NQ==",
          "body": "I see, it used to work differently in [3.12.1](https://svelte.dev/repl/b8669663db134d41aec07019285ffab4?version=3.12.1) and then maybe in this case the log should show `first`, not `third`, right? ",
          "createdAt": "2020-07-21T08:31:40Z",
          "author": { "login": "yuliankarapetkov", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTcxOTY3Mw==",
          "body": "@yuliankarapetkov  I agree it should show `first` instead of `third`.\r\n\r\n@antony I would classify this as a breaking change, as we had code using 3.12.1 w/ multiple params that no longer works. And in the changelog for 3.13.0 (when this change seemed to have been made), there isn't anything about this change. It would be helpful to have a small note about this in the changelog. Thanks! 🙏 ",
          "createdAt": "2020-07-21T08:39:19Z",
          "author": { "login": "jhwheeler", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTc5NjgwNw==",
          "body": "If something is undocumented and unintentional, it's subject to change without us noticing, so it's difficult to make a changelog for something which wasn't supported, and for something which we weren't aware of the current behaviour, if that makes sense?\r\n\r\nThe behaviour is now according to the docs, and documented accordingly, any former behaviour was simply as-was.\r\n\r\nThe same applies for the parameter ordering, we only support passing a single parameter, so therefore that behaviour is documented, tested, and works as described - if you call methods with invalid signatures, then invalid behaviour may well occur.",
          "createdAt": "2020-07-21T11:21:36Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTg0MTA3OA==",
          "body": "Multiple parameters working was a bug and we have fixed that now.\r\n\r\n@yuliankarapetkov \r\n> I see, it used to work differently in 3.12.1 and then maybe in this case the log should show first, not third, right?\r\n\r\nNo, the current behaviour is expected. The argument you provide to an action is an expression that is passed as the second parameter to the action function:\r\n\r\n```html\r\n<div use:fn={1, 2, 3} />\r\n```\r\n\r\nIs actually doing this:\r\n\r\n```js\r\nfn(\r\n  node, \r\n  (1, 2, 3)\r\n)\r\n```\r\nEvaluating the expression `(1, 2, 3)` will return `3`.\r\n",
          "createdAt": "2020-07-21T12:51:56Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTg1MjU4Ng==",
          "body": "OK, makes sense. Thanks for clarifying, @antony and @pngwn!",
          "createdAt": "2020-07-21T13:12:05Z",
          "author": { "login": "jhwheeler", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTg4NTY3Nw==",
          "body": "We agreed to rephrase a bit to clarify that actions can have just one parameter (although the signature is correct), re-opening.",
          "createdAt": "2020-07-21T14:11:47Z",
          "author": { "login": "mindrones", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjEzMzAxNA==",
          "body": "This came up initially in #3923 - That it worked with multiple parameters before 3.13.0 was an accident and never an intended behavior.",
          "createdAt": "2020-07-21T22:11:14Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjI0Nzk3NDk=",
    "body": "Hello, I tried really hard to integrate MobX with Svelte and the result doesn't satisfy me.\r\n\r\nI ended up with a Store implementation that is a pile of hacks because MobX needs to execute the render loop and be in control of the rerender (invalidation) function.\r\n\r\nThe solution I am talking about:\r\n```\r\n<script>\r\n  import { observable } from \"mobx\";\r\n  import { reaction } from \"mobx\";\r\n\r\n  const scriptArgs = arguments;\r\n\r\n  function SvelteMobXStore(mobxObservable) {\r\n    return {\r\n      subscribe: function(run, invalidate) {\r\n        run(mobXObservable);\r\n        let dispose;\r\n        scriptArgs[0][\"$$\"].enhance_create_fragment = orig => {\r\n          return function(ctx) {\r\n            let retVal;\r\n            dispose = reaction(\r\n              () => {\r\n                retVal = orig(ctx);\r\n                run(mobXObservable);\r\n              },\r\n              () => {\r\n                invalidate();\r\n              }\r\n            );\r\n            return retVal;\r\n          };\r\n        };\r\n\r\n        return () => {\r\n          dispose();\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  const mobXObservable = observable({\r\n    nested: {\r\n      array: [1, 2, 3, 4]\r\n    }\r\n  });\r\n  const store = SvelteMobXStore(mobXObservable);\r\n</script>\r\n\r\n<div\r\n  on:click={() => {\r\n    console.log(`CLICKED`);\r\n    mobXObservable.nested.array.push('svelte');\r\n  }}>\r\n  The counter value is equal to {$store.nested.array.join(', ')}\r\n</div>\r\n\r\n```\r\n\r\nI also came up with a custom `enhance_create_fragment` function which lets MobX capture property access. \r\nHere are modified lines from Svelte source (`Component.ts` L146+):\r\n```\r\n\tif (create_fragment) {\r\n\t\tif ($$['enhance_create_fragment']) {\r\n\t\t\tconsole.log(`ENHANCING...`);\r\n\t\t\t$$.fragment = $$['enhance_create_fragment'](create_fragment, () => {\r\n\t\t\t\tif (ready){\r\n\t\t\t\t\tdirty_components.push(component);\r\n\t\t\t\t\tschedule_update();\r\n\t\t\t\t\tcomponent.$$.dirty.fill(0);\r\n\t\t\t\t}\r\n\t\t\t})($$.ctx);\r\n\t\t} else {\r\n\t\t\t$$.fragment = create_fragment($$.ctx);\r\n\t\t}\r\n\t} else {\r\n\t\t$$.fragment = false;\r\n\t}\r\n```\r\n\r\nWhat I don't like in particular is:\r\n - double call to `run(..)` fn - does it break store contract? perf?\r\n - `arguments` abuse to extract Svelte internals\r\n - need to \"enhance\" `create_fragment` to capture property access\r\n - artificial use of `$store` just to get subscription called\r\n\r\nDo you have any hints on how to do it better? I feel that the current solution is extremely hacky but at least I can use subscriptions to nested data structures.\r\n\r\n",
    "closedAt": "2020-07-21T07:26:39Z",
    "createdAt": "2020-07-21T02:10:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTY4NTI4OQ==",
          "body": "Hi @episage \r\n\r\nThe best place to discuss a low-level integration like this would be the #internals channel on [Svelte Discord](https://svelte.dev/chat). It would be very difficult to help you on github issues.",
          "createdAt": "2020-07-21T07:26:39Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTg0OTg2Mg==",
          "body": "Just leaving a concluding note here.\r\n\r\nSvelte will probably never have a deep integration with MobX. Developing such requires quite a lot of rework on the Svelte internals. :|",
          "createdAt": "2020-07-21T13:07:11Z",
          "author": { "login": "episage", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDA0MjMyNA==",
          "body": "Hi @episage I've managed to pull this off https://github.com/kewp/mobx-svelte/",
          "createdAt": "2021-02-23T09:45:05Z",
          "author": { "login": "kewp", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjE2MzI1NDM=",
    "body": "I was trying to create a CRUD class that could take any type in, and create read write update delete, but in doing so, I was missing some of the types inside the store index file.\r\n\r\nIn my local svelte index.d.ts file I added the exports and everything was working great.\r\n\r\n```ts\r\nimport {\r\n    writable,\r\n    Updater,\r\n    Subscriber,\r\n    Invalidator,\r\n    Unsubscriber\r\n} from \"svelte/store\";\r\n\r\nclass StoreModule<T> {\r\n    public subscribe: (\r\n        run: Subscriber<T>,\r\n        invalidate?: Invalidator<T>\r\n    ) => Unsubscriber;\r\n    private update: (updater: Updater<T>) => void;\r\n\r\n    constructor(initialValue: T) {\r\n        const { update, subscribe, set } = writable(initialValue);\r\n        this.subscribe = subscribe;\r\n        this.update = update;\r\n    }\r\n\r\n    public deleteById(id: string) {}\r\n    public updateById(valToUpdate: T, id: string) {}\r\n    public addNew(newItem: T) {}\r\n}\r\n\r\nexport type Todo = {\r\n    id: string;\r\n    title: string;\r\n};\r\n\r\nexport const todos = new StoreModule<Todo[]>([\r\n    { title: \"initialTodo\", id: Math.random().toString() },\r\n]);\r\n```\r\n\r\n\r\nThe types not exported are `Updater,\r\n    Subscriber,\r\n    Invalidator,\r\n    Unsubscriber`.\r\n\r\nI might be jumping the gun on this, as I know typescript support is still not merged into the production build of svelte, but in my opinon exporting the types is not destructive in any way.",
    "closedAt": null,
    "createdAt": "2020-07-20T10:06:31Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTA2MTg5OQ==",
          "body": "The second argument to `subscribe` (and the invalidator) are not part of the public API - #3859 - and so any types we export here should reflect that.",
          "createdAt": "2020-07-20T14:07:00Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTE3NjkzOQ==",
          "body": "@Conduitry First of all, I would like to apologize for posting a duplicate issue, and I will be improving my issue searching skills to make sure this does not happen in the future. In regard to only exposing the types that are part of the API, I can try and take a crack at that? ",
          "createdAt": "2020-07-20T16:47:41Z",
          "author": { "login": "Simmetopia", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyMzE2OTEzNw==",
          "body": "Any updates?",
          "createdAt": "2020-11-06T16:22:06Z",
          "author": { "login": "YogliB", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MDEyMzMwOA==",
          "body": "Does this issue have an acceptable path forward? Without some type of public types available, it is rough going when (at least) creating wrappers around `writeable`, `readable`, etc. and TS strict mode flags set. ",
          "createdAt": "2021-02-16T21:17:21Z",
          "author": { "login": "abalmos", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NDM3MzE5NA==",
          "body": "You can type-hint when creating a store, which will then pass it along to subscribers/etc.\r\n\r\n![image](https://user-images.githubusercontent.com/17652149/108883145-554ac200-75c2-11eb-945c-7dbdbb0b2fd9.png)\r\n",
          "createdAt": "2021-02-23T17:32:34Z",
          "author": { "login": "parker-codes", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjEyNTk5MzM=",
    "body": "**Describe the bug**\r\nOn `npm build` in the root of the project. \r\n\r\n```\r\nsrc/compiler/index.ts → compiler.js...\r\n(!) Circular dependencies\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/AwaitBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/EachBlock.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\nsrc/compiler/compile/render_dom/wrappers/Fragment.ts -> src/compiler/compile/render_dom/wrappers/Element/index.ts -> src/compiler/compile/render_dom/wrappers/Fragment.ts\r\n...and 14 more\r\n```\r\n\r\n\r\n**Information about your Svelte project:**\r\n\r\n\r\n- Your operating system: (e.x. OS X 10.15.5)\r\n\r\n- Svelte latest Verison\r\n\r\n- Whether your project uses Webpack or Rollup\r\n\r\nNot sure if this is a problem. Just wanted to report it.\r\n",
    "closedAt": "2020-07-20T14:03:48Z",
    "createdAt": "2020-07-20T01:57:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDc1NzEzNg==",
          "body": "Additionally when running update in `/site`: \r\n\r\n```\r\n> cloned sveltejs/template#master to scripts/svelte-app\r\n(node:80769) Warning: Accessing non-existent property 'cat' of module exports inside circular dependency\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n(node:80769) Warning: Accessing non-existent property 'cd' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'chmod' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'cp' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'dirs' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'pushd' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'popd' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'echo' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'tempdir' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'pwd' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'exec' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'ls' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'find' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'grep' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'head' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'ln' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'mkdir' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'rm' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'mv' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'sed' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'set' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'sort' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'tail' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'test' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'to' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'toEnd' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'touch' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'uniq' of module exports inside circular dependency\r\n(node:80769) Warning: Accessing non-existent property 'which' of module exports inside circular dependency\r\n```",
          "createdAt": "2020-07-20T01:59:31Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDg1ODQ3Ng==",
          "body": "I'm getting this too.",
          "createdAt": "2020-07-20T07:36:35Z",
          "author": { "login": "mindrones", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTA2MDA1Nw==",
          "body": "This isn't really a problem, and I don't think it's worth doing a bunch of refactoring to avoid it.",
          "createdAt": "2020-07-20T14:03:48Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTA2MjE5Mg==",
          "body": "It's worth noting that you *can* filter this in `onwarn` if it bothers you, but I think for our own site it's fine to leave the warnings.",
          "createdAt": "2020-07-20T14:07:33Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MTA2Mzg1OA==",
          "body": "Gotcha, ty!\n\nOn Mon, Jul 20, 2020 at 10:07 AM Antony Jones <notifications@github.com>\nwrote:\n\n> It's worth noting that you *can* filter this in onwarn if it bothers you,\n> but I think for our own site it's fine to leave the warnings.\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5167#issuecomment-661062192>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AATDCI35MU7CZLZEYAEZVETR4RFTLANCNFSM4PBXYLPQ>\n> .\n>\n\n\n-- \nBenjamin\n",
          "createdAt": "2020-07-20T14:10:24Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NjAwMTcwMzE=",
    "body": "**Describe the bug**\r\n\r\nRecently I fixed a tiny visual issue in the REPL when viewing the REPL on iOS with #5153, and this issue in [svelte-js/site-kit]( https://github.com/sveltejs/site-kit/pull/23) fixes another . Seeing as there is some momentum around the REPL on mobile I would love to log this bug so it is known.\r\n\r\nIn Safari iOS, if you enter a REPL, you don't see the bottom controls:\r\n\r\n<img width=\"529\" alt=\"Screenshot 2020-07-18 at 10 45 32\" src=\"https://user-images.githubusercontent.com/12690/87848882-6e7ce900-c8e4-11ea-9ca9-da0448f90b4f.png\">\r\n\r\nIf you scroll, you can get to the input/output control, but then you lose the title of the REPL.\r\n\r\n<img width=\"529\" alt=\"Screenshot 2020-07-18 at 10 48 31\" src=\"https://user-images.githubusercontent.com/12690/87848867-4097a480-c8e4-11ea-9c02-0873e200b20e.png\">\r\n\r\nI think this might be able to be fixed with `-webkit-fill-available` (see [article](https://css-tricks.com/css-fix-for-100vh-in-mobile-webkit/)).  \r\n\r\n**Extra**\r\n\r\nNot sure if this is the right repo for this, Benjamin fixed his REPL related issue on the other repo. Feel free to transfer to another repo if necessary.\r\n\r\n**To Reproduce**\r\n\r\n* Use iOS simulator or a real iOS device\r\n* Visit https://svelte.dev/repl\r\n* Try to scroll to the output\r\n\r\n**Severity**\r\n\r\nLow.\r\n",
    "closedAt": "2020-08-12T21:43:46Z",
    "createdAt": "2020-07-18T08:53:12Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTk2NDkzNjM=",
    "body": "\r\nAdd documentation so contributors know how to change/work with site-kit\r\n",
    "closedAt": "2020-07-22T11:34:04Z",
    "createdAt": "2020-07-17T21:19:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MjQwMjY4MA==",
          "body": "Closed by #5163",
          "createdAt": "2020-07-22T11:34:04Z",
          "author": { "login": "mindrones", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTkzNjQxNDE=",
    "body": "**Describe the bug**\r\nSince #5079, valid code is causing the following error:\r\n\r\n> Stores must be declared at the top level of the component (this may change in a future version of Svelte)\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/8240f1807eda4d429018826229910e48?version=3.24.0\r\n\r\nIt's coming from [this code](https://github.com/Rich-Harris/pancake/blob/master/components/Grid.svelte):\r\n\r\n```svelte\r\n<script>\r\n  import { getChartContext } from './Chart.svelte';\r\n  import { get_ticks } from '../utils/ticks.mjs';\r\n  \r\n  // ...\r\n\r\n  const { x1, y1, x2, y2, x, y } = getChartContext();\r\n  \r\n  // ...\r\n\r\n  $: style = orientation === HORIZONTAL\r\n    ? (y, i) => `width: 100%; height: 0; top: ${$y(y, i)}%`\r\n    : (x, i) => `width: 0; height: 100%; left: ${$x(x, i)}%`;\r\n</script>\r\n```\r\n\r\nThe `y` that is part of the chart context is a store; the `y` inside the closure is a number.\r\n\r\n**Expected behavior**\r\nNo error\r\n\r\n**Severity**\r\n\r\nModerate. Requires either downgrading Svelte in our project, or working around the bug in Pancake",
    "closedAt": null,
    "createdAt": "2020-07-17T15:45:55Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDE4MTA0NA==",
          "body": "Ah — looks like someone caught this a few days ago https://github.com/Rich-Harris/pancake/issues/19",
          "createdAt": "2020-07-17T15:47:09Z",
          "author": { "login": "Rich-Harris", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDE4NzQ2OA==",
          "body": "Yeah I tried to solicit input on #5079. It is technically a breaking change, but I'd argue that the code that is now disallowed was confusing. I'd kind of push for changing components that were affected by this, rather than rolling back part of this check. Having a scope where `foo` and `$foo` refer to different variables seems quite confusing.",
          "createdAt": "2020-07-17T15:58:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDE5MTUwMg==",
          "body": "Yeah, I guess in this situation we get to decide whether the code is 'valid' or not. For the time being at least I've made the change in pancake. I guess I wouldn't be put out if we closed this accordingly; at least there's an issue to land on if someone searches for the text of the error now.",
          "createdAt": "2020-07-17T16:05:28Z",
          "author": { "login": "Rich-Harris", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDE5NDgwMg==",
          "body": "Something else I had mentioned on that other PR - if we ever plan to allow subscribing to stores that are not defined at the top-level, that would have itself technically been a breaking change vs. the old behavior. (Because using `$foo` in a scope where `foo` was shadowing a top-level `foo` would suddenly mean something different.) Having a nice long intervening period where it throws a compile time error seems a lot safer.",
          "createdAt": "2020-07-17T16:11:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTkxNzY0NjM=",
    "body": "**Describe the bug**\r\nCSS rules that don't match any element get removed, even if the containing style block is set as `global`.\r\n\r\n**Logs**\r\nThe `rollup` version doesn't output anything. The `svelte-loader` version logs the following warning: \r\n```\r\nWARNING in ./src/App.svelte\r\nModule Warning (from ./node_modules/svelte-loader/index.js):\r\nUnused CSS selector (7:1)\r\n 5: \r\n 6: <style global>\r\n 7:   h1 {\r\n      ^\r\n 8:     color: purple;\r\n 9:   }\r\n @ ./src/main.js 1:0-31 3:16-19\r\n @ multi ./src/main.js\r\nℹ ｢wdm｣: Compiled with warnings.\r\n```\r\nThe REPL says `Unused CSS selector (7:1)`\r\n\r\n**To Reproduce**\r\nGlobal style block:\r\n_not working_ https://svelte.dev/repl/a1df9fd559224a3392dba8bbd78ecd19?version=3.24.0\r\n\r\nGlobal selector:\r\n_working_ https://svelte.dev/repl/798558a0d0ac4bd39c48ee5760a49e49?version=3.24.0\r\n\r\n**Expected behavior**\r\nThe global style block should behave as if each and every rule inside of it was marked with `:global`. It's documented [here](https://github.com/sveltejs/svelte-preprocess/blob/master/docs/preprocessing.md#globalstyle).\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: Doesn't matter\r\n- Your operating system: Doesn't matter\r\n- Svelte version: Latest\r\n- Happens with Webpack, Rollup, and the REPL\r\n\r\n**Severity**\r\nThis is a no-goer for me.\r\n\r\n**Additional context**\r\nI need to scope (cascade scope) external css files (`postcss-nested-import`) to quickly test multiple configurations in storybook, but if all the external css gets stripped away, I can't work. My root component is a wrapper for whatever component I send through.\r\n```svelte\r\n<script>\r\n  export let Component;\r\n  export let props = {};\r\n</script>\r\n\r\n<style lang=\"postcss\" global>\r\n  .story.client-x {\r\n    @import './skins/client-x.css';\r\n  }\r\n</style>\r\n\r\n<div class=\"story client-x\">\r\n  <svelte:component this={Component} {...props} />\r\n</div>\r\n```",
    "closedAt": "2020-07-17T19:46:21Z",
    "createdAt": "2020-07-17T11:31:09Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDA1OTA2MQ==",
          "body": "Svelte does not support `global` as a modifier on the style block.  \r\nThis might be implemented by a preprocessor though",
          "createdAt": "2020-07-17T11:36:28Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDA1OTMwOQ==",
          "body": "Global style block isn't a svelte feature, it's a `svelte-preprocess` feature, so it will never work in the REPL.\r\n\r\nIf you have a reproduction with svelte-preprocess, we can move this issue there.\r\n",
          "createdAt": "2020-07-17T11:37:03Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDMwNTcwMA==",
          "body": "Yes. You're right. I thought `svelte-preprocess` was emebedded into `svelte`, but apparently it's not. Thank you for clearing up my confusion. Cheers!",
          "createdAt": "2020-07-17T19:46:21Z",
          "author": { "login": "fedetibaldo", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTkxMTY2NTI=",
    "body": "Hi, everyone!\r\n\r\nCould you help me to do this trick. I want to bind some props in parent component and spread properties for child.\r\n\r\nParent component:\r\n```\r\n<script>\r\nimport Input from './input.svelte';\r\n\r\nconst inputProps = {\r\n  type: 'email',\r\n  value: null,\r\n  required,\r\n  placeholder: 'Example text',\r\n  label: 'Test input',\r\n};\r\n</script>\r\n\r\n<Input {...inputProps} />\r\n```\r\n\r\nChild component:\r\n```\r\n<script>\r\nexport let type = 'text';\r\nexport let value;\r\nexport let required = false;\r\nexport let placeholder;\r\nexport let label;\r\n</script>\r\n\r\n{#if label}\r\n  <label>{label}</label>\r\n{/if}\r\n<input\r\n  {type}\r\n  {required}\r\n  {placeholder}\r\n  bind:value />\r\n```\r\n\r\nI can do it this way in parent component:\r\n```\r\n<Input\r\n  {...inputProps}\r\n  bind:value={inputProps.value} />\r\n```\r\n\r\nAny other solution?",
    "closedAt": "2020-07-17T10:32:31Z",
    "createdAt": "2020-07-17T10:22:42Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDAyNzYwMA==",
          "body": "Hi there - github issues isn't the right place for support questions. Please find support in [https://svelte.dev/chat](chat) instead.",
          "createdAt": "2020-07-17T10:32:31Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTg1OTMxMzI=",
    "body": "**Describe the bug**\r\nIn some cases it's unclear where whitespace is removed. In this case the trailing whitespace in the `span` is only removed if the `{#each}` block has a next sibling which is counterintuitive.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/c372a21810eb4b4eadb8123b50b2eee3?version=3.24.0\r\n**Expected behavior**\r\n```\r\nabc\r\n\ts\r\nabc\r\n\ts\r\n```\r\nLeading and trailing whitespace should be removed consistently.\r\n\r\nRelated / Possible duplicate: https://github.com/sveltejs/svelte/issues/189\r\n",
    "closedAt": "2020-07-17T10:35:29Z",
    "createdAt": "2020-07-16T21:37:59Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTY5MDY4Nw==",
          "body": "### Related bug\r\n\r\n(Describing it here because it is very similar)\r\n\r\n**Describe the bug**\r\n\r\nSSR whitespace and DOM whitespace sometimes don't match. The SSR build leaves some whitespace in place, whereas the DOM build removes it.\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/2a51d34bbdcc424abbd1d006aad6a54c?version=3.24.0\r\n\r\nClient:\r\n```\r\n<div><pre><span class=\"color: red\">1</span><span class=\"color: red\">2</span><span class=\"color: red\">3</span>\r\n    </pre></div>\r\n```\r\nServer:\r\n```\r\n<div><pre><span class=\"color: red\">1\r\n        </span><span class=\"color: red\">2\r\n        </span><span class=\"color: red\">3\r\n        </span>\r\n    </pre></div></div>\r\n```",
          "createdAt": "2020-07-16T21:43:03Z",
          "author": { "login": "lukasmoellerch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDAyOTE3MQ==",
          "body": "This is a duplicate of https://github.com/sveltejs/svelte/issues/189 and https://github.com/sveltejs/svelte/issues/3168 as well as various other issues relating to SSR/whitespace discrepancies.",
          "createdAt": "2020-07-17T10:35:29Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTg1NTE3MjE=",
    "body": "How I am supposed to get rid of this warning?\r\nThe warning is because of removing the usage of the `segment` prop from the _layout component of the sapper.\r\n\r\nhttps://github.com/sveltejs/sapper-template-webpack/blob/master/src/routes/_layout.svelte#L4\r\n\r\nThis is my whole code:\r\n```html\r\n<script>\r\nexport let segment;\r\n</script>\r\n\r\n<main>\r\n    <slot></slot>\r\n</main>\r\n```\r\n\r\nI also tried to use `<!-- svelte-ignore unused-export-let -->` before the `script` tag but still no chance.\r\n\r\nIf I stop using `segment` prop I will get a warning in the browser saying:\r\n`<Layout> was created with unknown prop 'segment'`",
    "closedAt": "2020-07-17T10:53:26Z",
    "createdAt": "2020-07-16T20:41:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDAzODc0OQ==",
          "body": "You can't, currently. There is an open issue for this https://github.com/sveltejs/svelte/issues/4652\r\n\r\nAs well as an issue on Sapper (where this issue belongs) to remove this prop https://github.com/sveltejs/sapper/issues/824",
          "createdAt": "2020-07-17T10:53:25Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTg1MzAxOTk=",
    "body": "In Next.js, routes can be SSR, [SSG](https://nextjs.org/blog/next-9#automatic-static-optimization), or [incremental SSG](https://nextjs.org/blog/next-9-4#incremental-static-regeneration-beta). \r\n\r\n- SSR: built when requested by a user.\r\n- SSG: built during build step.\r\n- Incremental SSG: first request by user fetches data & builds static version, subsequent requests receive static version.\r\n\r\nMote info:\r\n- [Blog post describing Next.js' solution.](https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support)\r\n- [Link to Next.js's RFC discussing why and how this was implemented.](https://github.com/vercel/next.js/issues/9524)\r\n\r\nCurrently, Svelte appears to only offer all SSR (via build) or all static (via export).\r\n\r\n**Describe the solution you'd like**\r\n\r\nIt'd be useful to choose which method is used per route. This would allow marketing pages to use SSG, a dashboard to use SSR, and a blog to use incremental SSG.\r\n\r\n**How important is this feature to you?**\r\n\r\nIt's not urgent. But I think it will be important long term for a framework to offer this to be competitive.\r\n\r\nAdding this issue to track/follow this. \r\n\r\n",
    "closedAt": "2020-07-16T20:23:36Z",
    "createdAt": "2020-07-16T20:15:02Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTY1MTI2Mg==",
          "body": "This would be a separate project. There are some existing static site generator projects that build on Svelte, but no blessed ones. Svelte doesn't have a concept of routes. This issue would be better raised against whatever project you're thinking of using, because right now this is out of scope.",
          "createdAt": "2020-07-16T20:23:36Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTY1MTU3OA==",
          "body": "Would this issue be better opened on Sapper? \r\n\r\n_Edit: Moved to https://github.com/sveltejs/sapper/issues/1324_ ",
          "createdAt": "2020-07-16T20:24:16Z",
          "author": { "login": "websocket98765", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTg0MDY4MzU=",
    "body": "**Describe the bug**  \r\nWhen we bind an input to a object property, and if we use an expression to compute that property name, binding not only triggers reactivity of containing object, but also other other objects used in it's property-path computation. For example, if we say `<input bind:value={form[schema.name]}>`, changing input not only triggers reactivity over `form` object, but also on `schema` object used in property name computation.\r\n\r\nAnd if we declare to reset `form` on `schema` change, that will be mis-triggered on value change to above binding, and effectively resets form, and binding itself again.\r\n\r\n**To Reproduce**  \r\nHere is [REPL](https://svelte.dev/repl/db10918e1b1a4d6eb865aafc63809149?version=3.24.0). Try to input in field, and we can see reactivity mis-triggering on `schema`.\r\n\r\n**Expected behavior**  \r\nshould not trigger reactivity on other objects used in expression to compute property path.\r\n\r\n**Severity**  \r\nSeems serious.\r\n\r\n**Additional context**  \r\nPossibly related issues:  \r\n#4448 , #4933",
    "closedAt": null,
    "createdAt": "2020-07-16T17:34:39Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDExNTkzNg==",
          "body": "I do have the same problem on the last svelte version using inputs from https://github.com/matyunya/smelte.\r\nVersion 3.24.0 erase input content when blurring the field.\r\nVersion 3.23.2 works just fine.",
          "createdAt": "2020-07-17T13:46:01Z",
          "author": { "login": "ticruz38", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDExOTMxMw==",
          "body": "I can reproduce this issue with version 3.23.2 as well: https://svelte.dev/repl/4080ea1bee0249fba011f3f25707dbd8?version=3.23.2",
          "createdAt": "2020-07-17T13:53:05Z",
          "author": { "login": "lukasmoellerch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NjA5NjcyOA==",
          "body": "Hello, I have the same issue on latest version 3.25 as well : https://svelte.dev/repl/ea825f47db4e44b1b29864ebe2f61e34?version=3.25.1\r\n\r\nWhen using a simple string it works as expected but using an object will trigger reactivity on the object and not only its property.",
          "createdAt": "2020-09-21T12:58:11Z",
          "author": { "login": "Vaxarm", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTgxMzU5ODQ=",
    "body": "Buttons don't appear on the same line in Safari Mobile:\r\n\r\n![image](https://user-images.githubusercontent.com/12690/87665502-559af900-c767-11ea-947d-0dd079cc34dc.png)\r\n\r\nThis is especially apparent when viewing a REPL on iOS on an iPhone 8/iPhone SE.\r\n\r\nThis be fixed by adding a rule of `white-space: nowrap` on `.app-controls`.\r\n\r\n![image](https://user-images.githubusercontent.com/12690/87665509-5764bc80-c767-11ea-81b7-981cedbd4343.png)\r\n\r\nI will send a PR referencing this issue number.",
    "closedAt": "2020-07-17T10:54:45Z",
    "createdAt": "2020-07-16T12:03:43Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTc4NTQ4MDA=",
    "body": "The default select value is not applied to the select widget.\r\n\r\n```js\r\n<script>\r\n  var users = {\r\n    1: {name: \"aaa\"},\r\n    2: {name: \"bbb\"},\r\n    3: {name: \"ccc\"},\r\n  };\r\n  var user_id=2;\r\n</script>\r\n \r\n<select value={user_id}>\r\n  {#each Object.entries(users) as [k, v]}\r\n    <option value={k}>{v.name}</option>\r\n  {/each}\r\n</select>\r\n```\r\nhttps://svelte.dev/repl/895418a4cb0249a1af034cfbb71e7ae6?version=3.24.0\r\n\r\nI expect bbb to be selected.\r\n\r\nChrome Version 83.0.4103.116 (Official Build) (64-bit)\r\nWindows 7\r\n\r\nIt's strange, not too severe.\r\n\r\nIf I change the type of `user_id` to string it works, but why should I?",
    "closedAt": "2020-07-17T10:50:17Z",
    "createdAt": "2020-07-16T05:10:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTE2OTE2OA==",
          "body": "These two options work as an alternative, but I understand this may not be the expected way to resolve this.\r\n\r\n- https://svelte.dev/repl/d2bfd051ac6b4a5eac3bdb4573484353?version=3.24.0\r\n```html\r\n<script>\r\n    var users = {\r\n        1: {name: \"aaa\"},\r\n        2: {name: \"bbb\"},\r\n        3: {name: \"ccc\"},\r\n    };\r\n    var user_id='2';\r\n</script>\r\n \r\n<select value={user_id}>\r\n    {#each Object.entries(users) as [k, v]}\r\n\t    <option value={k}>{v.name}</option>\r\n    {/each}\r\n</select>\r\n```\r\n\r\n- https://svelte.dev/repl/cb6c201405884baa8de1e76037c2ed1e?version=3.24.0\r\n```html\r\n<script>\r\n  var users = {\r\n        1: {name: \"aaa\"},\r\n        2: {name: \"bbb\"},\r\n        3: {name: \"ccc\"},\r\n    };\r\n    var user_id=2;\r\n</script>\r\n \r\n<select value={user_id.toString()}>\r\n    {#each Object.entries(users) as [k, v]}\r\n\t    <option value={k}>{v.name}</option>\r\n    {/each}\r\n</select>\r\n```\r\n\r\n**Update**: I see now that you mentioned this string change in your issue. (Missed this initially)\r\n  - If you add a `{@debug k}` right after your `{#each ...` and right above `<option ...` it will show that `k` is a string.\r\n  - https://svelte.dev/repl/b4ddd0be9c1f4408aef600cca70cb02a?version=3.24.0\r\n```js\r\n▶ Object { k: \"1\" }\r\n▶ Object { k: \"2\" }\r\n▶ Object { k: \"3\" }\r\n```\r\n  - I am not sure that an `option value` can actually get set to a `number` though. \r\n  - The solution might be that the `select value` attribute should auto coerce to a `string` when it encounters a `number`.",
          "createdAt": "2020-07-16T05:33:17Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTE3NzI3MQ==",
          "body": "The conversion happens in the 'entries' method:\r\n```\r\n{Object.entries(users)[0][0] === '1'} true\r\n```\r\n>The solution might be that the select value attribute should auto coerce to a string.\r\n\r\nThe tutorial shows how select value can be an arbitrary object: https://svelte.dev/tutorial/select-bindings",
          "createdAt": "2020-07-16T05:58:04Z",
          "author": { "login": "axil", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTE3OTEzMg==",
          "body": "Here is another way that seems to work.\r\n  - https://svelte.dev/repl/b4ddd0be9c1f4408aef600cca70cb02a?version=3.24.0\r\n\r\n```html\r\n<script>\r\n  var users = {\r\n    1: {name: \"aaa\"},\r\n    2: {name: \"bbb\"},\r\n    3: {name: \"ccc\"},\r\n  };\r\n  var user_id=users[2];\r\n</script>\r\n \r\n<select bind:value={user_id}>\r\n    {#each Object.entries(users) as [k, v]}\r\n        <option value={users[k]}>{v.name}</option>\r\n    {/each}\r\n</select>\r\n```\r\n\r\nSomething like this also works, but changes the implementation quite a bit.\r\n  - https://svelte.dev/repl/f220236fc05946de933d2db4f12cf00d?version=3.24.0\r\n\r\n```html\r\n<script>\r\n  let users = [\r\n    { id: 1, name: 'aaa' },\r\n    { id: 2, name: 'bbb' },\r\n    { id: 3, name: 'ccc' },\r\n  ]\r\n\r\n  let selected = users.find(o => o.id === 2)\r\n</script>\r\n \r\n<select bind:value={ selected }>\r\n  { #each users as user }\r\n    <option value={ user }>{ user.name }</option>\r\n  { /each }\r\n</select>\r\n```",
          "createdAt": "2020-07-16T06:03:17Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTE4MjA3MA==",
          "body": "Oh, the conversion is done even earlier than that:\r\n```js\r\nfor(u in users) console.log(u==='1');\r\ntrue false false\r\n```\r\n\r\nJavascript object is not a python dict. Object keys are strings, no matter what they are initialized with.\r\nSvelte could 'forgive' this conversion but it wont because it wants to allow objects as select values.",
          "createdAt": "2020-07-16T06:11:29Z",
          "author": { "login": "axil", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTE4NzcwNg==",
          "body": "> ```<option value={users[k]}>```\r\n\r\n@afaur This way when the form is submitted there's no way of telling which user id was selected.\r\n\r\n>   ```let selected = users.find(o => o.id === 2)```\r\n\r\nThis is essentially the way described in the tutorial and is something I wanted to avoid when I replaced the array with the object because this is O(N).",
          "createdAt": "2020-07-16T06:27:43Z",
          "author": { "login": "axil", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTIwMTI4NA==",
          "body": "This is probably the closest variant to what I originally intended:\r\n\r\n```js\r\n<script>\r\n  var users = new Map([\r\n    [1, {name: \"aaa\"}],\r\n    [2, {name: \"bbb\"}],\r\n    [3, {name: \"ccc\"}]\r\n  ]);\r\n  var user_id=2;\r\n</script>\r\n \r\n<select bind:value={user_id}>\r\n    {#each [...users.entries()] as [k, v]}\r\n        <option value={k}>{v.name}<br>\r\n    {/each}\r\n</select>\r\n```\r\n\r\nhttps://svelte.dev/repl/0deef56589b74a9580d54870affb11c2?version=3.24.0",
          "createdAt": "2020-07-16T07:01:19Z",
          "author": { "login": "axil", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDAzNzE3Mg==",
          "body": "It's not a bug.\r\n\r\nFirst of all, `bind:value` is the way to create a two way binding inside Svelte. You seem to have realised this in your last REPL.\r\n\r\nThe second issue you have, is that you are forgetting that keys in a hash are coerced into strings. Therefore, you must use strings as your binding value.\r\n\r\nHere's your first example fixed.\r\n\r\nhttps://svelte.dev/repl/070f395f39a04fcdb03dc4f5c4da8d8c?version=3.24.0\r\n\r\nTwo more things:\r\n\r\n1. In future, please just update your original issue as things become clearer rather than create a huge thread\r\n2. Consider `let` or `const` instead of `var`. `var` has a lot of issues that are resolved in ES6",
          "createdAt": "2020-07-17T10:50:17Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDEyMjMzOA==",
          "body": "> First of all, bind:value is the way to create a two way binding inside Svelte. You seem to have realised this in your last REPL.\r\n\r\n@antony It's not that I realized something it's that I initialized the value without binding it to create a minimal reproducible example.\r\n\r\n>The second issue you have, is that you are forgetting that keys in a hash are coerced into strings. Therefore, you must use strings as your binding value.\r\n\r\nHow did you come to a conclusion that I forgot something if I told exactly the same thing in the previous replies.\r\n\r\n> In future, please just update your original issue as things become clearer rather than create a huge thread\r\n\r\nThis is called a dialogue and @afaur gave me way more insights than your reply which essentially repeats what I've \r\ncome up with already.\r\n\r\n> Consider let or const instead of var. var has a lot of issues that are resolved in ES6\r\n\r\nIt was naive of me to wait for a comment more substantial than this.\r\n\r\nNo user can be better than a user who resolves his own ticket except the user who does not raise a ticket at all, huh? ;)",
          "createdAt": "2020-07-17T13:59:06Z",
          "author": { "login": "axil", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDEyNTk3OA==",
          "body": "@axil apologies. I didn't intend to offend. I saw the problem immediately and simply corrected it. I didn't realise that it was two different people as I skimmed the thread!\r\n\r\nI'm glad you found a suitable solution.",
          "createdAt": "2020-07-17T14:06:00Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDEyNzAyNg==",
          "body": "@axil \r\n  - Found one that works more like you originally intended by using the `index` value provided by the `each` block.\r\n  - https://svelte.dev/repl/feb1c7dc51364caba674c11883c2f07d?version=3.24.0\r\n```html\r\n<script>\r\n  let users = {\r\n    1: { name: \"aaa\" },\r\n    2: { name: \"bbb\" },\r\n    3: { name: \"ccc\" }\r\n  }\r\n\r\n  let user_id=2\r\n\t\r\n  $: console.log(user_id)\r\n</script>\r\n\r\n<select bind:value={ user_id }>\r\n  { #each Object.values(users) as user, index }\r\n    <option value={ index+1 }>{ user.name }</option>\r\n  { /each }\r\n</select>\r\n```",
          "createdAt": "2020-07-17T14:08:12Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDEyNzY1NQ==",
          "body": "@antony Nevermind! I'm still a big fan of svelte and I appreciate the efforts you make to support and maintain it.\r\n\r\n@afaur Actually, in my particular case the indices of the users are taken from the database and can contain gaps when they are deleted.\r\n\r\nWhat about this variant – just one symbol to  fix the problem:\r\n\r\n```js\r\n<script>\r\n  var users = {\r\n    1: {name: \"aaa\"},\r\n    2: {name: \"bbb\"},\r\n    3: {name: \"ccc\"},\r\n  };\r\n  var user_id=2;\r\n</script>\r\n \r\n<select value={user_id}>\r\n  {#each Object.entries(users) as [k, v]}\r\n    <option value={+k}>{v.name}</option>\r\n  {/each}\r\n</select>\r\n```",
          "createdAt": "2020-07-17T14:09:24Z",
          "author": { "login": "axil", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDE0NjIzMA==",
          "body": "@axil \r\n  - Indices having gaps does make it a little tricky. \r\n  - If you convert your ids beforehand it may make your `each` more performant, but not absolutely sure.\r\n    - **Update**: Not sure that a json parse from fetch supports numeric keys so this example may be incorrect.\r\n  - https://svelte.dev/repl/47cd2ed3438440d99393499cbf4c641b?version=3.24.0\r\n```html\r\n<script>\r\n  import { onMount } from 'svelte'\r\n  import { fetch } from './Fetch.svelte'\r\n\r\n  let users = {}, userIds = []\t\r\n\r\n  let selectedUserId = 5\r\n\t\r\n  onMount(async () => {\r\n    const response = await fetch('http://www.site.com/databaseUsers.json')\r\n    users = await response.json()\r\n    userIds = Object.keys(users).map(userId => parseInt(userId, 10))\r\n  })\r\n\r\n  $: console.log(selectedUserId)\r\n</script>\r\n\r\n<select bind:value={ selectedUserId }>\r\n  { #each userIds as userId }\r\n    <option value={ userId }>{ users[userId].name }</option>\r\n  { /each }\r\n</select>\r\n```\r\n\r\n`Fetch.svelte`\r\n```html\r\n<script context='module'>\r\n  export const fetch = async url => ({\r\n    async json() {\r\n      return {\r\n        1: { name: \"aaa\" },\r\n        5: { name: \"bbb\" },\r\n        7: { name: \"ccc\" }\r\n      }\r\n    }\r\n  })\r\n</script>\r\n```",
          "createdAt": "2020-07-17T14:44:12Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTc4NDc1MzI=",
    "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nWhen working with typescript, the following typescript alert is displayed if no easing param is specified:\r\n\r\n```\r\nArgument of type '{ delay: number; duration: number; x: number; y: number; opacity: number; }' is not assignable to parameter of type 'FlyParams'.\r\n  Property 'easing' is missing in type '{ delay: number; duration: number; x: number; y: number; opacity: number; }' but required in type 'FlyParams'.ts(2345)\r\n```\r\n\r\nOffending code:\r\n\r\n```html\r\n<div transition:fly=\"{{delay: 250, duration: 300, x: 0, y: -100, opacity: 0.5}}\"\r\n[...]\r\n```\r\n\r\nTo get rid of the alert, you have to specify a value for easing, like this:\r\n```html\r\n<div transition:fly=\"{{delay: 250, duration: 300, x: 0, y: -100, opacity: 0.5, easing: sineInOut}}\"\r\n[...]\r\n```\r\n\r\nTo match the [svelte tutorial](https://svelte.dev/tutorial/transition-events) it should be optional\r\n\r\n**Information about your Svelte project:**\r\n- Your browser and the version: (e.x. Chrome 52.1, Firefox 48.0, IE 10)\r\nany browser\r\n\r\n- Your operating system: (e.x. OS X 10, Ubuntu Linux 19.10, Windows XP, etc)\r\n\r\n- Svelte version (Please check you can reproduce the issue with the latest release!)\r\n\r\n\"svelte\": \"^3.0.0\",\r\n\r\n- Whether your project uses Webpack or Rollup\r\nrollup\r\n\r\n**Severity**\r\nHow severe an issue is this bug to you? Is this annoying, blocking some users, blocking an upgrade or blocking your usage of Svelte entirely?\r\n\r\nbarely annoying\r\n",
    "closedAt": "2020-08-07T14:43:16Z",
    "createdAt": "2020-07-16T04:52:29Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDU1MTg2OA==",
          "body": "I believe this is fixed in https://github.com/sveltejs/svelte/pull/5083, and the fixed types have been published in 3.24.0.",
          "createdAt": "2020-08-07T14:43:16Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MDYwNzczOA==",
          "body": "> I believe this is fixed in #5083, and the fixed types have been published in 3.24.0.\r\n\r\nYes, I can confirm that it has been fixed a couple of days ago, forgot to update this issue, thanks!",
          "createdAt": "2020-08-07T16:44:48Z",
          "author": { "login": "opensas", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTY3NDA4MzE=",
    "body": "**Summary**\r\nAccording to the documentation `setContext` must be called during component initialization *only*:\r\nhttps://svelte.dev/docs#setContext\r\n\r\nFailure to do so in - for instance - an asynchronous fetch usually generates the error:\r\n`setContext XXXX failed Error: Function called outside component initialization`\r\nwhere `XXXX` is the key you are attempting to set.\r\n\r\nHowever using `setContext` in a subsequent reactive statement in the parent component does not generate this error, and the data appears to be available in the child via `getContext`\r\n\r\n**To Reproduce**\r\nThis REPL demonstrates the behaviour:\r\nhttps://svelte.dev/repl/4700cebaa5c74c9fae3a76156263d9ae?version=3.24.0\r\n\r\n**Expected behavior**\r\nEither:\r\n* `setContext` called in this way should generate the error as described\r\nor\r\n* the documentation should reflect the behaviour, and that behaviour can be assumed to endure\r\n\r\n**Severity**\r\nHard to say.\r\n\r\nI would personally much prefer that the behaviour observed is documented, and that this behaviour can be relied on before I start relying on it in anger :)\r\nBut a clear \"no don't rely on this\" would still be useful as would understanding if I've misinterpreted the documentation.",
    "closedAt": "2020-07-14T18:48:14Z",
    "createdAt": "2020-07-14T16:24:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODI4ODQ1Nw==",
          "body": "I think this is a duplicate of #4259. Using the context API in a timeout is not supported - see #4984.",
          "createdAt": "2020-07-14T16:43:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODM0OTg3OQ==",
          "body": "Ah Ok, thanks! *\"...synchronously from top-level code in the script block...\"* is the clincher there in #4984.\r\n\r\nReactive assignment also being excluded seems like it might warrant a mention in the docs at some point as that feature feels distinct from run-of-the-mill async code.",
          "createdAt": "2020-07-14T18:48:14Z",
          "author": { "login": "mrsean2k", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODM1MTM5Mw==",
          "body": "Just FTR I managed to refer to the wrong REPL above, I did recreate the behaviour without `setTimeout` before asking but I can see that the answer covers off this version as well:\r\n\r\nhttps://svelte.dev/repl/37f1b18d546246e1ae25ade08f9336c4?version=3.24.0",
          "createdAt": "2020-07-14T18:51:19Z",
          "author": { "login": "mrsean2k", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5NzAxNTU2NA==",
          "body": "@mrsean2k how did you solve it for async initialization?",
          "createdAt": "2020-09-22T22:28:05Z",
          "author": { "login": "frederikhors", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTY2OTI5MzY=",
    "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**Logs**\r\nPlease include browser console and server logs around the time this bug occurred.\r\nMobile iOS Safari and Chrome / Brave\r\n\r\n**To Reproduce**\r\nTo help us help you, if you've found a bug please consider the following:\r\n- Go to Svelte.dev on your physical phone. **Not** in the browser console. If you don't have a device run an emulator.  If you're on a mac make a blank project and use the emulator safari.\r\n<img width=\"791\" alt=\"Screen Shot 2020-07-14 at 11 10 44 AM\" src=\"https://user-images.githubusercontent.com/2502947/87443226-32374900-c5c3-11ea-902e-d7035946ec01.png\">\r\nThe left is the browser dev tools while the right is the Xcode emulator.\r\n\r\n",
    "closedAt": "2020-07-14T15:31:31Z",
    "createdAt": "2020-07-14T15:16:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODI0ODU2Mg==",
          "body": "Duplicate of #5116.",
          "createdAt": "2020-07-14T15:31:31Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTY1MDYwNTk=",
    "body": "**Describe the bug**\r\nI wanted to try out Svelte and found the SMUI library to make a prettier prototype. But I quickly found that the demo didn't work. The material buttons etc. are not looking right. I will [cross-post](https://github.com/hperrin/svelte-material-ui/issues/149) this to the SMUI team but I'm putting it here because among all the SMUI demos I've found they all have the same error message in common which points to `svelte`:\r\n\r\n```\r\nError when converting '/node_modules/svelte/internal/index.mjs' esmodule to commonjs: [1166:376]: Unterminated regular expression \r\n```\r\n\r\n**To Reproduce**\r\nThis is where codesandbox comes in. I just happen to have noticed that all of their demos are broken. Maybe this is their fault but at least for now it's a way of reproducing easily:\r\nhttps://codesandbox.io/s/gi8p3\r\nhttps://codesandbox.io/s/svelte-todos-app-material-hldhp\r\n\r\n**Expected behavior**\r\nIn both of those examples (there are others) we can see the JS and vanilla CSS and Font icons all working. But none of it is \"material\".\r\n\r\n**Information about your Svelte project:**\r\nThe codesandboxes have all dependencies / specs. One uses rollup the other uses neither rollup nor webpack.\r\n\r\n**Severity**\r\nI'm trying to do a demo to my dev team and we like to use codesandbox as a way of removing the environment part of the equation. So it's blocking us from prototyping / demoing this tech.\r\n",
    "closedAt": "2020-07-14T10:46:09Z",
    "createdAt": "2020-07-14T10:27:59Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODExMDI5Mg==",
          "body": "Hi @KCErb - I appreciate you filing this, but there isn't anything that we specifically can do about this. It's not a problem with Svelte, it's an issue with the demos, or the way codesandbox is set up, the bundler, or possibly the SMUI library. \r\n\r\nSince this isn't a Svelte issue, I'm going to close this and hopefully the authors of SMUI can come up with a fix. In the meantime, It's also worth noting that the versions of Svelte and Rollup used in those demos is quite a long way out of date. It might be a better idea to build an updated demo based on the official Svelte component/app template to demonstrate to your team.\r\n",
          "createdAt": "2020-07-14T10:46:09Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODExOTAwNQ==",
          "body": "Thanks Antony, I figured as much but thought I'd just check with you good folks while I was at it.\r\n\r\nAs for the versions, this came up with the newest versions too ... but I agree, probably an issue with the sandbox folks.",
          "createdAt": "2020-07-14T11:07:44Z",
          "author": { "login": "KCErb", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTY0ODU1MzA=",
    "body": "**Describe the bug**\r\nWhen update binding prop within a component, reactive statement in parent component processed twice.\r\n\r\nApp.svelte\r\n```html\r\n<script>\r\n\timport Foo from './Foo.svelte'\r\n\tlet data;\r\n\tlet count = 0;\r\n\t$: console.log('data', ++count, data);\r\n</script>\r\n\r\n<Foo bind:data={data} />\r\n{count}\r\n```\r\n\r\nFoo.svelte\r\n```html\r\n<script>\r\n\texport let data;\r\n\tdata = {foo:null};\r\n</script>\r\n```\r\n\r\n**Logs**\r\n```\r\n\"data\" 1 undefined\r\n\"data\" 2 ▶ Object { foo: null }\r\n\"data\" 3 ▶ Object { foo: null }\r\n```\r\n\r\n**To Reproduce**\r\nIt seems 3.16.5 introduced the bug.\r\nhttps://svelte.dev/repl/b245bd85f01043e9b5c37270398f463c?version=3.16.5\r\n\r\n3.16.4 is ok.\r\nhttps://svelte.dev/repl/b245bd85f01043e9b5c37270398f463c?version=3.16.4\r\n\r\n**Expected behavior**\r\nRun reactive statement once.\r\n\r\n",
    "closedAt": "2020-08-05T16:33:29Z",
    "createdAt": "2020-07-14T09:54:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODExMTczMQ==",
          "body": "I'm not convinced this is a bug. By using `++count` in your reactive statement, you are creating a reactive dependency on `count`, and also incrementing it once the statement is run. So the variable changes twice, from 0 to 1, and 1 to 2.",
          "createdAt": "2020-07-14T10:49:55Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODEzMjM5MA==",
          "body": "I removed `count`, it still processed twice.",
          "createdAt": "2020-07-14T11:41:26Z",
          "author": { "login": "dishuostec", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODEzMjk5NQ==",
          "body": "https://svelte.dev/repl/b245bd85f01043e9b5c37270398f463c?version=3.16.4\r\n```\r\n\"data\" undefined\r\n\"data\" ▶ Object { foo: null }\r\n```\r\n\r\n\r\nand https://svelte.dev/repl/b245bd85f01043e9b5c37270398f463c?version=3.16.5\r\n```\r\n\"data\" undefined\r\n2x \"data\" ▶ Object { foo: null }\r\n```",
          "createdAt": "2020-07-14T11:42:54Z",
          "author": { "login": "dishuostec", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODE1NjYwNA==",
          "body": "Haven't take a deep look, but probably related to https://github.com/sveltejs/svelte/issues/3180",
          "createdAt": "2020-07-14T12:41:41Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODIwNTU1Ng==",
          "body": "@dishuostec thanks - that's a bit clearer now.\r\n\r\n#3180 relates to stores, but if there is some shared logic there, then it makes sense that it might be the same root cause.",
          "createdAt": "2020-07-14T14:15:21Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2OTI5ODU1MA==",
          "body": "Fixed in 3.24.1 - https://svelte.dev/repl/b245bd85f01043e9b5c37270398f463c?version=3.24.1",
          "createdAt": "2020-08-05T16:33:29Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MzI0ODAwMA==",
          "body": "This is not fixed when the binding prop is used as an argument of a function:\r\n\r\nhttps://svelte.dev/repl/5b37ba40c8854d86a9dab9ace0b6b861?version=3.24.1",
          "createdAt": "2020-08-13T04:27:07Z",
          "author": { "login": "pwwang", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcyNTM4MzIzNw==",
          "body": "@Conduitry I can confirm it's not fixed in 3.29.7 when binding prop is used as an argument as @pwwang states.",
          "createdAt": "2020-11-11T11:59:18Z",
          "author": { "login": "pzeinlinger", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTYzMjczMjc=",
    "body": "**Describe the bug**\r\n\r\nAfter upgrading to Svelte 3.24.0, seeing `undefined is not an object (evaluating 'value.indexOf')` when binding value to select with multiple attribute _and_ using `$$restProps`.\r\n\r\n**To Reproduce**\r\n\r\nhttps://svelte.dev/repl/b32539efc7824407aec09c91201a18ae?version=3.24.0\r\n\r\n```\r\n<script>\r\n  export let value = '';\r\n</script>\r\n\r\n<select\r\n  {...$$restProps}\r\n  bind:value\r\n  multiple\r\n>\r\n  <slot />\r\n</select>\r\n```\r\n\r\n**Additional context**\r\n\r\nSeems to be coming from here: https://github.com/sveltejs/svelte/blob/ce3d0461e9d6b38605f7e067feb3391686fc15ec/src/runtime/internal/dom.ts#L229\r\n",
    "closedAt": null,
    "createdAt": "2020-07-14T05:04:33Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODIwMTk0Nw==",
          "body": "Having the `<select>` and the `<option>`s exist in different components is not something that was ever officially supported, so I'm surprised this used to work with a `<slot>`. It looks like this changed in 3.23.0.",
          "createdAt": "2020-07-14T14:08:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1ODI2MjQ0NQ==",
          "body": "Thanks @Conduitry for the FYI.  It actually works well aside from having the `multiple` prop (which also used to work pre 3.23.0).  Would you be up for a PR that does a null check, etc?",
          "createdAt": "2020-07-14T15:56:52Z",
          "author": { "login": "bestguy", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTYyNDMxNTE=",
    "body": "\r\nLooks like all the **svelte/transition** functions are documented in the API docs except the **crossfade** function. something like below needs to be added.\r\n\r\n#### `crossfade`\r\n\r\n```sv\r\ntransition:slide={params}\r\n```\r\n```sv\r\nin:slide={params}\r\n```\r\n```sv\r\nout:slide={params}\r\n```\r\n\r\n---\r\n\r\nCrossfade an element in and out.\r\n\r\n`crossfade` accepts the following parameters:\r\n\r\n* `delay` (`number`, default 0) — milliseconds before starting\r\n* `duration` (`number`, default ----- ) — milliseconds the transition lasts\r\n* `easing` (`function`, default `cubicOut`) — an [easing function](docs#svelte_easing)\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-07-14T00:46:50Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwMzM5OTc4Mg==",
          "body": "It is also missing the `fallback` parameter when creating a crossfade. It's not just plug and play, you have to first call the `crossfade()` function by doing something similar to:\r\n```\r\nconst [send, receive] = crossfade(/* params go here */);\r\n```",
          "createdAt": "2021-03-20T16:28:20Z",
          "author": { "login": "jquesada2016", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxODkyNDY3NA==",
          "body": "I stumbled on this too. Where are the docs defined ? This should be a small PR.",
          "createdAt": "2021-04-13T17:45:37Z",
          "author": { "login": "lovasoa", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxOTU3NTMzNg==",
          "body": "@lovasoa docs are currently [here](https://github.com/sveltejs/svelte/tree/master/site/content/docs) if you want to make a PR.",
          "createdAt": "2021-04-14T14:46:13Z",
          "author": { "login": "geoffrich", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTU4Njg4NTk=",
    "body": "I have to create a Alert component that can animate in many different ways using the inbuilt transitions. The close button is enclosed in the component itself.\r\n\r\n### Component.svelte\r\n```html\r\n{#if visible}\r\n<div class=\"alert\">\r\n\t<slot />\r\n\t<button on:click={()=>{visible=false}}>close</button>\r\n</div>\r\n{/if}\r\n```\r\n\r\n### App.svelte\r\n```html\r\n<Component out:fly={{options}}>Hello There</Component>\r\n```\r\n\r\nThis is not a very big problem, but there is no viable workaround. Maybe make `out`, `in` and `transition` forwarded to other components such as `on:click`.",
    "closedAt": "2020-07-13T14:02:43Z",
    "createdAt": "2020-07-13T13:49:54Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzU4MDAxOA==",
          "body": "This isn't something we want to support. If the consumer of a component could add transitions to it, then every single compiled component would have to have additional code to support the possibility of transitions (depending on whether its parent requested it), whether or not you're ever using it with transitions.\r\n\r\nThe simplest way for you to handle this is probably to put the transition on a div that contains the component.",
          "createdAt": "2020-07-13T14:02:43Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzU4MjYxNQ==",
          "body": "No, as I said, You can implement something like forwarding events:\r\n```html\r\n<div on:click in><slot /></div>\r\n```\r\n```html\r\n<Component on:click={handleClick} in:fade>Binding things</Component>\r\n```\r\n\r\nI am not well versed in the inner working of svelte, but know that the code for binding `on:click` only generates when you bind it, something like that could be done with transitions.",
          "createdAt": "2020-07-13T14:07:32Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzU5MDYxNg==",
          "body": "> The simplest way for you to handle this is probably to put the transition on a div that contains the component.\r\n\r\nThis would be too inefficient. Just look at the vuetify alert component with built in dismiss.\r\nhttps://codepen.io/TheComputerM/pen/RwrBMXe\r\n\r\nAnd with built in transitions:\r\nhttps://codepen.io/TheComputerM/pen/rNxrvBy",
          "createdAt": "2020-07-13T14:22:12Z",
          "author": { "login": "TheComputerM", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTU3NDk0OTQ=",
    "body": "Is there a way you can add this little helper directive on svelte?\r\non:click|away , i think this is doable... and easy to implement\r\n\r\nhttps://github.com/alpinejs/alpine/blob/master/src/directives/on.js#L7-L26",
    "closedAt": "2020-07-13T10:47:09Z",
    "createdAt": "2020-07-13T10:45:31Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzQ4NTQ4OA==",
          "body": "Please use, not delete the issue template in future. You can implement this as an action, please see the API documentation on actions. This will not be implemented as an event modifier for `on:click` because it isn't an event modifier.",
          "createdAt": "2020-07-13T10:47:09Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzUxNjU1NQ==",
          "body": "Documentation is very vague on this topic, i think this should be easy to implemenet like alpineJS...\r\nCan you share a snippets a very quick and dirty example that would trigger an event for example clickAway\r\n",
          "createdAt": "2020-07-13T11:55:14Z",
          "author": { "login": "goldcoders", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzU1MzEwNQ==",
          "body": "See https://github.com/sveltejs/rfcs/pull/24",
          "createdAt": "2020-07-13T13:14:05Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzU1NjAzMQ==",
          "body": "For Other that might be looking for solution on this\r\n\r\nU need to use bind this\r\nfirst define an element u will use i.e. dropdownEl then add the event listener for click\r\n\r\n```js\r\n\r\nlet dropdownEl;\r\ndocument.addEventListener(\"click\", function (e) {\r\n   \r\n    if (dropdownEl != undefined) {\r\n      if (dropdownEl.contains(e.target)) return;\r\n      // Don't do anything if this element isn't currently visible.\r\n      if (dropdownEl.offsetWidth < 1 && dropdownEl.offsetHeight < 1) return;\r\n      dropdown = false;\r\n      console.log(\"dropdown-close\");\r\n    }\r\n  });\r\n\r\n\r\n```\r\n\r\non your html Important U Add stopPropagation event modifier on click\r\n```html\r\n<button on:click|stopPropagation={toggleDropdown}>\r\n</button\r\n\r\n<!-- YOUR DROPDOWN -->\r\n<div  bind:this={dropdownEl}>\r\n </div>\r\n``",
          "createdAt": "2020-07-13T13:19:47Z",
          "author": { "login": "goldcoders", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTU3NDA4OTU=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI try, to create some component, and i would like use spread attributes. However we can't bind this kind of attributes. Tha's why I think about a solution\r\n\r\n**Describe the solution you'd like**\r\nbind spread like bind:{...attributes}\r\n\r\n**Describe alternatives you've considered**\r\nI don't an other alternatives\r\n\r\n**How important is this feature to you?**\r\nI think it's important, but it's not like a principal feature.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n",
    "closedAt": null,
    "createdAt": "2020-07-13T10:32:12Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjE3NTQzMg==",
          "body": "I have no idea how svelte does stuff internally, but some suggestions:\r\n\r\n- `bind:props={...props}` would make `props` reserved\r\n- `bind:{...props}` doesn't look like correct syntax\r\n- maybe `bind:$$props={...props}`?\r\n\r\nBasically, `bind:???={...props}`",
          "createdAt": "2020-12-16T11:56:05Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODU3NTYyNQ==",
          "body": "I don't think `props` being reserved should be a major issue, given that `this` is already reserved.\r\nAnother option may be `{...bind:props}`, based on the existing spread syntax? I don't think `:` is a valid character for variable names, so this shouldn't break anything.",
          "createdAt": "2020-12-20T07:53:28Z",
          "author": { "login": "HamishWHC", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0ODU4MjkzNg==",
          "body": "Both great, we just need someone to see this who knows more about internals / which one is easier to implement.\r\nOr a hero who implements it 😄 ",
          "createdAt": "2020-12-20T09:19:08Z",
          "author": { "login": "Florian-Schoenherr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0OTI4MDY2MQ==",
          "body": "Took a poke around, and it seems this is where spread parsing occurs: https://github.com/sveltejs/svelte/blob/master/src/compiler/parse/state/tag.ts#L310 Given that `{...bind:props}` is just adding `bind:` after the spread operator, this part should be simple. Now to figure out compilation.",
          "createdAt": "2020-12-22T01:06:51Z",
          "author": { "login": "HamishWHC", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTU3MjM2MjI=",
    "body": "Hey ! \r\nSorry if it was already offered. \r\nI think that it could be really usefull to get the possibility to bind spread attributes like :\r\n\r\nbind:{...attributes}\r\n\r\nIt permit to compact our src code. \r\n\r\nSorry for my english, if you don't understand, tell me, and i will try to correct my issue.\r\n",
    "closedAt": "2020-07-13T10:27:33Z",
    "createdAt": "2020-07-13T10:04:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzQ3NTg1Ng==",
          "body": "Hi @RiseNet-Web - please follow, rather than delete the issue/feature request template provided.",
          "createdAt": "2020-07-13T10:27:33Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTU0NDE1NDU=",
    "body": "I am reading the blog post linked in the tutorial: \"Svelte for new developers\" (https://svelte.dev/blog/svelte-for-new-developers) and it looks like there was a TODO left in the blog post that does not inspire confidence in the Svelte template / tutorial.\r\n\r\nThe relevant code is here:\r\nhttps://github.com/sveltejs/svelte/blame/master/site/content/blog/2019-04-16-svelte-for-new-developers.md#L77 \r\n\r\nIs the template up to standards now? Maybe it is time to remove this TODO.\r\n",
    "closedAt": "2020-07-13T15:40:34Z",
    "createdAt": "2020-07-12T17:24:33Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTUxNTk5Mzk=",
    "body": "I have a global error handler for uncaught promise errors, that will send promise errors to my server. This code is in the entry file `main.js`:\r\n```\r\nwindow.addEventListener(\"unhandledrejection\", e => { /* send error to server */ });\r\n```\r\n\r\nProblem is that as soon as I use `await/then` blocks, the errors can't bubble up:\r\n\r\n```\r\n<script>\r\n  /* some imports */\r\n  let userIdPromise = fetchCurrentUserId() // I tried adding `.catch(e => { throw e });` but error still doesn't bubble up\r\n</script>\r\n\r\n{#await userIdPromise}\r\n  <p>...loading</p>\r\n{:then _}\r\n  <App/>\r\n{/await}\r\n```",
    "closedAt": "2020-08-17T13:52:29Z",
    "createdAt": "2020-07-11T07:59:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzAxMzA2Nw==",
          "body": "what I have to do is:\r\n\r\n```\r\n{#await userIdPromise}\r\n  <p>...loading</p>\r\n{:then _}\r\n  <App/>\r\n{:catch error}\r\n  {bubbleError(error)}\r\n{/await}\r\n```\r\n\r\n```\r\nfunction bubbleError(e) { throw e }\r\n```\r\n\r\nDo you think that we can have something nicer to bubble the error up?",
          "createdAt": "2020-07-11T08:11:47Z",
          "author": { "login": "thojanssens", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzcyNDI5NA==",
          "body": "I haven't tried this, but if this were as simple as making the error handler [here](https://github.com/sveltejs/svelte/blob/cd21acfb3cae574b81f2f417331993374222a9de/src/runtime/internal/await_block.ts#L61) re-reject with the error when there's no `catch` block, that sounds like a reasonable proposal to me.",
          "createdAt": "2020-07-13T18:38:09Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzcyNjQzMw==",
          "body": "Here's one workaround:\r\n\r\n```js\r\nlet userIdPromise = fetchCurrentUserId()\r\nuserIdPromise.catch(() => { throw e; });\r\n```\r\n\r\nThe 2nd line creates a new promise that has the catch handler, but userIdPromise still refers to the original promise, and so the `#await` handler won't interfere with the one added in the `.catch()` statement. I put together a proof of concept here: https://svelte.dev/repl/dd8c7d7df1cc426db62d83e21c81daec?version=3.24.0\r\n\r\nThat said, you would have to do this for every promise so it's not very convenient. I think the approach suggested by @Conduitry is the proper solution.\r\n\r\n",
          "createdAt": "2020-07-13T18:42:33Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTM3ODkwNQ==",
          "body": "I have raised #5149 as per @Conduitry 's suggestion. ",
          "createdAt": "2020-07-16T12:29:03Z",
          "author": { "login": "irshadshalu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5MDY4NjYxMw==",
          "body": "In 3.25.0, `{#await}`s with no `{:catch}` that receive a promise that rejects will now re-emit a rejected promise, which should be able to be caught by an unhandled rejection event listener.",
          "createdAt": "2020-09-10T20:01:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTUxNTY0ODk=",
    "body": "Svelte complains about a `ParseError` when I throw inside a `catch`. The curious thing is that I `throw` inside `catch` in other part of the application and it works.\r\n\r\n> [!] (plugin svelte) ParseError: Unexpected token\r\nsrc\\EnsureLoggedIn.svelte\r\n3:   import { fetch as fetchCurrentUserId } from './stores/currentUserId.js';\r\n4:\r\n5:   let userIdPromise = fetchCurrentUserId().catch(e => throw e);\r\n                                                         ^\r\n6: </script>\r\n7:\r\nParseError: Unexpected token\r\n    at error (C:\\data\\projects\\[...]\r\n\r\nI tried to replace `throw e` by `throw new Error(e)` but same error happens.\r\n\r\nWhen I replace for example by `console.log(e)` (i.e. `fetchCurrentUserId().catch(e => console.log(e))`), **then I have no more compilation error**.",
    "closedAt": "2020-07-11T07:42:57Z",
    "createdAt": "2020-07-11T07:33:25Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzAwOTY2NQ==",
          "body": "I think this is a normal JS syntax error",
          "createdAt": "2020-07-11T07:42:57Z",
          "author": { "login": "thojanssens", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzAxMzExMA==",
          "body": "`throw` is a statement, not an expression, so if you want to put it in an arrow function you need braces around the function body:\r\n\r\n```\r\nlet userIdPromise = fetchCurrentUserId().catch(e => {throw e});\r\n```",
          "createdAt": "2020-07-11T08:12:09Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTQ5NzgzMDk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nTypescript preprocessor is really slow in real world project. Let's speedup HMR. I am using Snowpack.\r\nSvelte REPL would display error `Unexpected token...` for following code snippet. If possible I would suggest to parse script with types (directly in svelte) without using any other preprocessor. Maybe event later once there is Svelte TypeScript support transpile only mode still would be useful to speedup HMR.\r\n```\r\n<script type=\"typescript\">\r\nlet a: string = 'b'\r\n</script>\r\n```\r\n**Describe the solution you'd like**\r\nWe could get performance gain if Svelte compiler can use more complicated grammer (TypeScript or at least JavaScript with types e.g. AssemblyScript). Svelte could parse JavaScript with types and omit them (basically not to fail on `Unexpected token`. In development workflow svelte-check and IDE helps with type related errors.\r\n\r\nFor example:\r\n```\r\n<script type=\"typescript\">\r\nlet a: MyType = 'b'\r\n</script>\r\n```\r\nCan be processed like\r\n```\r\n<script >\r\nlet a = 'b'\r\n</script>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nhttps://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#a-simple-transform-function\r\nhttps://github.com/microsoft/TypeScript/issues/29651\r\nFull typescript support in Svelte.\r\nGolang/WASM based preprocessor.\r\n\r\n**How important is this feature to you?**\r\nThis would really speedup my workflow. I could participate if it would help.\r\n\r\n**Additional context**\r\n![image](https://user-images.githubusercontent.com/16844103/87189022-2d874200-c2f0-11ea-9c3e-98e7d065d752.png)\r\n",
    "closedAt": "2020-07-10T21:31:46Z",
    "createdAt": "2020-07-10T19:02:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjkwMDY3Nw==",
          "body": "I think I understand your idea, but I feel that it is problematic on a number of levels: Svelte uses a pre-processor to handle TypeScript so that we can get benefits from a shared language-server, as well as to allow support for different languages without having to touch the internals. Rewriting the internals of Svelte so that it parses typescript itself is a huge undertaking, and would effectively mean maintaining a Svelte compiler that can compile either-or language, which is around twice the amount of maintenance as it currently requires.\r\n\r\nYour issue also mentions writing a different compiler in a completely different language. The barrier for contributing to Svelte is already quite high, being a compiler, and switching or using multiple languages in the project will increase that barrier even further.\r\n\r\nSvelte is designed to be un-opinionated, and building support for a specific language into the core is not something we intend to do.\r\n\r\nApologies if I've misunderstood your request, as I'm fairly green on Typescript, but I'm going to close this as I think it's a bit of a non-starter.",
          "createdAt": "2020-07-10T21:31:46Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTQ1MjQ0MjM=",
    "body": "I want to be able to browse the site in Japanese. Some Japanese are missing out on the opportunity to experience Svelte because of the English language barrier.\r\nI'd like to be able to switch between languages with a button on the site instead of Google Translate.\r\n",
    "closedAt": "2020-07-10T08:46:08Z",
    "createdAt": "2020-07-10T05:37:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU2MjY5Mg==",
          "body": "We have had a few translations of the site already - korean, russian, etc. However none of the maintainers know any of these languages, so it's impossible for us to keep them up to date as new features are added.\r\n\r\nIf you have a solution for this, we would be happy to consider an [https://github.com/sveltejs/rfcs](RFC) explaining how we could maintain multiple-languages within the site, ensure that they are up to date, etc, as this would be a wonderful thing to have.\r\n\r\nWe'd also need somebody to actually do the translation work to Japanese.",
          "createdAt": "2020-07-10T08:46:08Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU2Mjc4MA==",
          "body": "We don't provide translated versions of the site on this repository, but you might want to contact @AlexxNB as they're maintaining the Russian translation here https://github.com/AlexxNB/svelte3-translation-ru: they might give you some advice on how to start an equivalent project for the Japanese language. Thanks!",
          "createdAt": "2020-07-10T08:46:19Z",
          "author": { "login": "mindrones", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTQ0ODgyMTY=",
    "body": "I use  page.js as router for svelte ,  code looks like this:\r\n```\r\n<script>\r\n    import router from \"page\"\r\n    import HomeAA from \"./HomeAA.svelte\"\r\n\r\n    let page = null;\r\n    router('/home/a/a', () => {\r\n        page = HomeAA\r\n    });\r\n    router('/other', () => {\r\n        page = other\r\n    });\r\n</script>\r\n<svelte:component this={page}/>\r\n\r\n```\r\nI navigate to '/other' from '/home/a/a',  then back to '/home/a/a',\r\nthe component HomeAA will recreated, i hope svelte can provide a solution that it can keep component's state even router changed",
    "closedAt": "2020-07-10T08:42:57Z",
    "createdAt": "2020-07-10T03:46:55Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU2MTI1MQ==",
          "body": "This is a feature of your router, which is a vanillajs router, creating a page each time you navigate. It has nothing to do with Svelte's ability to store component state. When you destroy a component, its state is lost.\r\n\r\nIf you want to retain state, don't create a new component inside your route handler, just re-use an existing instance. Or switch to a Svelte aware router which has this functionality.\r\n\r\nEither way, github isn't the place for support questions, so please come to [chat](https://svelte.dev/chat) if you need further help.",
          "createdAt": "2020-07-10T08:42:57Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTQyMTcyNjY=",
    "body": "**Describe the bug**\r\nIf you place svelte component B in component A's named slot then reactivity in component A's unnamed slot stops working.\r\n\r\n\r\n**Logs**\r\nSee [REPL](https://svelte.dev/repl/733d99d6db6640ad8ea0f258396ed84d?version=3.24.0)\r\n\r\n**To Reproduce**\r\nCreate a component with a named slot and an unnamed slot.\r\nInsert another component in the named slot.\r\nPut something (e.g.  \\<img\\>) in the unnamed slot that relies on a store (e.g. \\<img src={$src}/\\>)\r\nChanges in the store will not be reflected in the DOM (e.g. src will not change).\r\n[REPL link](https://svelte.dev/repl/733d99d6db6640ad8ea0f258396ed84d?version=3.24.0)\r\n\r\n**Expected behavior**\r\nReactivity in the unnamed slot should keep working regardless of what is in the named slot!\r\n\r\n**Stacktraces**\r\nN/A\r\n\r\n**Information about your Svelte project:**\r\nversion 3.24.0\r\nusing [REPL](https://svelte.dev/repl/733d99d6db6640ad8ea0f258396ed84d?version=3.24.0)\r\n\r\n**Severity**\r\nThis is a serious problem for my project. I'm relying on slots and composed components. I'm blocked at the moment. If someone wants me to take a private fix for testing then the sooner the better!\r\n\r\n**Additional context**\r\n\r\n",
    "closedAt": "2021-03-02T09:49:46Z",
    "createdAt": "2020-07-09T17:08:16Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjI5MTA2Ng==",
          "body": "It works in [v3.12.1](https://svelte.dev/repl/733d99d6db6640ad8ea0f258396ed84d?version=3.12.1) but doesn't on [v3.13.0](https://svelte.dev/repl/733d99d6db6640ad8ea0f258396ed84d?version=3.13.0)\r\n\r\nIn the path which doesn't work, svelte generates : \r\n\r\n```js\r\np(changed, ctx) {\r\n\tif (!current || changed.$src && img.src !== (img_src_value = ctx.$src)) {\r\n\t\tattr(img, \"src\", img_src_value);\r\n\t}\r\n\r\n\tif (!current || changed.$src) set_data(t2, ctx.$src);\r\n}\r\n```\r\n\r\nhowever, current is always false, and img_src_value is never updated.",
          "createdAt": "2020-07-09T18:46:32Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjQ0MzExMg==",
          "body": "Yeah, I see that in REPL and it makes it look like it might be a simple bug.\r\n\r\nHowever, I'm seeing something more troublesome in my local bundle.js that I have not been able exactly repro in REPL (though both are using version 3.24.0)\r\n\r\nHere's what it looks like when it works:\r\n```\r\np: function update(ctx, dirty) {\r\n  if (dirty & /*$src*/ 8 && img.src !== (img_src_value = /*$src*/ ctx[3])) {\r\n    attr_dev(img, \"src\", img_src_value);\r\n  }\r\n}\r\n```\r\nAnd here's what it looks like when it fails:\r\n```\r\np: function update(ctx, dirty) {\r\n  {\r\n    attr_dev(img, \"src\", img_src_value);\r\n  }\r\n}\r\n```\r\nThe HTML and store definition are the same for the failure and success cases here. The only difference between the two is that the second one is inside a component that also contains a child component in its named slot. So just adding that unrelated component to the named slot causes the removal of the entire clause checking for reactivity in the unnamed slot. Huh?  \r\n\r\nSince I don't know the svelte code, I have no idea if the problem in my local code and the problem shown by the REPL are effectively the same, but they look very different in the generated code. ",
          "createdAt": "2020-07-10T02:18:42Z",
          "author": { "login": "gorsat", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzA3NDE3MA==",
          "body": "Another interesting note: In the failure case (component in named slot) **if you ALSO place a component in the unnamed slot, then it fixes the problem**! So I at least have a weird workaround for now. I just made an empty component that I insert into all unnamed slots. And, voila, reactivity is enabled. Ugly, but it works :-)  \r\n\r\nUpdated [the REPL](https://svelte.dev/repl/733d99d6db6640ad8ea0f258396ed84d?version=3.24.0) to include this example.",
          "createdAt": "2020-07-11T14:43:28Z",
          "author": { "login": "gorsat", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxOTUzMDI3MQ==",
          "body": "any news on this issue ? it causes some weird reactivity bugs when named/unnamed slots are used without components.",
          "createdAt": "2020-10-30T12:43:21Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc2NTEwMjkxNg==",
          "body": "(Pull request xref: https://github.com/sveltejs/svelte/pull/5622)",
          "createdAt": "2021-01-22T03:52:14Z",
          "author": { "login": "trevyn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4MTc3MTM4OQ==",
          "body": "I wonder if this is related: https://svelte.dev/repl/ed914218443f412e884da3ceab36fbbf?version=3.32.3\r\n\r\nReactivity gets broken in several strange ways related to slots and stores.",
          "createdAt": "2021-02-19T02:31:20Z",
          "author": { "login": "m59peacemaker", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4ODc3NjM4NA==",
          "body": "[It's fixed on 3.35.0](https://svelte.dev/repl/733d99d6db6640ad8ea0f258396ed84d?version=3.35.0)",
          "createdAt": "2021-03-02T09:49:29Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTQwNDYwNzE=",
    "body": "I often want my element to transition when the data inside changes. For exemple : \r\n```\r\n<script>\r\n    import { fade } from 'svelte/transition'\r\n    let count = 0;\r\n    const handleClick = () => count +=1\r\n</script>\r\n\r\n<button on:click={handleClick} transition:slide>\r\n    Click me\r\n</button>\r\n<p> You cliked <strong transition:fade>{count}</strong> times</p>\r\n```\r\nIt would be nice if the count could transition each time. But since the node is not remodev/added, no transition is triggered (I guess). \r\n\r\n[An answer on stack overflow suggested to add a fake {#each} block](https://stackoverflow.com/questions/62626343/svelte-transition-on-reactive-data-change), but it sounds a bit bloated and unnatural. The alternative would be to trigger animations from the JS function, e.g. by adding classes. It seems waaaaay more complicated than transitionning with conditionals, while doing functionnally something pretty similar to transitions (unless I am missing something obvious…).\r\n\r\nSo it would be awesome if transition was working on reactive data change as well. It cannot be the syntax I describe (else what happens when we actually kill the node?), but something similar, like `{count | transition:fade}` would be great. \r\n\r\nRight now I need it for a calendar (slide weeks in/out of the screen), but there many use cases I can think of (counters, corrected data etc.).\r\n",
    "closedAt": "2020-07-10T10:24:22Z",
    "createdAt": "2020-07-09T13:06:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjEyMzM0Nw==",
          "body": "This sounds like a duplicate of #1469.",
          "createdAt": "2020-07-09T13:20:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU1MDQ0NA==",
          "body": "Most likely yes (I searched only issues with \"transition…). Having the ability to force recreate the node would solve most (all?) cases for transitions. I am not skilled enough to be sure though 😛 .",
          "createdAt": "2020-07-10T08:18:36Z",
          "author": { "login": "etienneburdet", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjYwMzUwMA==",
          "body": "Closing as duplicate of https://github.com/sveltejs/svelte/issues/1469",
          "createdAt": "2020-07-10T10:24:22Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTM5Mzc3ODI=",
    "body": "**Describe the bug**\r\nIf you reassign $$props to another variable and use it with the spread operator on two or more inputs, typing into one clears the value from the other.\r\nOnly the displayed value is cleared, any bound variables retain the correct value.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/59246207fcc949b1b5691b045d3bbd7e?version=3.24.0\r\n\r\nType something in each input box and observe the behaviour for the top two.\r\nTyping in one clears the other.\r\n\r\n**Expected behavior**\r\nPreviously to v3.24.0, it was possible to use $$props this way without any issue.\r\n\r\n**Information about your Svelte project:**\r\nFirefox 79b, Arch Linux, Svelte 3.24.0, rollup\r\n\r\n**Severity**\r\nThis isn't a blocker as such because, depending on the specific case, a workaround ought to be easy to find.\r\nHowever it's exhibited in a dependency of my project in which I can't readily implement a work around.\r\nNamely sveltestrap (issue https://github.com/bestguy/sveltestrap/issues/157).\r\n",
    "closedAt": "2020-07-14T21:32:25Z",
    "createdAt": "2020-07-09T10:08:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU1NTUxMA==",
          "body": "Yes, it is a bug.\r\n\r\nAnd also, using `const props = $$props`, the `props` will always remain as the initial `$$props` of the component. it will not be reactive, unless\r\n\r\n```js\r\n$: props = $$props;\r\n```\r\n\r\nSecondly, `$$props` will contain `value`, which you already bind it again. if you want to spread remaining props that is not declared, you can use `$$restProps`.",
          "createdAt": "2020-07-10T08:29:59Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU1NTY0Mw==",
          "body": "It seems like this happens because you effectively assign the value of the `value` attribute of the input element twice: The first time because `value` is passed as a prop due to the binding in the parent component and the second time value is assigned as a result of the `bind:value` of the input element. That means that your example is similar to the following:\r\n```svelte\r\n<script>\r\n\texport let value;\r\n\tlet something = {value: \"12\"};\r\n</script>\r\n<button on:click={() => something.value++}>Increment</button>\r\n<input {...something} type=\"text\" bind:value />\r\n```\r\nIn this example the value of the input element is also assigned twice: Because it is part of the spread `{...something}` and also because a binding is specified. The `Component2` works because the two assignments always match up because the `$$props` is reactive and will update automatically, but `const props = $$props` will not update and will thus always be `{value: \"\"}`. When the parent component updates `Component1` will trigger a spread update and reassign `value` resulting in the value being set to `\"\"` again. Currently the generated code calls `component0.$set(component0_changes);` also if `component0_changes` is empty. \r\n\r\nWe could potentially add an additional check around https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/render_dom/wrappers/InlineComponent/index.ts#L518 so that `$set` is only called if there is at least one change in `${name_changes}`.",
          "createdAt": "2020-07-10T08:30:15Z",
          "author": { "login": "lukasmoellerch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU1NjQ4NQ==",
          "body": "@tanhauhau What's the exact semantic if an attribute is assigned twice? Is that undefined behavior or is it supposed to be the  value that was assigned last? Could we maybe add a warning if a spread contains a key that is already set on that element?",
          "createdAt": "2020-07-10T08:32:09Z",
          "author": { "login": "lukasmoellerch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU4MTI3MQ==",
          "body": "> We could potentially add an additional check around https://github.com/sveltejs/svelte/blob/master/src/compiler/compile/render_dom/wrappers/InlineComponent/index.ts#L518 so that $set is only called if there is at least one change in ${name_changes}\r\n\r\nyes, there's already an similar existing issue https://github.com/sveltejs/svelte/issues/4993\r\n\r\n>  What's the exact semantic if an attribute is assigned twice? Is that undefined behavior or is it supposed to be the value that was assigned last?\r\n\r\nI am not sure whether it is documented anywhere, so I dont have an official answer for this. but imo, the last assigned value should prevail.",
          "createdAt": "2020-07-10T09:28:29Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2OTMwMDM0Nw==",
          "body": "Fixed in 3.24.1 - https://svelte.dev/repl/59246207fcc949b1b5691b045d3bbd7e?version=3.24.1",
          "createdAt": "2020-08-05T16:37:19Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTM2OTQ0NjA=",
    "body": "**Describe the bug**\r\n\r\nUsing a spread property and also binding to an array value on the spread object causes an infinite update cycle. This only seems to happen if the bound value is an array or an object.\r\n\r\n```svelte\r\n<script>\r\n\timport Component2 from './Component2.svelte';\r\n\tlet values = [{ x: 5, y: [6] }];\r\n</script>\r\n\r\n<!-- Uncomment the below to trigger the bug -->\r\n<!-- <Component2 {...value} bind:y={value.y} /> -->\r\n```\r\n\r\n**To Reproduce**\r\nREPL: https://svelte.dev/repl/a0b9cf113353432b9242e78099ac8fd8?version=3.24.0\r\n\r\n**Expected behavior**\r\nCatch at compile time if possible. Not sure how feasible that is due to possible aliasing? \r\n\r\nRegardless, some way to avoid crashing the page would be good. Maybe remove the key related to the bound variable from the changes object when spreads and binds are being used.\r\n\r\n**Information about your Svelte project:**\r\nREPL with latest Svelte\r\n\r\n**Severity**\r\nNot my bug, saw it mentioned in the Discord. Since there's a non-spread workaround I assume not a blocker but I'll let the original reporter chime in if it is.\r\n\r\n**Analysis**\r\n\r\nLooking in the generated code, we see in the bind handler below that it takes care to not add `y` to `component2_changes` if `updating_y` is true.. But `get_spread_update` returns both `x` and `y` regardless of the value of `updating_y`, so I believe this is what leads to the infinite updates.\r\n\r\n```js\r\nconst component2_changes = (dirty & /*value*/ 1)\r\n    ? get_spread_update(component2_spread_levels, [get_spread_object(/*value*/ ctx[0])])\r\n    : {};\r\n\r\nif (!updating_y && dirty & /*value*/ 1) {\r\n    updating_y = true;\r\n    component2_changes.y = /*value*/ ctx[0].y;\r\n    add_flush_callback(() => updating_y = false);\r\n}\r\n```\r\n\r\nI wonder if adding something like this at the end would fix it:\r\n\r\n```js\r\n} else if(updating_y) {\r\n  delete component1_changes.y;\r\n}\r\n```\r\n",
    "closedAt": "2020-07-17T20:12:27Z",
    "createdAt": "2020-07-09T01:27:30Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Njk3NjQ1Mw==",
          "body": "In the meantime, if other people run into this, here's one workaround I've found using `reduce` to manually remove any bound props from the spread. This is assuming there's a need to use the spread operator in order to honor default component values for unspecified props. Of course, ideally there'd be no way to crash the page like this, but this works!\r\n\r\nhttps://svelte.dev/repl/800a3aad804d452cbe7bbf5ea375fb88?version=3.24.0",
          "createdAt": "2020-07-11T03:13:23Z",
          "author": { "login": "bterrio", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzAwNzA2Mw==",
          "body": "Incidentally, with modern Javascript you can use this syntax too to get a copy of the object without `y`:\r\n```js\r\nfunction getSpreadProps(value) {\r\n  let { y, ...rest } = value;\r\n  return rest;\r\n}\r\n```\r\n",
          "createdAt": "2020-07-11T07:21:55Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2OTI5NzgwOA==",
          "body": "Should be fixed in 3.24.1",
          "createdAt": "2020-08-05T16:32:06Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTM2Mzk1MTA=",
    "body": "**Describe the bug**\r\nThe `InputOutputToggle` component doesn't completely hide the browser checkbox on mobile safari, there are still parts of the checkbox that are visible which results in `InputOutputToggle` looking weird. The rectangle is only visible when the checkbox in its off state.\r\n\r\n![toggle](https://user-images.githubusercontent.com/4623046/86940283-e4de5600-c142-11ea-9bae-0cba39023c0b.jpeg)\r\n\r\nVersion: `AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1`\r\n",
    "closedAt": "2020-08-11T02:58:50Z",
    "createdAt": "2020-07-08T15:49:14Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTc3MDY3Mg==",
          "body": "@Conduitry I don't quite understand why the issue was moved. I thought that the bug is related to https://github.com/sveltejs/svelte/blob/master/site/src/components/Repl/InputOutputToggle.svelte which is located in the main sveltejs repo. Is it planned to move that component to this repo as well?",
          "createdAt": "2020-07-08T21:36:07Z",
          "author": { "login": "lukasmoellerch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTc5MzI3OA==",
          "body": "Whoops! You are right. I will transfer this back.",
          "createdAt": "2020-07-08T22:37:28Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDI1OTgzNg==",
          "body": "I made a PR in site-kit. ",
          "createdAt": "2020-07-17T18:03:37Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDU0NDk0OA==",
          "body": "Could this be updated to has PR? ",
          "createdAt": "2020-07-18T21:27:36Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MzA0MzExNA==",
          "body": "Aha, I was trying to fix this issue but it was already fixed here. I swore I saw a fix but couldn't find it.\r\n\r\nIn my solution I am simply adding `border: none` to he code.\r\n\r\n",
          "createdAt": "2020-07-23T14:35:11Z",
          "author": { "login": "Wolfr", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTQzMDUwMg==",
          "body": "Anything else on my end to get this PR to the finish line? ",
          "createdAt": "2020-08-10T15:39:36Z",
          "author": { "login": "benschac", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTY5NTU4Mw==",
          "body": "Redeployed the site with @benschac's fix 🍻 ",
          "createdAt": "2020-08-11T02:58:50Z",
          "author": { "login": "Rich-Harris", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTMxNTk4Mjg=",
    "body": "In https://svelte.dev/tutorial/custom-stores, we're taught that we can implement the increment/decrement/reset methods directly in the store. The question is can you reference the value `count` from within?\r\n\r\n```\r\n...\r\nreturn {\r\n  subscribe,\r\n  increment: () => update(n => n + 1),\r\n  decrement: () => update(n => n - 1), // only decrement if count is greater than 0. but how to reference count?\r\n  reset: () => set(0)\r\n  };\r\n...\r\n```",
    "closedAt": "2020-07-08T10:25:36Z",
    "createdAt": "2020-07-08T09:57:22Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTQyMTg5MQ==",
          "body": "`n` is the current count, so you can do a conditional check and return `n` as it is if you don’t want to change it.\r\n\r\nThese types of questions are better asked on StackOverflow or Discord.",
          "createdAt": "2020-07-08T10:02:55Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTMwNTYxNjA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nAt the moment, there is no way to manage component events for a dynamic component, with spread props. Let consider this example:\r\n\r\n```\r\n<script>\r\n\tconst props = {\r\n\t\t'label': 'Click me'\r\n\t\t'on:action': () => {}\r\n\t}\r\n</script>\r\n<svelte:component this={Comp} {...props} />\r\n```\r\n`on:action` will not be called.\r\n\r\n[REPL here](https://svelte.dev/repl/b2e8f113590b48e99458d0e56ae1383e?version=3.24.0)\r\n\r\n**Describe the solution you'd like**\r\nTo have the code above working 😊\r\n\r\n**Describe alternatives you've considered**\r\nThe workaround is to consider callbacks instead of events, like this :\r\n```\r\n<script>\r\n\tconst props = {\r\n\t\t'label': 'Click me'\r\n\t\t'onAction': () => {}\r\n\t}\r\n</script>\r\n<svelte:component this={Comp} {...props} />\r\n```\r\n\r\nBut then the code in Comp must be different compared to a normal dispatch usage.\r\n\r\n**How important is this feature to you?**\r\nIt's just annoying because the workaround works pretty well, but maybe it can be a useful feature to keep consistency with the spread props.\r\n",
    "closedAt": null,
    "createdAt": "2020-07-08T07:20:27Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU2NTU0NQ==",
          "body": "In cases like this I fire a single known event name such as `event` and then use the event's detail to hold the inner event name and properties.\r\n\r\nI'm pretty sure what you're suggesting isn't possible, since the expectation would be that events could be computed at runtime and appended to components, but I'm not 100% sure of that.",
          "createdAt": "2020-07-10T08:52:48Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1OTE5NjQxNw==",
          "body": "Thanks for your answer @antony, and sorry for the late answer here !\r\n\r\nUsing a generic event is another way to do it, indeed. I didn't think about this solution. \r\n\r\nSo it's definitely not a blocking issue, but sure, if there is way to standardize the way dynamic components are used (compared to a static one), it would be a plus.\r\n\r\nThe `on:myevent` set as a prop seems the more natural way to do it, and it was my first try without reading the documentation, before defaulting to a workaround.",
          "createdAt": "2020-07-16T06:50:42Z",
          "author": { "login": "fbasso", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTAxNTUwOQ==",
          "body": "This would be really useful to allow reusing behavior between multiple components, similar to React Hooks. For example, I'd like to try to port [React Aria](https://react-spectrum.adobe.com/react-aria/useButton.html) to Svelte. These hooks return DOM props that should be spread onto an element to provide some behavior. Part of the functionality that is returned are event handlers. I'd like to avoid needing to manually copy the events over one by one so the hook implementation details are hidden.\r\n\r\n```svelte\r\n<button {...$buttonProps} on:pointerdown={$buttonProps.onPointerDown} on:pointerup={$buttonProps.onPointerUp}>\r\n  Clicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>\r\n```\r\n\r\nIs there a good way to do this given the compiler won't know at build time what events are needed? Should I make a wrapper that does `addEventListener` myself with a `bind:this`? Would be nice if Svelte could handle dynamic events though.",
          "createdAt": "2020-08-09T06:55:48Z",
          "author": { "login": "devongovett", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTAxNzE1OQ==",
          "body": "I think you could probably use an action and pass in the buttonProps there,then manually add event listeners for each of the handlers. ",
          "createdAt": "2020-08-09T07:15:51Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTAxNzQ2OQ==",
          "body": "@devongovett I believe `use:` is something you are looking for",
          "createdAt": "2020-08-09T07:19:19Z",
          "author": { "login": "tanhauhau", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTAxNzc0Ng==",
          "body": "Ooh nice. Thanks for the super quick responses. Heading to sleep now but will try in the morning! 😊",
          "createdAt": "2020-08-09T07:22:28Z",
          "author": { "login": "devongovett", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTAxOTc1Mw==",
          "body": "@devongovett Here is a use action example:\r\n  - https://svelte.dev/repl/f4b5f661bb7b40b7bd1272c1f58d2efc?version=3.24.1",
          "createdAt": "2020-08-09T07:44:29Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY3MTA3NzMxMQ==",
          "body": "Update: it worked! 🎉  https://github.com/devongovett/svelte-hooks",
          "createdAt": "2020-08-09T17:11:42Z",
          "author": { "login": "devongovett", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY5ODczNTE3Ng==",
          "body": "I was so excited to see that there was a decent workaround for this missing feature (using an action like `use:applyEvents={eventProps}`)... but then when I tried to use this action to attach some event handler props on my _component_, I discovered I actually _can't_ :disappointed: :\r\n```\r\nActions can only be applied to DOM elements, not components\r\n```\r\n\r\nDoes anyone know why actions (i.e., Svelte's closest equivalent to react hooks, which is the background where I'm coming from) _can't_ be applied to components? Okay, I mean, I understand that it would have to work a _little_ bit differently because we don't necessarily have a single root element (though #5218 could provide a way to mark which element(s) are considered the root), but I wish the `node` argument of an [action](https://svelte.dev/docs#use_action) could be polymorphic so you could easily apply some reusable pattern/concern/behavior/action to a component too (more thoughts in https://github.com/sveltejs/svelte/issues/5218#issuecomment-698731991...).\r\n\r\nAnd, does anyone have a good generic reusable solution for how to attach a bunch of event handlers (defined in an object in your component) to a child _component_ used inside of your component?\r\n\r\nNeedless to say, I would like to see this feature implemented, so that we could just spread (\"pass through\") an object containing `on:` keys and have them automatically attached as event handlers — instead of having passed through as regular (\"inert\") props/attributes — which is probably _never_ what you actually want to happen, so it's surprising when that's what actually happens instead.\r\n\r\nSince that current behavior is surprising/useless, could that be an argument in favor of making `on:` keys in a spread object semantically equivalent to explicitly listing out/hard-coding each of those like `<component on:something={handleSomething} on:else={handleElse}>`.\r\n\r\nOf course I know nothing about how hard this would be to implement; I'm speaking only in the context of developer experience as a Svelte user... But the fact that it's [pretty easy](https://svelte.dev/repl/f4b5f661bb7b40b7bd1272c1f58d2efc?version=3.24.1) to implement in a generic/reusable way for _elements_ means I am at least hopeful that it could be easy to make something like this available for components too... :crossed_fingers: ",
          "createdAt": "2020-09-25T05:53:01Z",
          "author": { "login": "TylerRick", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgyOTU5NDE0OQ==",
          "body": "I also looked into how to create renderless components such as React Aria and Headless UI in Svelte.\r\nSince actions only run in the browser, aria-attributes would not be present on the server-side rendered HTML, making actions a non-starter. I guess you could use a combination of spread props for aria-attributes and actions for event listeners, but that complicates the API quite a bit. Being able to spread event props would make it a lot easier to write renderless components.",
          "createdAt": "2021-04-29T21:02:45Z",
          "author": { "login": "LeanderG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDg0MDIzOTAyMg==",
          "body": "Relevent Issue: https://github.com/sveltejs/svelte/issues/5218\r\n\r\n@TylerRick I put together something that works on a component at runtime, but it requires the component to provide access to its' owned elements. The component exposes references to the elements through `bind:this` in a `tagRefs` array (exposed via the `accessors` flag). This allows the `Adjust` component to spread `aria properties`, `on events`, and `component props`.\r\n\r\n@LeanderG This doesn't use actions, but probably won't work with SSR.\r\n\r\n**This does break component encapsulation.** However, there could be a case where someone created a component as part of an npm package, but they may have forgotten to support some `aria property`. \r\n\r\nTypically, you would submit a PR, let it merge, and then either set your `package.json` to the `SHA`, or wait for the next release. This example would allow someone to patch things without altering the original authors npm package. (As long as the author implemented the tagRefs and accessors flag.)\r\n  - https://svelte.dev/repl/eeed750f5aba4712ac9855a39501c444?version=3.38.2\r\n",
          "createdAt": "2021-05-13T02:20:48Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTI4MjY4NDE=",
    "body": "**Describe the bug**\r\nhttps://svelte.dev/repl/c14a746d29cc4e09ac7004da3a301a8a?version=3.24.0\r\n\r\n**Expected behavior**\r\nClicking the bump button should increment the doubled view. If 'e =>' is added to the inline handler, it works. Not surprising but I wonder why there is no compiler error for an inline handler that is not a lambda function.\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-07-08T01:53:42Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTM2Nzc2Mw==",
          "body": "The simple answer is that we want code like this to work, where a function is called to generate the event handler function.\r\n\r\n```svelte\r\n<script>\r\n   function realChangeHandler(value, item) {\r\n      // do something  \r\n   }\r\n\r\n   function createChangeHandler(item) {\r\n      return (e) => realChangeHandler(e.target.value, item);\r\n   }\r\n</script>\r\n\r\n{#each fruits as fruit}\r\n  <label><input type=\"range\" on:change={createChangeHandler(fruit)}> {fruit}</label>\r\n{/each}\r\n```\r\n\r\nNow, code like `doubled = doubled + 1` in your example is obviously not doing that, so perhaps there's a good way to generate a warning in the cases where it's impossible that the event handler is correct. \r\n\r\nThe caveat is that the warning won't be able to catch all the improper cases, like `on:click={save()}` when you meant to write `on:click={save}`.",
          "createdAt": "2020-07-08T08:20:17Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTQ0NjA4OA==",
          "body": "Thank you for the nice explanation!",
          "createdAt": "2020-07-08T10:58:11Z",
          "author": { "login": "markfirmware", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTY2NTM1Ng==",
          "body": "@dimfeld Perhaps this could more easily be detected at compile time when typescript is used instead of javascript.",
          "createdAt": "2020-07-08T17:50:03Z",
          "author": { "login": "markfirmware", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTI1MDA3OTk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI've created a tool which preprocesses HTML and scans class names for functional CSS. This CSS is then translated into styles using CSS variables which are inserted into the HTML using style blocks. A unique class name is also added to the element so the styles are tied to the element.\r\n\r\nThis is problematic in Svelte however, because it requires there to be only one style block. I'm aware there have been some discussions on this before but I can't remember what the outcome was and if it's intended to only support one top-level style block.\r\n\r\n**Describe the solution you'd like**\r\nIdeally, I think you should be able to use more than one style block. This is what native HTML supports and I would expect to be able to drop a style block anywhere and for it to still work. I think in this case, the error handling is doing more harm than good. In the case of this preprocessor, there isn't any need for Svelte to be able to support the style blocks it adds, other than just passing it to the browser. This error is intended to make Svelte users aware that only the top-level style block will be supported but then denies the ability to process the file because more than one style block exists in the source code.\r\n\r\nAlternatively, an easier way to solve this using a preprocessor would also be welcomed. Like the ability to traverse preprocessor content source code easier.\r\n\r\n**Describe alternatives you've considered**\r\nI've tried to create a workaround for this by combining all the style blocks created by my preprocessor and applying them as one style block but it's not easy and I encounter quite a challenges.\r\n\r\nThe first is I need to convert the content provided by the `svelte.preprocess` API into something that's easier to work with. Then I search for all the style tags, merge their contents together and prepend it to the beginning of the document.\r\n\r\nBut in converting the content from a string to a syntax tree using a library like Cheerio it causes some issues converting back to a string, for example, it escapes some symbols like ampersands.\r\n\r\nI also have the additional burden that the library I'm using to implement my tool has a [conflict with some Svelte syntax](https://github.com/phtmlorg/phtml/issues/8), so for now, I can't use pHTML on every component.\r\n\r\nThis is the progress I've made so far for combining all style blocks into one through a preprocessor.\r\n\r\n```js\r\nmarkup({ content, filename }) {\r\n        // Need to implement way code fence pHTML for now because of syntax issue\r\n\treturn phtmlUtilityClass.process(content, { from: filename }).then(result => {\r\n\r\n\t\tlet $ = cheerio.load(result.html)\r\n\r\n\t\tstyleBlocks.push($('style').html())\r\n\t\tvar styleTag = $('style')\r\n\t\tstyleTag.remove()\r\n\r\n\t\t$('body').prepend(`<style>${styleBlocks.join('')}</style>`)\r\n\r\n\t\tlet newHTML = $('body').html()\r\n\r\n\t\treturn { code: newHTML, map: null }\r\n\t});\r\n}\r\n```\r\n\r\n**How important is this feature to you?**\r\nFairly important, it's blocking me from integrating my CSS framework into Svelte. But I'm likely to be in the minority for use cases. I use style blocks for live previewing of styles in some projects so I'm not looking forward to coming up against this issue there also.\r\n\r\nI'm open to any other alternatives for how I could work around this. \r\n\r\n**Additional context**\r\nYou can view a work in progress of the project I'm trying to create. https://github.com/limitlessloop/phtml-utility-class/tree/version-3\r\n\r\nJust referencing this issue where multiple style blocks were also being discussed.\r\nhttps://github.com/sveltejs/svelte/issues/2762\r\n",
    "closedAt": null,
    "createdAt": "2020-07-07T17:38:36Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTc3ODg1Nw==",
          "body": "After playing around I've realised I can avoid this issue if I wrap my style blocks in a div or span. This should work for most cases and to be safe I can apply a style of `display=\"none\"` to the wrapper spans.",
          "createdAt": "2020-07-08T21:56:28Z",
          "author": { "login": "limitlessloop", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTIyOTExNzk=",
    "body": "Hello, thank you for the awesome complier, I couldn't figure out how to acces the store from a js file. \r\n\r\nUse cas example:\r\nImplement a router guard that checks if the user is logged in or not, that to say watch the store loggedIn writable to decide if the user should log in or not.",
    "closedAt": "2020-07-07T13:14:05Z",
    "createdAt": "2020-07-07T12:42:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDgzNTk2OQ==",
          "body": "A Svelte store is a regular JS object, so you can export and import it from both .svelte and .js files.\r\n\r\nSee the [Writable stores](https://svelte.dev/examples#writable-stores) example where a store is exported from `stores.js`. It can be imported and used from any other JS file, or Svelte file.\r\n\r\nKeep in mind that to do a “regular” export from Svelte, you need to put it in `<script context=“module”>...</script>`.\r\n",
          "createdAt": "2020-07-07T12:53:09Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDg0ODYwOQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-07-07T13:14:05Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTE4Mzg4MjM=",
    "body": "**Describe the bug**\r\nRendered nested components from an array. When array changes, only changes in immediate items are detected and re-rendered, changes in second level items are registered but not passed to sub-component to re-render.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/2ce30341707348569159dfa7ae142c25?version=3.23.2\r\nThe nested list is rendered from nested array. Click \"change parent1\" and notice the changed value is passed to parent1 component. Then click \"change child1\" and notice the lower message changes, but child1 retains the original value.\r\n\r\n**Question**\r\nHow to force re-rendering in this case?",
    "closedAt": "2020-07-10T08:49:50Z",
    "createdAt": "2020-07-06T21:46:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU2NDI0Nw==",
          "body": "in order to detect nested changes, an expensive inspection of every element is required. this isn't really acceptable.\r\n\r\nThe best way to force re-render is to re-assign your element so that the change is detected. See https://svelte.dev/docs#2_Assignments_are_reactive",
          "createdAt": "2020-07-10T08:49:50Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU3MjgyNQ==",
          "body": "I don't understand how assignment is relevant here. The changes is already reactive (as printed on parent element), just that it doesn't pass down to child element.",
          "createdAt": "2020-07-10T09:09:12Z",
          "author": { "login": "hongnk", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU3OTA2Ng==",
          "body": "Note that I even tried whenever a child changes, move up the array and add change to the parent node as well, the result is the same: the child change is reflected in parent element, but not passed down to the child element.\r\n\r\nSince there's no solution to this problem, I think this issue is related to this: https://github.com/sveltejs/svelte/issues/5011, in which the author said need to flatten array and manage the tree manually?",
          "createdAt": "2020-07-10T09:23:25Z",
          "author": { "login": "hongnk", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTE3NzUwNjk=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI want to build a \"transparent\" lazy-loading component. This component should load a target component asynchronously, and when ready, delegate everything to this target.\r\n\r\nThis lazy-component should be generic: it should work for every target component. Moreover, I don't want the consumer of the component to know there is this wrapper, it should be \"transparent\" for it.\r\n\r\nToday, it doesn't seem to be possible to build such \"wrapper\" because : \r\n- There is no API to forwards slots to the delegate ;\r\n- There is no API to forwards events to the delegate ;\r\n- There is no API to forwards \"bind\" from the parent to the delegate ;\r\n\r\nThere is various issues about this : \r\n#2837 about forwardings events ;\r\n#1824 and #4295 about forwardings slots ;\r\nI found nothing about \"binding\" forwardings.\r\n#4647 is about a loadable component, closed because \"svelte-loadable\" can implements this issue. however, it's false because it doesn't supports slots or events.\r\n\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nAn official way/api to \"wrapper\" transparently another component.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI am able to prototype such wrapper with internals API, however I am not able to forwards binding from parent to child : \r\n\r\n```html\r\n<svelte:component this={cpn} {...slotsProps} {...$$restProps} bind:this={instance}/>\r\n\r\n<script>\r\n    import { get_current_component } from 'svelte/internal';\r\n    \r\n    export let provider;\r\n    \r\n    const slotsProps = {\"$$slots\":$$props.$$slots, \"$$scope\":$$props.$$scope};\r\n    const self = get_current_component();\r\n    \r\n    let cpn;\r\n    let instance;\r\n        \r\n    provider().then(result => cpn = result);\r\n    \r\n    $: if (instance) {\r\n        for (let [type, listeners] of Object.entries(self.$$.callbacks)) {\r\n            instance.$on(type, (e) => {\r\n                listeners.forEach(l => l(e));\r\n            });\r\n        }\r\n    }\r\n</script>\r\n```\r\n\r\n**How important is this feature to you?**\r\n\r\nI can't today implements this kind of component. I'd like to \"wrap\" heavyweight components without updating or adding loading logic to every consumer.\r\n\r\n",
    "closedAt": null,
    "createdAt": "2020-07-06T19:40:27Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Njk3MDc2NQ==",
          "body": "I just ran up against this trying to implement React-like patterns in Svelte. I'm curious what the appropriate idiom to follow here is.\r\n\r\nIn React apps, it was quite common for me to implement \"controller\" components which have dynamic children. Such controllers were usually for fetching external data (example: the active user ID) and passing it down to a dynamic child component. So basically, any pure view component which knows how to render something about the active user could be wrapped in one of these \"controllers\" to have the user ID dynamically assigned.\r\n\r\nThe naive approach I tried looks like this:\r\n\r\n```svelte\r\n<script>\r\n  import { getClient, query } from 'svelte-apollo'\r\n\r\n  import { queryMyAgent } from './queries.ts'\r\n\r\n  const client = getClient()\r\n  const agent = query(client, { query: queryMyAgent })\r\n</script>\r\n\r\n{#await $agent}\r\n  Loading...\r\n{:then result}\r\n  <slot contextAgent={result.data.myAgent.id}></slot>\r\n{:catch error}\r\n  Agent loading failed: {error}\r\n{/await}\r\n```\r\n\r\nBut the nested component does not seem to get its own `contextAgent` prop assigned via the `slot`. Which means that this boilerplate would have to be included directly in every component that wishes to inject a context agent, correct? Not ideal.",
          "createdAt": "2020-07-31T07:12:07Z",
          "author": { "login": "pospi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Njk4MDk4MA==",
          "body": "@pospi that sounds more like a support question than an issue, which you should try using the [discord chat](https://svelte.dev/chat) for.  But you can achieve this by using the `slot let:` bindings: https://svelte.dev/docs#slot_let ",
          "createdAt": "2020-07-31T07:36:04Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2Njk4ODA3OQ==",
          "body": "Thanks for that @stephane-vanraes. It looks like you need to unpack the promise to get at the real value in order for `slot let:` to expose the binding. But it works, and the boilerplate is only in one component now which is nice:\r\n\r\n```svelte\r\n<script>\r\n  import { getClient, query } from 'svelte-apollo'\r\n\r\n  import { queryMyAgent } from './queries.ts'\r\n\r\n  const client = getClient()\r\n  const agent = query(client, { query: queryMyAgent })\r\n\r\n  let loading = true\r\n  let contextAgent\r\n  let error\r\n\r\n  agent.subscribe(promise => {\r\n    promise\r\n      /* eslint no-return-assign: 0 */\r\n      .then(val => contextAgent = val)\r\n      .catch(e => error = e)\r\n      .finally(() => loading = false)\r\n  })\r\n</script>\r\n\r\n{#if loading}\r\n  Loading...\r\n{:else if error}\r\n  Agent loading failed: {error}\r\n{:else}\r\n  <slot {contextAgent}></slot>\r\n{/if}\r\n```\r\n\r\nShould I be able to bind to the reactive props directly?",
          "createdAt": "2020-07-31T07:53:43Z",
          "author": { "login": "pospi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc0NjkwMDk1MQ==",
          "body": "I've only started using Svelte recently but I've already run into the need to forward event bindings a few times. See e.g. codefeathers/rollup-plugin-svelte-svg#11. Would be great to know if this is on the roadmap or what's preventing it.",
          "createdAt": "2020-12-16T19:42:59Z",
          "author": { "login": "janosh", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTE3MjQ1Nzc=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nSvelte does not support two-way binding for the [`complete`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/complete) property on `<img>` elements, preventing us from easily updating a variable based on an image's loading state.\r\n\r\nI am building a Netflix-style carousel of images, where the images are replaced when moving up/down to a new row. I'm tasked with hiding the images altogether (and an independent 'selection box' component) until they're fully loaded, but it's very fiddly to determine which ones have been loaded just by using an array of refs and event listeners.\r\n\r\n**Describe the solution you'd like**\r\n\r\nJust as you can bind:\r\n\r\n* exported props from Svelte components ([component bindings](https://svelte.dev/tutorial/component-bindings)), and;\r\n* the `value` prop on input elements ([text inputs](https://svelte.dev/tutorial/text-inputs));\r\n\r\n... Svelte could add support for `bind:complete`. It would look like this:\r\n\r\nREPL: https://svelte.dev/repl/bf3286a072fb4378bd466b2f161ea0ee?version=3.23.2\r\n\r\nIn-line:\r\n\r\n```svelte\r\n<script>\r\n  let loadComplete = false;\r\n</script>\r\n\r\n<img\r\n  bind:complete={loadComplete}\r\n  src=\"https://interactive-examples.mdn.mozilla.net/media/examples/grapefruit-slice-332-332.jpg\"\r\n/>\r\n<p>Image has loaded: {loadComplete}</p>\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\n`bind:this={ref}` gives you some options for manually checking `ref.complete`, but as it updates upon the element ref updating, rather than the `complete` property updating, users currently have to establish `on:load` event listeners and so it's all quite fiddly (especially when you have an array of images to manage, as you often do).\r\n\r\n**How important is this feature to you?**\r\n\r\nIt's not a show-stopper (as the above alternative is doable). But for my particular use-case described in the opening section, it would be really handy.\r\n\r\n**Additional context**\r\n\r\nIt would be worth discussing whether or not it would be sensible to extend this functionality to all arbitrary properties; not just `complete`. I don't know how Svelte achieves it for the currently-supported value bindings, however; does it have to be implemented bespoke for each property (e.g. by using DOM Level 0 event listeners), or is there some sort of way to observe all arbitrary mutations to a HTML element?",
    "closedAt": null,
    "createdAt": "2020-07-06T18:03:20Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDM5NDQ4OA==",
          "body": "Please use the proper issue template for feature requests. This isn't a bug.",
          "createdAt": "2020-07-06T18:24:20Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDc1MDI3OA==",
          "body": "@Conduitry Now updated as a feature request.",
          "createdAt": "2020-07-07T10:12:54Z",
          "author": { "login": "shirakaba", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTA2ODU0MA==",
          "body": "Svelte's `bind` syntax currently uses event listeners to receive updates on DOM elements. e.g. `<input bind:value>` listens to the `input` event. I suppose for `bind:complete`, Svelte could listen to the `load` event on the `img` and set it to true. That might get tricky if the `src` attribute is changed causing the image to reload though, since there would need to be some way to detect that and reread the value of `complete`.\r\n\r\nIt's also been suggested that a `MutationObserver` can be used to listen to changes on arbitrary attributes. I believe this works in simple tests but I don't think any actual work has been done to automate that inside Svelte.",
          "createdAt": "2020-07-07T19:15:33Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTIyNDMzMDY=",
    "body": "Hey, guys!\r\n\r\nI did a work to speed up hydration step (https://github.com/sexy-framework/sexy).\r\nAnd i got really good numbers (better then NuxtJS in 4.5 times and Sapper in 10 times)\r\n\r\nAnd i can try to help you with it.\r\n\r\nTo make really cool FID and TTI we need to skip first hydration.\r\n\r\nFirst \"DOM hydration\" is made by SSR, then on client side **we only** need to register subscribers on reactive variables and skip DOM work:\r\n- innerHTML\r\n- nodeValue\r\n- setAttribute\r\n- classList and etc\r\n\r\nAll of that we need to skip.\r\n\r\nAs i know Svelte doesn't skip it. Am i right?\r\n",
    "closedAt": "2021-04-21T16:42:53Z",
    "createdAt": "2020-07-06T11:40:56Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDMyNzgwMA==",
          "body": "Yes, I agree 100% and suggested the same here: https://github.com/sveltejs/svelte/issues/4975. There's also https://github.com/sveltejs/svelte/issues/4308, which has a PR, but I think still does too much work\r\n\r\nIn any case, I think this issue should probably be closed because it's an issue in Svelte (not Sapper) and there are already existing issues tracking it",
          "createdAt": "2020-07-06T16:05:56Z",
          "author": { "login": "benmccann", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDY4MDc5Ng==",
          "body": "@benmccann Looks like svelte maintainers don't want to make fast hydration...",
          "createdAt": "2020-07-07T08:16:39Z",
          "author": { "login": "lastonoga", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDY4MjAwMQ==",
          "body": "@lastonoga Why do you think that?",
          "createdAt": "2020-07-07T08:18:36Z",
          "author": { "login": "slimboyfats", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDY4ODMyNA==",
          "body": "@slimboyfats First, because PR was ready 5 months ago. And second, bad performance makes me to not use Svelte even if i like it.\r\n\r\nThats why i made my own framework with super-fast hydration. I don't want to create bikes but what else can i do? Vue/React/Angular are very slow.",
          "createdAt": "2020-07-07T08:29:36Z",
          "author": { "login": "lastonoga", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDY5MTI0OA==",
          "body": "@lastonoga But the PR isn't closed so I don't find where it's denied, can you link?",
          "createdAt": "2020-07-07T08:34:41Z",
          "author": { "login": "slimboyfats", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDY5NDYwOQ==",
          "body": "@slimboyfats It's not denied. Simple performance question is under discussion for 5 months and thats a problem for framework progress. Vue will make  new version in 6 months and it will be faster then Svelte for sure. And svelte will loose market. I did framework that has 10x faster hydration then Svelte, but has same features. It doesn't look like a problem to accept a PR.",
          "createdAt": "2020-07-07T08:40:24Z",
          "author": { "login": "lastonoga", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDY5NjAxNw==",
          "body": "But I read in the issue that it might be breaking changes and that is a major thing to do.",
          "createdAt": "2020-07-07T08:42:47Z",
          "author": { "login": "slimboyfats", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDc4NzgyMQ==",
          "body": "@lastonoga It's not a race to beat Vue, and Svelte doesn't have bad performance. this Issue is raised on the wrong project, and duplicates existing issues. Furthermore, we don't just shove in every performance enhancement, as, has been made evident in the last few days, most of them have huge glaring issues which would regress various features of the framework.\r\n\r\nWe will happily accept properly considered PRs which are well written, tested, and consider every aspect of the impact of the code changing including breaking existing users of the codebase.\r\n\r\nOne of the best bits about Svelte is it's simplicity, and the care taken to provide the optimal DX, instead of hammering it for performance, breaking various existing scenarios, and shifting CPU cycles to the browser, when it's already significantly faster than most other things out there.\r\n\r\nIf you can't raise issues in a neutral manner without a pressure-driven doomsday scenario because we haven't acknowledged and merged your framework into ours within 24 hours, then it might be better to not raise them at all.",
          "createdAt": "2020-07-07T11:24:25Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDgwNTgyMA==",
          "body": "@antony \r\n\r\nI think there is a problem with misunderstanding. Let's start from the beginning. \r\n\r\n1. I need a reactive framework with fast hydration (vanilla/jquery like)\r\n2. I did my own to test how big are feature limitations and there is no limits\r\n3. I don't want to make bikes and start from scratch, thats why i **want to help** Svelte be faster in hydration. And question is how can i help? If PR is not ready, so how i can help to make it ready?\r\n4. What is the biggest problem with preventing re-rendering on client-side?\r\n",
          "createdAt": "2020-07-07T11:57:49Z",
          "author": { "login": "lastonoga", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU2NjQwMA==",
          "body": "@lastonoga from what I understand, the reason that we haven't made this change to hydration is that Svelte doesn't make any guarantees about what it is hydrating. Svelte will accept html from anywhere and try to hydrate it, and as far as I understand, solutions like yours require a concrete guarantee (as other frameworks) of DOM structure.\r\n\r\nSo whilst it'd work in the perfect case, it'd basically break all other cases of hydration.",
          "createdAt": "2020-07-10T08:54:47Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU3NTQwMQ==",
          "body": "@antony Got it. What about to add to svelte compiler an option like hydrationDomCheck? If flag is true then developer takes all responsibility on his own (about DOM matches guarantee). Without checking _First input delay_ will be better.\r\n\r\nOtherwise, svelte re-render DOM as at is now.",
          "createdAt": "2020-07-10T09:15:12Z",
          "author": { "login": "lastonoga", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY2MDYyMzkxMA==",
          "body": "@lastonoga it's a possibility, I don't know the exact ins-and-outs, but it probably could be a compiler option.\r\n\r\nNone of the existing PRs implement it as a compiler option currently, though, they're all-or-nothing.",
          "createdAt": "2020-07-19T10:41:27Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTExNTYxMDE=",
    "body": "**Describe the bug**\r\nThe modifications that have been made to `$capture_state` a while ago make it break when the user's code contains Babel macros. That is, an `import` that is then transformed by some tooling and the import binding (variable) is removed from code.\r\n\r\nWe've had someone report that [with Babel macros](https://github.com/sveltejs/svelte/pull/3822#issuecomment-592767853) and, more recently, [with Tailwind macros](https://github.com/rixo/svelte-hmr/issues/15) (also a Babel macro).\r\n\r\nFor example, in this user code, the `tw` binding gets removed from the code by Babel:\r\n\r\n```svelte\r\n<script>\r\n  import tw from \"twin.macro\"; // <= removed\r\n  const bigText = tw`text-xl`; // <= transformed into: const bigText = { \"fontSize\": \"1.25rem\" };\r\n</script>\r\n```\r\n\r\nBut the compiler has seen it and it is added to `$capture_state`:\r\n\r\n```js\r\n  $$self.$capture_state = () => ({\r\n    tw,\r\n    bigText,\r\n  });\r\n```\r\n\r\nSince the variable `tw` doesn't exist, it crashes at runtime.\r\n\r\n**To Reproduce**\r\nThe aforementioned issue has provided a [minimal repo](https://github.com/rixo/svelte-hmr/issues/15#issue-651127150) that reproduces the issue.\r\n\r\n**Expected behavior**\r\nApparently, the ideal solution would be to exclude `import` bindings from `$capture_state` (see [discussion in the previous issue](https://github.com/sveltejs/svelte/pull/3822#issuecomment-605404910)).\r\n\r\nBut if I haven't missed anything, we apparently can't tell from `$capture_state` which variables are imports?\r\n\r\nI don't think it's worth adding tracking of this information (if it's not already there) just for this feature. So I suppose we should settle on excluding either `hoistable` (I guess all imports have to be hoistable, right?) or `writable` variables.\r\n\r\nFor HMR it won't make a difference which one we pick. I suppose `hoistable` is preferable if it works as a fix, since previous discussion has concluded that it was desirable to capture writable state.\r\n\r\nI can make a PR but I'd like to confirm what needs to be done.\r\n\r\ncc @RedHatter @Conduitry \r\n\r\n**Severity**\r\nTailwind seems to be pretty popular in Svelte projects, so I guess it has the potential to frustrate quite a few people.\r\n",
    "closedAt": null,
    "createdAt": "2020-07-05T22:14:27Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzk1MTQ4Ng==",
          "body": "Thanks for writing up this issue.\r\n\r\n> Tailwind seems to be pretty popular in Svelte projects, so I guess it has the potential to frustrate quite a few people.\r\n\r\nThis is an issue specific to twin.macro and other macros. From what I've seen, most tailwind users use PostCSS and write class names directly. I like twin.macro for the static guarantees that it gives me + some additional DX bonuses, but its use isn't that prolific\r\n\r\nWould still love to see a solution to this, though 😅",
          "createdAt": "2020-07-05T23:16:28Z",
          "author": { "login": "itsMapleLeaf", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTExMjcxMDc=",
    "body": "[Svelte-m](https://github.com/lega911/svelte-m) was an experiment done by lega911 to improve performance and change detection in Svelte. \r\n[The experiment is conclusive](https://itnext.io/what-if-svelte-would-had-another-change-detector-4955f9b584d4) and I believe we would all want the improvements to be integrated in Svelte.\r\n\r\nOn the other hand, if these changes were not integrated, I believe they would lead to the split of the svelte ecosystem in the midterm (as we have seen in Preact vs React for example).\r\n\r\nThis would be a big waste of time and energy so I would suggest that Svelte maintainers start the study to integrate the improvements into the baseline Svelte instead.\r\n\r\nI hope this makes sense. Regards.",
    "closedAt": "2020-07-07T17:09:44Z",
    "createdAt": "2020-07-05T19:06:46Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MzkyOTAyOQ==",
          "body": "How about making an RFC: https://github.com/sveltejs/rfcs",
          "createdAt": "2020-07-05T19:28:50Z",
          "author": { "login": "kevmodrome", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzk0MzczNw==",
          "body": "@antoninadert Thanks for your issue. I had seen this on reddit earlier today and had put it on my reading list of things to investigate. I'm not sure if you intended it this way, but the way you have worded this issue comes across as extremely hostile, dogmatic, and almost threatening. Is there something that has given you cause to think that we'd for some reason be against adding optimisations into the compiler?\r\n\r\nEither way, It seems that these improvements seem critical to you, so I would suggest as @kevmodrome has above, that you should raise an RFC to document specific optimisations you think should be added, along with the percieved benefit of such, so that people can start work on incorporating them and running benchmarks to determine what benefit these bring.",
          "createdAt": "2020-07-05T21:54:07Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDAwNzgzNA==",
          "body": "I think that this would solve one of the main shortcomings of Svelte's reactivity system, that is dealing with object references, as it's clearly stated in [the tutorial]:\r\n\r\n```\r\nconst foo = obj.foo;\r\nfoo.bar = 'baz';\r\n\r\n...won't update references to obj.foo.bar, unless you follow it up with obj = obj.\r\n```\r\n\r\nI stumbled with this a couple times. The easiest workaround is to add a `obj = obj`, like the tutorial says, or drive all modifications thru the observed variable (obj in this case).\r\n\r\nSomehow this feels like the Achilles heel of Svelte reactivity system (which is gorgeous BTW), so if it could be handled in a more natural way it would be great.\r\n\r\nOn a side note, I also think that the issue wording has been a bit unfortunate, but it's great to see so many people playing with Svelte ideas (which not long ago were pretty radical and viewed with distrust by many) and trying to find ways to improve it. On the other hand, I have full confidence that svelte devs will find the way to take advantage of it to improve svelte, if that's the case.\r\n\r\nPerhaps initially it could be implemented as an alternative reactivity system triggered by the `<svelte:options>`element, until it's found to be a valid alternative. \r\n\r\n",
          "createdAt": "2020-07-06T04:26:13Z",
          "author": { "login": "opensas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDAzMjA5NQ==",
          "body": "Indeed an interesting take on reactivity. [Malina.js](https://medium.com/@lega911/svelte-js-and-malina-js-b33c55253271) and the comparison of it to Svelte in [this](https://medium.com/@lega911/svelte-js-and-malina-js-b33c55253271) article. At least something to consider. I wonder if any of the ideas proposed could/should be implemented without much overhead",
          "createdAt": "2020-07-06T06:00:48Z",
          "author": { "login": "gevera", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDAzNDY2MQ==",
          "body": "Hi @antony , this is not an agressive wording I intended, I just peacefully wrote my thoughts and the shortcomings I anticipated in case of following / not following the listed improvements, based on my little observations.\r\n\r\nBy no mean I was threatening or suggesting you would not be happy with the changes, I just reference a simple fact I observed before (Preact vs React example).\r\n\r\nThis is the first time I write such a thing on Svelte repo so I don't know you yet, hence I am just being factual. Next time I'll probably be kinder as it seems you are very welcoming people :)\r\n\r\nOn the other hand I don't have a rush to have these improvements, it's just that when I saw the original post about Svelte-M, I believed someone should raise this issue.\r\nOne week later it was still not there so I went ahead.\r\nIf I can share my intentions, I didn't want to put any pressure, just to explain my thoughts and raising this point.",
          "createdAt": "2020-07-06T06:08:36Z",
          "author": { "login": "antoninadert", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDEwMzQzMQ==",
          "body": "I strongly agree with @antoninadert. ",
          "createdAt": "2020-07-06T08:50:23Z",
          "author": { "login": "ansarizafar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDE0MjgwNQ==",
          "body": "Could we get more specific about which improvements we're talking about? There are at least three changes I can see in Malina/Svelte-M:\r\n\r\n1. Changes to some DOM operations, using `innerHTML` and `cloneNode` instead of building up the DOM element by element.\r\n2. Different change detection, which is not explained very clearly that I can see - but from looking at the output, it appears like it is making shallow copies of objects to compare to when they might have changed.\r\n3. Changes to syntax and semantics, such as allowing a statement as event handler, and only supporting references to arrays as the collection in `{#each}` blocks.\r\n\r\n**1** appears to be the easiest one for Svelte to support, assuming it was proven to be a performance improvement. I would love to see more convincing benchmarks.\r\n\r\nFor **2** I haven't found a good writeup of the principles behind the change detection, and it's not immediately clear to me from looking over the source. Spontaneously, I'm afraid that it would turn out to be very brittle, as it appears to rely on static analysis of what types different expressions would resolve to. But I might be misunderstanding. An RFC with a more detailed proposal would probably be necessary to evaluate the approach.\r\n\r\nFor number **3**, it seems unrelated to most of the other things. I have no strong opinion, except that I would probably suggest the event handler shorthand used `event` and `this` instead of `$event` and `$element`, to stick closer to the default behavior of HTML event attributes.",
          "createdAt": "2020-07-06T10:10:09Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDE0NTU3Mg==",
          "body": "For 3. there already is an issue https://github.com/sveltejs/svelte/issues/5087",
          "createdAt": "2020-07-06T10:15:24Z",
          "author": { "login": "PatrickG", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDE0Njc1MA==",
          "body": "Svelte is great but its seems like its not moving forward. I am afraid If the situation remains the same then something like https://medium.com/@lega911/svelte-js-and-malina-js-b33c55253271 will take over. Its just a matter of time.",
          "createdAt": "2020-07-06T10:17:48Z",
          "author": { "login": "ansarizafar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDE0ODE5MQ==",
          "body": "Svelte 3 was a huge leap forward, just one year ago. It's not a good idea to have that type of leap all the time, as it is very expensive for users to keep up. As a user I prefer stability.",
          "createdAt": "2020-07-06T10:21:22Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDE2MzczMQ==",
          "body": "For 1, there is this issue : #3898 \r\n\r\nFor 2, the experiment looks like interesting, but after reading the source, It's looks like the digest cycle of angularJS :\r\n- It keeps a list of expression to watch ;\r\n- Everytimes \"something\" could have changed, it loops for every watch, evaluate the expression, and ifa change is detected, the associated variable is reassigned/callback executed\r\n- Only primitive, or the first level of arrays seem to be dirty-checked\r\n- I didntt success to use #each block, so I couldn't test array reactivity\r\n\r\nIt's a great toy-project, however I think there is a lot of works to make it really usable and scalable.",
          "createdAt": "2020-07-06T10:58:47Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDE2ODY1MQ==",
          "body": "Why not just use javascript proxy https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy like Vue 3",
          "createdAt": "2020-07-06T11:11:14Z",
          "author": { "login": "ansarizafar", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDIzODM0MA==",
          "body": "Wouldn't the safest way to do the reactivity change simply be to have the compiler add the \"obj = obj\" fix after a statement which changes the array or object? As humans, we know when it's needed, right? The compiler should be able to identify statements which would alter a variable without assignment.",
          "createdAt": "2020-07-06T13:28:57Z",
          "author": { "login": "RhettFF", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDI1MjYyNw==",
          "body": "@RhettFF \"Wouldn't the safest way to do the reactivity change simply to have the compiler add the \"obj = obj\" fix after a statement which changes the array or object?\"\r\n  - The compiler builds a `ctx` object that stores `id` to `value`.\r\n  - When you write the `obj = obj` the compiler adds code that invalidates that object by `id`.\r\n  - Heres an example of one way this may get complicated:\r\n```js\r\n> let obj = { a: 1 }\r\n> let key = await someValueFromAnApi() // Returns string of 'c' at runtime.\r\n\r\n> obj\r\n{a: 1}\r\n\r\n> delete obj[key]\r\ntrue\r\n\r\n> obj\r\n{a: 1}\r\n```\r\n  - Since the compiler sees `delete obj[key]` should it invalidate obj? (obj = obj)\r\n  - Heres a repl that may explain/show this a little better:\r\n    - https://svelte.dev/repl/ccc85a29ce4c4f61b1dc6e1841f389ae?version=3.23.2",
          "createdAt": "2020-07-06T13:52:39Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDI1NzcxNQ==",
          "body": "@afaur Thanks for the example. It would be nice to \"fix\" the reactivity. It's a cause of confusion and it contorts the JS people write. I'm used to handling it now but it seems like a nail that's sticking up.",
          "createdAt": "2020-07-06T14:01:13Z",
          "author": { "login": "RhettFF", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDI4NDM1NA==",
          "body": "@opensas \"\r\n```js\r\nconst foo = obj.foo;\r\nfoo.bar = 'baz';\r\n```\r\n\r\n...won't update references to obj.foo.bar, unless you follow it up with obj = obj.\"\r\n\r\nWhat if obj contains that value to begin with (`obj = { foo: { bar: 'baz' } }`)?\r\nIn that situation it would probably be better if everything that depends on that value did not redraw if it didn't have to.\r\n\r\nThe issue might be that the compiler does not know what the code is doing well enough to make that decision without adding runtime object checking code. \r\n\r\nI don't fully understand what Svelte-M does, but maybe it adds code at compile time that looks through the object at runtime to see if anything has changed or not? If so, maybe it does get supported in svelte as an `<option/>` (as you suggested) so that people can opt in or out to the extra processing.",
          "createdAt": "2020-07-06T14:48:32Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDI5NzI2Nw==",
          "body": "Wonder what @Rich-Harris has to say about this issue\r\n\r\nAnd totally agree. Tiny, incremental changes are the way to go\r\n\r\n> Svelte 3 was a huge leap forward, just one year ago. It's not a good idea to have that type of leap all the time, as it is very expensive for users to keep up. As a user I prefer stability.\r\n\r\n\r\n",
          "createdAt": "2020-07-06T15:10:33Z",
          "author": { "login": "gevera", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDMwMzk2Mw==",
          "body": "> Why not just use javascript proxy https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy like Vue 3\r\n\r\nI also thought when I first got hit by reactivity not picking object references, that js proxies could be a solution to fix reactivity without checking every possible change. Has anybody (more knowledgeable than me) evaluated such a solution?",
          "createdAt": "2020-07-06T15:22:49Z",
          "author": { "login": "opensas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDMwNTQ1Mg==",
          "body": "> For 1, there is this issue : #3898\r\n> [...]\r\n> \r\n>     * Everytimes \"something\" could have changed, it loops for every watch, evaluate the expression, and ifa change is detected, the associated variable is reassigned/callback executed\r\n> \r\n\r\nI guess that kind of solution is not compatible with Svelte's philosophy, next step would to implement virtual dom and diffing (:scream: !!!) Anyway, if implemented, I guess it should only be allowed as an opt int on a component basis.\r\n",
          "createdAt": "2020-07-06T15:25:23Z",
          "author": { "login": "opensas", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDMwNzUzOQ==",
          "body": "\n> I also thought [...] that js proxies could be a solution to fix reactivity without checking every possible change. Has anybody (more knowledgeable than me) evaluated such a solution?\n\nThat's pretty much how Immer.js works, I believe. I don't think it's a very Svelte-y approach, since it's all runtime magic.",
          "createdAt": "2020-07-06T15:28:47Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDMxMDU2Mw==",
          "body": "@afaur \"What if obj contains that value to begin with (obj = { foo: { bar: 'baz' } })?\"\r\n\r\nI think it should be reactive in that case. After all, isn't Svelte reactive if a simple variable is updated with the same contents it already had?",
          "createdAt": "2020-07-06T15:34:16Z",
          "author": { "login": "RhettFF", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDMxMzI1OQ==",
          "body": "a change not documented in this implementation : you can't call methods with the reactivity label ($:). You have to use a special syntax and explicity declare your dependencies. it's probly due to the fact that the reactivity  system has to evaluate every reactive expression on every digest cycle. it can't in the current implementation detect dependencies in method calls without side effect.\r\n\r\n```$: doSomething(myProperty); // not valid```\r\n\r\n```$: myProperty, () => doSomething(myProperty); // valid```",
          "createdAt": "2020-07-06T15:39:29Z",
          "author": { "login": "j3rem1e", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDQ0NTY2Mw==",
          "body": "> For 2, the experiment looks like interesting, but after reading the source, It's looks like the digest cycle of angularJS :\r\n\r\nThis was my impression as well. It's a nice demo and does solve some real problems. But having come from AngularJS development, I've seen the watcher model cause serious performance issues in larger applications, with little you can do about it. \r\n\r\nA big draw of Svelte is that it figures out a lot of this stuff at compile time. In a highly dynamic language like Javascript doing this sort of analysis at compile time is difficult, at best, and often impossible to do comprehensively. As @afaur pointed out, aliasing is a real issue, and when you get into function parameters, asynchronous code, and so on, it gets even more difficult to track where and how certain pieces of data are changing.\r\n\r\nRight now the system works in a reasonably predictable way IMO, and changing it to cover more cases runs the risk of adding additional edge cases where it becomes more difficult to figure out whether Svelte will count a statement as a change or not. I think any changes to Svelte's reactivity system should be carefully considered to not make things actually worse when you go beyond the simplest cases.\r\n\r\n",
          "createdAt": "2020-07-06T20:20:41Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDkzODUzNA==",
          "body": "> That's pretty much how Immer.js works, I believe. I don't think it's a very Svelte-y approach, since it's all runtime magic.\r\n\r\n@trbrc how do you mean it's *all* runtime magic? It's a super small proxy for each object, right? Like the only thing it's doing is something akin to:\r\n\r\n```js\r\nlet proxy = new Proxy({ /* original object */ }, {\r\n    set: (obj, prop, val) => {\r\n        if (obj[prop] !== val) {\r\n            $$invalidate(/* dunno what goes here... */);\r\n        }\r\n\r\n        obj[prop] = val\r\n\r\n        return true\r\n    }\r\n});\r\n```\r\n\r\nIf a change this small could help to make things like `array.push(element)` work then I'd be all for it. :-D",
          "createdAt": "2020-07-07T15:22:09Z",
          "author": { "login": "Evertt", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDk1NDY1Ng==",
          "body": "> how do you mean it's *all* runtime magic? It's a super small proxy for each object, right?\r\n\r\nI'm not necessarily against it - I think Immer is interesting, and proxies are obviously a powerful tool. But it doesn't seem to fit very well with the Svelte philosophy, which is to move the bulk of the work to the compiler.\r\n\r\nIf you like to use runtime magic, I think you can probably do it right now. For example, create a wrapper for a Svelte component that proxies all of its props, and re-renders when it detects a mutation. **EDIT:** Here's an experiment, using [sindresorhus/on-change](https://github.com/sindresorhus/on-change): https://svelte.dev/repl/67d54ba031d64a9a972ea4eedd727e93\r\n\r\n> If a change this small could help to make things like `array.push(element)` work then I'd be all for it. :-D\r\n\r\nIt looks simple, but it would probably require much more code to work well. For example, what about large, deeply nested objects? You would need to recursively wrap any accessed property values as well. Or consider what needs to happen to a proxied object if you pass it to an imported function. What if that function runs an equality check against the original, unwrapped value? That check would now fail.",
          "createdAt": "2020-07-07T15:48:17Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDk1ODgwNg==",
          "body": "> For example, what about large, deeply nested objects? You would need to recursively wrap any accessed property values as well.\r\n\r\nI just did a quick google search and that seems relatively easy.\r\n\r\n```js\r\n    // The following code\r\n    let myObj = { name: 'Evert' }\r\n\r\n    // Would turn into\r\n    let myObj = new Proxy({ name: 'Evert' }, observer)\r\n\r\n    // Where the observer is defined somewhere else,\r\n    // just once, since it should be the same for all proxies.\r\n    const observer = {\r\n        get(target, key) {\r\n            if (typeof target[key] === 'object' && target[key] !== null) {\r\n                // This is here to make sure every nested object\r\n                // will also be wrapped in a proxy object\r\n                return new Proxy(target[key], observer)\r\n            } else {\r\n                return target[key]\r\n            }\r\n        },\r\n        \r\n        set(target, key, newValue) {\r\n            if (target[key] !== newValue) {\r\n                $$invalidate(/* invalidate target here... */)\r\n            }\r\n\r\n            target[key] = newValue\r\n\r\n            return true\r\n        }\r\n    }\r\n```\r\n\r\n> What if that function runs an equality check against the original, unwrapped value? That check would now fail.\r\n\r\nYes, that indeed seems like an important case to consider. Does Vue have an answer for that?\r\n\r\nI understand what you say about it going against Svelte's current philosophy. I wonder if there's any significant performance penalty to doing these things at runtime with a proxy object instead of at compile time. Because it does make code way more intuitive if `array.push(element)` just works...",
          "createdAt": "2020-07-07T15:55:12Z",
          "author": { "login": "Evertt", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDk2NTY4OA==",
          "body": "It's not complete, now `foo.bar === foo.bar` might be false, and you would need to unwrap `newValue` before using it, in case that's proxied. You also need to wrap and unwrap method arguments and return values. It's probably possible to get it all fairly watertight, but I don't think it would look like just a small proxy anymore.\r\n\r\nEDIT - sorry if we've derailed the thread. This proxy discussion should probably be a separate issue.",
          "createdAt": "2020-07-07T16:06:14Z",
          "author": { "login": "trbrc", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDk2NzMwMQ==",
          "body": "Okay, touché 😅\n\nOn Tue, 7 Jul 2020 at 18:06, trbrc <notifications@github.com> wrote:\n\n> It's not complete, now foo.bar === foo.bar might be false, and you would\n> need to unwrap newValue before using it, in case that's proxied. You also\n> need to wrap and unwrap method arguments and return values. It's probably\n> possible to get it all fairly watertight, but I don't think it would look\n> like just a small proxy anymore.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/sveltejs/svelte/issues/5103#issuecomment-654965688>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAJVMUVGITN6BIZNLM3E37LR2NBYPANCNFSM4ORAAXVA>\n> .\n>\n",
          "createdAt": "2020-07-07T16:08:49Z",
          "author": { "login": "Evertt", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDk2ODA0NQ==",
          "body": "> If a change this small could help to make things like `array.push(element)` work then I'd be all for it. :-D\r\n\r\nFor this specific use case we could always make `array.push(element)` become `array[array.length++] = element` at runtime.\r\n\r\nHere are shift and pop (one liners that trigger reactivity):\r\n  - Shift: `array = array.slice(1)`\r\n    - Update: https://jsperf.com/array-shift-vs-slice-1\r\n  - Pop: `delete array[array.length--]`",
          "createdAt": "2020-07-07T16:10:05Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTAwMjE5MQ==",
          "body": "Using proxies has already been brought up in other issues, and is not something we're interested in changing now. Svelte integrates nicely with Immer if you want some of these benefits.\r\n\r\nMaking `.push()` and `.pop()` and friends on arrays trigger has also already come up in other issues. This can't be consistently checked for at compile time, and we don't want to introduce runtime checks for this. We'd much rather have simple rules about what triggers reactivity and what does not, than to have complicated rules for what's recognized as an update and what's not, which would gradually change over time as false positives and false negatives are fixed. Would these changes be considered bugs? Would they be considered features? Would an exhaustive characterization of the situations that the compiler recognizes as triggering reactivity become part of the documentation, and would it be kept updated?\r\n\r\nSimilarly, `obj.foo = foo; foo.bar = baz;` can't be consistently identified at compile time, and so faces the same issues as `.push()`, `.pop()`, etc.\r\n\r\nIf there are other concrete suggestions that are present in this other project or that have come up in this thread that you feel strongly about, please open well-scoped RFCs for them in [this repo](https://github.com/sveltejs/rfcs).",
          "createdAt": "2020-07-07T17:09:44Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Njk2MDg4NA==",
          "body": "> > If a change this small could help to make things like `array.push(element)` work then I'd be all for it. :-D\r\n> \r\n> For this specific use case we could always make `array.push(element)` become `array[array.length++] = element` at runtime.\r\n> \r\n> Here are shift and pop (one liners that trigger reactivity):\r\n> \r\n>     * Shift: `array = array.slice(1)`\r\n> \r\n>     * Pop: `delete array[array.length--]`\r\n\r\n@afaur `arr.slice(1)` makes a second array while `arr.shift()` copies within the existing array and has less runtime overhead. #perfmatters",
          "createdAt": "2020-07-11T01:32:01Z",
          "author": { "login": "samclaus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Njk2MTMxMQ==",
          "body": "Also, isn't the whole point of AOT compilation in Svelte and Angular (and maybe some other frameworks?) that it is extremely easy for the optimizing JS runtime to see hard coded variable names and make hidden classes? Wouldn't using proxies throw all that out the window and make the browser devolve to using hashmaps for property lookups?",
          "createdAt": "2020-07-11T01:33:43Z",
          "author": { "login": "samclaus", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Njk4MjA0Nw==",
          "body": "> @afaur `arr.slice(1)` makes a second array while `arr.shift()` copies within the existing array and has less runtime overhead. #perfmatters\r\n\r\n- Added a `jsperf` to my original post, but the results seem to vary for me. (Tried `v8` `Chrome 83.0.4103`)\r\n  - https://jsperf.com/array-shift-vs-slice-1\r\n  - It is worth noting that `jsperf` results will show `ops per second`, and not `memory consumption`.\r\n  - `shift` operations may help `memory consumption` throughout a run, but I have not been able to verify that.\r\n  - Current `v8` implementations of `shift` and `slice` for more information: [shift](https://github.com/v8/v8/blob/master/src/builtins/array-shift.tq) | [slice](https://github.com/v8/v8/blob/master/src/builtins/array-slice.tq)",
          "createdAt": "2020-07-11T03:57:20Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NzEzMjM0Nw==",
          "body": "I was able to get the [samples from the article](https://gist.github.com/lega911/4372e9eabb3bba29057be0f7766264a9) to run locally today.\r\n  - I updated the timing measurements from the gist benchmarks to use `performance.now` and `requestAnimationFrame`.\r\n    - `Date.now` was replaced with `performance.now`\r\n    - Data update is measured as soon as the timed function is finished running.\r\n    - `setTimeout` was replaced with `requestAnimationFrame` to measure `paint`.\r\n  - Original `timeit` function from the benchmark gist: [MalinaJS](https://gist.github.com/lega911/4372e9eabb3bba29057be0f7766264a9#file-malina-app-html-L5-L11) | [SvelteJS](https://gist.github.com/lega911/4372e9eabb3bba29057be0f7766264a9#file-malina-app-html-L5-L11)\r\n    - Changes to `timeit` function: [MalinaJS](https://github.com/afaur/svelte-js-svelte-m/blob/master/app-m.html#L5-L17) | [SvelteJS](https://github.com/afaur/svelte-js-svelte-m/blob/master/app-m.html#L5-L17)\r\n    - Deployed versions with these updates: [Demo](https://afaur.github.io/svelte-js-svelte-m/index.html) | [Repo](https://github.com/afaur/svelte-js-svelte-m)\r\n  - **Update**: I was able to adjust the example to time both the add to the array, and the paint. I will update the demo shortly.\r\n  - **Update**: The paint is where the performance deviates largely between `Svelte-M / MalinaJS` and `SvelteJS v3.23.2`\r\n    - Both the demo and the repo have been updated: [Demo](https://afaur.github.io/svelte-js-svelte-m/index.html) | [Repo](https://github.com/afaur/svelte-js-svelte-m)\r\n  - Below is an example run of both examples in `v8` `Chrome 83.0.4103` using `performance.now` with `paint` measured.\r\n    - `Svelte-M` / `MalinaJS`\r\n      - Writing `5000` items to an array: Between `1.58ms` and `1.75ms`\r\n      - Painting `5000` items: Between `0.32ms` and `0.38ms`\r\n      - Remove array item (Array splice using indexOf): Between `0.02ms` and `0.03ms`\r\n      - Painting after removal: Between `0.28ms` and `0.35ms`\r\n    - `SvelteJS v3.23.2`\r\n      - Writing `5000` items to an array: Between `1.78ms` and `1.84ms`\r\n      - Painting `5000` items: Between `916.65ms` and `1877.00ms`\r\n      - Remove array item (Array splice using indexOf): Between `0.04ms` and `0.06ms`\r\n      - Painting after removal: Between `116.00ms` and `118.06ms`\r\n    - It may be helpful to ask the author to update the article with `performance.now` timings.\r\n  - `paint` seems to be where `svelte` may need some attention.\r\n    - I will look at `Node.cloneNode`, and `building the DOM as one command` as mentioned in the article.",
          "createdAt": "2020-07-11T21:24:35Z",
          "author": { "login": "afaur", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTEwNjgwOTI=",
    "body": "**Problem**\r\n\r\nWith React's tooling, you can comment on a component like this:\r\n\r\n```typescript\r\n/** Documentation that will appear on hover in other places where this is imported */\r\nfunction MyComponent() { return null }\r\n```\r\n\r\nHowever, in Svelte, I haven't found a way to do this.\r\n\r\n**Solution**\r\n\r\nI would like to know where I can place a comment that will be taken up by the on-hover documentation of editors like VSCode and Vim/Neovim (with coc.nvim).\r\n\r\nTo illustrate, here I'm hovering `MyComponent` but I only see `import MyComponent`:\r\n\r\n![image](https://user-images.githubusercontent.com/16181067/86531889-7b9ddf00-bec5-11ea-9a87-9459b62d40da.png)\r\n\r\nI would like my docstring `Documentation that will appear on hover in other places where this is imported` to be included in the tooltip.\r\n\r\nI've googled around for this for a while and tried my local setup with TypeScript and I can't find a way to do it. I found an interesting related discussion on [metadata for Svelte components](https://github.com/sveltejs/svelte/issues/2134) but the discussion is more about prop types.\r\n\r\n**Question**\r\n\r\nOn the analogous issue I made on `language-tools` https://github.com/sveltejs/language-tools/issues/280 we've been talking about HTML comments that can be picked up by `svelte2tsx`. However, using something like `<svelte:options documentation=\"blabla\" />` seems more idiomatic, but it would require support by the compiler.\r\n\r\nWhat do you think is the best option?\r\n",
    "closedAt": "2020-07-05T17:00:35Z",
    "createdAt": "2020-07-05T13:14:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzg4Nzk0Mg==",
          "body": "If a proposal is accepted I would be really interested in working on it.",
          "createdAt": "2020-07-05T13:16:34Z",
          "author": { "login": "fnune", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzg4OTIxOQ==",
          "body": "My preference would be to use HTML comments for that, starting with a tag like `@doc`. I'm not sure if anyone would benefit from having the docs in the output which is not meant for humans to read anyway, so it seems too much overhead of adding something like this to the compiler.\r\n\r\nThe alternative would be jsdoc inside a script tag, which would feel more close to what you can do with other jsdocs, but not every svelte component has script content and adding a tag solely for the docs could feel wrong for people.\r\n\r\nBoth my comment suggestions would mean the compiler would not have to do anything and it would be purely the responsibility of the IDE tools to support that.",
          "createdAt": "2020-07-05T13:29:01Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzg5MDM1MQ==",
          "body": "> My preference would be to use HTML comments for that, starting with a tag like `@doc`. I'm not sure if anyone would benefit from having the docs in the output which is not meant for humans to read anyway, so it seems too much overhead of adding something like this to the compiler.\n> \n> The alternative would be jsdoc inside a script tag, which would feel more close to what you can do with other jsdocs, but not every svelte component has script content and adding a tag solely for the docs could feel wrong for people.\n> \n> Both my comment suggestions would mean the compiler would not have to do anything and it would be purely the responsibility of the IDE tools to support that.\n\nI'll give implementing that a go (the HTML comment). That would be on svelte2tsx, right?",
          "createdAt": "2020-07-05T13:40:25Z",
          "author": { "login": "fnune", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzg5MTc0MA==",
          "body": "Yes, you are welcome to do a PR at language-tools 😃 ",
          "createdAt": "2020-07-05T13:53:38Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MzkxMjYzNg==",
          "body": "Closing, as this does indeed sound like more of a language-tools thing.",
          "createdAt": "2020-07-05T17:00:35Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTA5NDkyMA==",
          "body": "Fixed via https://github.com/sveltejs/language-tools/pull/285 and https://github.com/sveltejs/language-tools/pull/282",
          "createdAt": "2020-07-07T19:59:32Z",
          "author": { "login": "fnune", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTA4OTc0MzY=",
    "body": "We cannot use slot prop in custom components, this messes up components that work with flexbox and other tools that depend on component structure.\r\n\r\n## ChildComponent.svelte\r\n```html\r\n<p> I need to be directly a child of ParentComponent.svelte</p>\r\n```\r\n\r\n## ParentComponent.svelte\r\n```html\r\n<div>\r\n    <slot name=\"child\" />\r\n    <div class=\"content\"><slot/></div>\r\n</div>\r\n```\r\n\r\n## App.svelte\r\n```js\r\nimport ChildComponent from \"ChildComponent.svelte\";\r\nimport ParentComponent from \"ParentComponent.svelte\";\r\n```\r\n```html\r\n<ParentComponent>\r\n    <div slot=\"child\">\r\n        <ChildComponent />\r\n    </div>\r\n    This is the content\r\n</ParentComponent>\r\n```\r\n\r\nThis is the output\r\n```html\r\n<div>\r\n    <div>\r\n        <p> I need to be directly a child of ParentComponent.svelte</p>\r\n    </div>\r\n    <div class=\"content\">\r\n        This is the content\r\n    </div>\r\n</div>\r\n```\r\n\r\nAs you can see the `<p>` tag is not a direct child. I propose that slot be a reserved keyword and can used by any component.",
    "closedAt": "2020-07-04T20:39:33Z",
    "createdAt": "2020-07-04T14:08:39Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzc3ODg1MQ==",
          "body": "I have a feeling that this is covered by the one of the slots proposals, but I could be wrong. @tanhauhau can you clarify?",
          "createdAt": "2020-07-04T15:24:12Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzc5NDY3OA==",
          "body": "I'm pretty sure #4556 would take care of this.",
          "createdAt": "2020-07-04T18:00:19Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MzgwOTY1Mw==",
          "body": "Yeah duplicate of #1037 and #2080 and probably some other issues. This would be handled by something like #4556.",
          "createdAt": "2020-07-04T20:39:33Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTA4MjM2OTQ=",
    "body": "Hello Team;\r\nIn the Tutorial left panel section, where the instructions are written, could you please make the background color darker of fully dark, as the current gray background and white foreground is hard to read and puts strain on the eyes.\r\nOr perhaps give us choice to pick a color.\r\n\r\nThanks!\r\n..Ben",
    "closedAt": "2020-07-04T23:35:46Z",
    "createdAt": "2020-07-04T04:15:52Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MzgyMzIxMQ==",
          "body": "I'm closing this in favour of this issue - https://github.com/sveltejs/svelte/issues/3557, which I will chase, and can become a single accessibility issue.\r\n\r\nWe should have a dark mode and light mode, for a variety of reasons, but especially accessibility.",
          "createdAt": "2020-07-04T23:35:46Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTA3NTMwMTA=",
    "body": "I've had a couple times where I've missed a `switch` equivalent for logic in templates. I have been using long if-elseif chains, but this can get ugly. It's mostly useful for when you want to display different components based on an enum. Haven't seen any other issues about this, but switch statements are commonly used for control flow and I was a bit suprised they were absent in Svelte.\r\n\r\n```\r\n{#switch type}\r\n    {:case 'loading'}\r\n        <Loading />\r\n    {:case 'success'}\r\n        <Content />\r\n    {:case 'timeout'}\r\n        <Timeout />\r\n    {:case 'error'}\r\n        <ErrorMessage />\r\n    {:default}\r\n        <div>{status}</div>\r\n{/switch}\r\n\r\n<!-- or -->\r\n\r\n{#case type}\r\n    {:when '..'}\r\n    {:else}\r\n{/case}\r\n```\r\nas opposed to:\r\n\r\n```\r\n{#if type === 'loading'}\r\n        <Loading />\r\n    {:elseif type === 'success'}\r\n        <Content />\r\n    {:elseif type === 'timeout'}\r\n        <Timeout />\r\n    {:elseif type === 'error'}\r\n        <ErrorMessage />\r\n    {:else}\r\n        <div>{status}</div>\r\n{/switch}\r\n\r\n<!-- or alternatively -->\r\n\r\n<svelte:component this={(()=>{\r\n    switch (type) {\r\n        case 'loading':\r\n            return Loading;\r\n        case 'success':\r\n            return Content;\r\n        case 'timeout':\r\n            return Timeout;\r\n        case 'error':\r\n           return ErrorMessage;\r\n    }\r\n})()}/>\r\n```\r\n\r\nEDIT: Just found this is a dupe: https://github.com/sveltejs/svelte/issues/530 - Feel free to close this and re-open the other issue.",
    "closedAt": "2020-07-04T15:38:10Z",
    "createdAt": "2020-07-03T20:17:28Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzc4MDQ1NA==",
          "body": "Closing, but referring to this: https://github.com/sveltejs/svelte/issues/530#issuecomment-326818286\r\n\r\nI also don't think that having a switch statement really adds huge value, it simply increases the surface area, for no great benefit.\r\n\r\nSorry if this isn't the answer you were looking for.\r\n\r\nFWIW your example doesn't help, do it thusly:\r\n\r\n```\r\nimport Blah from 'Blah.svelte'\r\nlet component = Blah\r\n\r\n<svelte:component this={component} />\r\n```\r\n\r\nthen change component via whatever means you like (switch, etc)",
          "createdAt": "2020-07-04T15:38:10Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTI3MzkzNw==",
          "body": "Let us disagree with you on this. The same reasoning could be done in *any* language that offers a `switch` statement then! The statement exists for a reason, and helps people organize their code, write less cluttered code, etc. Isn't this the idea behind Svelte? @Rich-Harris ",
          "createdAt": "2021-05-03T13:52:50Z",
          "author": { "login": "mossaiby", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTI3NjI4Ng==",
          "body": "this usecase can be easily done with an own component as wrapper\r\n```html\r\n<MySwitchComponent cases={{loading: Loading, error: Error}} case={case} />\r\n```",
          "createdAt": "2021-05-03T13:56:29Z",
          "author": { "login": "Kapsonfire-DE", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTI3NjU2OQ==",
          "body": "There's an open RFC about it, discussion should happen there. Also, tagging people won't help get these arguments across. https://github.com/sveltejs/rfcs/pull/49 ",
          "createdAt": "2021-05-03T13:56:57Z",
          "author": { "login": "dummdidumm", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTI3NjgzNw==",
          "body": "@Kapsonfire-DE I don't think that is helpful really, technically that is true of almost any Svelte Syntax.\r\n\r\nAnyway there is and RFC about this now, please comment there.",
          "createdAt": "2021-05-03T13:57:22Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTI3NzA1OA==",
          "body": "@dummdidumm too fast for me.",
          "createdAt": "2021-05-03T13:57:42Z",
          "author": { "login": "pngwn", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgzMTU5MzQ5OQ==",
          "body": "Thank you for quick answers! Didn't expect that ;)\r\n\r\nIMO the functionality should be implemented in core Svelte, and not a component; there are a lot of other use cases as well. I did not know about the RFC; will check that right now. And I tagged Rich Harris (not this time ;)) because he had commented on the issue, and seemed to me that he only wanted a cleaner syntax (see also #530).",
          "createdAt": "2021-05-03T23:15:41Z",
          "author": { "login": "mossaiby", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NTA0NTY1MDg=",
    "body": "**Describe the bug**\r\nI'm using svelte based rollup using the repl template and I find that Chrome Devtools has two of every .svelte file. One in the root and one in a correct folder. The one in the folder is debuggable, the other isn't. It's obviously a pain to have to pick between them when searching for a source.\r\nI don't know if this is an issue with svelte or rollup, but I was unable to find an existing ticket on either project.\r\n\r\nHere's a screeny showing the issue\r\n<img width=\"508\" alt=\"Screenshot 2020-07-03 at 10 03 55\" src=\"https://user-images.githubusercontent.com/820/86452660-87966f00-bd14-11ea-91c8-bf8ef362ca5c.png\">\r\n",
    "closedAt": null,
    "createdAt": "2020-07-03T09:04:27Z",
    "state": "OPEN",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDkyODQxNjM=",
    "body": "Hello,\r\n\r\nI tried the following steps:\r\n\r\n```\r\ngit clone https://github.com/sveltejs/svelte.git\r\ncd svelte\r\nnpm install\r\n```\r\nAnd I got errors like the following:\r\n\r\n`node_modules/typescript/lib/lib.webworker.d.ts(529,11): error TS2300: Duplicate identifier 'AbortController'.`\r\nor\r\n`../../../../node_modules/@types/react-native/globals.d.ts(85,5): error TS2717: Subsequent property declarations must have the same type.`\r\n\r\nIs that because of a globale node_modules-directory?\r\n\r\nThanks in advance",
    "closedAt": "2020-07-01T21:15:21Z",
    "createdAt": "2020-07-01T20:03:16Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjYyNTc0OA==",
          "body": "Ok, I figured it out.\r\n\r\n`../../node_modules/@types/react-native/globals.d.ts(40,15): error TS2300: Duplicate identifier 'FormData'.`\r\n\r\nThat was an indicator for problems respectively conflicts with react-native-dependencies.\r\n\r\nI deleted them and it worked properly. Unfortunately do not know yet the root cause for the errors.",
          "createdAt": "2020-07-01T20:18:06Z",
          "author": { "login": "mariushilleke", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjY1MDM2Nw==",
          "body": "This is presumably something with your environment, perhaps indeed the result of globally installed npm packages or a `node_modules` higher up in your directory tree. This isn't happening for me, and Svelte doesn't depend on `@types/react-native`.",
          "createdAt": "2020-07-01T21:15:21Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDg3MzIyNDY=",
    "body": "The problem is that I want to style components using CSS in the style tag, it prevents me from using the component to its fullest potential and making components easily customizable.\r\n\r\n## The solution could be:\r\n__Component.svelte__\r\n```css\r\nh1 {\r\n  color: red;\r\n}\r\n```\r\n```html\r\n<div style>\r\n    <h1>Hello There</h1>\r\n</div>\r\n```\r\n\r\n__App.svelte__\r\n```js\r\nimport Component from \"./Component.svelte\";\r\n```\r\n```css\r\nComponent h1 {\r\n    color: blue\r\n}\r\n```\r\n```html\r\n<Component />\r\n```\r\n\r\n## Current solution\r\nAdd a style prop to the component.\r\n\r\n__Component.svelte__\r\n```js\r\nexport let style;\r\n```\r\n```html\r\n<div>\r\n    <h1 {style}>Hello There</h1>\r\n</div>\r\n```\r\n\r\nThis problem is not too important, but definitely helps when working with UI libraries for making minor changes without changing much code.\r\n",
    "closedAt": "2020-07-01T07:39:49Z",
    "createdAt": "2020-07-01T07:08:43Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjI0OTU5Nw==",
          "body": "Hi @TheComputerM - this issue has been discussed almost endlessly since the dawn of Svelte, and each proposed solution is flawed in its own unique way. Please contribute your thoughts/discussion to the [RFC](https://github.com/sveltejs/rfcs/pull/22) so that we can find a way forward which works for everybody, in all scenarios :)",
          "createdAt": "2020-07-01T07:39:49Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgwNjQyMjkxNQ==",
          "body": "Totally agree, feel free to contribute to the [RFC ](https://github.com/sveltejs/rfcs/pull/22)and support or improve the various solutions the community has come up with to approach this.",
          "createdAt": "2021-03-25T07:19:13Z",
          "author": { "login": "AlbertMarashi", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDg2NzI1NDY=",
    "body": "**Describe the bug**\r\nOn a checkbox, during the call of the event handler set in on:change, the variable bound with `bind:checked={variable}` has the old value.\r\n\r\n**To Reproduce**\r\nSee https://svelte.dev/repl/76b4ada2599f41848b5a6c760df87a75?version=3 and look at the console output. It's `true` when it should be `false` and `false` when it should be `true`.",
    "closedAt": "2020-07-01T06:42:14Z",
    "createdAt": "2020-07-01T04:57:36Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjIyNDgzMg==",
          "body": "Never mind. Changing the order of the bind and the handler fixes this. TIL.",
          "createdAt": "2020-07-01T06:42:14Z",
          "author": { "login": "buhrmi", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4Nzc5MDU1NA==",
          "body": "I had same issue too, I think this should be mentioned somewhere in docs.",
          "createdAt": "2020-09-06T13:32:16Z",
          "author": { "login": "gamelaster", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY4Nzg4MDM1Ng==",
          "body": "There's an issue for describing this better in the docs, #4616.",
          "createdAt": "2020-09-06T19:36:11Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDcxODMzMjkxMA==",
          "body": "Confused me for a bit until I found this thread.",
          "createdAt": "2020-10-29T03:16:57Z",
          "author": { "login": "ImmanentizeTheEschaton", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDgxMzExNjY=",
    "body": "I have to move a component from svelte-sapper to sapper.\r\nThe component uses uuid in this way\r\n`import { v4 as uuidv4} from uuid`\r\n\r\nI installed also crypto. When i use that component on the console browser i have this error\r\n\r\n`rng.js:4 Uncaught TypeError: crypto.randomFillSync is not a function`\r\n\r\nand on the console:\r\n\r\n`bundles src/index.js → dist/index.mjs, dist/index.js, public/build/bundle.js...`\r\n`(!) Missing global variable names`\r\n`Use output.globals to specify browser global variable names corresponding to external modules`\r\n`crypto (guessing 'crypto')`\r\n`crypto (guessing 'crypto')`\r\n\r\nI already installed crypto with npm, the function is on bundle.js\r\n\r\n`  const rnds8 = new Uint8Array(16);\r\n    function rng() {\r\n      return crypto.randomFillSync(rnds8);\r\n    }\r\n`\r\n\r\nI saw thet i need to use inside rollup.config.js, inside plugin element\r\n\r\n`resolve({\r\nbrowser: true\r\n}),`\r\n\r\nBut it did not work. Any suggestions?\r\n",
    "closedAt": "2020-06-30T13:27:49Z",
    "createdAt": "2020-06-30T12:27:10Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTc5MDI4NQ==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-06-30T13:27:49Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDc3MTQ5MDA=",
    "body": "Hi, I'm looking for a straightforward way to set up environments. I.E. It would be great if I could run `npm run dev:local` and `npm run dev:staging` which load different environment files which are accessible at runtime via `process.env`. I'm using svelte with rollup straight from `sveltejs/template`. It should be simple but I see no way of doing it. It's cumbersome, but possible to do with webpack. Is there a simple way to do this?\r\n",
    "closedAt": "2020-06-29T22:41:45Z",
    "createdAt": "2020-06-29T22:33:49Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTQwNjk3Mw==",
          "body": "GitHub issues aren't the right place for support questions like this. Please ask on StackOverflow or in our [Discord chat room](https://svelte.dev/chat).",
          "createdAt": "2020-06-29T22:41:45Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTQwNzMxMg==",
          "body": "Thanks a million",
          "createdAt": "2020-06-29T22:43:00Z",
          "author": { "login": "darajava", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTQwNzgzNg==",
          "body": "But, I do believe this is an issue in svelte - the whole philosophy of this project is that it should be simple to use, and this fundamental problem is close to impossible to achieve it seems. ",
          "createdAt": "2020-06-29T22:44:48Z",
          "author": { "login": "darajava", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDc3MDU3NDA=",
    "body": "In my experience I frecuently encounter the following code pattern:\r\n```svelte\r\n<button on:click={() => menuOpen = !menuOpen}>Menu</button>\r\n``` \r\n\r\nI propose the following code shorthand:\r\n```svelte\r\n<button on:click={menuOpen = !menuOpen}>Menu</button>\r\n``` \r\n\r\nThe outputted compiled code should be the same in both cases. I think that the implementation could be if the parser sees an assignment inside moustache tags, it wraps it up in an anonymous function.\r\n\r\nNot entirely sure if there are edge cases that I should consider. If it's a reasonable enhancement I would like to give it a shot. Someone pointing me out where to start would be much appreciated :)\r\n\r\nOn a personal note, I think this aligns nicely with existing code sugar/shorthands that svelte offers.\r\n\r\n(I call the ```{}``` moustache tags because I've seen it the source code although I'm not really sure if that is the right technical name)",
    "closedAt": "2020-07-10T08:57:47Z",
    "createdAt": "2020-06-29T22:12:01Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjI1MzgxNw==",
          "body": "My personal feeling is that this increases the surface API area with no discernible benefit. right now it's very simple to say that a handler is a method, and that's that.\r\n\r\nThis introduces a branch into the API which for one, doesn't receive the event itself.\r\n\r\nI also think there'll be a case whereby it's unclear whether the content of the expression is a method to be called, or returns a method to be called, or has a side-effect of calling a method, but I can't bring one to mind right now.\r\n\r\nSo it'd be a a no from me. Leaving open for others to weigh in.",
          "createdAt": "2020-07-01T07:48:04Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjMxMDAzMw==",
          "body": "Yes, the case of on:click={createClickHandler(item)} is the one that worries me with this change. (The “returns a method to be called” case mentioned by Antony.) \r\n\r\nI use a pattern like this in some of my charting code where the individual chart components share a lot of logic across their event handlers, and so it makes sense to use factory functions to create the event handlers. I could adapt without much trouble, but this would definitely be a breaking change if it were to be added. ",
          "createdAt": "2020-07-01T09:36:47Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjQ3MDgwOQ==",
          "body": "@antony \r\nMmm the benefit is small, that's true, but Svelte already has this type of syntactic sugar, like:\r\n\r\n```svelte\r\n<input bind:value={value}>\r\n\r\n// Same as\r\n\r\n<input bind:value>\r\n```\r\n\r\nAnother example is the forwarding all events, although that one also affects functionality so it not just syntax sugar.\r\n\r\n> right now it's very simple to say that a handler is a method, and that's that.\r\n\r\nTo be honest, I'm not that familiar with the internals but, in my mind, we would _just_ have to introduce a check to see if the code inside the ```{}``` it's an assignment of not, the output of the two examples I shared above would be equal\r\n\r\n@dimfeld \r\n> Yes, the case of on:click={createClickHandler(item)}\r\n\r\nSince that is not an assignment the should follow the existing compilation path\r\n\r\n> but this would definitely be a breaking change if it were to be added.\r\n\r\nNo really, because the existing code will produce the same output.\r\n\r\n\r\n## \r\nMaybe I've overseen something obvious, sorry if that's the case. I'll give it a shot this weekend",
          "createdAt": "2020-07-01T14:59:46Z",
          "author": { "login": "ElianCordoba", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MjYzMjk5OQ==",
          "body": "I don't think the `bind:value` case is an analogous case, as it is simply syntactic sugar, while this does change the behavior of the expression.\r\n\r\nThe problem with a \"does this expression have an assignment\" heuristic is less a technical issue than a developer experience issue. Currently an expression in a handler is always evaluated at the time that the component/element is created. Changing it would mean that the expression is evaluated either at creation time or when the event occurs, depending on the contents of that expression.\r\n\r\nHere's an assortment of things you might want to do in a handler when the expression can be interpreted as a function contents. \r\n\r\n`on:click={x = 5}`\r\n`on:click={list.push(5)}`\r\n`on:click={doIt(5)}`\r\n`on:click={abc.def(5)}`\r\n`on:click={() => abc.def(5)}`\r\n`on:click={set(abc, 'def', 5)}`\r\n`on:click={save}`\r\n`on:click={save()}`\r\n`on:click={save(); x = 5;}`\r\n\r\nI don't think the additional layer of complexity where sometimes you can just write the code and other times need to wrap it in a function is worth the convenience, and I guarantee it will confuse newcomers to Svelte, many of whom are also new to Javascript development completely.\r\n\r\nEdit: All that said, I have at times wished I could do this too. I do sympathize with the desire to enable this sort of syntax. I just haven't come up with an appropriate way to do it that wouldn't increase the complexity unnecessarily. The best one I thought of is something like `on:click|immediate={x = 5}` but that isn't really better than just `on:click={() => x = 5}`.",
          "createdAt": "2020-07-01T20:34:43Z",
          "author": { "login": "dimfeld", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MzY1Njc2MQ==",
          "body": "The best syntax I could think of was: `run:click={x=5}`, which I think captures the idea that it's running the expression when the user clicks, rather than wiring up event listeners with on:click. Vue has a magic `$event` variable for accessing the event object, but this shouldn't be necessary as this is already pretty terse: `on:click={e => x = e.target.value}`.\r\n\r\nHowever, I am concerned about bloating the API surface area for this convenience, and while it's nice to put state changes in your templates when you're quickly prototyping, I think components are more maintainable when event handlers are explicitly written in `<script>...</script>`, and then passed by reference.",
          "createdAt": "2020-07-03T19:25:24Z",
          "author": { "login": "mjadobson", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDE1NDkyOQ==",
          "body": "Not entirely related to the overall problem, but retracing the initial example of\r\n\r\n```<button on:click={() => menuOpen = !menuOpen}>Menu</button>```\r\n\r\nThis is indeed a very common pattern I ran into several times, to the point I made a separate _store-like_ object for it [svelte-toggleable](https://www.npmjs.com/package/svelte-toggleable) that abstracts away this kind of operation to the point you can do\r\n\r\n```<button on:click={menuOpen.toggle}>Menu</button>```",
          "createdAt": "2020-07-06T10:37:35Z",
          "author": { "login": "stephane-vanraes", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NjU2Nzc4NQ==",
          "body": "Closing this as I believe that whilst the sentiment is correct, and it's always nice to have a shorthand, the amount of overheads in compilation and comprehension for people, i.e:\r\n\r\n`on:click={set(abc, 'def', 5)}`\r\n\r\nif perhaps the store returned a method as part of it's state change, would make this feature a bit of a non-starter. There's a huge benefit to be had by [keeping things predictable](https://en.wikipedia.org/wiki/Principle_of_least_astonishment). ",
          "createdAt": "2020-07-10T08:57:47Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDc1NzQ4MjA=",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThis modifier seems to have been ignored or forgotten.\r\nI have used Svelte to create a TV application on Samsungs Tizen platform.\r\nI needed to use stopImmediatePropagation all the time there, because the TV OS had its own set of events which fired some DOM events causing callbacks to be executed twice.\r\n\r\n**Describe the solution you'd like**\r\nI would like for a stopImmediatePropagation modifier to be added to the project which would work exactly as `on:click|stopPropagation`.\r\n\r\n**How important is this feature to you?**\r\nIt's not ultra important but adds consistency to handling events in Svelte.\r\n",
    "closedAt": null,
    "createdAt": "2020-06-29T18:22:09Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1Mzc3ODY0Nw==",
          "body": "As per the feedack on the PR itself, I can't see a usecase for this.",
          "createdAt": "2020-07-04T15:22:47Z",
          "author": { "login": "antony", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NDM5MTQ1Ng==",
          "body": "As mentioned on the PR, the main usecase is when there's an external library attaching event handlers that we don't want to be executed. I do not think adding this modifier adds extra complexity, it's a very minor addition. To me it's a matter of having a complete and consistent way of handling events in Svelte. I was expecting this modifier to be there if stopPropagation and preventDefault are.",
          "createdAt": "2020-07-06T18:17:40Z",
          "author": { "login": "marcin-wicha", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDgxNjg0Mjk1OQ==",
          "body": "@marcin-wicha i want to use svelte on a tizen tv too and a have a Problem that a Click Event on button is no firing. Is this the point where you needed to use stopImmediatePropagation ? Can you explain your workaround?",
          "createdAt": "2021-04-09T17:36:30Z",
          "author": { "login": "rubiktubik", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDc1NjA0NjM=",
    "body": "The data I'm working with is recursive. I've created a couple of components that call each other conditionally to iterate over this data structure. This works fine seemingly without issue but I'm seeing these compilation errors/warning/logs?\r\n\r\n    Circular dependency: src/components/Element.svelte -> src/components/Container.svelte -> src/components/Element.svelte\r\n\r\nWhich leads me to wonder is this an unsupported feature that is going to break or is there some better way of doing this?\r\n\r\nI've recreated the same setup here but the REPL doesn't show the error.\r\nhttps://svelte.dev/repl/b4d4806506264273b76eef1551e08df3?version=3.23.2\r\n\r\nBecause the circular dependencies are found should I expect that they were also handled or is code going to cause memory leaks by instantiating these components over and over. In normal code this can easily be handled but in the current templating structure it is hard to know what I should expect and the output makes it seem like maybe I'm doing something wrong.\r\n\r\n**Expected behavior**\r\nI assume there is a better way to do this and this warning is telling me I'm doing something that is bad. If that isn't true I think the warning should be removed.\r\n\r\n**Information about your Svelte project:**\r\n- OS X 10.14\r\n- Svelte version 3.23.2\r\n- Rollup\r\n\r\n**Severity**\r\nNot blocking, just wondering if I'm maybe doing something wrong\r\n",
    "closedAt": "2020-06-29T18:47:16Z",
    "createdAt": "2020-06-29T17:55:32Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTI5NTEyMA==",
          "body": "This is a warning from Rollup, not a warning from Svelte. If you're doing something where you have a legitimate reason for having circular dependencies, you can either ignore the Rollup warnings, or you can edit your Rollup configuration to suppress them.\r\n\r\nThere's not anything we can do in Svelte to alleviate this, and I don't think we want to edit the default Rollup template to suppress any of these warnings. I don't foresee a problem on the Svelte side for writing code like this.\r\n\r\nSvelte offers the `<svelte:self>` special element for a component to refer to itself (without Rollup freaking out), but I don't think there's a reasonable way to represent mutual recursion without Rollup finding out about it. I don't think there's anything really to be done here. There are situations that arise with circular `import`s that have nothing to do with Svelte, and I think the ones that do involve Svelte should also be up to the individual developer to handle.",
          "createdAt": "2020-06-29T18:47:16Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDY2Nzg4MDI=",
    "body": "I am using a preprocessor to import styles in SCSS into my Svelte components.\r\n\r\nSome of the stylesheets have grown rather big, so eventually I started to swap them out as follows:\r\n\r\n```\r\n<style lang=\"scss\">\r\n  @import \"./CheckBox.scss\";\r\n</style>\r\n```\r\n\r\nOut of curiosity I tried out something shorter and was surprised that it actually worked:\r\n\r\n```\r\n<style lang=\"scss\" src=\"./CheckBox.scss\"></style>\r\n```\r\n\r\nOne minor point that still bothers me is that the compiler raises an error when I try to make the tag self-closing. The following is currently **not** possible:\r\n\r\n```\r\n<style lang=\"scss\" src=\"./CheckBox.scss\" />\r\n```\r\n\r\nOutput from `svelte-loader`:\r\n\r\n```\r\nERROR in ./src/CheckBox/CheckBox.svelte\r\nModule build failed (from /......./node_modules/svelte-loader/index.js):\r\nError: ParseError: Expected > (13:41)\r\n11: </script>\r\n12: \r\n13: <style lang=\"scss\" src=\"./CheckBox.scss\" />\r\n```\r\n\r\nI think it would be nice to have that supported.",
    "closedAt": "2020-07-07T18:05:51Z",
    "createdAt": "2020-06-27T13:01:18Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDU2MTk0Ng==",
          "body": "Yeah it probably makes sense for `svelte.preprocess()` to treat self-closing `<style>` and `<script>` tags the same as empty ones when running `style` or `script` preprocessor callbacks.",
          "createdAt": "2020-06-27T13:33:51Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDczMTI4Ng==",
          "body": "@Conduitry If it is planned to implement to implement this feature request - can I try to implement it? I've never contributed to svelte before, but I really like the project and thought that this feature wouldn't be too hard to implement?",
          "createdAt": "2020-06-28T10:31:29Z",
          "author": { "login": "lukasmoellerch", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDczMjI1NQ==",
          "body": "Sure, feel free to take a look, thank you! To get you started, the implementation would go in https://github.com/sveltejs/svelte/tree/master/src/compiler/preprocess and tests would go in https://github.com/sveltejs/svelte/tree/master/test/preprocess",
          "createdAt": "2020-06-28T10:40:08Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTAzMjExMA==",
          "body": "Self-closing `<script/>` and `<style/>` tags are now handled by the preprocessor the same as empty ones as of 3.24.0.",
          "createdAt": "2020-07-07T18:05:49Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDY2NDkyODA=",
    "body": "**Describe the bug**\r\nsvelte css parser fails to consider valid css which include backslash\r\n\r\n**Logs**\r\n\r\nfrom https://github.com/wighawag/a17t-svelte-test :\r\n\r\n```\r\n$ rollup -c\r\n\r\nsrc/main.js → public/build/bundle.js...\r\n[!] (plugin svelte) ParseError: RightParenthesis is expected\r\nsrc\\Tailwindcss.svelte\r\n70535:     transition-delay:1000ms\r\n70536:   }\r\n70537: }</style>\r\n        ^\r\nParseError: RightParenthesis is expected\r\n    at error (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\svelte\\src\\compiler\\utils\\error.ts:25:16)\r\n    at Parser$1.error (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:93:3)\r\n    at Object.read_style [as read] (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\svelte\\src\\compiler\\parse\\read\\style.ts:21:11)\r\n    at tag (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\svelte\\src\\compiler\\parse\\state\\tag.ts:190:27)\r\n    at new Parser$1 (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:45:12)\r\n    at parse (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\svelte\\src\\compiler\\parse\\index.ts:208:17)\r\n    at compile (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\svelte\\src\\compiler\\compile\\index.ts:79:14)\r\n    at C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\rollup-plugin-svelte\\index.js:252:22\r\n    at ModuleLoader.addModuleSource (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\rollup\\dist\\shared\\rollup.js:17742:30)\r\n    at ModuleLoader.fetchModule (C:\\dev\\projects\\wighawag\\a17t-svelte-test\\node_modules\\rollup\\dist\\shared\\rollup.js:17796:9)\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```\r\ngit clone  https://github.com/wighawag/a17t-svelte-test\r\ncd  a17t-svelte-test\r\nyarn && yarn build\r\n```\r\n\r\n**Expected behavior**\r\nshould build succesfully with css from `a17t` (https://github.com/milesmcc/a17t)\r\n\r\n**Stacktraces**\r\n\r\nsee log above\r\n\r\n**Information about your Svelte project:**\r\n\r\n- Your operating system:  Windows 10\r\n\r\n- Svelte version : 3.23.2\r\n\r\n- Whether your project uses Webpack or Rollup : Rollup\r\n\r\n**Severity**\r\nIt block me from using css library like `a17t` so pretty severe in my opinion\r\n",
    "closedAt": "2020-06-27T10:28:53Z",
    "createdAt": "2020-06-27T09:50:07Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDUzODg1OA==",
          "body": "This is a problem with some of the styles you're using or with a preprocessor. The preprocessed Tailwindcss.svelte component that Svelte is getting contains many styles with selectors that look something like `:global(.\\)~:global(neutral)`, which is invalid.",
          "createdAt": "2020-06-27T10:28:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDU0MTY1MA==",
          "body": "I investigate a bit more and while I could not reproduce it on svelte REPL, the following commit :\r\n\r\nhttps://github.com/wighawag/svelte-css-parser-error/commit/4fae43a3801b4ed270d56c7fddac0dcad399ba49 showcase the error with valid css\r\n\r\nThat commit  is the only addition I did from this REPL : https://svelte.dev/repl/c0300db9a4f944ce8fb030ae5a553c18?version=3.23.2\r\n\r\nso it seems there is an issue with `svelte-preprocess`",
          "createdAt": "2020-06-27T10:48:07Z",
          "author": { "login": "wighawag", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDU0MjA3OA==",
          "body": "@Conduitry do you mean that it is intended that svelte <style global> do not support valid CSS if these include backslash like `a17t` ?",
          "createdAt": "2020-06-27T10:50:52Z",
          "author": { "login": "wighawag", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDU0MzI4Mg==",
          "body": "`<style global>` isn't a native Svelte thing. This probably is a bug in svelte-preprocess.",
          "createdAt": "2020-06-27T10:58:53Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDUxMzQ5MzI=",
    "body": "**Describe the bug**\r\nAction method is not being invoked\r\n\r\n**To Reproduce**\r\n\r\nGo to https://svelte.dev/repl/2fd16ed03ef740f182ed056603057c59?version=3.23.2\r\n\r\nScenario:\r\n\r\n- I have a dynamic number of page items.\r\n- An {#each} loop is tied to the dynamic list of items.\r\n- When items in the list get deleted, sometimes, the other items in the list will \"lose\" the # in their href.\r\n- So for example, \"#/page/123\" will turn into \"/page/123\" after another sibling has been deleted.\r\n\r\nSteps to follow:\r\n\r\n1. Create a good 5-6 Pages\r\n2. Select an item (I usually go in the middle of the list), and delete it\r\n3. BUG: sometimes you'll see by inspection of the URLs, that it's set to go to a URL without a #.\r\n\r\n**Expected behavior**\r\nThat the links in the dynamic list will continue to function, as per the `use:link` defined in `Router`\r\n\r\n**Severity**\r\nIn this particular instance, fortunately, the maintainer of the SPA library has implemented a workaround for this.\r\n\r\nReferencing the original issue: https://github.com/ItalyPaleAle/svelte-spa-router/issues/122",
    "closedAt": "2020-06-25T23:24:19Z",
    "createdAt": "2020-06-25T04:14:33Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY0OTU3ODI0Mw==",
          "body": "You're using a non keyed #each block, non keyed each blocks update based on index\r\n\r\nWhen you remove a page it iterates through the complete array and updates every block whose value at `array[index]` changed\r\n\r\nThe `href` attribute gets updated because its value changed, svelte attempts to dispatch the update to `use:active` but that action does not return an object with an `.update` method\r\n\r\nhttps://svelte.dev/repl/e8523aaf03054c379fb469d332bd2ec0?version=3.23.2",
          "createdAt": "2020-06-25T14:21:50Z",
          "author": { "login": "pushkine", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY0OTg2NTg5Ng==",
          "body": "Ah, of course....\r\n\r\nVery helpful.. thank you so much, for your time! 👍  ",
          "createdAt": "2020-06-25T23:24:19Z",
          "author": { "login": "jayliu50", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDUwODcyMDQ=",
    "body": "**Describe the bug**\r\nAfter upgrading svelte in our project we noticed an issue with `bind:this` behaviour inside `{#each}`.\r\nThis works with previous versions but it's broken starting from 3.23.1\r\n\r\nI've made a simple example that reproduces this bug.\r\n\r\n**To Reproduce**\r\nworks: https://svelte.dev/repl/a37014bd0ece412093b891a71c08f954?version=3.23.0\r\nbroken: https://svelte.dev/repl/a37014bd0ece412093b891a71c08f954?version=3.23.1\r\nbroken: https://svelte.dev/repl/a37014bd0ece412093b891a71c08f954?version=3.23.2\r\n\r\nYou should see an array with all ref properties filled, but for versions above 3.23.0 what you get is the following:\r\n```js\r\n[{ref: div},\r\n{ref: null}, // <-- second element is null\r\n{ref: div}]\r\n```",
    "closedAt": "2020-06-25T12:33:31Z",
    "createdAt": "2020-06-25T01:56:44Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTAzMTY1NA==",
          "body": "This should be fixed in 3.24.0 - https://svelte.dev/repl/a37014bd0ece412093b891a71c08f954?version=3.24.0",
          "createdAt": "2020-07-07T18:04:54Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDQ3NzgzMDQ=",
    "body": "**Describe the bug**\r\n\r\nThere's a useful pattern you can use while destructuring in normal JS, which is that within the destructure you can reference previously-extracted properties.\r\n\r\n[Live Example](https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvEAXwvW10QICsEqdBk2J4hcYgAJakgLyTg0tDEmJJARkmsA3AB00+8VMX0YFScQDuM+ackBqDVrnS9BtONqx8UWgHMAClNzK1oASm1KEDgYWGpiCHoEHgAWRAAmdLYOEEwcPHxqOAEaekZmHjYAXVYgA)\r\n\r\n```js\r\nconst o = { one : 1 };\r\n\r\n// Here's where the exciting stuff happens\r\n//           v-----------v\r\nconst { one, two = one + 1 } = o;\r\n\r\nconsole.log(one, two);\r\n```\r\n\r\nI wanted to use (abuse?) this functionality to avoid having to create an entire array or modify an array that I was passed, because allocating a whole array for something that can be easily calculated on a per-element basis while iterating didn't seem worth it.\r\n\r\n**To Reproduce**\r\nhttps://svelte.dev/repl/0ee7227e1b45465b9b47d7a5ae2d1252?version=3.23.2\r\n\r\nHere's the problematic generated code:\r\n\r\n```js\r\nfunction get_each_context(ctx, list, i) {\r\n\tconst child_ctx = ctx.slice();\r\n\tchild_ctx[1] = list[i].one;\r\n\t// This reference to one isn't rewritten to be child_ctx[1], so one is undefined\r\n\t//                                                       v---------v\r\n\tchild_ctx[2] = list[i].two !== undefined ? list[i].two : add(one, 1);\r\n\treturn child_ctx;\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n`1 - 2` is logged\r\n\r\n**Information about your Svelte project:**\r\n- Firefox latest, but it's in the generated code so happens everywhere\r\n- Windows 10\r\n- `svelte@3.23.2`\r\n- Rollup, can see in REPL\r\n\r\n**Severity**\r\nIt mostly means that if you need to look up data to make decisions inside an `{#each}` you either need to modify the array elements or create a second, shadow array based on the elements containing the extra data. This is all doable but I'd much prefer not to if possible. Since templates can't declare new variables I haven't been able to come up with an alternative that lets it be handled entirely in template code.\r\n",
    "closedAt": "2021-02-25T16:36:44Z",
    "createdAt": "2020-06-24T17:17:35Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDc4NjAzOTQ4MA==",
          "body": "This is fixed in 3.33.0 - https://svelte.dev/repl/0ee7227e1b45465b9b47d7a5ae2d1252?version=3.33.0",
          "createdAt": "2021-02-25T16:42:46Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDQ2NTQyMjU=",
    "body": "**Describe the bug**\r\nusing `bind:checked` and `bind:indeterminate` together erroneously updates the checked value\r\n\r\n**To Reproduce**\r\nUse something like `<input type=\"checked\" bind:checked bind:indeterminate>`\r\nEnsure the initial value of `checked` is `undefined` and the initial value of `indeterminate` is true.\r\nNote that the value of `checked` is immediately updated to `false` when run.\r\n\r\nSee: https://svelte.dev/repl/77d2ac1cf3764fbaa5d92640d7c45f13?version=3.23.2\r\n\r\n**Expected behavior**\r\nBound `checked` value should only be updated when checked or unchecked.\r\nIn the given examples, the objective is for `indeterminate` to be `true` if `checked` is `undefined`.\r\n\r\n**Severity**\r\nMedium/High. I'm not sure of a workaround but indeterminate checkboxes are themselves an edge case.\r\n",
    "closedAt": null,
    "createdAt": "2020-06-24T14:19:21Z",
    "state": "OPEN",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MDc0MzQ5Mg==",
          "body": "I think the issue is caused by the line `$: indeterminate = checked === undefined;`, which is unnecessary because you already have the indeterminate bound to the input component.\r\n\r\nHere, what you're trying to achieve can be done by setting the `indeterminate = true` (which should be the initial value). \r\n\r\nSee the modified version here: https://svelte.dev/repl/a23549e44c964496826da992512ae6c7?version=3.23.2",
          "createdAt": "2020-06-28T12:12:02Z",
          "author": { "login": "irshadshalu", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1MTAyMjU0OQ==",
          "body": "Hi @irshadshalu,\r\n\r\nThe modified version makes it look visually correct, but you'll note from the logging that the \"checked\" binding is still triggering an update, making it look as though the user has interacted with the control.\r\n\r\nIf instead the idea is that bind:checked should always coerce the type, than it should probably do so regardless of the presence of the indeterminate binding.\r\n\r\nNote that the idea of the original REPL was to wind up with a tri-state boolean. i.e. undefined/true/false for indeterminate/checked/unchecked.\r\n\r\nRegards,\r\nWill\r\n\r\n\r\n\r\n",
          "createdAt": "2020-06-29T08:45:44Z",
          "author": { "login": "WHenderson", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDQ2MDk3MDU=",
    "body": "**Describe the bug**\r\nSvelte can only handle a limited number of reactive variables on each component. When a component uses more then that, the compiled code will produce unexpected results and it would be extremely difficult to find the issue.\r\n\r\n**To Reproduce**\r\nREPL for demonstration: https://svelte.dev/repl/729f5f679e124233ab9cfa755b7ae15a?version=3.23.2\r\n\r\nThat REPL defines 64 variables and uses them for reactive updates. After around 31 we hit some sort of integer overflow and the compiled code is broken:\r\n\r\n```\r\n\t$$self.$$.update = () => {\r\n\t\tif ($$self.$$.dirty[0] & /*name*/ 1) {\r\n\t\t\t$: $$invalidate(2, a0 = name);\r\n\t\t}\r\n\r\n\t\t// ...\r\n\r\n\t\tif ($$self.$$.dirty[0] & /*a27*/ 536870912) {\r\n\t\t\t$: $$invalidate(30, a28 = a27);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty[0] & /*a28*/ 1073741824) {\r\n\t\t\t$: $$invalidate(31, a29 = a28);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty[1] & /*a29*/ 1) {   // <-- value overflow, all checks from here are broken\r\n\t\t\t$: $$invalidate(32, a30 = a29);\r\n\t\t}\r\n\r\n\t\tif ($$self.$$.dirty[1] & /*a30*/ 2) {\r\n\t\t\t$: $$invalidate(33, a31 = a30);\r\n\t\t}\r\n\r\n\t\t// ...\r\n\r\n\t\tif ($$self.$$.dirty[2] & /*a68*/ 256) {\r\n\t\t\t$: a69 = a68;\r\n\t\t}\r\n\t};\r\n\r\n```\r\n\r\n**Expected behavior**\r\nAs the number of variables is high and components should be split rather then overloaded like that, I'd expect a compiler check and a fail, if svelte detects that more variables have been declared then svelte can handle.\r\n",
    "closedAt": "2020-06-24T14:05:57Z",
    "createdAt": "2020-06-24T13:20:21Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY0ODgxODc4MQ==",
          "body": "The reason `dirty[0]` switches to `dirty[1]` is because there _is_ a bitmask overflow and we switch to using a new integer for further bits. This is intended, and it is intended that components do in fact work with more than 31 variables. Are you seeing buggy behavior in any component? In your REPL, the text changes to 'hello' when I click it, and so it seems to be working fine.",
          "createdAt": "2020-06-24T13:26:24Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        },
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY0ODg0MjEzOQ==",
          "body": "Ah! All good, I missed that dirty is an array here. No, all good, I didn't create any component with that many variables and hopefully never will. This was an observation that I made by looking at the compiled code when I saw that it uses bitmasks (that have an upper boundary).\r\n\r\nCan be closed, I think, as it's solved with the array of 'dirties'.",
          "createdAt": "2020-06-24T14:05:54Z",
          "author": { "login": "Treverix", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDQ1NzU3Mzk=",
    "body": "You can't use the following code in TypeScript because it gives an error that it expects a second argument.\r\nThat would be the options argument but it should be optional looking at the docs.\r\n```\r\nimport { tweened } from 'svelte/motion';\r\nlet test = tweened(0);\r\ntest.set(100);\r\n$test = 0;\r\n```\r\n\r\nEven `$test = 0` fails because of an expected second argument.\r\n\r\nYou can find the type declaration here:\r\nhttps://github.com/sveltejs/svelte/blob/1c39f6079f630ea549984b8e9eda1853cd5fa883/src/runtime/motion/tweened.ts#L67\r\n\r\nMaybe there are event more bugs like that in other type declerations but I didn't check them yet.",
    "closedAt": "2020-06-25T15:05:51Z",
    "createdAt": "2020-06-24T12:28:03Z",
    "state": "CLOSED",
    "comments": {
      "nodes": [
        {
          "id": "MDEyOklzc3VlQ29tbWVudDY1NTAzMTE2Mg==",
          "body": "The types should be fixed in 3.24.0.",
          "createdAt": "2020-07-07T18:04:02Z",
          "author": { "login": "Conduitry", "__typename": "User" },
          "__typename": "IssueComment"
        }
      ],
      "__typename": "IssueCommentConnection"
    },
    "__typename": "Issue"
  },
  {
    "id": "MDU6SXNzdWU2NDQxNTQxNzE=",
    "body": "Forgetting the Mapbox API key when deploying the site is an all-too-common mistake when building it from a new computer or from a rebuilt environment where you don't have the proper `.env` file.\r\n\r\n`npm run dev` should continue to work fine with this missing, but either the production build or the deployment should have a check that this is present, and abort if not.",
    "closedAt": "2020-06-25T00:43:04Z",
    "createdAt": "2020-06-23T21:20:28Z",
    "state": "CLOSED",
    "comments": { "nodes": [], "__typename": "IssueCommentConnection" },
    "__typename": "Issue"
  }
]
